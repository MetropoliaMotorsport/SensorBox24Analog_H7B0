
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080094fc  080094fc  000194fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000bc0  24000010  08009510  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000bd0  08009510  00020bd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015678  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027cc  00000000  00000000  000356f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b0  00000000  00000000  00037ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e6f  00000000  00000000  00039175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003138  00000000  00000000  00039fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000179f1  00000000  00000000  0003d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d6f8  00000000  00000000  00054b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000051dc  00000000  00000000  001a2208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800947c 	.word	0x0800947c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	0800947c 	.word	0x0800947c

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f001 f990 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f826 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 fbb8 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000300:	f000 fb96 	bl	8000a30 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000304:	f000 fa0c 	bl	8000720 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000308:	f000 fa6e 	bl	80007e8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800030c:	f000 fad0 	bl	80008b0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000310:	f000 fb0e 	bl	8000930 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000314:	f000 f88e 	bl	8000434 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000318:	f000 fb4a 	bl	80009b0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0x50>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	461a      	mov	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	; (8000344 <main+0x54>)
 8000324:	4806      	ldr	r0, [pc, #24]	; (8000340 <main+0x50>)
 8000326:	f001 fd6f 	bl	8001e08 <HAL_ADC_Start_DMA>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <main+0x44>
 8000330:	f000 fc7a 	bl	8000c28 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000338:	f001 fa00 	bl	800173c <HAL_Delay>
 800033c:	e7fa      	b.n	8000334 <main+0x44>
 800033e:	bf00      	nop
 8000340:	2400002c 	.word	0x2400002c
 8000344:	24000344 	.word	0x24000344

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b09c      	sub	sp, #112	; 0x70
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000352:	224c      	movs	r2, #76	; 0x4c
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f009 f856 	bl	8009408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2220      	movs	r2, #32
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f009 f850 	bl	8009408 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <SystemClock_Config+0xe4>)
 800036a:	f04f 32ff 	mov.w	r2, #4294967295
 800036e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000372:	2002      	movs	r0, #2
 8000374:	f005 fc5c 	bl	8005c30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000378:	2300      	movs	r3, #0
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <SystemClock_Config+0xe8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <SystemClock_Config+0xe8>)
 8000382:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <SystemClock_Config+0xe8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000394:	bf00      	nop
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <SystemClock_Config+0xe8>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a2:	d1f8      	bne.n	8000396 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003ac:	2340      	movs	r3, #64	; 0x40
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003b8:	2304      	movs	r3, #4
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003bc:	2308      	movs	r3, #8
 80003be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003c0:	2302      	movs	r3, #2
 80003c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003c4:	2303      	movs	r3, #3
 80003c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003cc:	230c      	movs	r3, #12
 80003ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003dc:	4618      	mov	r0, r3
 80003de:	f005 fc61 	bl	8005ca4 <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003e8:	f000 fc1e 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	233f      	movs	r3, #63	; 0x3f
 80003ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800040a:	2340      	movs	r3, #64	; 0x40
 800040c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f006 f878 	bl	8006508 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800041e:	f000 fc03 	bl	8000c28 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3770      	adds	r7, #112	; 0x70
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	58024400 	.word	0x58024400
 8000430:	58024800 	.word	0x58024800

08000434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	; 0x28
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000446:	463b      	mov	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000458:	4b9f      	ldr	r3, [pc, #636]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800045a:	4aa0      	ldr	r2, [pc, #640]	; (80006dc <MX_ADC1_Init+0x2a8>)
 800045c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800045e:	4b9e      	ldr	r3, [pc, #632]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000460:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000464:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000466:	4b9c      	ldr	r3, [pc, #624]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000468:	2208      	movs	r2, #8
 800046a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800046c:	4b9a      	ldr	r3, [pc, #616]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800046e:	2201      	movs	r2, #1
 8000470:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000472:	4b99      	ldr	r3, [pc, #612]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000474:	2204      	movs	r2, #4
 8000476:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000478:	4b97      	ldr	r3, [pc, #604]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800047a:	2200      	movs	r2, #0
 800047c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800047e:	4b96      	ldr	r3, [pc, #600]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000480:	2201      	movs	r2, #1
 8000482:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000484:	4b94      	ldr	r3, [pc, #592]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000486:	2210      	movs	r2, #16
 8000488:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800048a:	4b93      	ldr	r3, [pc, #588]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800048c:	2200      	movs	r2, #0
 800048e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000490:	4b91      	ldr	r3, [pc, #580]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000496:	4b90      	ldr	r3, [pc, #576]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000498:	2200      	movs	r2, #0
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800049c:	4b8e      	ldr	r3, [pc, #568]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800049e:	2203      	movs	r2, #3
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a2:	4b8d      	ldr	r3, [pc, #564]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004a8:	4b8b      	ldr	r3, [pc, #556]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004ae:	4b8a      	ldr	r3, [pc, #552]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004b6:	4888      	ldr	r0, [pc, #544]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80004b8:	f001 fb4c 	bl	8001b54 <HAL_ADC_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80004c2:	f000 fbb1 	bl	8000c28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004ca:	f107 031c 	add.w	r3, r7, #28
 80004ce:	4619      	mov	r1, r3
 80004d0:	4881      	ldr	r0, [pc, #516]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80004d2:	f002 fa4b 	bl	800296c <HAL_ADCEx_MultiModeConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80004dc:	f000 fba4 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004e0:	4b7f      	ldr	r3, [pc, #508]	; (80006e0 <MX_ADC1_Init+0x2ac>)
 80004e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e4:	2306      	movs	r3, #6
 80004e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80004e8:	2306      	movs	r3, #6
 80004ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004f2:	2304      	movs	r3, #4
 80004f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	4619      	mov	r1, r3
 8000502:	4875      	ldr	r0, [pc, #468]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000504:	f001 fd48 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800050e:	f000 fb8b 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000512:	4b74      	ldr	r3, [pc, #464]	; (80006e4 <MX_ADC1_Init+0x2b0>)
 8000514:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000516:	230c      	movs	r3, #12
 8000518:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	4619      	mov	r1, r3
 800051e:	486e      	ldr	r0, [pc, #440]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000520:	f001 fd3a 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800052a:	f000 fb7d 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800052e:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <MX_ADC1_Init+0x2b4>)
 8000530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000532:	2312      	movs	r3, #18
 8000534:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4867      	ldr	r0, [pc, #412]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800053c:	f001 fd2c 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000546:	f000 fb6f 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800054a:	4b68      	ldr	r3, [pc, #416]	; (80006ec <MX_ADC1_Init+0x2b8>)
 800054c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800054e:	2318      	movs	r3, #24
 8000550:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4860      	ldr	r0, [pc, #384]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000558:	f001 fd1e 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000562:	f000 fb61 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000566:	4b62      	ldr	r3, [pc, #392]	; (80006f0 <MX_ADC1_Init+0x2bc>)
 8000568:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800056a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4858      	ldr	r0, [pc, #352]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000576:	f001 fd0f 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000580:	f000 fb52 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000584:	4b5b      	ldr	r3, [pc, #364]	; (80006f4 <MX_ADC1_Init+0x2c0>)
 8000586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000588:	f44f 7383 	mov.w	r3, #262	; 0x106
 800058c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4851      	ldr	r0, [pc, #324]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000594:	f001 fd00 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800059e:	f000 fb43 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005a2:	4b55      	ldr	r3, [pc, #340]	; (80006f8 <MX_ADC1_Init+0x2c4>)
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005a6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4849      	ldr	r0, [pc, #292]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80005b2:	f001 fcf1 	bl	8001f98 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80005bc:	f000 fb34 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005c0:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <MX_ADC1_Init+0x2c8>)
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005c4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80005c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4842      	ldr	r0, [pc, #264]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80005d0:	f001 fce2 	bl	8001f98 <HAL_ADC_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80005da:	f000 fb25 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005de:	4b48      	ldr	r3, [pc, #288]	; (8000700 <MX_ADC1_Init+0x2cc>)
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80005e2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80005e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	483a      	ldr	r0, [pc, #232]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80005ee:	f001 fcd3 	bl	8001f98 <HAL_ADC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80005f8:	f000 fb16 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005fc:	4b41      	ldr	r3, [pc, #260]	; (8000704 <MX_ADC1_Init+0x2d0>)
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4833      	ldr	r0, [pc, #204]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800060c:	f001 fcc4 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000616:	f000 fb07 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_ADC1_Init+0x2d4>)
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800061e:	f240 2306 	movw	r3, #518	; 0x206
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	482b      	ldr	r0, [pc, #172]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 800062a:	f001 fcb5 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000634:	f000 faf8 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000638:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_ADC1_Init+0x2d8>)
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800063c:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4824      	ldr	r0, [pc, #144]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000648:	f001 fca6 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8000652:	f000 fae9 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_ADC1_Init+0x2dc>)
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800065a:	f240 2312 	movw	r3, #530	; 0x212
 800065e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	481c      	ldr	r0, [pc, #112]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000666:	f001 fc97 	bl	8001f98 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 8000670:	f000 fada 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_ADC1_Init+0x2e0>)
 8000676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000678:	f44f 7306 	mov.w	r3, #536	; 0x218
 800067c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 8000684:	f001 fc88 	bl	8001f98 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 800068e:	f000 facb 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_ADC1_Init+0x2e4>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80006a2:	f001 fc79 	bl	8001f98 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80006ac:	f000 fabc 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC1_Init+0x2e8>)
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80006b4:	f240 3306 	movw	r3, #774	; 0x306
 80006b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC1_Init+0x2a4>)
 80006c0:	f001 fc6a 	bl	8001f98 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80006ca:	f000 faad 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2400002c 	.word	0x2400002c
 80006dc:	40022000 	.word	0x40022000
 80006e0:	0c900008 	.word	0x0c900008
 80006e4:	10c00010 	.word	0x10c00010
 80006e8:	14f00020 	.word	0x14f00020
 80006ec:	1d500080 	.word	0x1d500080
 80006f0:	21800100 	.word	0x21800100
 80006f4:	25b00200 	.word	0x25b00200
 80006f8:	2a000400 	.word	0x2a000400
 80006fc:	2e300800 	.word	0x2e300800
 8000700:	32601000 	.word	0x32601000
 8000704:	36902000 	.word	0x36902000
 8000708:	3ac04000 	.word	0x3ac04000
 800070c:	3ef08000 	.word	0x3ef08000
 8000710:	43210000 	.word	0x43210000
 8000714:	47520000 	.word	0x47520000
 8000718:	4b840000 	.word	0x4b840000
 800071c:	4fb80000 	.word	0x4fb80000

08000720 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <MX_FDCAN1_Init+0xc4>)
 8000728:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800074a:	2210      	movs	r2, #16
 800074c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000756:	2202      	movs	r2, #2
 8000758:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800075c:	2202      	movs	r2, #2
 800075e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000762:	2201      	movs	r2, #1
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800076e:	2201      	movs	r2, #1
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000774:	2201      	movs	r2, #1
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000792:	2204      	movs	r2, #4
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 800079e:	2204      	movs	r2, #4
 80007a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_FDCAN1_Init+0xc0>)
 80007ce:	f004 fbf3 	bl	8004fb8 <HAL_FDCAN_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007d8:	f000 fa26 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	24000108 	.word	0x24000108
 80007e4:	4000a000 	.word	0x4000a000

080007e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <MX_FDCAN2_Init+0xc4>)
 80007f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000812:	2210      	movs	r2, #16
 8000814:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000818:	2201      	movs	r2, #1
 800081a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800081e:	2202      	movs	r2, #2
 8000820:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000824:	2202      	movs	r2, #2
 8000826:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800082a:	2201      	movs	r2, #1
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000830:	2201      	movs	r2, #1
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000836:	2201      	movs	r2, #1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800083c:	2201      	movs	r2, #1
 800083e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000842:	2200      	movs	r2, #0
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000848:	2200      	movs	r2, #0
 800084a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800085a:	2204      	movs	r2, #4
 800085c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000866:	2204      	movs	r2, #4
 8000868:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000872:	2204      	movs	r2, #4
 8000874:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800087e:	2200      	movs	r2, #0
 8000880:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000890:	2204      	movs	r2, #4
 8000892:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_FDCAN2_Init+0xc0>)
 8000896:	f004 fb8f 	bl	8004fb8 <HAL_FDCAN_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80008a0:	f000 f9c2 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	240001a8 	.word	0x240001a8
 80008ac:	4000a400 	.word	0x4000a400

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <MX_I2C1_Init+0x7c>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ec:	f005 f878 	bl	80059e0 <HAL_I2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 f997 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_I2C1_Init+0x74>)
 80008fe:	f005 f8ff 	bl	8005b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 f98e 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_I2C1_Init+0x74>)
 8000910:	f005 f941 	bl	8005b96 <HAL_I2CEx_ConfigDigitalFilter>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 f985 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24000248 	.word	0x24000248
 8000928:	40005400 	.word	0x40005400
 800092c:	00707cbb 	.word	0x00707cbb

08000930 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C3_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C3_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C3_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_I2C3_Init+0x74>)
 800096c:	f005 f838 	bl	80059e0 <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 f957 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_I2C3_Init+0x74>)
 800097e:	f005 f8bf 	bl	8005b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f94e 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2C3_Init+0x74>)
 8000990:	f005 f901 	bl	8005b96 <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 f945 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400029c 	.word	0x2400029c
 80009a8:	40005c00 	.word	0x40005c00
 80009ac:	00707cbb 	.word	0x00707cbb

080009b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C4_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C4_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009ec:	f004 fff8 	bl	80059e0 <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f917 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009fe:	f005 f87f 	bl	8005b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f90e 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C4_Init+0x74>)
 8000a10:	f005 f8c1 	bl	8005b96 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f905 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	240002f0 	.word	0x240002f0
 8000a28:	58001c00 	.word	0x58001c00
 8000a2c:	00707cbb 	.word	0x00707cbb

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a38:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	200b      	movs	r0, #11
 8000a5a:	f002 f8fe 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a5e:	200b      	movs	r0, #11
 8000a60:	f002 f915 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ad2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_GPIO_Init+0x8c>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	58024400 	.word	0x58024400

08000b00 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d15a      	bne.n	8000bc8 <HAL_ADC_ConvCpltCallback+0xc8>
		if(AVE_POS < ROLLING_AVE){
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b3f      	cmp	r3, #63	; 0x3f
 8000b18:	d806      	bhi.n	8000b28 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e036      	b.n	8000b96 <HAL_ADC_ConvCpltCallback+0x96>
		}
		else{
			AVE_POS = 0;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
			print();
 8000b2e:	f000 f859 	bl	8000be4 <print>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e029      	b.n	8000b8c <HAL_ADC_ConvCpltCallback+0x8c>
				averages[i] = 0;
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	e012      	b.n	8000b6e <HAL_ADC_ConvCpltCallback+0x6e>
					averages[i]+=all_raw_data[i][z];
 8000b48:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	4822      	ldr	r0, [pc, #136]	; (8000bdc <HAL_ADC_ConvCpltCallback+0xdc>)
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	0191      	lsls	r1, r2, #6
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	440a      	add	r2, r1
 8000b5a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000b5e:	441a      	add	r2, r3
 8000b60:	491d      	ldr	r1, [pc, #116]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	2b3f      	cmp	r3, #63	; 0x3f
 8000b72:	dde9      	ble.n	8000b48 <HAL_ADC_ConvCpltCallback+0x48>
				}
				averages[i] = averages[i] / ROLLING_AVE;
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	099a      	lsrs	r2, r3, #6
 8000b7e:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d8d0      	bhi.n	8000b38 <HAL_ADC_ConvCpltCallback+0x38>
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e010      	b.n	8000bbe <HAL_ADC_ConvCpltCallback+0xbe>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	490f      	ldr	r1, [pc, #60]	; (8000be0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8000baa:	490c      	ldr	r1, [pc, #48]	; (8000bdc <HAL_ADC_ConvCpltCallback+0xdc>)
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	0192      	lsls	r2, r2, #6
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8e9      	bhi.n	8000b9c <HAL_ADC_ConvCpltCallback+0x9c>
		}
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40022000 	.word	0x40022000
 8000bd4:	24000ba4 	.word	0x24000ba4
 8000bd8:	24000b64 	.word	0x24000b64
 8000bdc:	24000364 	.word	0x24000364
 8000be0:	24000344 	.word	0x24000344

08000be4 <print>:

void print(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++){
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	e00f      	b.n	8000c10 <print+0x2c>
		TF_Select(1,averages[i],transfer_functions[i]);
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <print+0x3c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <print+0x40>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fbc3 	bl	8001390 <TF_Select>
	for(int i = 0; i < 16; i++){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	ddec      	ble.n	8000bf0 <print+0xc>
	}
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000b64 	.word	0x24000b64
 8000c24:	24000ba8 	.word	0x24000ba8

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x30>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	58024400 	.word	0x58024400

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0bc      	sub	sp, #240	; 0xf0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	22c0      	movs	r2, #192	; 0xc0
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f008 fbbd 	bl	8009408 <memset>
  if(hadc->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a62      	ldr	r2, [pc, #392]	; (8000e1c <HAL_ADC_MspInit+0x1b4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	f040 80bc 	bne.w	8000e12 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c9e:	f04f 0300 	mov.w	r3, #0
 8000ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000caa:	2308      	movs	r3, #8
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 32;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 ff8f 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000cdc:	f7ff ffa4 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000ce2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ce6:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000cf2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d04:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d0e:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d22:	4a3f      	ldr	r2, [pc, #252]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d40:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <HAL_ADC_MspInit+0x1b8>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d58:	233f      	movs	r3, #63	; 0x3f
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482c      	ldr	r0, [pc, #176]	; (8000e24 <HAL_ADC_MspInit+0x1bc>)
 8000d72:	f004 fc85 	bl	8005680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d76:	23ff      	movs	r3, #255	; 0xff
 8000d78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <HAL_ADC_MspInit+0x1c0>)
 8000d90:	f004 fc76 	bl	8005680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000daa:	4619      	mov	r1, r3
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <HAL_ADC_MspInit+0x1c4>)
 8000dae:	f004 fc67 	bl	8005680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_ADC_MspInit+0x1cc>)
 8000db6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dba:	2209      	movs	r2, #9
 8000dbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000df8:	f001 ff64 	bl	8002cc4 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8000e02:	f7ff ff11 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000e0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_ADC_MspInit+0x1c8>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	37f0      	adds	r7, #240	; 0xf0
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020800 	.word	0x58020800
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	24000090 	.word	0x24000090
 8000e34:	40020010 	.word	0x40020010

08000e38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0bc      	sub	sp, #240	; 0xf0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	22c0      	movs	r2, #192	; 0xc0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fad5 	bl	8009408 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_FDCAN_MspInit+0x188>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d151      	bne.n	8000f0c <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f005 feb7 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000e8c:	f7ff fecc 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e90:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000e98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000ea4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000ea8:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000eb4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f02:	4619      	mov	r1, r3
 8000f04:	4831      	ldr	r0, [pc, #196]	; (8000fcc <HAL_FDCAN_MspInit+0x194>)
 8000f06:	f004 fbbb 	bl	8005680 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000f0a:	e055      	b.n	8000fb8 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <HAL_FDCAN_MspInit+0x198>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d150      	bne.n	8000fb8 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fe60 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000f3a:	f7ff fe75 	bl	8000c28 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_FDCAN_MspInit+0x18c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10e      	bne.n	8000f6e <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f52:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f62:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_FDCAN_MspInit+0x190>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_FDCAN_MspInit+0x19c>)
 8000fb4:	f004 fb64 	bl	8005680 <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	37f0      	adds	r7, #240	; 0xf0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	4000a000 	.word	0x4000a000
 8000fc4:	24000bc8 	.word	0x24000bc8
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020000 	.word	0x58020000
 8000fd0:	4000a400 	.word	0x4000a400
 8000fd4:	58020400 	.word	0x58020400

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0c0      	sub	sp, #256	; 0x100
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff4:	22c0      	movs	r2, #192	; 0xc0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 fa05 	bl	8009408 <memset>
  if(hi2c->Instance==I2C1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a86      	ldr	r2, [pc, #536]	; (800121c <HAL_I2C_MspInit+0x244>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d146      	bne.n	8001096 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001008:	f04f 0208 	mov.w	r2, #8
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fde8 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800102a:	f7ff fdfd 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b7c      	ldr	r3, [pc, #496]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001030:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001034:	4a7a      	ldr	r2, [pc, #488]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800103e:	4b78      	ldr	r3, [pc, #480]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104c:	23c0      	movs	r3, #192	; 0xc0
 800104e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	2312      	movs	r3, #18
 8001054:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001064:	2304      	movs	r3, #4
 8001066:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800106e:	4619      	mov	r1, r3
 8001070:	486c      	ldr	r0, [pc, #432]	; (8001224 <HAL_I2C_MspInit+0x24c>)
 8001072:	f004 fb05 	bl	8005680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001076:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001078:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800107c:	4a68      	ldr	r2, [pc, #416]	; (8001220 <HAL_I2C_MspInit+0x248>)
 800107e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001082:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001088:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001094:	e0bd      	b.n	8001212 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a63      	ldr	r2, [pc, #396]	; (8001228 <HAL_I2C_MspInit+0x250>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d16c      	bne.n	800117a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010a0:	f04f 0208 	mov.w	r2, #8
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 fd9c 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80010c2:	f7ff fdb1 	bl	8000c28 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d6:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ea:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80010f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800111c:	2304      	movs	r3, #4
 800111e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001126:	4619      	mov	r1, r3
 8001128:	4840      	ldr	r0, [pc, #256]	; (800122c <HAL_I2C_MspInit+0x254>)
 800112a:	f004 faa9 	bl	8005680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001136:	2312      	movs	r3, #18
 8001138:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001148:	2304      	movs	r3, #4
 800114a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001152:	4619      	mov	r1, r3
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <HAL_I2C_MspInit+0x258>)
 8001156:	f004 fa93 	bl	8005680 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_I2C_MspInit+0x248>)
 800115c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001160:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001166:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_I2C_MspInit+0x248>)
 800116c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
}
 8001178:	e04b      	b.n	8001212 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_I2C_MspInit+0x25c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d146      	bne.n	8001212 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001184:	f04f 0210 	mov.w	r2, #16
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	4618      	mov	r0, r3
 800119c:	f005 fd2a 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80011a6:	f7ff fd3f 	bl	8000c28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80011ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80011bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80011e2:	2306      	movs	r3, #6
 80011e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_I2C_MspInit+0x24c>)
 80011f0:	f004 fa46 	bl	8005680 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80011f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_I2C_MspInit+0x248>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_I2C_MspInit+0x248>)
 8001206:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	58024400 	.word	0x58024400
 8001224:	58020400 	.word	0x58020400
 8001228:	40005c00 	.word	0x40005c00
 800122c:	58020800 	.word	0x58020800
 8001230:	58020000 	.word	0x58020000
 8001234:	58001c00 	.word	0x58001c00

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 fa3a 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Stream0_IRQHandler+0x10>)
 8001292:	f002 fb0f 	bl	80038b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000090 	.word	0x24000090

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <SystemInit+0xd0>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <SystemInit+0xd0>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <SystemInit+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d807      	bhi.n	80012d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <SystemInit+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <SystemInit+0xd4>)
 80012ca:	f043 0303 	orr.w	r3, r3, #3
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <SystemInit+0xd8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <SystemInit+0xd8>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <SystemInit+0xd8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemInit+0xd8>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <SystemInit+0xd8>)
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <SystemInit+0xdc>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <SystemInit+0xd4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <SystemInit+0xd4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <SystemInit+0xd4>)
 8001304:	f043 0303 	orr.w	r3, r3, #3
 8001308:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <SystemInit+0xd8>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <SystemInit+0xd8>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SystemInit+0xd8>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <SystemInit+0xd8>)
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <SystemInit+0xe0>)
 8001320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <SystemInit+0xd8>)
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <SystemInit+0xe4>)
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <SystemInit+0xd8>)
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <SystemInit+0xe8>)
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <SystemInit+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <SystemInit+0xd8>)
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <SystemInit+0xe8>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <SystemInit+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <SystemInit+0xd8>)
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <SystemInit+0xe8>)
 8001344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SystemInit+0xd8>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <SystemInit+0xd8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <SystemInit+0xd8>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SystemInit+0xd8>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <SystemInit+0xec>)
 8001360:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001364:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	52004000 	.word	0x52004000

08001390 <TF_Select>:
 */

#include "transfer_functions.h"
#include "main.h"

uint32_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]

	uint32_t transmit = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]

	switch(sensor){
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b0a      	cmp	r3, #10
 80013a8:	d865      	bhi.n	8001476 <TF_Select+0xe6>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <TF_Select+0x20>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013dd 	.word	0x080013dd
 80013b4:	080013eb 	.word	0x080013eb
 80013b8:	080013f9 	.word	0x080013f9
 80013bc:	08001407 	.word	0x08001407
 80013c0:	08001415 	.word	0x08001415
 80013c4:	08001431 	.word	0x08001431
 80013c8:	08001423 	.word	0x08001423
 80013cc:	0800143f 	.word	0x0800143f
 80013d0:	0800144d 	.word	0x0800144d
 80013d4:	0800145b 	.word	0x0800145b
 80013d8:	08001469 	.word	0x08001469
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f84d 	bl	8001480 <TF_3V3>
 80013e6:	60f8      	str	r0, [r7, #12]
		break;
 80013e8:	e045      	b.n	8001476 <TF_Select+0xe6>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f866 	bl	80014c0 <TF_5V>
 80013f4:	60f8      	str	r0, [r7, #12]
		break;
 80013f6:	e03e      	b.n	8001476 <TF_Select+0xe6>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f86c 	bl	80014da <TF_BPPS>
 8001402:	60f8      	str	r0, [r7, #12]
		break;
 8001404:	e037      	b.n	8001476 <TF_Select+0xe6>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f872 	bl	80014f4 <TF_APPS>
 8001410:	60f8      	str	r0, [r7, #12]
		break;
 8001412:	e030      	b.n	8001476 <TF_Select+0xe6>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f878 	bl	800150e <TF_FRONT_HEAVE>
 800141e:	60f8      	str	r0, [r7, #12]
		break;
 8001420:	e029      	b.n	8001476 <TF_Select+0xe6>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f87e 	bl	8001528 <TF_REAR_HEAVE>
 800142c:	60f8      	str	r0, [r7, #12]
		break;
 800142e:	e022      	b.n	8001476 <TF_Select+0xe6>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f884 	bl	8001542 <TF_FRONT_ROLL>
 800143a:	60f8      	str	r0, [r7, #12]
		break;
 800143c:	e01b      	b.n	8001476 <TF_Select+0xe6>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f88a 	bl	800155c <TF_REAR_ROLL>
 8001448:	60f8      	str	r0, [r7, #12]
		break;
 800144a:	e014      	b.n	8001476 <TF_Select+0xe6>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f890 	bl	8001576 <TF_TYRE_TEMP>
 8001456:	60f8      	str	r0, [r7, #12]
		break;
 8001458:	e00d      	b.n	8001476 <TF_Select+0xe6>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f896 	bl	8001590 <TF_ANGLE_GEAR>
 8001464:	60f8      	str	r0, [r7, #12]
		break;
 8001466:	e006      	b.n	8001476 <TF_Select+0xe6>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f89c 	bl	80015aa <TF_WATER_LVL>
 8001472:	60f8      	str	r0, [r7, #12]
		break;
 8001474:	bf00      	nop
	default:
		//TODO implement error here
	}

	return transmit;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <TF_3V3>:

uint32_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
	//2,11V
	uint32_t voltage = (2.11 / 4095) * 1000 * raw;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001496:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80014b8 <TF_3V3+0x38>
 800149a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800149e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	60fb      	str	r3, [r7, #12]
	return voltage;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	d07d07d0 	.word	0xd07d07d0
 80014bc:	3fe07d07 	.word	0x3fe07d07

080014c0 <TF_5V>:

uint32_t TF_5V(uint8_t bytes, uint32_t raw){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]

}
 80014cc:	bf00      	nop
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <TF_BPPS>:
uint32_t TF_BPPS(uint8_t bytes, uint32_t raw){
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	6039      	str	r1, [r7, #0]
 80014e4:	71fb      	strb	r3, [r7, #7]

}
 80014e6:	bf00      	nop
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <TF_APPS>:
uint32_t TF_APPS(uint8_t bytes, uint32_t raw){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]

}
 8001500:	bf00      	nop
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <TF_FRONT_HEAVE>:
uint32_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	6039      	str	r1, [r7, #0]
 8001518:	71fb      	strb	r3, [r7, #7]

}
 800151a:	bf00      	nop
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <TF_REAR_HEAVE>:
uint32_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]

}
 8001534:	bf00      	nop
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <TF_FRONT_ROLL>:
uint32_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	6039      	str	r1, [r7, #0]
 800154c:	71fb      	strb	r3, [r7, #7]

}
 800154e:	bf00      	nop
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <TF_REAR_ROLL>:
uint32_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]

}
 8001568:	bf00      	nop
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <TF_TYRE_TEMP>:
uint32_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	6039      	str	r1, [r7, #0]
 8001580:	71fb      	strb	r3, [r7, #7]

}
 8001582:	bf00      	nop
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <TF_ANGLE_GEAR>:
uint32_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]

}
 800159c:	bf00      	nop
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <TF_WATER_LVL>:
uint32_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	6039      	str	r1, [r7, #0]
 80015b4:	71fb      	strb	r3, [r7, #7]

}
 80015b6:	bf00      	nop
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <Reset_Handler>:
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0xe>
 80015c8:	f7ff fe6a 	bl	80012a0 <SystemInit>
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopFillZerobss+0x1a>)
 80015d2:	2300      	movs	r3, #0
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:
 80015d6:	58d4      	ldr	r4, [r2, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:
 80015dc:	18c4      	adds	r4, r0, r3
 80015de:	428c      	cmp	r4, r1
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x1e>)
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopFillZerobss+0x22>)
 80015e6:	2300      	movs	r3, #0
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:
 80015ee:	42a2      	cmp	r2, r4
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>
 80015f2:	f007 ff11 	bl	8009418 <__libc_init_array>
 80015f6:	f7fe fe7b 	bl	80002f0 <main>
 80015fa:	4770      	bx	lr
 80015fc:	24100000 	.word	0x24100000
 8001600:	24000000 	.word	0x24000000
 8001604:	24000010 	.word	0x24000010
 8001608:	08009500 	.word	0x08009500
 800160c:	24000010 	.word	0x24000010
 8001610:	24000bd0 	.word	0x24000bd0

08001614 <ADC_IRQHandler>:
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f001 fb10 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001624:	f005 f926 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <HAL_Init+0x6c>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_Init+0x6c>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_Init+0x70>)
 800165a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f814 	bl	8001690 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e002      	b.n	8001678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fadf 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	080094e0 	.word	0x080094e0
 8001688:	24000004 	.word	0x24000004
 800168c:	24000000 	.word	0x24000000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_InitTick+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e021      	b.n	80016e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_InitTick+0x64>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_InitTick+0x60>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 faf5 	bl	8002caa <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f001 fabf 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x68>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2400000c 	.word	0x2400000c
 80016f4:	24000000 	.word	0x24000000
 80016f8:	24000008 	.word	0x24000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2400000c 	.word	0x2400000c
 8001720:	24000bcc 	.word	0x24000bcc

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	24000bcc 	.word	0x24000bcc

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c

08001784 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	609a      	str	r2, [r3, #8]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3360      	adds	r3, #96	; 0x60
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	611a      	str	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800185e:	b480      	push	{r7}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3360      	adds	r3, #96	; 0x60
 800186e:	461a      	mov	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	431a      	orrs	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	601a      	str	r2, [r3, #0]
  }
}
 8001888:	bf00      	nop
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3330      	adds	r3, #48	; 0x30
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	211f      	movs	r1, #31
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	f003 011f 	and.w	r1, r3, #31
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3314      	adds	r3, #20
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0e5b      	lsrs	r3, r3, #25
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	0d1b      	lsrs	r3, r3, #20
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	2107      	movs	r1, #7
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	401a      	ands	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	0d1b      	lsrs	r3, r3, #20
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0318 	and.w	r3, r3, #24
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b4:	40d9      	lsrs	r1, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	400b      	ands	r3, r1
 80019ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	000fffff 	.word	0x000fffff

080019d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 031f 	and.w	r3, r3, #31
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6093      	str	r3, [r2, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	5fffffc0 	.word	0x5fffffc0

08001a18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	6fffffc0 	.word	0x6fffffc0

08001a68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_ADC_Enable+0x24>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	7fffffc0 	.word	0x7fffffc0

08001ab8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <LL_ADC_IsEnabled+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_ADC_IsEnabled+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <LL_ADC_REG_StartConversion+0x24>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	f043 0204 	orr.w	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	7fffffc0 	.word	0x7fffffc0

08001b08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d101      	bne.n	8001b20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e138      	b.n	8001de0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff f873 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff3f 	bl	8001a18 <LL_ADC_IsDeepPowerDownEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff25 	bl	80019f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff5a 	bl	8001a68 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d114      	bne.n	8001be4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff3e 	bl	8001a40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b88      	ldr	r3, [pc, #544]	; (8001de8 <HAL_ADC_Init+0x294>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	4a88      	ldr	r2, [pc, #544]	; (8001dec <HAL_ADC_Init+0x298>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd6:	e002      	b.n	8001bde <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff3d 	bl	8001a68 <LL_ADC_IsInternalRegulatorEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff77 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001c1a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 80d2 	bne.w	8001dce <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 80ce 	bne.w	8001dce <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c3a:	f043 0202 	orr.w	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff36 	bl	8001ab8 <LL_ADC_IsEnabled>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d110      	bne.n	8001c74 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c52:	4867      	ldr	r0, [pc, #412]	; (8001df0 <HAL_ADC_Init+0x29c>)
 8001c54:	f7ff ff30 	bl	8001ab8 <LL_ADC_IsEnabled>
 8001c58:	4604      	mov	r4, r0
 8001c5a:	4866      	ldr	r0, [pc, #408]	; (8001df4 <HAL_ADC_Init+0x2a0>)
 8001c5c:	f7ff ff2c 	bl	8001ab8 <LL_ADC_IsEnabled>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4323      	orrs	r3, r4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4862      	ldr	r0, [pc, #392]	; (8001df8 <HAL_ADC_Init+0x2a4>)
 8001c70:	f7ff fd88 	bl	8001784 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7d5b      	ldrb	r3, [r3, #21]
 8001c78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c7e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c84:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7f1b      	ldrb	r3, [r3, #28]
 8001c8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7f1b      	ldrb	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	045b      	lsls	r3, r3, #17
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_ADC_Init+0x2a8>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff14 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff21 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 8001cec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d14a      	bne.n	8001d8a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d147      	bne.n	8001d8a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7d1b      	ldrb	r3, [r3, #20]
 8001cfe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_ADC_Init+0x2ac>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d11b      	bne.n	8001d5e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_ADC_Init+0x2b0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	0411      	lsls	r1, r2, #16
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	e007      	b.n	8001d6e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fcfd 	bl	8002784 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10c      	bne.n	8001dac <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f023 010f 	bic.w	r1, r3, #15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 020f 	bic.w	r2, r2, #15
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f023 0303 	bic.w	r3, r3, #3
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
 8001dcc:	e007      	b.n	8001dde <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	24000000 	.word	0x24000000
 8001dec:	053e2d63 	.word	0x053e2d63
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40022100 	.word	0x40022100
 8001df8:	40022300 	.word	0x40022300
 8001dfc:	fff0c003 	.word	0xfff0c003
 8001e00:	ffffbffc 	.word	0xffffbffc
 8001e04:	fc00f81e 	.word	0xfc00f81e

08001e08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e14:	484f      	ldr	r0, [pc, #316]	; (8001f54 <HAL_ADC_Start_DMA+0x14c>)
 8001e16:	f7ff fddf 	bl	80019d8 <LL_ADC_GetMultimode>
 8001e1a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe71 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 808c 	bne.w	8001f46 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x34>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e087      	b.n	8001f4c <HAL_ADC_Start_DMA+0x144>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d002      	beq.n	8001e56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d170      	bne.n	8001f38 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fb84 	bl	8002564 <ADC_Enable>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d163      	bne.n	8001f2e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_ADC_Start_DMA+0x150>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_ADC_Start_DMA+0x154>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d002      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x7e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Start_DMA+0x80>
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_ADC_Start_DMA+0x158>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d002      	beq.n	8001e96 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f023 0206 	bic.w	r2, r3, #6
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	659a      	str	r2, [r3, #88]	; 0x58
 8001eba:	e002      	b.n	8001ec2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_ADC_Start_DMA+0x15c>)
 8001ec8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_ADC_Start_DMA+0x160>)
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <HAL_ADC_Start_DMA+0x164>)
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	221c      	movs	r2, #28
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0210 	orr.w	r2, r2, #16
 8001ef8:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7ff fd04 	bl	8001912 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3340      	adds	r3, #64	; 0x40
 8001f14:	4619      	mov	r1, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f001 fa61 	bl	80033e0 <HAL_DMA_Start_IT>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fdda 	bl	8001ae0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f2c:	e00d      	b.n	8001f4a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001f36:	e008      	b.n	8001f4a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f44:	e001      	b.n	8001f4a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40022300 	.word	0x40022300
 8001f58:	fffff0fe 	.word	0xfffff0fe
 8001f5c:	40022100 	.word	0x40022100
 8001f60:	40022000 	.word	0x40022000
 8001f64:	0800265d 	.word	0x0800265d
 8001f68:	08002735 	.word	0x08002735
 8001f6c:	08002751 	.word	0x08002751

08001f70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b0a1      	sub	sp, #132	; 0x84
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a9a      	ldr	r2, [pc, #616]	; (800221c <HAL_ADC_ConfigChannel+0x284>)
 8001fb2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x2a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e2bc      	b.n	800253c <HAL_ADC_ConfigChannel+0x5a4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fd9a 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 82a1 	bne.w	800251e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x62>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	e016      	b.n	8002028 <HAL_ADC_ConfigChannel+0x90>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2201      	movs	r2, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	69d1      	ldr	r1, [r2, #28]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	430b      	orrs	r3, r1
 8002034:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f7ff fc39 	bl	80018ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fd5b 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8002052:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fd68 	bl	8001b2e <LL_ADC_INJ_IsConversionOngoing>
 800205e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 80a0 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 809c 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	461a      	mov	r2, r3
 800207e:	f7ff fc5b 	bl	8001938 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x110>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	e00a      	b.n	80020be <HAL_ADC_ConfigChannel+0x126>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d027      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6919      	ldr	r1, [r3, #16]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d6:	f7ff fb89 	bl	80017ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7e5b      	ldrb	r3, [r3, #25]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x158>
 80020ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x15a>
 80020f0:	2300      	movs	r3, #0
 80020f2:	461a      	mov	r2, r3
 80020f4:	f7ff fbb3 	bl	800185e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6919      	ldr	r1, [r3, #16]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_ADC_ConfigChannel+0x176>
 8002108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800210c:	e000      	b.n	8002110 <HAL_ADC_ConfigChannel+0x178>
 800210e:	2300      	movs	r3, #0
 8002110:	461a      	mov	r2, r3
 8002112:	f7ff fb8b 	bl	800182c <LL_ADC_SetDataRightShift>
 8002116:	e047      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800213a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800215e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	069b      	lsls	r3, r3, #26
 8002170:	429a      	cmp	r2, r3
 8002172:	d107      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002182:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	429a      	cmp	r2, r3
 8002196:	d107      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc83 	bl	8001ab8 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 81bb 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7ff fbe2 	bl	8001990 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_ADC_ConfigChannel+0x284>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	f040 8130 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x268>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	3301      	adds	r3, #1
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e01b      	b.n	8002238 <HAL_ADC_ConfigChannel+0x2a0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800220e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002210:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e005      	b.n	8002228 <HAL_ADC_ConfigChannel+0x290>
 800221c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2b09      	cmp	r3, #9
 8002230:	bf94      	ite	ls
 8002232:	2301      	movls	r3, #1
 8002234:	2300      	movhi	r3, #0
 8002236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	2b00      	cmp	r3, #0
 800223a:	d079      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x2c0>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	e015      	b.n	8002284 <HAL_ADC_ConfigChannel+0x2ec>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800226a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x30c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x33c>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x362>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	051b      	lsls	r3, r3, #20
 80022f8:	e018      	b.n	800232c <HAL_ADC_ConfigChannel+0x394>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	430b      	orrs	r3, r1
 800232e:	e07e      	b.n	800242e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x3b4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x3e0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x400>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x430>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	61bb      	str	r3, [r7, #24]
  return result;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x45c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f2:	e01b      	b.n	800242c <HAL_ADC_ConfigChannel+0x494>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	60fb      	str	r3, [r7, #12]
  return result;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e003      	b.n	8002418 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	3b1e      	subs	r3, #30
 8002426:	051b      	lsls	r3, r3, #20
 8002428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	430b      	orrs	r3, r1
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	4619      	mov	r1, r3
 8002434:	f7ff fa80 	bl	8001938 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da77      	bge.n	8002530 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002440:	4840      	ldr	r0, [pc, #256]	; (8002544 <HAL_ADC_ConfigChannel+0x5ac>)
 8002442:	f7ff f9c5 	bl	80017d0 <LL_ADC_GetCommonPathInternalCh>
 8002446:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	483f      	ldr	r0, [pc, #252]	; (8002548 <HAL_ADC_ConfigChannel+0x5b0>)
 800244a:	f7ff fb35 	bl	8001ab8 <LL_ADC_IsEnabled>
 800244e:	4604      	mov	r4, r0
 8002450:	483e      	ldr	r0, [pc, #248]	; (800254c <HAL_ADC_ConfigChannel+0x5b4>)
 8002452:	f7ff fb31 	bl	8001ab8 <LL_ADC_IsEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	4323      	orrs	r3, r4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d155      	bne.n	800250a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <HAL_ADC_ConfigChannel+0x5b8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d122      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x516>
 8002468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11d      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a35      	ldr	r2, [pc, #212]	; (800254c <HAL_ADC_ConfigChannel+0x5b4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d159      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002482:	4619      	mov	r1, r3
 8002484:	482f      	ldr	r0, [pc, #188]	; (8002544 <HAL_ADC_ConfigChannel+0x5ac>)
 8002486:	f7ff f990 	bl	80017aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_ADC_ConfigChannel+0x5bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_ADC_ConfigChannel+0x5c0>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	3301      	adds	r3, #1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800249e:	e002      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ac:	e040      	b.n	8002530 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2a      	ldr	r2, [pc, #168]	; (800255c <HAL_ADC_ConfigChannel+0x5c4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x544>
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <HAL_ADC_ConfigChannel+0x5b4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d131      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	4619      	mov	r1, r3
 80024d4:	481b      	ldr	r0, [pc, #108]	; (8002544 <HAL_ADC_ConfigChannel+0x5ac>)
 80024d6:	f7ff f968 	bl	80017aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024da:	e029      	b.n	8002530 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_ADC_ConfigChannel+0x5c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d124      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x598>
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11f      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <HAL_ADC_ConfigChannel+0x5b4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d11a      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002500:	4619      	mov	r1, r3
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <HAL_ADC_ConfigChannel+0x5ac>)
 8002504:	f7ff f951 	bl	80017aa <LL_ADC_SetCommonPathInternalCh>
 8002508:	e012      	b.n	8002530 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800251c:	e008      	b.n	8002530 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002538:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800253c:	4618      	mov	r0, r3
 800253e:	3784      	adds	r7, #132	; 0x84
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	40022300 	.word	0x40022300
 8002548:	40022000 	.word	0x40022000
 800254c:	40022100 	.word	0x40022100
 8002550:	cb840000 	.word	0xcb840000
 8002554:	24000000 	.word	0x24000000
 8002558:	053e2d63 	.word	0x053e2d63
 800255c:	bac04000 	.word	0xbac04000
 8002560:	cfb80000 	.word	0xcfb80000

08002564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff faa1 	bl	8001ab8 <LL_ADC_IsEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d161      	bne.n	8002640 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	4b32      	ldr	r3, [pc, #200]	; (800264c <ADC_Enable+0xe8>)
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04d      	b.n	8002642 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fa70 	bl	8001a90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025b0:	f7ff f8b8 	bl	8001724 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b6:	4826      	ldr	r0, [pc, #152]	; (8002650 <ADC_Enable+0xec>)
 80025b8:	f7ff fa0e 	bl	80019d8 <LL_ADC_GetMultimode>
 80025bc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <ADC_Enable+0xf0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d002      	beq.n	80025ce <ADC_Enable+0x6a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e000      	b.n	80025d0 <ADC_Enable+0x6c>
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <ADC_Enable+0xf4>)
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d02c      	beq.n	8002632 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d130      	bne.n	8002640 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025de:	e028      	b.n	8002632 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fa67 	bl	8001ab8 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fa4b 	bl	8001a90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025fa:	f7ff f893 	bl	8001724 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d914      	bls.n	8002632 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d00d      	beq.n	8002632 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0210 	orr.w	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e007      	b.n	8002642 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d1cf      	bne.n	80025e0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	8000003f 	.word	0x8000003f
 8002650:	40022300 	.word	0x40022300
 8002654:	40022100 	.word	0x40022100
 8002658:	40022000 	.word	0x40022000

0800265c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002672:	2b00      	cmp	r3, #0
 8002674:	d14b      	bne.n	800270e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d021      	beq.n	80026d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f8fd 	bl	8001894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d032      	beq.n	8002706 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12b      	bne.n	8002706 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11f      	bne.n	8002706 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
 80026d2:	e018      	b.n	8002706 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d111      	bne.n	8002706 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7fe f9fa 	bl	8000b00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800270c:	e00e      	b.n	800272c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff fc32 	bl	8001f84 <HAL_ADC_ErrorCallback>
}
 8002720:	e004      	b.n	800272c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff fc14 	bl	8001f70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fc04 	bl	8001f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800278c:	4b60      	ldr	r3, [pc, #384]	; (8002910 <ADC_ConfigureBoostMode+0x18c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002798:	f004 f9e6 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 800279c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027a6:	d010      	beq.n	80027ca <ADC_ConfigureBoostMode+0x46>
 80027a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027ac:	d873      	bhi.n	8002896 <ADC_ConfigureBoostMode+0x112>
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b2:	d002      	beq.n	80027ba <ADC_ConfigureBoostMode+0x36>
 80027b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027b8:	d16d      	bne.n	8002896 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
        break;
 80027c8:	e068      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
        break;
 80027d0:	e064      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	f005 fbc9 	bl	8007f70 <HAL_RCCEx_GetPeriphCLKFreq>
 80027de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027e8:	d051      	beq.n	800288e <ADC_ConfigureBoostMode+0x10a>
 80027ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027ee:	d854      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 80027f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027f4:	d047      	beq.n	8002886 <ADC_ConfigureBoostMode+0x102>
 80027f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027fa:	d84e      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 80027fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002800:	d03d      	beq.n	800287e <ADC_ConfigureBoostMode+0xfa>
 8002802:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002806:	d848      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800280c:	d033      	beq.n	8002876 <ADC_ConfigureBoostMode+0xf2>
 800280e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002812:	d842      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002814:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002818:	d029      	beq.n	800286e <ADC_ConfigureBoostMode+0xea>
 800281a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800281e:	d83c      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002820:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002824:	d01a      	beq.n	800285c <ADC_ConfigureBoostMode+0xd8>
 8002826:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800282a:	d836      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 800282c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002830:	d014      	beq.n	800285c <ADC_ConfigureBoostMode+0xd8>
 8002832:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002836:	d830      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283c:	d00e      	beq.n	800285c <ADC_ConfigureBoostMode+0xd8>
 800283e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002842:	d82a      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002844:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002848:	d008      	beq.n	800285c <ADC_ConfigureBoostMode+0xd8>
 800284a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800284e:	d824      	bhi.n	800289a <ADC_ConfigureBoostMode+0x116>
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002854:	d002      	beq.n	800285c <ADC_ConfigureBoostMode+0xd8>
 8002856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285a:	d11e      	bne.n	800289a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0c9b      	lsrs	r3, r3, #18
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	60fb      	str	r3, [r7, #12]
        break;
 800286c:	e016      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
        break;
 8002874:	e012      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	60fb      	str	r3, [r7, #12]
        break;
 800287c:	e00e      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	60fb      	str	r3, [r7, #12]
        break;
 8002884:	e00a      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	09db      	lsrs	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]
        break;
 800288c:	e006      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	60fb      	str	r3, [r7, #12]
        break;
 8002894:	e002      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
        break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800289a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <ADC_ConfigureBoostMode+0x190>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d808      	bhi.n	80028bc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028b8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028ba:	e025      	b.n	8002908 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <ADC_ConfigureBoostMode+0x194>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d80a      	bhi.n	80028da <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	e016      	b.n	8002908 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <ADC_ConfigureBoostMode+0x198>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d80a      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	609a      	str	r2, [r3, #8]
}
 80028f6:	e007      	b.n	8002908 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40022300 	.word	0x40022300
 8002914:	005f5e10 	.word	0x005f5e10
 8002918:	00bebc20 	.word	0x00bebc20
 800291c:	017d7840 	.word	0x017d7840

08002920 <LL_ADC_IsEnabled>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <LL_ADC_IsEnabled+0x18>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <LL_ADC_IsEnabled+0x1a>
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_ADC_REG_IsConversionOngoing>:
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d101      	bne.n	800295e <LL_ADC_REG_IsConversionOngoing+0x18>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b09f      	sub	sp, #124	; 0x7c
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002986:	2302      	movs	r3, #2
 8002988:	e080      	b.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d102      	bne.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029a4:	4b3c      	ldr	r3, [pc, #240]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	e001      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e05f      	b.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ffb9 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 80029d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffb3 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d141      	bne.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13e      	bne.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a0a:	4822      	ldr	r0, [pc, #136]	; (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a0c:	f7ff ff88 	bl	8002920 <LL_ADC_IsEnabled>
 8002a10:	4604      	mov	r4, r0
 8002a12:	4821      	ldr	r0, [pc, #132]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a14:	f7ff ff84 	bl	8002920 <LL_ADC_IsEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12e      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	6811      	ldr	r1, [r2, #0]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a38:	e021      	b.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a46:	4813      	ldr	r0, [pc, #76]	; (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a48:	f7ff ff6a 	bl	8002920 <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4812      	ldr	r0, [pc, #72]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a50:	f7ff ff66 	bl	8002920 <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d110      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a68:	e009      	b.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a7c:	e000      	b.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	377c      	adds	r7, #124	; 0x7c
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40022100 	.word	0x40022100
 8002a9c:	40022300 	.word	0x40022300
 8002aa0:	fffff0e0 	.word	0xfffff0e0

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00
 8002ae8:	05fa0000 	.word	0x05fa0000

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff8e 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff29 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff40 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff90 	bl	8002b98 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5f 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff33 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa4 	bl	8002c00 <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7fe fd2a 	bl	8001724 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e37d      	b.n	80033d8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a66      	ldr	r2, [pc, #408]	; (8002e7c <HAL_DMA_Init+0x1b8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d04a      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_DMA_Init+0x1bc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d045      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_DMA_Init+0x1c0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d040      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <HAL_DMA_Init+0x1c4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d03b      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_DMA_Init+0x1c8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d036      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5f      	ldr	r2, [pc, #380]	; (8002e90 <HAL_DMA_Init+0x1cc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d031      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_DMA_Init+0x1d0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d02c      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5c      	ldr	r2, [pc, #368]	; (8002e98 <HAL_DMA_Init+0x1d4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d027      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <HAL_DMA_Init+0x1d8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a59      	ldr	r2, [pc, #356]	; (8002ea0 <HAL_DMA_Init+0x1dc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01d      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_DMA_Init+0x1e0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d018      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_DMA_Init+0x1e4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a54      	ldr	r2, [pc, #336]	; (8002eac <HAL_DMA_Init+0x1e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00e      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a53      	ldr	r2, [pc, #332]	; (8002eb0 <HAL_DMA_Init+0x1ec>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <HAL_DMA_Init+0x1f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d004      	beq.n	8002d7c <HAL_DMA_Init+0xb8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a50      	ldr	r2, [pc, #320]	; (8002eb8 <HAL_DMA_Init+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <HAL_DMA_Init+0xbc>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_DMA_Init+0xbe>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 813c 	beq.w	8003000 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_DMA_Init+0x1b8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04a      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <HAL_DMA_Init+0x1bc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d045      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_Init+0x1c0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d040      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_Init+0x1c4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03b      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_Init+0x1c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d036      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_Init+0x1cc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Init+0x1d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02c      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_DMA_Init+0x1d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_DMA_Init+0x1d8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_DMA_Init+0x1dc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01d      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_DMA_Init+0x1e0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_DMA_Init+0x1e4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_DMA_Init+0x1e8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_DMA_Init+0x1ec>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_DMA_Init+0x1f0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_Init+0x174>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_DMA_Init+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <HAL_DMA_Init+0x186>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e007      	b.n	8002e5a <HAL_DMA_Init+0x196>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e5a:	e02f      	b.n	8002ebc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5c:	f7fe fc62 	bl	8001724 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d928      	bls.n	8002ebc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2203      	movs	r2, #3
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e2ad      	b.n	80033d8 <HAL_DMA_Init+0x714>
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1c8      	bne.n	8002e5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <HAL_DMA_Init+0x3e0>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d107      	bne.n	8002f20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b28      	cmp	r3, #40	; 0x28
 8002f26:	d903      	bls.n	8002f30 <HAL_DMA_Init+0x26c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f2e:	d91f      	bls.n	8002f70 <HAL_DMA_Init+0x2ac>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b3e      	cmp	r3, #62	; 0x3e
 8002f36:	d903      	bls.n	8002f40 <HAL_DMA_Init+0x27c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b42      	cmp	r3, #66	; 0x42
 8002f3e:	d917      	bls.n	8002f70 <HAL_DMA_Init+0x2ac>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b46      	cmp	r3, #70	; 0x46
 8002f46:	d903      	bls.n	8002f50 <HAL_DMA_Init+0x28c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b48      	cmp	r3, #72	; 0x48
 8002f4e:	d90f      	bls.n	8002f70 <HAL_DMA_Init+0x2ac>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b4e      	cmp	r3, #78	; 0x4e
 8002f56:	d903      	bls.n	8002f60 <HAL_DMA_Init+0x29c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b52      	cmp	r3, #82	; 0x52
 8002f5e:	d907      	bls.n	8002f70 <HAL_DMA_Init+0x2ac>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b73      	cmp	r3, #115	; 0x73
 8002f66:	d905      	bls.n	8002f74 <HAL_DMA_Init+0x2b0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b77      	cmp	r3, #119	; 0x77
 8002f6e:	d801      	bhi.n	8002f74 <HAL_DMA_Init+0x2b0>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_Init+0x2b2>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0307 	bic.w	r3, r3, #7
 8002f98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d117      	bne.n	8002fdc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 fe70 	bl	8004ca4 <DMA_CheckFifoParam>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e1fd      	b.n	80033d8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 fdab 	bl	8004b40 <DMA_CalcBaseAndBitshift>
 8002fea:	4603      	mov	r3, r0
 8002fec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e0fd      	b.n	80031fc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <HAL_DMA_Init+0x3e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04a      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_DMA_Init+0x3e8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d045      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_DMA_Init+0x3ec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d040      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <HAL_DMA_Init+0x3f0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d03b      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_DMA_Init+0x3f4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d036      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_DMA_Init+0x3f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d031      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_DMA_Init+0x3fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02c      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_DMA_Init+0x400>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d027      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_DMA_Init+0x404>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d022      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_DMA_Init+0x408>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d01d      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_DMA_Init+0x40c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d018      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_DMA_Init+0x410>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_DMA_Init+0x414>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00e      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_DMA_Init+0x418>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <HAL_DMA_Init+0x41c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_DMA_Init+0x3dc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <HAL_DMA_Init+0x420>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d123      	bne.n	80030e8 <HAL_DMA_Init+0x424>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e022      	b.n	80030ea <HAL_DMA_Init+0x426>
 80030a4:	fe10803f 	.word	0xfe10803f
 80030a8:	48022c08 	.word	0x48022c08
 80030ac:	48022c1c 	.word	0x48022c1c
 80030b0:	48022c30 	.word	0x48022c30
 80030b4:	48022c44 	.word	0x48022c44
 80030b8:	48022c58 	.word	0x48022c58
 80030bc:	48022c6c 	.word	0x48022c6c
 80030c0:	48022c80 	.word	0x48022c80
 80030c4:	48022c94 	.word	0x48022c94
 80030c8:	58025408 	.word	0x58025408
 80030cc:	5802541c 	.word	0x5802541c
 80030d0:	58025430 	.word	0x58025430
 80030d4:	58025444 	.word	0x58025444
 80030d8:	58025458 	.word	0x58025458
 80030dc:	5802546c 	.word	0x5802546c
 80030e0:	58025480 	.word	0x58025480
 80030e4:	58025494 	.word	0x58025494
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d07d      	beq.n	80031ea <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7f      	ldr	r2, [pc, #508]	; (80032f0 <HAL_DMA_Init+0x62c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d021      	beq.n	800313c <HAL_DMA_Init+0x478>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7d      	ldr	r2, [pc, #500]	; (80032f4 <HAL_DMA_Init+0x630>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01c      	beq.n	800313c <HAL_DMA_Init+0x478>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <HAL_DMA_Init+0x634>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d017      	beq.n	800313c <HAL_DMA_Init+0x478>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <HAL_DMA_Init+0x638>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d012      	beq.n	800313c <HAL_DMA_Init+0x478>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a79      	ldr	r2, [pc, #484]	; (8003300 <HAL_DMA_Init+0x63c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_DMA_Init+0x478>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a77      	ldr	r2, [pc, #476]	; (8003304 <HAL_DMA_Init+0x640>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d008      	beq.n	800313c <HAL_DMA_Init+0x478>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a76      	ldr	r2, [pc, #472]	; (8003308 <HAL_DMA_Init+0x644>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <HAL_DMA_Init+0x478>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a74      	ldr	r2, [pc, #464]	; (800330c <HAL_DMA_Init+0x648>)
 800313a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4b6e      	ldr	r3, [pc, #440]	; (8003310 <HAL_DMA_Init+0x64c>)
 8003158:	4013      	ands	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Init+0x4b2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d102      	bne.n	8003172 <HAL_DMA_Init+0x4ae>
 800316c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003170:	e002      	b.n	8003178 <HAL_DMA_Init+0x4b4>
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_DMA_Init+0x4b4>
 8003176:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68d2      	ldr	r2, [r2, #12]
 800317c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800317e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003186:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800318e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003196:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800319e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031a6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_DMA_Init+0x650>)
 80031be:	4413      	add	r3, r2
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_DMA_Init+0x654>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f001 fcb6 	bl	8004b40 <DMA_CalcBaseAndBitshift>
 80031d4:	4603      	mov	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	e008      	b.n	80031fc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2240      	movs	r2, #64	; 0x40
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0ed      	b.n	80033d8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_DMA_Init+0x658>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d072      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a45      	ldr	r2, [pc, #276]	; (8003320 <HAL_DMA_Init+0x65c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d06d      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a43      	ldr	r2, [pc, #268]	; (8003324 <HAL_DMA_Init+0x660>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d068      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_DMA_Init+0x664>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d063      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <HAL_DMA_Init+0x668>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d05e      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <HAL_DMA_Init+0x66c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d059      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_DMA_Init+0x670>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d054      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_DMA_Init+0x674>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04f      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3a      	ldr	r2, [pc, #232]	; (800333c <HAL_DMA_Init+0x678>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d04a      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a39      	ldr	r2, [pc, #228]	; (8003340 <HAL_DMA_Init+0x67c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d045      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_DMA_Init+0x680>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d040      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_DMA_Init+0x684>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d03b      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a34      	ldr	r2, [pc, #208]	; (800334c <HAL_DMA_Init+0x688>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d036      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <HAL_DMA_Init+0x68c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d031      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_DMA_Init+0x690>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02c      	beq.n	80032ec <HAL_DMA_Init+0x628>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a30      	ldr	r2, [pc, #192]	; (8003358 <HAL_DMA_Init+0x694>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d027      	beq.n	80032ec <HAL_DMA_Init+0x628>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_DMA_Init+0x62c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_DMA_Init+0x630>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d01d      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_DMA_Init+0x634>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_DMA_Init+0x638>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_DMA_Init+0x63c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <HAL_DMA_Init+0x640>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <HAL_DMA_Init+0x644>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_DMA_Init+0x628>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_DMA_Init+0x648>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d137      	bne.n	800335c <HAL_DMA_Init+0x698>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e036      	b.n	800335e <HAL_DMA_Init+0x69a>
 80032f0:	58025408 	.word	0x58025408
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025430 	.word	0x58025430
 80032fc:	58025444 	.word	0x58025444
 8003300:	58025458 	.word	0x58025458
 8003304:	5802546c 	.word	0x5802546c
 8003308:	58025480 	.word	0x58025480
 800330c:	58025494 	.word	0x58025494
 8003310:	fffe000f 	.word	0xfffe000f
 8003314:	a7fdabf8 	.word	0xa7fdabf8
 8003318:	cccccccd 	.word	0xcccccccd
 800331c:	40020010 	.word	0x40020010
 8003320:	40020028 	.word	0x40020028
 8003324:	40020040 	.word	0x40020040
 8003328:	40020058 	.word	0x40020058
 800332c:	40020070 	.word	0x40020070
 8003330:	40020088 	.word	0x40020088
 8003334:	400200a0 	.word	0x400200a0
 8003338:	400200b8 	.word	0x400200b8
 800333c:	40020410 	.word	0x40020410
 8003340:	40020428 	.word	0x40020428
 8003344:	40020440 	.word	0x40020440
 8003348:	40020458 	.word	0x40020458
 800334c:	40020470 	.word	0x40020470
 8003350:	40020488 	.word	0x40020488
 8003354:	400204a0 	.word	0x400204a0
 8003358:	400204b8 	.word	0x400204b8
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d032      	beq.n	80033c8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f001 fd1a 	bl	8004d9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b80      	cmp	r3, #128	; 0x80
 800336e:	d102      	bne.n	8003376 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800338a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_DMA_Init+0x6f2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d80c      	bhi.n	80033b6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f001 fd97 	bl	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	e008      	b.n	80033c8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e226      	b.n	800384a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_DMA_Start_IT+0x2a>
 8003406:	2302      	movs	r3, #2
 8003408:	e21f      	b.n	800384a <HAL_DMA_Start_IT+0x46a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	f040 820a 	bne.w	8003834 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <HAL_DMA_Start_IT+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04a      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_DMA_Start_IT+0x1f8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d045      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a65      	ldr	r2, [pc, #404]	; (80035dc <HAL_DMA_Start_IT+0x1fc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d040      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_DMA_Start_IT+0x200>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d03b      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a62      	ldr	r2, [pc, #392]	; (80035e4 <HAL_DMA_Start_IT+0x204>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d036      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a60      	ldr	r2, [pc, #384]	; (80035e8 <HAL_DMA_Start_IT+0x208>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5f      	ldr	r2, [pc, #380]	; (80035ec <HAL_DMA_Start_IT+0x20c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d02c      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_DMA_Start_IT+0x210>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d027      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_DMA_Start_IT+0x214>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_DMA_Start_IT+0x218>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01d      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_DMA_Start_IT+0x21c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d018      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a57      	ldr	r2, [pc, #348]	; (8003600 <HAL_DMA_Start_IT+0x220>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_DMA_Start_IT+0x224>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00e      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a54      	ldr	r2, [pc, #336]	; (8003608 <HAL_DMA_Start_IT+0x228>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a53      	ldr	r2, [pc, #332]	; (800360c <HAL_DMA_Start_IT+0x22c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_DMA_Start_IT+0xee>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_DMA_Start_IT+0x230>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d108      	bne.n	80034e0 <HAL_DMA_Start_IT+0x100>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e007      	b.n	80034f0 <HAL_DMA_Start_IT+0x110>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f001 f93e 	bl	8004778 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <HAL_DMA_Start_IT+0x1f4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04a      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <HAL_DMA_Start_IT+0x1f8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d045      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a31      	ldr	r2, [pc, #196]	; (80035dc <HAL_DMA_Start_IT+0x1fc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d040      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <HAL_DMA_Start_IT+0x200>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d03b      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2e      	ldr	r2, [pc, #184]	; (80035e4 <HAL_DMA_Start_IT+0x204>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d036      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <HAL_DMA_Start_IT+0x208>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d031      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_DMA_Start_IT+0x20c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02c      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_DMA_Start_IT+0x210>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d027      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <HAL_DMA_Start_IT+0x214>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d022      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_DMA_Start_IT+0x218>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01d      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_DMA_Start_IT+0x21c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d018      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_DMA_Start_IT+0x220>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a22      	ldr	r2, [pc, #136]	; (8003604 <HAL_DMA_Start_IT+0x224>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00e      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_DMA_Start_IT+0x228>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_DMA_Start_IT+0x22c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_DMA_Start_IT+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_DMA_Start_IT+0x230>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Start_IT+0x1c0>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_DMA_Start_IT+0x1c2>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 021e 	bic.w	r2, r3, #30
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0216 	orr.w	r2, r2, #22
 80035b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03e      	beq.n	8003640 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0208 	orr.w	r2, r2, #8
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e035      	b.n	8003640 <HAL_DMA_Start_IT+0x260>
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020040 	.word	0x40020040
 80035e0:	40020058 	.word	0x40020058
 80035e4:	40020070 	.word	0x40020070
 80035e8:	40020088 	.word	0x40020088
 80035ec:	400200a0 	.word	0x400200a0
 80035f0:	400200b8 	.word	0x400200b8
 80035f4:	40020410 	.word	0x40020410
 80035f8:	40020428 	.word	0x40020428
 80035fc:	40020440 	.word	0x40020440
 8003600:	40020458 	.word	0x40020458
 8003604:	40020470 	.word	0x40020470
 8003608:	40020488 	.word	0x40020488
 800360c:	400204a0 	.word	0x400204a0
 8003610:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020e 	bic.w	r2, r3, #14
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 020a 	orr.w	r2, r2, #10
 8003626:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0204 	orr.w	r2, r2, #4
 800363e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a83      	ldr	r2, [pc, #524]	; (8003854 <HAL_DMA_Start_IT+0x474>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d072      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a82      	ldr	r2, [pc, #520]	; (8003858 <HAL_DMA_Start_IT+0x478>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d06d      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_DMA_Start_IT+0x47c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d068      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_DMA_Start_IT+0x480>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d063      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_DMA_Start_IT+0x484>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d05e      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_DMA_Start_IT+0x488>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d059      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_DMA_Start_IT+0x48c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d054      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a79      	ldr	r2, [pc, #484]	; (8003870 <HAL_DMA_Start_IT+0x490>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04f      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a77      	ldr	r2, [pc, #476]	; (8003874 <HAL_DMA_Start_IT+0x494>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04a      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_DMA_Start_IT+0x498>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d045      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a74      	ldr	r2, [pc, #464]	; (800387c <HAL_DMA_Start_IT+0x49c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d040      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a73      	ldr	r2, [pc, #460]	; (8003880 <HAL_DMA_Start_IT+0x4a0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d03b      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a71      	ldr	r2, [pc, #452]	; (8003884 <HAL_DMA_Start_IT+0x4a4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a70      	ldr	r2, [pc, #448]	; (8003888 <HAL_DMA_Start_IT+0x4a8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d031      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_DMA_Start_IT+0x4ac>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <HAL_DMA_Start_IT+0x4b0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6b      	ldr	r2, [pc, #428]	; (8003894 <HAL_DMA_Start_IT+0x4b4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_DMA_Start_IT+0x4b8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a68      	ldr	r2, [pc, #416]	; (800389c <HAL_DMA_Start_IT+0x4bc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <HAL_DMA_Start_IT+0x4c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_DMA_Start_IT+0x4c4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <HAL_DMA_Start_IT+0x4c8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a62      	ldr	r2, [pc, #392]	; (80038ac <HAL_DMA_Start_IT+0x4cc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_Start_IT+0x350>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a61      	ldr	r2, [pc, #388]	; (80038b0 <HAL_DMA_Start_IT+0x4d0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Start_IT+0x354>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_DMA_Start_IT+0x356>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a37      	ldr	r2, [pc, #220]	; (8003854 <HAL_DMA_Start_IT+0x474>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04a      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a36      	ldr	r2, [pc, #216]	; (8003858 <HAL_DMA_Start_IT+0x478>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d045      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a34      	ldr	r2, [pc, #208]	; (800385c <HAL_DMA_Start_IT+0x47c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d040      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a33      	ldr	r2, [pc, #204]	; (8003860 <HAL_DMA_Start_IT+0x480>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d03b      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a31      	ldr	r2, [pc, #196]	; (8003864 <HAL_DMA_Start_IT+0x484>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d036      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a30      	ldr	r2, [pc, #192]	; (8003868 <HAL_DMA_Start_IT+0x488>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d031      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <HAL_DMA_Start_IT+0x48c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02c      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_DMA_Start_IT+0x490>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d027      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_DMA_Start_IT+0x494>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_DMA_Start_IT+0x498>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d01d      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a28      	ldr	r2, [pc, #160]	; (800387c <HAL_DMA_Start_IT+0x49c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_DMA_Start_IT+0x4a0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <HAL_DMA_Start_IT+0x4a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_DMA_Start_IT+0x4a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a22      	ldr	r2, [pc, #136]	; (800388c <HAL_DMA_Start_IT+0x4ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_DMA_Start_IT+0x430>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <HAL_DMA_Start_IT+0x4b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <HAL_DMA_Start_IT+0x442>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e012      	b.n	8003848 <HAL_DMA_Start_IT+0x468>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e009      	b.n	8003848 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800383a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
 8003894:	58025408 	.word	0x58025408
 8003898:	5802541c 	.word	0x5802541c
 800389c:	58025430 	.word	0x58025430
 80038a0:	58025444 	.word	0x58025444
 80038a4:	58025458 	.word	0x58025458
 80038a8:	5802546c 	.word	0x5802546c
 80038ac:	58025480 	.word	0x58025480
 80038b0:	58025494 	.word	0x58025494

080038b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038c0:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_DMA_IRQHandler+0x1ac>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a67      	ldr	r2, [pc, #412]	; (8003a64 <HAL_DMA_IRQHandler+0x1b0>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5f      	ldr	r2, [pc, #380]	; (8003a68 <HAL_DMA_IRQHandler+0x1b4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d04a      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a5d      	ldr	r2, [pc, #372]	; (8003a6c <HAL_DMA_IRQHandler+0x1b8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d045      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a5c      	ldr	r2, [pc, #368]	; (8003a70 <HAL_DMA_IRQHandler+0x1bc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d040      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_DMA_IRQHandler+0x1c0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d03b      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <HAL_DMA_IRQHandler+0x1c4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d036      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_DMA_IRQHandler+0x1c8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a56      	ldr	r2, [pc, #344]	; (8003a80 <HAL_DMA_IRQHandler+0x1cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d02c      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a54      	ldr	r2, [pc, #336]	; (8003a84 <HAL_DMA_IRQHandler+0x1d0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d027      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a53      	ldr	r2, [pc, #332]	; (8003a88 <HAL_DMA_IRQHandler+0x1d4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a51      	ldr	r2, [pc, #324]	; (8003a8c <HAL_DMA_IRQHandler+0x1d8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01d      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a50      	ldr	r2, [pc, #320]	; (8003a90 <HAL_DMA_IRQHandler+0x1dc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <HAL_DMA_IRQHandler+0x1e0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a4d      	ldr	r2, [pc, #308]	; (8003a98 <HAL_DMA_IRQHandler+0x1e4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a4b      	ldr	r2, [pc, #300]	; (8003a9c <HAL_DMA_IRQHandler+0x1e8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <HAL_DMA_IRQHandler+0x1ec>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_DMA_IRQHandler+0xd2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a48      	ldr	r2, [pc, #288]	; (8003aa4 <HAL_DMA_IRQHandler+0x1f0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_DMA_IRQHandler+0xd6>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_DMA_IRQHandler+0xd8>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 842b 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2208      	movs	r2, #8
 800399c:	409a      	lsls	r2, r3
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80a2 	beq.w	8003aec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_DMA_IRQHandler+0x1b4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d04a      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_DMA_IRQHandler+0x1b8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d045      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <HAL_DMA_IRQHandler+0x1bc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d040      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <HAL_DMA_IRQHandler+0x1c0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d03b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_DMA_IRQHandler+0x1c4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d036      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_DMA_IRQHandler+0x1c8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d031      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <HAL_DMA_IRQHandler+0x1cc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02c      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_DMA_IRQHandler+0x1d0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d027      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_DMA_IRQHandler+0x1d4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_DMA_IRQHandler+0x1d8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d01d      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_DMA_IRQHandler+0x1dc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_DMA_IRQHandler+0x1e0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_DMA_IRQHandler+0x1e4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_DMA_IRQHandler+0x1e8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_DMA_IRQHandler+0x1ec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x194>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d12f      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x1f4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e02e      	b.n	8003abc <HAL_DMA_IRQHandler+0x208>
 8003a5e:	bf00      	nop
 8003a60:	24000000 	.word	0x24000000
 8003a64:	1b4e81b5 	.word	0x1b4e81b5
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020040 	.word	0x40020040
 8003a74:	40020058 	.word	0x40020058
 8003a78:	40020070 	.word	0x40020070
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	400200a0 	.word	0x400200a0
 8003a84:	400200b8 	.word	0x400200b8
 8003a88:	40020410 	.word	0x40020410
 8003a8c:	40020428 	.word	0x40020428
 8003a90:	40020440 	.word	0x40020440
 8003a94:	40020458 	.word	0x40020458
 8003a98:	40020470 	.word	0x40020470
 8003a9c:	40020488 	.word	0x40020488
 8003aa0:	400204a0 	.word	0x400204a0
 8003aa4:	400204b8 	.word	0x400204b8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0204 	bic.w	r2, r2, #4
 8003ace:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2208      	movs	r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d06e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a69      	ldr	r2, [pc, #420]	; (8003cac <HAL_DMA_IRQHandler+0x3f8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04a      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a67      	ldr	r2, [pc, #412]	; (8003cb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d045      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a66      	ldr	r2, [pc, #408]	; (8003cb4 <HAL_DMA_IRQHandler+0x400>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a64      	ldr	r2, [pc, #400]	; (8003cb8 <HAL_DMA_IRQHandler+0x404>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a63      	ldr	r2, [pc, #396]	; (8003cbc <HAL_DMA_IRQHandler+0x408>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d036      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <HAL_DMA_IRQHandler+0x40c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d031      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a60      	ldr	r2, [pc, #384]	; (8003cc4 <HAL_DMA_IRQHandler+0x410>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02c      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <HAL_DMA_IRQHandler+0x414>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5d      	ldr	r2, [pc, #372]	; (8003ccc <HAL_DMA_IRQHandler+0x418>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <HAL_DMA_IRQHandler+0x41c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <HAL_DMA_IRQHandler+0x420>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_DMA_IRQHandler+0x424>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a57      	ldr	r2, [pc, #348]	; (8003cdc <HAL_DMA_IRQHandler+0x428>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a55      	ldr	r2, [pc, #340]	; (8003ce0 <HAL_DMA_IRQHandler+0x42c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a54      	ldr	r2, [pc, #336]	; (8003ce4 <HAL_DMA_IRQHandler+0x430>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x2ee>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_DMA_IRQHandler+0x434>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x304>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e003      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x30c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0202 	orr.w	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2204      	movs	r2, #4
 8003bea:	409a      	lsls	r2, r3
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 808f 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <HAL_DMA_IRQHandler+0x3f8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04a      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d045      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <HAL_DMA_IRQHandler+0x400>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <HAL_DMA_IRQHandler+0x404>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d03b      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_DMA_IRQHandler+0x408>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d036      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <HAL_DMA_IRQHandler+0x40c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_DMA_IRQHandler+0x410>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d02c      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_DMA_IRQHandler+0x414>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d027      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <HAL_DMA_IRQHandler+0x418>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_DMA_IRQHandler+0x41c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_DMA_IRQHandler+0x420>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_DMA_IRQHandler+0x424>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_DMA_IRQHandler+0x428>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_DMA_IRQHandler+0x42c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_DMA_IRQHandler+0x430>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x3e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_DMA_IRQHandler+0x434>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d12a      	bne.n	8003cec <HAL_DMA_IRQHandler+0x438>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e023      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x440>
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2204      	movs	r2, #4
 8003d02:	409a      	lsls	r2, r3
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a6 	beq.w	8003e76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a85      	ldr	r2, [pc, #532]	; (8003f44 <HAL_DMA_IRQHandler+0x690>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04a      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a83      	ldr	r2, [pc, #524]	; (8003f48 <HAL_DMA_IRQHandler+0x694>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d045      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a82      	ldr	r2, [pc, #520]	; (8003f4c <HAL_DMA_IRQHandler+0x698>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d040      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a80      	ldr	r2, [pc, #512]	; (8003f50 <HAL_DMA_IRQHandler+0x69c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7f      	ldr	r2, [pc, #508]	; (8003f54 <HAL_DMA_IRQHandler+0x6a0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d036      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7d      	ldr	r2, [pc, #500]	; (8003f58 <HAL_DMA_IRQHandler+0x6a4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7c      	ldr	r2, [pc, #496]	; (8003f5c <HAL_DMA_IRQHandler+0x6a8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d02c      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a7a      	ldr	r2, [pc, #488]	; (8003f60 <HAL_DMA_IRQHandler+0x6ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a79      	ldr	r2, [pc, #484]	; (8003f64 <HAL_DMA_IRQHandler+0x6b0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a77      	ldr	r2, [pc, #476]	; (8003f68 <HAL_DMA_IRQHandler+0x6b4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a76      	ldr	r2, [pc, #472]	; (8003f6c <HAL_DMA_IRQHandler+0x6b8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <HAL_DMA_IRQHandler+0x6bc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <HAL_DMA_IRQHandler+0x6c0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <HAL_DMA_IRQHandler+0x6c4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a70      	ldr	r2, [pc, #448]	; (8003f7c <HAL_DMA_IRQHandler+0x6c8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_IRQHandler+0x516>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6e      	ldr	r2, [pc, #440]	; (8003f80 <HAL_DMA_IRQHandler+0x6cc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10a      	bne.n	8003de0 <HAL_DMA_IRQHandler+0x52c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e009      	b.n	8003df4 <HAL_DMA_IRQHandler+0x540>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03e      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2210      	movs	r2, #16
 8003e02:	409a      	lsls	r2, r3
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d024      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
 8003e34:	e01f      	b.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01b      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
 8003e46:	e016      	b.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0208 	bic.w	r2, r2, #8
 8003e64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2220      	movs	r2, #32
 8003e80:	409a      	lsls	r2, r3
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8110 	beq.w	80040ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <HAL_DMA_IRQHandler+0x690>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d04a      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <HAL_DMA_IRQHandler+0x694>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d045      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_DMA_IRQHandler+0x698>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d040      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_DMA_IRQHandler+0x69c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d03b      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_DMA_IRQHandler+0x6a0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d036      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a25      	ldr	r2, [pc, #148]	; (8003f58 <HAL_DMA_IRQHandler+0x6a4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d031      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_DMA_IRQHandler+0x6a8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02c      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_DMA_IRQHandler+0x6ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d027      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_DMA_IRQHandler+0x6b0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d022      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <HAL_DMA_IRQHandler+0x6b4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01d      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_DMA_IRQHandler+0x6b8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_DMA_IRQHandler+0x6bc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_DMA_IRQHandler+0x6c0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_DMA_IRQHandler+0x6c4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_DMA_IRQHandler+0x6c8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x678>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_DMA_IRQHandler+0x6cc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d12b      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x6d0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e02a      	b.n	8003f98 <HAL_DMA_IRQHandler+0x6e4>
 8003f42:	bf00      	nop
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8087 	beq.w	80040ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d139      	bne.n	800402e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0216 	bic.w	r2, r2, #22
 8003fc8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <HAL_DMA_IRQHandler+0x736>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0208 	bic.w	r2, r2, #8
 8003ff8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	223f      	movs	r2, #63	; 0x3f
 8004004:	409a      	lsls	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8382 	beq.w	8004728 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
          }
          return;
 800402c:	e37c      	b.n	8004728 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d018      	beq.n	800406e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e027      	b.n	80040ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d023      	beq.n	80040ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
 800406c:	e01e      	b.n	80040ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10f      	bne.n	800409c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0210 	bic.w	r2, r2, #16
 800408a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 833e 	beq.w	8004732 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8088 	beq.w	80041d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a89      	ldr	r2, [pc, #548]	; (80042f8 <HAL_DMA_IRQHandler+0xa44>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d04a      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a88      	ldr	r2, [pc, #544]	; (80042fc <HAL_DMA_IRQHandler+0xa48>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d045      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a86      	ldr	r2, [pc, #536]	; (8004300 <HAL_DMA_IRQHandler+0xa4c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d040      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a85      	ldr	r2, [pc, #532]	; (8004304 <HAL_DMA_IRQHandler+0xa50>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d03b      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a83      	ldr	r2, [pc, #524]	; (8004308 <HAL_DMA_IRQHandler+0xa54>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d036      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a82      	ldr	r2, [pc, #520]	; (800430c <HAL_DMA_IRQHandler+0xa58>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d031      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a80      	ldr	r2, [pc, #512]	; (8004310 <HAL_DMA_IRQHandler+0xa5c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d02c      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7f      	ldr	r2, [pc, #508]	; (8004314 <HAL_DMA_IRQHandler+0xa60>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d027      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_DMA_IRQHandler+0xa64>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7c      	ldr	r2, [pc, #496]	; (800431c <HAL_DMA_IRQHandler+0xa68>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d01d      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a7a      	ldr	r2, [pc, #488]	; (8004320 <HAL_DMA_IRQHandler+0xa6c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a79      	ldr	r2, [pc, #484]	; (8004324 <HAL_DMA_IRQHandler+0xa70>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a77      	ldr	r2, [pc, #476]	; (8004328 <HAL_DMA_IRQHandler+0xa74>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a76      	ldr	r2, [pc, #472]	; (800432c <HAL_DMA_IRQHandler+0xa78>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a74      	ldr	r2, [pc, #464]	; (8004330 <HAL_DMA_IRQHandler+0xa7c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_DMA_IRQHandler+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a73      	ldr	r2, [pc, #460]	; (8004334 <HAL_DMA_IRQHandler+0xa80>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <HAL_DMA_IRQHandler+0x8ca>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e007      	b.n	800418e <HAL_DMA_IRQHandler+0x8da>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	429a      	cmp	r2, r3
 8004198:	d307      	bcc.n	80041aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f2      	bne.n	800418e <HAL_DMA_IRQHandler+0x8da>
 80041a8:	e000      	b.n	80041ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041c2:	e003      	b.n	80041cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 82aa 	beq.w	8004732 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
 80041e6:	e2a4      	b.n	8004732 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a52      	ldr	r2, [pc, #328]	; (8004338 <HAL_DMA_IRQHandler+0xa84>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d04a      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a51      	ldr	r2, [pc, #324]	; (800433c <HAL_DMA_IRQHandler+0xa88>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d045      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a4f      	ldr	r2, [pc, #316]	; (8004340 <HAL_DMA_IRQHandler+0xa8c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d040      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4e      	ldr	r2, [pc, #312]	; (8004344 <HAL_DMA_IRQHandler+0xa90>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d03b      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a4c      	ldr	r2, [pc, #304]	; (8004348 <HAL_DMA_IRQHandler+0xa94>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d036      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a4b      	ldr	r2, [pc, #300]	; (800434c <HAL_DMA_IRQHandler+0xa98>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d031      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a49      	ldr	r2, [pc, #292]	; (8004350 <HAL_DMA_IRQHandler+0xa9c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d02c      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a48      	ldr	r2, [pc, #288]	; (8004354 <HAL_DMA_IRQHandler+0xaa0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d027      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a46      	ldr	r2, [pc, #280]	; (8004358 <HAL_DMA_IRQHandler+0xaa4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a45      	ldr	r2, [pc, #276]	; (800435c <HAL_DMA_IRQHandler+0xaa8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d01d      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a43      	ldr	r2, [pc, #268]	; (8004360 <HAL_DMA_IRQHandler+0xaac>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_DMA_IRQHandler+0xab0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <HAL_DMA_IRQHandler+0xab4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3f      	ldr	r2, [pc, #252]	; (800436c <HAL_DMA_IRQHandler+0xab8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a3d      	ldr	r2, [pc, #244]	; (8004370 <HAL_DMA_IRQHandler+0xabc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_IRQHandler+0x9d4>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3c      	ldr	r2, [pc, #240]	; (8004374 <HAL_DMA_IRQHandler+0xac0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_DMA_IRQHandler+0x9d8>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_DMA_IRQHandler+0x9da>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 824f 	beq.w	8004732 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2204      	movs	r2, #4
 80042a6:	409a      	lsls	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80dd 	beq.w	800446c <HAL_DMA_IRQHandler+0xbb8>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80d7 	beq.w	800446c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2204      	movs	r2, #4
 80042c8:	409a      	lsls	r2, r3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d059      	beq.n	800438c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d14a      	bne.n	8004378 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8220 	beq.w	800472c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f4:	e21a      	b.n	800472c <HAL_DMA_IRQHandler+0xe78>
 80042f6:	bf00      	nop
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
 8004338:	48022c08 	.word	0x48022c08
 800433c:	48022c1c 	.word	0x48022c1c
 8004340:	48022c30 	.word	0x48022c30
 8004344:	48022c44 	.word	0x48022c44
 8004348:	48022c58 	.word	0x48022c58
 800434c:	48022c6c 	.word	0x48022c6c
 8004350:	48022c80 	.word	0x48022c80
 8004354:	48022c94 	.word	0x48022c94
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 81d5 	beq.w	800472c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800438a:	e1cf      	b.n	800472c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d160      	bne.n	8004458 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7f      	ldr	r2, [pc, #508]	; (8004598 <HAL_DMA_IRQHandler+0xce4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d04a      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7d      	ldr	r2, [pc, #500]	; (800459c <HAL_DMA_IRQHandler+0xce8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d045      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7c      	ldr	r2, [pc, #496]	; (80045a0 <HAL_DMA_IRQHandler+0xcec>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d040      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a7a      	ldr	r2, [pc, #488]	; (80045a4 <HAL_DMA_IRQHandler+0xcf0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d03b      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a79      	ldr	r2, [pc, #484]	; (80045a8 <HAL_DMA_IRQHandler+0xcf4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d036      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_DMA_IRQHandler+0xcf8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d031      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a76      	ldr	r2, [pc, #472]	; (80045b0 <HAL_DMA_IRQHandler+0xcfc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02c      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a74      	ldr	r2, [pc, #464]	; (80045b4 <HAL_DMA_IRQHandler+0xd00>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d027      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a73      	ldr	r2, [pc, #460]	; (80045b8 <HAL_DMA_IRQHandler+0xd04>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a71      	ldr	r2, [pc, #452]	; (80045bc <HAL_DMA_IRQHandler+0xd08>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a70      	ldr	r2, [pc, #448]	; (80045c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d018      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6e      	ldr	r2, [pc, #440]	; (80045c4 <HAL_DMA_IRQHandler+0xd10>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6d      	ldr	r2, [pc, #436]	; (80045c8 <HAL_DMA_IRQHandler+0xd14>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6b      	ldr	r2, [pc, #428]	; (80045cc <HAL_DMA_IRQHandler+0xd18>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6a      	ldr	r2, [pc, #424]	; (80045d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_IRQHandler+0xb82>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a68      	ldr	r2, [pc, #416]	; (80045d4 <HAL_DMA_IRQHandler+0xd20>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <HAL_DMA_IRQHandler+0xb94>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0208 	bic.w	r2, r2, #8
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e007      	b.n	8004458 <HAL_DMA_IRQHandler+0xba4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8165 	beq.w	800472c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446a:	e15f      	b.n	800472c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2202      	movs	r2, #2
 8004476:	409a      	lsls	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80c5 	beq.w	800460c <HAL_DMA_IRQHandler+0xd58>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80bf 	beq.w	800460c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2202      	movs	r2, #2
 8004498:	409a      	lsls	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 813a 	beq.w	8004730 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c4:	e134      	b.n	8004730 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8130 	beq.w	8004730 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d8:	e12a      	b.n	8004730 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f040 8089 	bne.w	80045f8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <HAL_DMA_IRQHandler+0xce4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d04a      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_DMA_IRQHandler+0xce8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d045      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a28      	ldr	r2, [pc, #160]	; (80045a0 <HAL_DMA_IRQHandler+0xcec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d040      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_DMA_IRQHandler+0xcf0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d03b      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <HAL_DMA_IRQHandler+0xcf4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d036      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a23      	ldr	r2, [pc, #140]	; (80045ac <HAL_DMA_IRQHandler+0xcf8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d031      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <HAL_DMA_IRQHandler+0xcfc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d02c      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_DMA_IRQHandler+0xd00>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d027      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1f      	ldr	r2, [pc, #124]	; (80045b8 <HAL_DMA_IRQHandler+0xd04>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_DMA_IRQHandler+0xd08>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01d      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1c      	ldr	r2, [pc, #112]	; (80045c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <HAL_DMA_IRQHandler+0xd10>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_DMA_IRQHandler+0xd14>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_DMA_IRQHandler+0xd18>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_DMA_IRQHandler+0xcd2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <HAL_DMA_IRQHandler+0xd20>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d128      	bne.n	80045d8 <HAL_DMA_IRQHandler+0xd24>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0214 	bic.w	r2, r2, #20
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e027      	b.n	80045e8 <HAL_DMA_IRQHandler+0xd34>
 8004598:	40020010 	.word	0x40020010
 800459c:	40020028 	.word	0x40020028
 80045a0:	40020040 	.word	0x40020040
 80045a4:	40020058 	.word	0x40020058
 80045a8:	40020070 	.word	0x40020070
 80045ac:	40020088 	.word	0x40020088
 80045b0:	400200a0 	.word	0x400200a0
 80045b4:	400200b8 	.word	0x400200b8
 80045b8:	40020410 	.word	0x40020410
 80045bc:	40020428 	.word	0x40020428
 80045c0:	40020440 	.word	0x40020440
 80045c4:	40020458 	.word	0x40020458
 80045c8:	40020470 	.word	0x40020470
 80045cc:	40020488 	.word	0x40020488
 80045d0:	400204a0 	.word	0x400204a0
 80045d4:	400204b8 	.word	0x400204b8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 020a 	bic.w	r2, r2, #10
 80045e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8097 	beq.w	8004730 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460a:	e091      	b.n	8004730 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2208      	movs	r2, #8
 8004616:	409a      	lsls	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8088 	beq.w	8004732 <HAL_DMA_IRQHandler+0xe7e>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8082 	beq.w	8004732 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a41      	ldr	r2, [pc, #260]	; (8004738 <HAL_DMA_IRQHandler+0xe84>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3f      	ldr	r2, [pc, #252]	; (800473c <HAL_DMA_IRQHandler+0xe88>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3e      	ldr	r2, [pc, #248]	; (8004740 <HAL_DMA_IRQHandler+0xe8c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3c      	ldr	r2, [pc, #240]	; (8004744 <HAL_DMA_IRQHandler+0xe90>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <HAL_DMA_IRQHandler+0xe94>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a39      	ldr	r2, [pc, #228]	; (800474c <HAL_DMA_IRQHandler+0xe98>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a38      	ldr	r2, [pc, #224]	; (8004750 <HAL_DMA_IRQHandler+0xe9c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a36      	ldr	r2, [pc, #216]	; (8004754 <HAL_DMA_IRQHandler+0xea0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a35      	ldr	r2, [pc, #212]	; (8004758 <HAL_DMA_IRQHandler+0xea4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a33      	ldr	r2, [pc, #204]	; (800475c <HAL_DMA_IRQHandler+0xea8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a32      	ldr	r2, [pc, #200]	; (8004760 <HAL_DMA_IRQHandler+0xeac>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a30      	ldr	r2, [pc, #192]	; (8004764 <HAL_DMA_IRQHandler+0xeb0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <HAL_DMA_IRQHandler+0xeb4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_DMA_IRQHandler+0xeb8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2c      	ldr	r2, [pc, #176]	; (8004770 <HAL_DMA_IRQHandler+0xebc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_IRQHandler+0xe1a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_DMA_IRQHandler+0xec0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <HAL_DMA_IRQHandler+0xe2c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 021c 	bic.w	r2, r2, #28
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e007      	b.n	80046f0 <HAL_DMA_IRQHandler+0xe3c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 020e 	bic.w	r2, r2, #14
 80046ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2201      	movs	r2, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e004      	b.n	8004732 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004728:	bf00      	nop
 800472a:	e002      	b.n	8004732 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004730:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004732:	3728      	adds	r7, #40	; 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40020010 	.word	0x40020010
 800473c:	40020028 	.word	0x40020028
 8004740:	40020040 	.word	0x40020040
 8004744:	40020058 	.word	0x40020058
 8004748:	40020070 	.word	0x40020070
 800474c:	40020088 	.word	0x40020088
 8004750:	400200a0 	.word	0x400200a0
 8004754:	400200b8 	.word	0x400200b8
 8004758:	40020410 	.word	0x40020410
 800475c:	40020428 	.word	0x40020428
 8004760:	40020440 	.word	0x40020440
 8004764:	40020458 	.word	0x40020458
 8004768:	40020470 	.word	0x40020470
 800476c:	40020488 	.word	0x40020488
 8004770:	400204a0 	.word	0x400204a0
 8004774:	400204b8 	.word	0x400204b8

08004778 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7f      	ldr	r2, [pc, #508]	; (8004994 <DMA_SetConfig+0x21c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d072      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7d      	ldr	r2, [pc, #500]	; (8004998 <DMA_SetConfig+0x220>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d06d      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7c      	ldr	r2, [pc, #496]	; (800499c <DMA_SetConfig+0x224>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d068      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7a      	ldr	r2, [pc, #488]	; (80049a0 <DMA_SetConfig+0x228>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d063      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a79      	ldr	r2, [pc, #484]	; (80049a4 <DMA_SetConfig+0x22c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d05e      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a77      	ldr	r2, [pc, #476]	; (80049a8 <DMA_SetConfig+0x230>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d059      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a76      	ldr	r2, [pc, #472]	; (80049ac <DMA_SetConfig+0x234>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d054      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a74      	ldr	r2, [pc, #464]	; (80049b0 <DMA_SetConfig+0x238>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04f      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a73      	ldr	r2, [pc, #460]	; (80049b4 <DMA_SetConfig+0x23c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d04a      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a71      	ldr	r2, [pc, #452]	; (80049b8 <DMA_SetConfig+0x240>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d045      	beq.n	8004882 <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a70      	ldr	r2, [pc, #448]	; (80049bc <DMA_SetConfig+0x244>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d040      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6e      	ldr	r2, [pc, #440]	; (80049c0 <DMA_SetConfig+0x248>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d03b      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6d      	ldr	r2, [pc, #436]	; (80049c4 <DMA_SetConfig+0x24c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d036      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6b      	ldr	r2, [pc, #428]	; (80049c8 <DMA_SetConfig+0x250>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d031      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6a      	ldr	r2, [pc, #424]	; (80049cc <DMA_SetConfig+0x254>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d02c      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a68      	ldr	r2, [pc, #416]	; (80049d0 <DMA_SetConfig+0x258>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d027      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a67      	ldr	r2, [pc, #412]	; (80049d4 <DMA_SetConfig+0x25c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a65      	ldr	r2, [pc, #404]	; (80049d8 <DMA_SetConfig+0x260>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01d      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a64      	ldr	r2, [pc, #400]	; (80049dc <DMA_SetConfig+0x264>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a62      	ldr	r2, [pc, #392]	; (80049e0 <DMA_SetConfig+0x268>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a61      	ldr	r2, [pc, #388]	; (80049e4 <DMA_SetConfig+0x26c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5f      	ldr	r2, [pc, #380]	; (80049e8 <DMA_SetConfig+0x270>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5e      	ldr	r2, [pc, #376]	; (80049ec <DMA_SetConfig+0x274>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5c      	ldr	r2, [pc, #368]	; (80049f0 <DMA_SetConfig+0x278>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <DMA_SetConfig+0x10e>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <DMA_SetConfig+0x110>
 8004886:	2300      	movs	r3, #0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004894:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a39      	ldr	r2, [pc, #228]	; (8004994 <DMA_SetConfig+0x21c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d04a      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a38      	ldr	r2, [pc, #224]	; (8004998 <DMA_SetConfig+0x220>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d045      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a36      	ldr	r2, [pc, #216]	; (800499c <DMA_SetConfig+0x224>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d040      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <DMA_SetConfig+0x228>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d03b      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a33      	ldr	r2, [pc, #204]	; (80049a4 <DMA_SetConfig+0x22c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d036      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a32      	ldr	r2, [pc, #200]	; (80049a8 <DMA_SetConfig+0x230>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d031      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a30      	ldr	r2, [pc, #192]	; (80049ac <DMA_SetConfig+0x234>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02c      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <DMA_SetConfig+0x238>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d027      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <DMA_SetConfig+0x23c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <DMA_SetConfig+0x240>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d01d      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <DMA_SetConfig+0x244>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <DMA_SetConfig+0x248>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <DMA_SetConfig+0x24c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <DMA_SetConfig+0x250>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <DMA_SetConfig+0x254>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <DMA_SetConfig+0x1d0>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <DMA_SetConfig+0x258>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <DMA_SetConfig+0x1d4>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <DMA_SetConfig+0x1d6>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d059      	beq.n	8004a06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	223f      	movs	r2, #63	; 0x3f
 800495c:	409a      	lsls	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004970:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d138      	bne.n	80049f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004992:	e0ae      	b.n	8004af2 <DMA_SetConfig+0x37a>
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	58025408 	.word	0x58025408
 80049d8:	5802541c 	.word	0x5802541c
 80049dc:	58025430 	.word	0x58025430
 80049e0:	58025444 	.word	0x58025444
 80049e4:	58025458 	.word	0x58025458
 80049e8:	5802546c 	.word	0x5802546c
 80049ec:	58025480 	.word	0x58025480
 80049f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	e075      	b.n	8004af2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <DMA_SetConfig+0x388>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d04a      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <DMA_SetConfig+0x38c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d045      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	; (8004b08 <DMA_SetConfig+0x390>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d040      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <DMA_SetConfig+0x394>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <DMA_SetConfig+0x398>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d036      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a35      	ldr	r2, [pc, #212]	; (8004b14 <DMA_SetConfig+0x39c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <DMA_SetConfig+0x3a0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d02c      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <DMA_SetConfig+0x3a4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d027      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a31      	ldr	r2, [pc, #196]	; (8004b20 <DMA_SetConfig+0x3a8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <DMA_SetConfig+0x3ac>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2e      	ldr	r2, [pc, #184]	; (8004b28 <DMA_SetConfig+0x3b0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <DMA_SetConfig+0x3b4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <DMA_SetConfig+0x3b8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a29      	ldr	r2, [pc, #164]	; (8004b34 <DMA_SetConfig+0x3bc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <DMA_SetConfig+0x3c0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <DMA_SetConfig+0x32e>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <DMA_SetConfig+0x3c4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <DMA_SetConfig+0x332>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <DMA_SetConfig+0x334>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d108      	bne.n	8004ae2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	60da      	str	r2, [r3, #12]
}
 8004ae0:	e007      	b.n	8004af2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	48022c08 	.word	0x48022c08
 8004b04:	48022c1c 	.word	0x48022c1c
 8004b08:	48022c30 	.word	0x48022c30
 8004b0c:	48022c44 	.word	0x48022c44
 8004b10:	48022c58 	.word	0x48022c58
 8004b14:	48022c6c 	.word	0x48022c6c
 8004b18:	48022c80 	.word	0x48022c80
 8004b1c:	48022c94 	.word	0x48022c94
 8004b20:	58025408 	.word	0x58025408
 8004b24:	5802541c 	.word	0x5802541c
 8004b28:	58025430 	.word	0x58025430
 8004b2c:	58025444 	.word	0x58025444
 8004b30:	58025458 	.word	0x58025458
 8004b34:	5802546c 	.word	0x5802546c
 8004b38:	58025480 	.word	0x58025480
 8004b3c:	58025494 	.word	0x58025494

08004b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a42      	ldr	r2, [pc, #264]	; (8004c58 <DMA_CalcBaseAndBitshift+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a41      	ldr	r2, [pc, #260]	; (8004c5c <DMA_CalcBaseAndBitshift+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3f      	ldr	r2, [pc, #252]	; (8004c60 <DMA_CalcBaseAndBitshift+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <DMA_CalcBaseAndBitshift+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	; (8004c68 <DMA_CalcBaseAndBitshift+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <DMA_CalcBaseAndBitshift+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <DMA_CalcBaseAndBitshift+0x130>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <DMA_CalcBaseAndBitshift+0x134>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a36      	ldr	r2, [pc, #216]	; (8004c78 <DMA_CalcBaseAndBitshift+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a35      	ldr	r2, [pc, #212]	; (8004c7c <DMA_CalcBaseAndBitshift+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a33      	ldr	r2, [pc, #204]	; (8004c80 <DMA_CalcBaseAndBitshift+0x140>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <DMA_CalcBaseAndBitshift+0x144>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	; (8004c88 <DMA_CalcBaseAndBitshift+0x148>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2f      	ldr	r2, [pc, #188]	; (8004c8c <DMA_CalcBaseAndBitshift+0x14c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <DMA_CalcBaseAndBitshift+0x150>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <DMA_CalcBaseAndBitshift+0xa8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <DMA_CalcBaseAndBitshift+0x154>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <DMA_CalcBaseAndBitshift+0xac>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <DMA_CalcBaseAndBitshift+0xae>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d024      	beq.n	8004c3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	3b10      	subs	r3, #16
 8004bfa:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <DMA_CalcBaseAndBitshift+0x158>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <DMA_CalcBaseAndBitshift+0x15c>)
 8004c0c:	5cd3      	ldrb	r3, [r2, r3]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d908      	bls.n	8004c2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <DMA_CalcBaseAndBitshift+0x160>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58
 8004c2a:	e00d      	b.n	8004c48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <DMA_CalcBaseAndBitshift+0x160>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6593      	str	r3, [r2, #88]	; 0x58
 8004c3a:	e005      	b.n	8004c48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
 8004c98:	aaaaaaab 	.word	0xaaaaaaab
 8004c9c:	080094f0 	.word	0x080094f0
 8004ca0:	fffffc00 	.word	0xfffffc00

08004ca4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d120      	bne.n	8004cfa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d858      	bhi.n	8004d72 <DMA_CheckFifoParam+0xce>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <DMA_CheckFifoParam+0x24>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004cd9 	.word	0x08004cd9
 8004cd4:	08004d73 	.word	0x08004d73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d048      	beq.n	8004d76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ce8:	e045      	b.n	8004d76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf2:	d142      	bne.n	8004d7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf8:	e03f      	b.n	8004d7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	d123      	bne.n	8004d4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d838      	bhi.n	8004d7e <DMA_CheckFifoParam+0xda>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <DMA_CheckFifoParam+0x70>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d2b 	.word	0x08004d2b
 8004d1c:	08004d25 	.word	0x08004d25
 8004d20:	08004d3d 	.word	0x08004d3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
        break;
 8004d28:	e030      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d025      	beq.n	8004d82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d3a:	e022      	b.n	8004d82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d44:	d11f      	bne.n	8004d86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d4a:	e01c      	b.n	8004d86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d902      	bls.n	8004d5a <DMA_CheckFifoParam+0xb6>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d003      	beq.n	8004d60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d58:	e018      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5e:	e015      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00e      	beq.n	8004d8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8004d70:	e00b      	b.n	8004d8a <DMA_CheckFifoParam+0xe6>
        break;
 8004d72:	bf00      	nop
 8004d74:	e00a      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d76:	bf00      	nop
 8004d78:	e008      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e006      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <DMA_CheckFifoParam+0xe8>
    break;
 8004d8a:	bf00      	nop
    }
  }

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop

08004d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a38      	ldr	r2, [pc, #224]	; (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a36      	ldr	r2, [pc, #216]	; (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a35      	ldr	r2, [pc, #212]	; (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a33      	ldr	r2, [pc, #204]	; (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a32      	ldr	r2, [pc, #200]	; (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a30      	ldr	r2, [pc, #192]	; (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3b08      	subs	r3, #8
 8004e0c:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e38:	e024      	b.n	8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	3b10      	subs	r3, #16
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d806      	bhi.n	8004e62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d902      	bls.n	8004e62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494
 8004eb0:	cccccccd 	.word	0xcccccccd
 8004eb4:	16009600 	.word	0x16009600
 8004eb8:	58025880 	.word	0x58025880
 8004ebc:	aaaaaaab 	.word	0xaaaaaaab
 8004ec0:	400204b8 	.word	0x400204b8
 8004ec4:	4002040f 	.word	0x4002040f
 8004ec8:	10008200 	.word	0x10008200
 8004ecc:	40020880 	.word	0x40020880

08004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04a      	beq.n	8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d847      	bhi.n	8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a25      	ldr	r2, [pc, #148]	; (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1f      	ldr	r2, [pc, #124]	; (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f58:	671a      	str	r2, [r3, #112]	; 0x70
 8004f5a:	e009      	b.n	8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494
 8004fa8:	1600963f 	.word	0x1600963f
 8004fac:	58025940 	.word	0x58025940
 8004fb0:	1000823f 	.word	0x1000823f
 8004fb4:	40020940 	.word	0x40020940

08004fb8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b098      	sub	sp, #96	; 0x60
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004fc0:	4a84      	ldr	r2, [pc, #528]	; (80051d4 <HAL_FDCAN_Init+0x21c>)
 8004fc2:	f107 030c 	add.w	r3, r7, #12
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	224c      	movs	r2, #76	; 0x4c
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f004 fa48 	bl	8009460 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1c6      	b.n	8005368 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7e      	ldr	r2, [pc, #504]	; (80051d8 <HAL_FDCAN_Init+0x220>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d106      	bne.n	8004ff2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb ff16 	bl	8000e38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0210 	bic.w	r2, r2, #16
 800501a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800501c:	f7fc fb82 	bl	8001724 <HAL_GetTick>
 8005020:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005022:	e014      	b.n	800504e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005024:	f7fc fb7e 	bl	8001724 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b0a      	cmp	r3, #10
 8005030:	d90d      	bls.n	800504e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2203      	movs	r2, #3
 8005046:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e18c      	b.n	8005368 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d0e3      	beq.n	8005024 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800506c:	f7fc fb5a 	bl	8001724 <HAL_GetTick>
 8005070:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005072:	e014      	b.n	800509e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005074:	f7fc fb56 	bl	8001724 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b0a      	cmp	r3, #10
 8005080:	d90d      	bls.n	800509e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e164      	b.n	8005368 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0e3      	beq.n	8005074 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0202 	orr.w	r2, r2, #2
 80050ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d108      	bne.n	80050d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	619a      	str	r2, [r3, #24]
 80050d4:	e007      	b.n	80050e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7c5b      	ldrb	r3, [r3, #17]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d108      	bne.n	8005100 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fc:	619a      	str	r2, [r3, #24]
 80050fe:	e007      	b.n	8005110 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800510e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7c9b      	ldrb	r3, [r3, #18]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d108      	bne.n	800512a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005126:	619a      	str	r2, [r3, #24]
 8005128:	e007      	b.n	800513a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005138:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800515e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0210 	bic.w	r2, r2, #16
 800516e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d108      	bne.n	800518a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0204 	orr.w	r2, r2, #4
 8005186:	619a      	str	r2, [r3, #24]
 8005188:	e030      	b.n	80051ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d02c      	beq.n	80051ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d020      	beq.n	80051dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0210 	orr.w	r2, r2, #16
 80051b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d114      	bne.n	80051ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0220 	orr.w	r2, r2, #32
 80051d0:	619a      	str	r2, [r3, #24]
 80051d2:	e00b      	b.n	80051ec <HAL_FDCAN_Init+0x234>
 80051d4:	08009494 	.word	0x08009494
 80051d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0220 	orr.w	r2, r2, #32
 80051ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005204:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	3b01      	subs	r3, #1
 800520e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005214:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005216:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005220:	d115      	bne.n	800524e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	3b01      	subs	r3, #1
 800522e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005230:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	3b01      	subs	r3, #1
 8005238:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800523a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	3b01      	subs	r3, #1
 8005244:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800524a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800524c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	4413      	add	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005282:	f023 0107 	bic.w	r1, r3, #7
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3360      	adds	r3, #96	; 0x60
 800528e:	443b      	add	r3, r7
 8005290:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d011      	beq.n	80052ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052ae:	f023 0107 	bic.w	r1, r3, #7
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	3360      	adds	r3, #96	; 0x60
 80052ba:	443b      	add	r3, r7
 80052bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	3360      	adds	r3, #96	; 0x60
 80052e6:	443b      	add	r3, r7
 80052e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80052ec:	011a      	lsls	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d012      	beq.n	8005326 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005308:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	3360      	adds	r3, #96	; 0x60
 8005314:	443b      	add	r3, r7
 8005316:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a11      	ldr	r2, [pc, #68]	; (8005370 <HAL_FDCAN_Init+0x3b8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d107      	bne.n	8005340 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f022 0203 	bic.w	r2, r2, #3
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f80b 	bl	8005374 <FDCAN_CalcultateRamBlockAddresses>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005364:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005368:	4618      	mov	r0, r3
 800536a:	3760      	adds	r7, #96	; 0x60
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	4000a000 	.word	0x4000a000

08005374 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800538a:	4ba7      	ldr	r3, [pc, #668]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0091      	lsls	r1, r2, #2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	430b      	orrs	r3, r1
 8005398:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	041a      	lsls	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	4413      	add	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053ca:	4b97      	ldr	r3, [pc, #604]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	0091      	lsls	r1, r2, #2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	430b      	orrs	r3, r1
 80053d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	041a      	lsls	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800540c:	4b86      	ldr	r3, [pc, #536]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0091      	lsls	r1, r2, #2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	430b      	orrs	r3, r1
 800541a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005426:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	041a      	lsls	r2, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005454:	4b74      	ldr	r3, [pc, #464]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005456:	4013      	ands	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	0091      	lsls	r1, r2, #2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	430b      	orrs	r3, r1
 8005462:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800546e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005476:	041a      	lsls	r2, r3, #16
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800549c:	4b62      	ldr	r3, [pc, #392]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0091      	lsls	r1, r2, #2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	430b      	orrs	r3, r1
 80054aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80054c8:	4b57      	ldr	r3, [pc, #348]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	0091      	lsls	r1, r2, #2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	430b      	orrs	r3, r1
 80054d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	041a      	lsls	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	4413      	add	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800550c:	4013      	ands	r3, r2
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0091      	lsls	r1, r2, #2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	430b      	orrs	r3, r1
 8005518:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005524:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552c:	041a      	lsls	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005540:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	061a      	lsls	r2, r3, #24
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005558:	4b34      	ldr	r3, [pc, #208]	; (800562c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800555a:	4413      	add	r3, r2
 800555c:	009a      	lsls	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	4a04      	ldr	r2, [pc, #16]	; (8005630 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d915      	bls.n	8005650 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005624:	e006      	b.n	8005634 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005626:	bf00      	nop
 8005628:	ffff0003 	.word	0xffff0003
 800562c:	10002b00 	.word	0x10002b00
 8005630:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2203      	movs	r2, #3
 8005648:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e010      	b.n	8005672 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e005      	b.n	8005664 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3f3      	bcc.n	8005658 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop

08005680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800568e:	4b89      	ldr	r3, [pc, #548]	; (80058b4 <HAL_GPIO_Init+0x234>)
 8005690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005692:	e194      	b.n	80059be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	2101      	movs	r1, #1
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8186 	beq.w	80059b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d005      	beq.n	80056c4 <HAL_GPIO_Init+0x44>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d130      	bne.n	8005726 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	2203      	movs	r2, #3
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056fa:	2201      	movs	r2, #1
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0201 	and.w	r2, r3, #1
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b03      	cmp	r3, #3
 8005730:	d017      	beq.n	8005762 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	2203      	movs	r2, #3
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d123      	bne.n	80057b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	08da      	lsrs	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3208      	adds	r2, #8
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	220f      	movs	r2, #15
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	08da      	lsrs	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3208      	adds	r2, #8
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	2203      	movs	r2, #3
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0203 	and.w	r2, r3, #3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80e0 	beq.w	80059b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_GPIO_Init+0x238>)
 80057fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057fe:	4a2e      	ldr	r2, [pc, #184]	; (80058b8 <HAL_GPIO_Init+0x238>)
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005808:	4b2b      	ldr	r3, [pc, #172]	; (80058b8 <HAL_GPIO_Init+0x238>)
 800580a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005816:	4a29      	ldr	r2, [pc, #164]	; (80058bc <HAL_GPIO_Init+0x23c>)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	3302      	adds	r3, #2
 800581e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	220f      	movs	r2, #15
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <HAL_GPIO_Init+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d052      	beq.n	80058e8 <HAL_GPIO_Init+0x268>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_GPIO_Init+0x244>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d031      	beq.n	80058ae <HAL_GPIO_Init+0x22e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_GPIO_Init+0x248>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02b      	beq.n	80058aa <HAL_GPIO_Init+0x22a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <HAL_GPIO_Init+0x24c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d025      	beq.n	80058a6 <HAL_GPIO_Init+0x226>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <HAL_GPIO_Init+0x250>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01f      	beq.n	80058a2 <HAL_GPIO_Init+0x222>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_GPIO_Init+0x254>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d019      	beq.n	800589e <HAL_GPIO_Init+0x21e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_GPIO_Init+0x258>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_GPIO_Init+0x21a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <HAL_GPIO_Init+0x25c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00d      	beq.n	8005896 <HAL_GPIO_Init+0x216>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_GPIO_Init+0x260>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <HAL_GPIO_Init+0x212>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <HAL_GPIO_Init+0x264>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_GPIO_Init+0x20e>
 800588a:	2309      	movs	r3, #9
 800588c:	e02d      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 800588e:	230a      	movs	r3, #10
 8005890:	e02b      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 8005892:	2308      	movs	r3, #8
 8005894:	e029      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 8005896:	2307      	movs	r3, #7
 8005898:	e027      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 800589a:	2306      	movs	r3, #6
 800589c:	e025      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 800589e:	2305      	movs	r3, #5
 80058a0:	e023      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 80058a2:	2304      	movs	r3, #4
 80058a4:	e021      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 80058a6:	2303      	movs	r3, #3
 80058a8:	e01f      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e01d      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e01b      	b.n	80058ea <HAL_GPIO_Init+0x26a>
 80058b2:	bf00      	nop
 80058b4:	58000080 	.word	0x58000080
 80058b8:	58024400 	.word	0x58024400
 80058bc:	58000400 	.word	0x58000400
 80058c0:	58020000 	.word	0x58020000
 80058c4:	58020400 	.word	0x58020400
 80058c8:	58020800 	.word	0x58020800
 80058cc:	58020c00 	.word	0x58020c00
 80058d0:	58021000 	.word	0x58021000
 80058d4:	58021400 	.word	0x58021400
 80058d8:	58021800 	.word	0x58021800
 80058dc:	58021c00 	.word	0x58021c00
 80058e0:	58022000 	.word	0x58022000
 80058e4:	58022400 	.word	0x58022400
 80058e8:	2300      	movs	r3, #0
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	f002 0203 	and.w	r2, r2, #3
 80058f0:	0092      	lsls	r2, r2, #2
 80058f2:	4093      	lsls	r3, r2
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058fa:	4938      	ldr	r1, [pc, #224]	; (80059dc <HAL_GPIO_Init+0x35c>)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	3302      	adds	r3, #2
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	43db      	mvns	r3, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	43db      	mvns	r3, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f ae63 	bne.w	8005694 <HAL_GPIO_Init+0x14>
  }
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	3724      	adds	r7, #36	; 0x24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	58000400 	.word	0x58000400

080059e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e07f      	b.n	8005af2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fae6 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e006      	b.n	8005a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d104      	bne.n	8005a7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_I2C_Init+0x11c>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	02008000 	.word	0x02008000

08005b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d138      	bne.n	8005b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e032      	b.n	8005b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d139      	bne.n	8005c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e033      	b.n	8005c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2224      	movs	r2, #36	; 0x24
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d00a      	beq.n	8005c5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d001      	beq.n	8005c56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e01f      	b.n	8005c96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e01d      	b.n	8005c96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f023 0207 	bic.w	r2, r3, #7
 8005c62:	490f      	ldr	r1, [pc, #60]	; (8005ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c6a:	f7fb fd5b 	bl	8001724 <HAL_GetTick>
 8005c6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c70:	e009      	b.n	8005c86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c72:	f7fb fd57 	bl	8001724 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c80:	d901      	bls.n	8005c86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e007      	b.n	8005c96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d1ee      	bne.n	8005c72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	58024800 	.word	0x58024800

08005ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f000 bc1f 	b.w	80064f6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80b3 	beq.w	8005e2c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc6:	4b95      	ldr	r3, [pc, #596]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cd0:	4b92      	ldr	r3, [pc, #584]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d007      	beq.n	8005cec <HAL_RCC_OscConfig+0x48>
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	2b18      	cmp	r3, #24
 8005ce0:	d112      	bne.n	8005d08 <HAL_RCC_OscConfig+0x64>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d10d      	bne.n	8005d08 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	4b8b      	ldr	r3, [pc, #556]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8098 	beq.w	8005e2a <HAL_RCC_OscConfig+0x186>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 8093 	bne.w	8005e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e3f6      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d106      	bne.n	8005d20 <HAL_RCC_OscConfig+0x7c>
 8005d12:	4b82      	ldr	r3, [pc, #520]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a81      	ldr	r2, [pc, #516]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e058      	b.n	8005dd2 <HAL_RCC_OscConfig+0x12e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d112      	bne.n	8005d4e <HAL_RCC_OscConfig+0xaa>
 8005d28:	4b7c      	ldr	r3, [pc, #496]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a7b      	ldr	r2, [pc, #492]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b79      	ldr	r3, [pc, #484]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a78      	ldr	r2, [pc, #480]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	4b76      	ldr	r3, [pc, #472]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a75      	ldr	r2, [pc, #468]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e041      	b.n	8005dd2 <HAL_RCC_OscConfig+0x12e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d56:	d112      	bne.n	8005d7e <HAL_RCC_OscConfig+0xda>
 8005d58:	4b70      	ldr	r3, [pc, #448]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6f      	ldr	r2, [pc, #444]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	4b6d      	ldr	r3, [pc, #436]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a6c      	ldr	r2, [pc, #432]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e029      	b.n	8005dd2 <HAL_RCC_OscConfig+0x12e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005d86:	d112      	bne.n	8005dae <HAL_RCC_OscConfig+0x10a>
 8005d88:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a60      	ldr	r2, [pc, #384]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	4b5e      	ldr	r3, [pc, #376]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a5d      	ldr	r2, [pc, #372]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e011      	b.n	8005dd2 <HAL_RCC_OscConfig+0x12e>
 8005dae:	4b5b      	ldr	r3, [pc, #364]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a5a      	ldr	r2, [pc, #360]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a57      	ldr	r2, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b55      	ldr	r3, [pc, #340]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a54      	ldr	r2, [pc, #336]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005dcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d013      	beq.n	8005e02 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fb fca3 	bl	8001724 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de2:	f7fb fc9f 	bl	8001724 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b64      	cmp	r3, #100	; 0x64
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e380      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005df4:	4b49      	ldr	r3, [pc, #292]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x13e>
 8005e00:	e014      	b.n	8005e2c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fb fc8f 	bl	8001724 <HAL_GetTick>
 8005e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0a:	f7fb fc8b 	bl	8001724 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b64      	cmp	r3, #100	; 0x64
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e36c      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0x166>
 8005e28:	e000      	b.n	8005e2c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 808c 	beq.w	8005f52 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e3a:	4b38      	ldr	r3, [pc, #224]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e44:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <HAL_RCC_OscConfig+0x1bc>
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2b18      	cmp	r3, #24
 8005e54:	d137      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x222>
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d132      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_OscConfig+0x1d4>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e33e      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f023 0219 	bic.w	r2, r3, #25
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4925      	ldr	r1, [pc, #148]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fb fc4b 	bl	8001724 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fb fc47 	bl	8001724 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e328      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	4917      	ldr	r1, [pc, #92]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec4:	e045      	b.n	8005f52 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d028      	beq.n	8005f20 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 0219 	bic.w	r2, r3, #25
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4910      	ldr	r1, [pc, #64]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fb fc20 	bl	8001724 <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fb fc1c 	bl	8001724 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e2fd      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	061b      	lsls	r3, r3, #24
 8005f14:	4901      	ldr	r1, [pc, #4]	; (8005f1c <HAL_RCC_OscConfig+0x278>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	604b      	str	r3, [r1, #4]
 8005f1a:	e01a      	b.n	8005f52 <HAL_RCC_OscConfig+0x2ae>
 8005f1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f20:	4b97      	ldr	r3, [pc, #604]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a96      	ldr	r2, [pc, #600]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb fbfa 	bl	8001724 <HAL_GetTick>
 8005f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fb fbf6 	bl	8001724 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e2d7      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f46:	4b8e      	ldr	r3, [pc, #568]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d06a      	beq.n	8006034 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b88      	ldr	r3, [pc, #544]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f68:	4b85      	ldr	r3, [pc, #532]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d007      	beq.n	8005f84 <HAL_RCC_OscConfig+0x2e0>
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b18      	cmp	r3, #24
 8005f78:	d11b      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x30e>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d116      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f84:	4b7e      	ldr	r3, [pc, #504]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_OscConfig+0x2f8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e2ac      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f9c:	4b78      	ldr	r3, [pc, #480]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	4975      	ldr	r1, [pc, #468]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fb0:	e040      	b.n	8006034 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d023      	beq.n	8006002 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fba:	4b71      	ldr	r3, [pc, #452]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a70      	ldr	r2, [pc, #448]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc6:	f7fb fbad 	bl	8001724 <HAL_GetTick>
 8005fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fce:	f7fb fba9 	bl	8001724 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e28a      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe0:	4b67      	ldr	r3, [pc, #412]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fec:	4b64      	ldr	r3, [pc, #400]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	061b      	lsls	r3, r3, #24
 8005ffa:	4961      	ldr	r1, [pc, #388]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60cb      	str	r3, [r1, #12]
 8006000:	e018      	b.n	8006034 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006002:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a5e      	ldr	r2, [pc, #376]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600e:	f7fb fb89 	bl	8001724 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006016:	f7fb fb85 	bl	8001724 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e266      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006028:	4b55      	ldr	r3, [pc, #340]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d036      	beq.n	80060ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006048:	4b4d      	ldr	r3, [pc, #308]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 800604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604c:	4a4c      	ldr	r2, [pc, #304]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fb fb66 	bl	8001724 <HAL_GetTick>
 8006058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605c:	f7fb fb62 	bl	8001724 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e243      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800606e:	4b44      	ldr	r3, [pc, #272]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x3b8>
 800607a:	e018      	b.n	80060ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b40      	ldr	r3, [pc, #256]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 800607e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006080:	4a3f      	ldr	r2, [pc, #252]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fb fb4c 	bl	8001724 <HAL_GetTick>
 800608c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006090:	f7fb fb48 	bl	8001724 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e229      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d036      	beq.n	8006128 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d019      	beq.n	80060f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060c2:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060ce:	f7fb fb29 	bl	8001724 <HAL_GetTick>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060d6:	f7fb fb25 	bl	8001724 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e206      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x432>
 80060f4:	e018      	b.n	8006128 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 80060fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006102:	f7fb fb0f 	bl	8001724 <HAL_GetTick>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800610a:	f7fb fb0b 	bl	8001724 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e1ec      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f0      	bne.n	800610a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80af 	beq.w	8006294 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCC_OscConfig+0x4e0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_RCC_OscConfig+0x4e0>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006142:	f7fb faef 	bl	8001724 <HAL_GetTick>
 8006146:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614a:	f7fb faeb 	bl	8001724 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b64      	cmp	r3, #100	; 0x64
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e1cc      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_OscConfig+0x4e0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d10b      	bne.n	8006188 <HAL_RCC_OscConfig+0x4e4>
 8006170:	4b03      	ldr	r3, [pc, #12]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a02      	ldr	r2, [pc, #8]	; (8006180 <HAL_RCC_OscConfig+0x4dc>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	e05b      	b.n	8006236 <HAL_RCC_OscConfig+0x592>
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
 8006184:	58024800 	.word	0x58024800
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d112      	bne.n	80061b6 <HAL_RCC_OscConfig+0x512>
 8006190:	4b9d      	ldr	r3, [pc, #628]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a9c      	ldr	r2, [pc, #624]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
 800619c:	4b9a      	ldr	r3, [pc, #616]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a99      	ldr	r2, [pc, #612]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
 80061a8:	4b97      	ldr	r3, [pc, #604]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	4a96      	ldr	r2, [pc, #600]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061ae:	f023 0304 	bic.w	r3, r3, #4
 80061b2:	6713      	str	r3, [r2, #112]	; 0x70
 80061b4:	e03f      	b.n	8006236 <HAL_RCC_OscConfig+0x592>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d112      	bne.n	80061e4 <HAL_RCC_OscConfig+0x540>
 80061be:	4b92      	ldr	r3, [pc, #584]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	4a91      	ldr	r2, [pc, #580]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ca:	4b8f      	ldr	r3, [pc, #572]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	4a8e      	ldr	r2, [pc, #568]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d4:	6713      	str	r3, [r2, #112]	; 0x70
 80061d6:	4b8c      	ldr	r3, [pc, #560]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a8b      	ldr	r2, [pc, #556]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
 80061e2:	e028      	b.n	8006236 <HAL_RCC_OscConfig+0x592>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b85      	cmp	r3, #133	; 0x85
 80061ea:	d112      	bne.n	8006212 <HAL_RCC_OscConfig+0x56e>
 80061ec:	4b86      	ldr	r3, [pc, #536]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	4a85      	ldr	r2, [pc, #532]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
 80061f8:	4b83      	ldr	r3, [pc, #524]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a82      	ldr	r2, [pc, #520]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
 8006204:	4b80      	ldr	r3, [pc, #512]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a7f      	ldr	r2, [pc, #508]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
 8006210:	e011      	b.n	8006236 <HAL_RCC_OscConfig+0x592>
 8006212:	4b7d      	ldr	r3, [pc, #500]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	6713      	str	r3, [r2, #112]	; 0x70
 800621e:	4b7a      	ldr	r3, [pc, #488]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	4a79      	ldr	r2, [pc, #484]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	6713      	str	r3, [r2, #112]	; 0x70
 800622a:	4b77      	ldr	r3, [pc, #476]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a76      	ldr	r2, [pc, #472]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d015      	beq.n	800626a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623e:	f7fb fa71 	bl	8001724 <HAL_GetTick>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006244:	e00a      	b.n	800625c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006246:	f7fb fa6d 	bl	8001724 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f241 3288 	movw	r2, #5000	; 0x1388
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e14c      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800625c:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0ee      	beq.n	8006246 <HAL_RCC_OscConfig+0x5a2>
 8006268:	e014      	b.n	8006294 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626a:	f7fb fa5b 	bl	8001724 <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006270:	e00a      	b.n	8006288 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006272:	f7fb fa57 	bl	8001724 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e136      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006288:	4b5f      	ldr	r3, [pc, #380]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ee      	bne.n	8006272 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 812b 	beq.w	80064f4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800629e:	4b5a      	ldr	r3, [pc, #360]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062a6:	2b18      	cmp	r3, #24
 80062a8:	f000 80bb 	beq.w	8006422 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	f040 8095 	bne.w	80063e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b6:	4b54      	ldr	r3, [pc, #336]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a53      	ldr	r2, [pc, #332]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c2:	f7fb fa2f 	bl	8001724 <HAL_GetTick>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ca:	f7fb fa2b 	bl	8001724 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e10c      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062dc:	4b4a      	ldr	r3, [pc, #296]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062e8:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ec:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCC_OscConfig+0x768>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	430a      	orrs	r2, r1
 80062fc:	4942      	ldr	r1, [pc, #264]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	628b      	str	r3, [r1, #40]	; 0x28
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	3b01      	subs	r3, #1
 8006308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	3b01      	subs	r3, #1
 8006312:	025b      	lsls	r3, r3, #9
 8006314:	b29b      	uxth	r3, r3
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	3b01      	subs	r3, #1
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	3b01      	subs	r3, #1
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006332:	4935      	ldr	r1, [pc, #212]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006334:	4313      	orrs	r3, r2
 8006336:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006338:	4b33      	ldr	r3, [pc, #204]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a32      	ldr	r2, [pc, #200]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006344:	4b30      	ldr	r3, [pc, #192]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006348:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_RCC_OscConfig+0x76c>)
 800634a:	4013      	ands	r3, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	492d      	ldr	r1, [pc, #180]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006354:	4313      	orrs	r3, r2
 8006356:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006358:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	f023 020c 	bic.w	r2, r3, #12
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	4928      	ldr	r1, [pc, #160]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006366:	4313      	orrs	r3, r2
 8006368:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800636a:	4b27      	ldr	r3, [pc, #156]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	f023 0202 	bic.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	4924      	ldr	r1, [pc, #144]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006378:	4313      	orrs	r3, r2
 800637a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800637c:	4b22      	ldr	r3, [pc, #136]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	4a21      	ldr	r2, [pc, #132]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006388:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a1e      	ldr	r2, [pc, #120]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800638e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006394:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 800639a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800639e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a18      	ldr	r2, [pc, #96]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ac:	4b16      	ldr	r3, [pc, #88]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fb f9b4 	bl	8001724 <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fb f9b0 	bl	8001724 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e091      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x71c>
 80063de:	e089      	b.n	80064f4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a08      	ldr	r2, [pc, #32]	; (8006408 <HAL_RCC_OscConfig+0x764>)
 80063e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fb f99a 	bl	8001724 <HAL_GetTick>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f2:	e00f      	b.n	8006414 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fb f996 	bl	8001724 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d908      	bls.n	8006414 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e077      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
 8006406:	bf00      	nop
 8006408:	58024400 	.word	0x58024400
 800640c:	fffffc0c 	.word	0xfffffc0c
 8006410:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006414:	4b3a      	ldr	r3, [pc, #232]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e9      	bne.n	80063f4 <HAL_RCC_OscConfig+0x750>
 8006420:	e068      	b.n	80064f4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006422:	4b37      	ldr	r3, [pc, #220]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006428:	4b35      	ldr	r3, [pc, #212]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2b01      	cmp	r3, #1
 8006434:	d031      	beq.n	800649a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f003 0203 	and.w	r2, r3, #3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d12a      	bne.n	800649a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d122      	bne.n	800649a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d11a      	bne.n	800649a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	0a5b      	lsrs	r3, r3, #9
 8006468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006470:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d111      	bne.n	800649a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d108      	bne.n	800649a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	0e1b      	lsrs	r3, r3, #24
 800648c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d001      	beq.n	800649e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02b      	b.n	80064f6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800649e:	4b18      	ldr	r3, [pc, #96]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064a8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d01f      	beq.n	80064f4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064c0:	f7fb f930 	bl	8001724 <HAL_GetTick>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064c6:	bf00      	nop
 80064c8:	f7fb f92c 	bl	8001724 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d0f9      	beq.n	80064c8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCC_OscConfig+0x860>)
 80064da:	4013      	ands	r3, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064e0:	00d2      	lsls	r2, r2, #3
 80064e2:	4907      	ldr	r1, [pc, #28]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <HAL_RCC_OscConfig+0x85c>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	ffff0007 	.word	0xffff0007

08006508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e19c      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800651c:	4b8a      	ldr	r3, [pc, #552]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d910      	bls.n	800654c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b87      	ldr	r3, [pc, #540]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 020f 	bic.w	r2, r3, #15
 8006532:	4985      	ldr	r1, [pc, #532]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b83      	ldr	r3, [pc, #524]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e184      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	4b7b      	ldr	r3, [pc, #492]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006564:	429a      	cmp	r2, r3
 8006566:	d908      	bls.n	800657a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006568:	4b78      	ldr	r3, [pc, #480]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4975      	ldr	r1, [pc, #468]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006576:	4313      	orrs	r3, r2
 8006578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	4b70      	ldr	r3, [pc, #448]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006592:	429a      	cmp	r2, r3
 8006594:	d908      	bls.n	80065a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006596:	4b6d      	ldr	r3, [pc, #436]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	496a      	ldr	r1, [pc, #424]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d010      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	4b64      	ldr	r3, [pc, #400]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d908      	bls.n	80065d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065c4:	4b61      	ldr	r3, [pc, #388]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	495e      	ldr	r1, [pc, #376]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d010      	beq.n	8006604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	4b59      	ldr	r3, [pc, #356]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d908      	bls.n	8006604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065f2:	4b56      	ldr	r3, [pc, #344]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4953      	ldr	r1, [pc, #332]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006600:	4313      	orrs	r3, r2
 8006602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	4b4d      	ldr	r3, [pc, #308]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	429a      	cmp	r2, r3
 800661e:	d908      	bls.n	8006632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006620:	4b4a      	ldr	r3, [pc, #296]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f023 020f 	bic.w	r2, r3, #15
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4947      	ldr	r1, [pc, #284]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d055      	beq.n	80066ea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800663e:	4b43      	ldr	r3, [pc, #268]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	4940      	ldr	r1, [pc, #256]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800664c:	4313      	orrs	r3, r2
 800664e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d107      	bne.n	8006668 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006658:	4b3c      	ldr	r3, [pc, #240]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d121      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0f6      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d107      	bne.n	8006680 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d115      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0ea      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0de      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	4b2c      	ldr	r3, [pc, #176]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0d6      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f023 0207 	bic.w	r2, r3, #7
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4925      	ldr	r1, [pc, #148]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ba:	f7fb f833 	bl	8001724 <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c0:	e00a      	b.n	80066d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c2:	f7fb f82f 	bl	8001724 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e0be      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d1eb      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006706:	4b11      	ldr	r3, [pc, #68]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f023 020f 	bic.w	r2, r3, #15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	490e      	ldr	r1, [pc, #56]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006714:	4313      	orrs	r3, r2
 8006716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d214      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f023 020f 	bic.w	r2, r3, #15
 800672e:	4906      	ldr	r1, [pc, #24]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e086      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
 8006748:	52002000 	.word	0x52002000
 800674c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d010      	beq.n	800677e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006768:	429a      	cmp	r2, r3
 800676a:	d208      	bcs.n	800677e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800676c:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4939      	ldr	r1, [pc, #228]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800677a:	4313      	orrs	r3, r2
 800677c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d010      	beq.n	80067ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	4b34      	ldr	r3, [pc, #208]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006796:	429a      	cmp	r2, r3
 8006798:	d208      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	492e      	ldr	r1, [pc, #184]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d010      	beq.n	80067da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	4b28      	ldr	r3, [pc, #160]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d208      	bcs.n	80067da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	4922      	ldr	r1, [pc, #136]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d208      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4917      	ldr	r1, [pc, #92]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006804:	4313      	orrs	r3, r2
 8006806:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006808:	f000 f834 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 800680c:	4602      	mov	r2, r0
 800680e:	4b14      	ldr	r3, [pc, #80]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	4912      	ldr	r1, [pc, #72]	; (8006864 <HAL_RCC_ClockConfig+0x35c>)
 800681a:	5ccb      	ldrb	r3, [r1, r3]
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
 8006824:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006826:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <HAL_RCC_ClockConfig+0x35c>)
 8006830:	5cd3      	ldrb	r3, [r2, r3]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x360>)
 800683e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <HAL_RCC_ClockConfig+0x364>)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x368>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fa ff20 	bl	8001690 <HAL_InitTick>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
 8006864:	080094e0 	.word	0x080094e0
 8006868:	24000004 	.word	0x24000004
 800686c:	24000000 	.word	0x24000000
 8006870:	24000008 	.word	0x24000008

08006874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	; 0x24
 8006878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800687a:	4bb3      	ldr	r3, [pc, #716]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006882:	2b18      	cmp	r3, #24
 8006884:	f200 8155 	bhi.w	8006b32 <HAL_RCC_GetSysClockFreq+0x2be>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068f5 	.word	0x080068f5
 8006894:	08006b33 	.word	0x08006b33
 8006898:	08006b33 	.word	0x08006b33
 800689c:	08006b33 	.word	0x08006b33
 80068a0:	08006b33 	.word	0x08006b33
 80068a4:	08006b33 	.word	0x08006b33
 80068a8:	08006b33 	.word	0x08006b33
 80068ac:	08006b33 	.word	0x08006b33
 80068b0:	0800691b 	.word	0x0800691b
 80068b4:	08006b33 	.word	0x08006b33
 80068b8:	08006b33 	.word	0x08006b33
 80068bc:	08006b33 	.word	0x08006b33
 80068c0:	08006b33 	.word	0x08006b33
 80068c4:	08006b33 	.word	0x08006b33
 80068c8:	08006b33 	.word	0x08006b33
 80068cc:	08006b33 	.word	0x08006b33
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006b33 	.word	0x08006b33
 80068d8:	08006b33 	.word	0x08006b33
 80068dc:	08006b33 	.word	0x08006b33
 80068e0:	08006b33 	.word	0x08006b33
 80068e4:	08006b33 	.word	0x08006b33
 80068e8:	08006b33 	.word	0x08006b33
 80068ec:	08006b33 	.word	0x08006b33
 80068f0:	08006927 	.word	0x08006927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068f4:	4b94      	ldr	r3, [pc, #592]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006900:	4b91      	ldr	r3, [pc, #580]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	08db      	lsrs	r3, r3, #3
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	4a90      	ldr	r2, [pc, #576]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006912:	e111      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006914:	4b8d      	ldr	r3, [pc, #564]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006916:	61bb      	str	r3, [r7, #24]
      break;
 8006918:	e10e      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800691a:	4b8d      	ldr	r3, [pc, #564]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800691c:	61bb      	str	r3, [r7, #24]
      break;
 800691e:	e10b      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006920:	4b8c      	ldr	r3, [pc, #560]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006922:	61bb      	str	r3, [r7, #24]
      break;
 8006924:	e108      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006926:	4b88      	ldr	r3, [pc, #544]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006930:	4b85      	ldr	r3, [pc, #532]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800693c:	4b82      	ldr	r3, [pc, #520]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006946:	4b80      	ldr	r3, [pc, #512]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80e1 	beq.w	8006b2c <HAL_RCC_GetSysClockFreq+0x2b8>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f000 8083 	beq.w	8006a78 <HAL_RCC_GetSysClockFreq+0x204>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b02      	cmp	r3, #2
 8006976:	f200 80a1 	bhi.w	8006abc <HAL_RCC_GetSysClockFreq+0x248>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x114>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d056      	beq.n	8006a34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006986:	e099      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006988:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d02d      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006994:	4b6c      	ldr	r3, [pc, #432]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	08db      	lsrs	r3, r3, #3
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	4a6b      	ldr	r2, [pc, #428]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
 80069a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b62      	ldr	r3, [pc, #392]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80069d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069ee:	e087      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b5c <HAL_RCC_GetSysClockFreq+0x2e8>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b51      	ldr	r3, [pc, #324]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a32:	e065      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a46:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a76:	e043      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aba:	e021      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b1e      	ldr	r3, [pc, #120]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006afe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	0a5b      	lsrs	r3, r3, #9
 8006b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b24:	ee17 3a90 	vmov	r3, s15
 8006b28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b2a:	e005      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
      break;
 8006b30:	e002      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b34:	61bb      	str	r3, [r7, #24]
      break;
 8006b36:	bf00      	nop
  }

  return sysclockfreq;
 8006b38:	69bb      	ldr	r3, [r7, #24]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3724      	adds	r7, #36	; 0x24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	03d09000 	.word	0x03d09000
 8006b50:	003d0900 	.word	0x003d0900
 8006b54:	016e3600 	.word	0x016e3600
 8006b58:	46000000 	.word	0x46000000
 8006b5c:	4c742400 	.word	0x4c742400
 8006b60:	4a742400 	.word	0x4a742400
 8006b64:	4bb71b00 	.word	0x4bb71b00

08006b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006b6e:	f7ff fe81 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	490f      	ldr	r1, [pc, #60]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8006b80:	5ccb      	ldrb	r3, [r1, r3]
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8006b96:	5cd3      	ldrb	r3, [r2, r3]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	4a07      	ldr	r2, [pc, #28]	; (8006bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ba6:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	080094e0 	.word	0x080094e0
 8006bc0:	24000004 	.word	0x24000004
 8006bc4:	24000000 	.word	0x24000000

08006bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006bcc:	f7ff ffcc 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bde:	5ccb      	ldrb	r3, [r1, r3]
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	080094e0 	.word	0x080094e0

08006bf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf8:	b0c8      	sub	sp, #288	; 0x120
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006c18:	2500      	movs	r5, #0
 8006c1a:	ea54 0305 	orrs.w	r3, r4, r5
 8006c1e:	d049      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c2a:	d02f      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c30:	d828      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c36:	d01a      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c3c:	d822      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c46:	d007      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c48:	e01c      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4a:	4ba7      	ldr	r3, [pc, #668]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4aa6      	ldr	r2, [pc, #664]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c56:	e01a      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	2102      	movs	r1, #2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 fa6d 	bl	8009140 <RCCEx_PLL2_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c6c:	e00f      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c72:	3328      	adds	r3, #40	; 0x28
 8006c74:	2102      	movs	r1, #2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f002 fb14 	bl	80092a4 <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c82:	e004      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c8a:	e000      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c96:	4b94      	ldr	r3, [pc, #592]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca4:	4a90      	ldr	r2, [pc, #576]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	6513      	str	r3, [r2, #80]	; 0x50
 8006caa:	e003      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006cc0:	f04f 0900 	mov.w	r9, #0
 8006cc4:	ea58 0309 	orrs.w	r3, r8, r9
 8006cc8:	d047      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d82a      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006cff 	.word	0x08006cff
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d33 	.word	0x08006d33
 8006cec:	08006d33 	.word	0x08006d33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf0:	4b7d      	ldr	r3, [pc, #500]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4a7c      	ldr	r2, [pc, #496]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e01a      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d02:	3308      	adds	r3, #8
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f002 fa1a 	bl	8009140 <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d12:	e00f      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d18:	3328      	adds	r3, #40	; 0x28
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f002 fac1 	bl	80092a4 <RCCEx_PLL3_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d28:	e004      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d30:	e000      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d3c:	4b6a      	ldr	r3, [pc, #424]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	f023 0107 	bic.w	r1, r3, #7
 8006d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4a:	4a67      	ldr	r2, [pc, #412]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d50:	e003      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006d66:	f04f 0b00 	mov.w	fp, #0
 8006d6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d6e:	d054      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006d7a:	d036      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006d7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006d80:	d82f      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d032      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8c:	d829      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d90:	d02f      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006d92:	2bc0      	cmp	r3, #192	; 0xc0
 8006d94:	d825      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d018      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006d9a:	2b80      	cmp	r3, #128	; 0x80
 8006d9c:	d821      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d007      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006da6:	e01c      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da8:	4b4f      	ldr	r3, [pc, #316]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	4a4e      	ldr	r2, [pc, #312]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006db4:	e01e      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dba:	3308      	adds	r3, #8
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 f9be 	bl	8009140 <RCCEx_PLL2_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006dca:	e013      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd0:	3328      	adds	r3, #40	; 0x28
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fa65 	bl	80092a4 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006de0:	e008      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	4a37      	ldr	r2, [pc, #220]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e10:	e003      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006e34:	460b      	mov	r3, r1
 8006e36:	4313      	orrs	r3, r2
 8006e38:	d05c      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e40:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006e44:	d03b      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e46:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006e4a:	d834      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e50:	d037      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e56:	d82e      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006e58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e5c:	d033      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e62:	d828      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e68:	d01a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6e:	d822      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e78:	d007      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006e7a:	e01c      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006e88:	e01e      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8e:	3308      	adds	r3, #8
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f002 f954 	bl	8009140 <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006e9e:	e013      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea4:	3328      	adds	r3, #40	; 0x28
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f002 f9fb 	bl	80092a4 <RCCEx_PLL3_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ebc:	e004      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006ebe:	bf00      	nop
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10d      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	4a02      	ldr	r2, [pc, #8]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ee4:	e006      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ef0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d03a      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	2b30      	cmp	r3, #48	; 0x30
 8006f1c:	d01f      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	d819      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d00c      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d815      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d019      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d111      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f32:	4bae      	ldr	r3, [pc, #696]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4aad      	ldr	r2, [pc, #692]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006f3e:	e011      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f44:	3308      	adds	r3, #8
 8006f46:	2102      	movs	r1, #2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 f8f9 	bl	8009140 <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006f54:	e006      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f6c:	4b9f      	ldr	r3, [pc, #636]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	4a9c      	ldr	r2, [pc, #624]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f80:	e003      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006f96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fa0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d051      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb4:	d035      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fba:	d82e      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006fbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fc0:	d031      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fc6:	d828      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fcc:	d01a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd2:	d822      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fdc:	d007      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006fde:	e01c      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe0:	4b82      	ldr	r3, [pc, #520]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a81      	ldr	r2, [pc, #516]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fec:	e01c      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 f8a2 	bl	8009140 <RCCEx_PLL2_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007002:	e011      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007008:	3328      	adds	r3, #40	; 0x28
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f002 f949 	bl	80092a4 <RCCEx_PLL3_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007018:	e006      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007020:	e002      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007022:	bf00      	nop
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007030:	4b6e      	ldr	r3, [pc, #440]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007034:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800703c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703e:	4a6b      	ldr	r2, [pc, #428]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007040:	430b      	orrs	r3, r1
 8007042:	6513      	str	r3, [r2, #80]	; 0x50
 8007044:	e003      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007046:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800704a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800704e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800705a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800705e:	2300      	movs	r3, #0
 8007060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007064:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007068:	460b      	mov	r3, r1
 800706a:	4313      	orrs	r3, r2
 800706c:	d053      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800706e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007078:	d033      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800707a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800707e:	d82c      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007084:	d02f      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800708a:	d826      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800708c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007090:	d02b      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007092:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007096:	d820      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709c:	d012      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800709e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a2:	d81a      	bhi.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d022      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ac:	d115      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b2:	3308      	adds	r3, #8
 80070b4:	2101      	movs	r1, #1
 80070b6:	4618      	mov	r0, r3
 80070b8:	f002 f842 	bl	8009140 <RCCEx_PLL2_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070c2:	e015      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c8:	3328      	adds	r3, #40	; 0x28
 80070ca:	2101      	movs	r1, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f8e9 	bl	80092a4 <RCCEx_PLL3_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070d8:	e00a      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80070e2:	bf00      	nop
 80070e4:	e004      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80070e6:	bf00      	nop
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80070ea:	bf00      	nop
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80070ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070f8:	4b3c      	ldr	r3, [pc, #240]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007106:	4a39      	ldr	r2, [pc, #228]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007108:	430b      	orrs	r3, r1
 800710a:	6513      	str	r3, [r2, #80]	; 0x50
 800710c:	e003      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007112:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800712c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007130:	460b      	mov	r3, r1
 8007132:	4313      	orrs	r3, r2
 8007134:	d060      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800713a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800713e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007142:	d039      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007144:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007148:	d832      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800714a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800714e:	d035      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007154:	d82c      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715a:	d031      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d826      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007162:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007166:	d02d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007168:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800716c:	d820      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007172:	d012      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007178:	d81a      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d024      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800717e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007182:	d115      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007188:	3308      	adds	r3, #8
 800718a:	2101      	movs	r1, #1
 800718c:	4618      	mov	r0, r3
 800718e:	f001 ffd7 	bl	8009140 <RCCEx_PLL2_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007198:	e017      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719e:	3328      	adds	r3, #40	; 0x28
 80071a0:	2101      	movs	r1, #1
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 f87e 	bl	80092a4 <RCCEx_PLL3_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071ae:	e00c      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071b6:	e008      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071b8:	bf00      	nop
 80071ba:	e006      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071bc:	bf00      	nop
 80071be:	e004      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10e      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80071da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071e2:	4a02      	ldr	r2, [pc, #8]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6593      	str	r3, [r2, #88]	; 0x58
 80071e8:	e006      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800720e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d037      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800721c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007222:	d00e      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007228:	d816      	bhi.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007232:	d111      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4bc4      	ldr	r3, [pc, #784]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4ac3      	ldr	r2, [pc, #780]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007240:	e00f      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007246:	3308      	adds	r3, #8
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f001 ff78 	bl	8009140 <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007256:	e004      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800725e:	e000      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007262:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800726a:	4bb7      	ldr	r3, [pc, #732]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007278:	4ab3      	ldr	r2, [pc, #716]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727a:	430b      	orrs	r3, r1
 800727c:	6513      	str	r3, [r2, #80]	; 0x50
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007284:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800729e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d039      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072d7 	.word	0x080072d7
 80072c4:	080072f5 	.word	0x080072f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4b9f      	ldr	r3, [pc, #636]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a9e      	ldr	r2, [pc, #632]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072d4:	e00f      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072da:	3308      	adds	r3, #8
 80072dc:	2102      	movs	r1, #2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 ff2e 	bl	8009140 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072ea:	e004      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80072f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072fe:	4b92      	ldr	r3, [pc, #584]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	f023 0103 	bic.w	r1, r3, #3
 8007306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730c:	4a8e      	ldr	r2, [pc, #568]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800730e:	430b      	orrs	r3, r1
 8007310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007312:	e003      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007318:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800732c:	2300      	movs	r3, #0
 800732e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007332:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	f000 8099 	beq.w	8007470 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800733e:	4b83      	ldr	r3, [pc, #524]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a82      	ldr	r2, [pc, #520]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800734a:	f7fa f9eb 	bl	8001724 <HAL_GetTick>
 800734e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007352:	e00b      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007354:	f7fa f9e6 	bl	8001724 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	; 0x64
 8007362:	d903      	bls.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800736a:	e005      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736c:	4b77      	ldr	r3, [pc, #476]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ed      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800737c:	2b00      	cmp	r3, #0
 800737e:	d173      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007380:	4b71      	ldr	r3, [pc, #452]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800738c:	4053      	eors	r3, r2
 800738e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007396:	4b6c      	ldr	r3, [pc, #432]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073a2:	4b69      	ldr	r3, [pc, #420]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	4a68      	ldr	r2, [pc, #416]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073ae:	4b66      	ldr	r3, [pc, #408]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	4a65      	ldr	r2, [pc, #404]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073ba:	4a63      	ldr	r2, [pc, #396]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ce:	d118      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fa f9a8 	bl	8001724 <HAL_GetTick>
 80073d4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d8:	e00d      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073da:	f7fa f9a3 	bl	8001724 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d903      	bls.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80073f4:	e005      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f6:	4b54      	ldr	r3, [pc, #336]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0eb      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d129      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800741a:	d10e      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800741c:	4b4a      	ldr	r3, [pc, #296]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800742c:	091a      	lsrs	r2, r3, #4
 800742e:	4b48      	ldr	r3, [pc, #288]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007430:	4013      	ands	r3, r2
 8007432:	4a45      	ldr	r2, [pc, #276]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007434:	430b      	orrs	r3, r1
 8007436:	6113      	str	r3, [r2, #16]
 8007438:	e005      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800743a:	4b43      	ldr	r3, [pc, #268]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	4a42      	ldr	r2, [pc, #264]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007444:	6113      	str	r3, [r2, #16]
 8007446:	4b40      	ldr	r3, [pc, #256]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007448:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007456:	4a3c      	ldr	r2, [pc, #240]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007458:	430b      	orrs	r3, r1
 800745a:	6713      	str	r3, [r2, #112]	; 0x70
 800745c:	e008      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800745e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007466:	e003      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800746c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f002 0301 	and.w	r3, r2, #1
 800747c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007480:	2300      	movs	r3, #0
 8007482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	f000 8090 	beq.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749a:	2b28      	cmp	r3, #40	; 0x28
 800749c:	d870      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	08007589 	.word	0x08007589
 80074a8:	08007581 	.word	0x08007581
 80074ac:	08007581 	.word	0x08007581
 80074b0:	08007581 	.word	0x08007581
 80074b4:	08007581 	.word	0x08007581
 80074b8:	08007581 	.word	0x08007581
 80074bc:	08007581 	.word	0x08007581
 80074c0:	08007581 	.word	0x08007581
 80074c4:	08007555 	.word	0x08007555
 80074c8:	08007581 	.word	0x08007581
 80074cc:	08007581 	.word	0x08007581
 80074d0:	08007581 	.word	0x08007581
 80074d4:	08007581 	.word	0x08007581
 80074d8:	08007581 	.word	0x08007581
 80074dc:	08007581 	.word	0x08007581
 80074e0:	08007581 	.word	0x08007581
 80074e4:	0800756b 	.word	0x0800756b
 80074e8:	08007581 	.word	0x08007581
 80074ec:	08007581 	.word	0x08007581
 80074f0:	08007581 	.word	0x08007581
 80074f4:	08007581 	.word	0x08007581
 80074f8:	08007581 	.word	0x08007581
 80074fc:	08007581 	.word	0x08007581
 8007500:	08007581 	.word	0x08007581
 8007504:	08007589 	.word	0x08007589
 8007508:	08007581 	.word	0x08007581
 800750c:	08007581 	.word	0x08007581
 8007510:	08007581 	.word	0x08007581
 8007514:	08007581 	.word	0x08007581
 8007518:	08007581 	.word	0x08007581
 800751c:	08007581 	.word	0x08007581
 8007520:	08007581 	.word	0x08007581
 8007524:	08007589 	.word	0x08007589
 8007528:	08007581 	.word	0x08007581
 800752c:	08007581 	.word	0x08007581
 8007530:	08007581 	.word	0x08007581
 8007534:	08007581 	.word	0x08007581
 8007538:	08007581 	.word	0x08007581
 800753c:	08007581 	.word	0x08007581
 8007540:	08007581 	.word	0x08007581
 8007544:	08007589 	.word	0x08007589
 8007548:	58024400 	.word	0x58024400
 800754c:	58024800 	.word	0x58024800
 8007550:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007558:	3308      	adds	r3, #8
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fdef 	bl	8009140 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007568:	e00f      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756e:	3328      	adds	r3, #40	; 0x28
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fe96 	bl	80092a4 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800757e:	e004      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007592:	4bc0      	ldr	r3, [pc, #768]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800759a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a2:	4abc      	ldr	r2, [pc, #752]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6553      	str	r3, [r2, #84]	; 0x54
 80075a8:	e003      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f002 0302 	and.w	r3, r2, #2
 80075be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075c2:	2300      	movs	r3, #0
 80075c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075c8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80075cc:	460b      	mov	r3, r1
 80075ce:	4313      	orrs	r3, r2
 80075d0:	d043      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d824      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007631 	.word	0x08007631
 80075e8:	080075fd 	.word	0x080075fd
 80075ec:	08007613 	.word	0x08007613
 80075f0:	08007631 	.word	0x08007631
 80075f4:	08007631 	.word	0x08007631
 80075f8:	08007631 	.word	0x08007631
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007600:	3308      	adds	r3, #8
 8007602:	2101      	movs	r1, #1
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fd9b 	bl	8009140 <RCCEx_PLL2_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007610:	e00f      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007616:	3328      	adds	r3, #40	; 0x28
 8007618:	2101      	movs	r1, #1
 800761a:	4618      	mov	r0, r3
 800761c:	f001 fe42 	bl	80092a4 <RCCEx_PLL3_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007626:	e004      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800762e:	e000      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007632:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800763a:	4b96      	ldr	r3, [pc, #600]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f023 0107 	bic.w	r1, r3, #7
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764a:	4a92      	ldr	r2, [pc, #584]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800764c:	430b      	orrs	r3, r1
 800764e:	6553      	str	r3, [r2, #84]	; 0x54
 8007650:	e003      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007652:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007656:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800765a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f002 0304 	and.w	r3, r2, #4
 8007666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800766a:	2300      	movs	r3, #0
 800766c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007670:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007674:	460b      	mov	r3, r1
 8007676:	4313      	orrs	r3, r2
 8007678:	d043      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800767a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800767e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007682:	2b05      	cmp	r3, #5
 8007684:	d824      	bhi.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007686:	a201      	add	r2, pc, #4	; (adr r2, 800768c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	080076d9 	.word	0x080076d9
 8007690:	080076a5 	.word	0x080076a5
 8007694:	080076bb 	.word	0x080076bb
 8007698:	080076d9 	.word	0x080076d9
 800769c:	080076d9 	.word	0x080076d9
 80076a0:	080076d9 	.word	0x080076d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a8:	3308      	adds	r3, #8
 80076aa:	2101      	movs	r1, #1
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 fd47 	bl	8009140 <RCCEx_PLL2_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076b8:	e00f      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076be:	3328      	adds	r3, #40	; 0x28
 80076c0:	2101      	movs	r1, #1
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fdee 	bl	80092a4 <RCCEx_PLL3_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076ce:	e004      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076d6:	e000      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80076d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076e2:	4b6c      	ldr	r3, [pc, #432]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e6:	f023 0107 	bic.w	r1, r3, #7
 80076ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076f2:	4a68      	ldr	r2, [pc, #416]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076f4:	430b      	orrs	r3, r1
 80076f6:	6593      	str	r3, [r2, #88]	; 0x58
 80076f8:	e003      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f002 0320 	and.w	r3, r2, #32
 800770e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007712:	2300      	movs	r3, #0
 8007714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800771c:	460b      	mov	r3, r1
 800771e:	4313      	orrs	r3, r2
 8007720:	d055      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800772a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800772e:	d033      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007734:	d82c      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773a:	d02f      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d826      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007742:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007746:	d02b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800774c:	d820      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007752:	d012      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007758:	d81a      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d022      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800775e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007762:	d115      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007768:	3308      	adds	r3, #8
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f001 fce7 	bl	8009140 <RCCEx_PLL2_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007778:	e015      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800777a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777e:	3328      	adds	r3, #40	; 0x28
 8007780:	2102      	movs	r1, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fd8e 	bl	80092a4 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800778e:	e00a      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007796:	e006      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007798:	bf00      	nop
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80077a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ae:	4b39      	ldr	r3, [pc, #228]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80077b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077be:	4a35      	ldr	r2, [pc, #212]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6553      	str	r3, [r2, #84]	; 0x54
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80077da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077de:	2300      	movs	r3, #0
 80077e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d058      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077fa:	d033      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80077fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007800:	d82c      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007806:	d02f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	d826      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800780e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007812:	d02b      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007818:	d820      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800781a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781e:	d012      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007824:	d81a      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d022      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800782a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782e:	d115      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007834:	3308      	adds	r3, #8
 8007836:	2100      	movs	r1, #0
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fc81 	bl	8009140 <RCCEx_PLL2_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007844:	e015      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784a:	3328      	adds	r3, #40	; 0x28
 800784c:	2102      	movs	r1, #2
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fd28 	bl	80092a4 <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800785a:	e00a      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007862:	e006      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007864:	bf00      	nop
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007868:	bf00      	nop
 800786a:	e002      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007872:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10e      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800788a:	4a02      	ldr	r2, [pc, #8]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800788c:	430b      	orrs	r3, r1
 800788e:	6593      	str	r3, [r2, #88]	; 0x58
 8007890:	e006      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800789c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80078ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078b0:	2300      	movs	r3, #0
 80078b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80078ba:	460b      	mov	r3, r1
 80078bc:	4313      	orrs	r3, r2
 80078be:	d055      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078cc:	d033      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80078ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078d2:	d82c      	bhi.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80078d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d8:	d02f      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80078da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078de:	d826      	bhi.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80078e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078e4:	d02b      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80078e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078ea:	d820      	bhi.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80078ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f0:	d012      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80078f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f6:	d81a      	bhi.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d022      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80078fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007900:	d115      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007906:	3308      	adds	r3, #8
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fc18 	bl	8009140 <RCCEx_PLL2_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007916:	e015      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800791c:	3328      	adds	r3, #40	; 0x28
 800791e:	2102      	movs	r1, #2
 8007920:	4618      	mov	r0, r3
 8007922:	f001 fcbf 	bl	80092a4 <RCCEx_PLL3_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800792c:	e00a      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007934:	e006      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007936:	bf00      	nop
 8007938:	e004      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800793a:	bf00      	nop
 800793c:	e002      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800793e:	bf00      	nop
 8007940:	e000      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800794c:	4ba1      	ldr	r3, [pc, #644]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800794e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007950:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007958:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800795c:	4a9d      	ldr	r2, [pc, #628]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800795e:	430b      	orrs	r3, r1
 8007960:	6593      	str	r3, [r2, #88]	; 0x58
 8007962:	e003      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007968:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800796c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f002 0308 	and.w	r3, r2, #8
 8007978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007982:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d01e      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800798c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007998:	d10c      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800799a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799e:	3328      	adds	r3, #40	; 0x28
 80079a0:	2102      	movs	r1, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fc7e 	bl	80092a4 <RCCEx_PLL3_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079b4:	4b87      	ldr	r3, [pc, #540]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c4:	4a83      	ldr	r2, [pc, #524]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079c6:	430b      	orrs	r3, r1
 80079c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f002 0310 	and.w	r3, r2, #16
 80079d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80079e4:	460b      	mov	r3, r1
 80079e6:	4313      	orrs	r3, r2
 80079e8:	d01e      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d10c      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fc:	3328      	adds	r3, #40	; 0x28
 80079fe:	2102      	movs	r1, #2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f001 fc4f 	bl	80092a4 <RCCEx_PLL3_Config>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a12:	4b70      	ldr	r3, [pc, #448]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a22:	4a6c      	ldr	r2, [pc, #432]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d03e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a54:	d022      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5a:	d81b      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a64:	d00b      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007a66:	e015      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fb65 	bl	8009140 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a7c:	e00f      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a82:	3328      	adds	r3, #40	; 0x28
 8007a84:	2102      	movs	r1, #2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fc0c 	bl	80092a4 <RCCEx_PLL3_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a92:	e004      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a9a:	e000      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa6:	4b4b      	ldr	r3, [pc, #300]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ab6:	4a47      	ldr	r2, [pc, #284]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6593      	str	r3, [r2, #88]	; 0x58
 8007abc:	e003      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ac2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007ad2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ad8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007adc:	460b      	mov	r3, r1
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	d03b      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aee:	d01f      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007af4:	d818      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afa:	d003      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b00:	d007      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007b02:	e011      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b04:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	4a32      	ldr	r2, [pc, #200]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b10:	e00f      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b16:	3328      	adds	r3, #40	; 0x28
 8007b18:	2101      	movs	r1, #1
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 fbc2 	bl	80092a4 <RCCEx_PLL3_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b26:	e004      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b2e:	e000      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b3a:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4a:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6553      	str	r3, [r2, #84]	; 0x54
 8007b50:	e003      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007b66:	673b      	str	r3, [r7, #112]	; 0x70
 8007b68:	2300      	movs	r3, #0
 8007b6a:	677b      	str	r3, [r7, #116]	; 0x74
 8007b6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007b70:	460b      	mov	r3, r1
 8007b72:	4313      	orrs	r3, r2
 8007b74:	d034      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b84:	d007      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007b86:	e011      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b88:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a11      	ldr	r2, [pc, #68]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b94:	e00e      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 face 	bl	8009140 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007baa:	e003      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10d      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bca:	4a02      	ldr	r2, [pc, #8]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bee:	2300      	movs	r3, #0
 8007bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bf2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	d00c      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c00:	3328      	adds	r3, #40	; 0x28
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fb4d 	bl	80092a4 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007c22:	663b      	str	r3, [r7, #96]	; 0x60
 8007c24:	2300      	movs	r3, #0
 8007c26:	667b      	str	r3, [r7, #100]	; 0x64
 8007c28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d038      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c3e:	d018      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c44:	d811      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4a:	d014      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c50:	d80b      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d011      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5a:	d106      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5c:	4bc3      	ldr	r3, [pc, #780]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	4ac2      	ldr	r2, [pc, #776]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c68:	e008      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007c70:	e004      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c84:	4bb9      	ldr	r3, [pc, #740]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	4ab5      	ldr	r2, [pc, #724]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6553      	str	r3, [r2, #84]	; 0x54
 8007c9a:	e003      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	d009      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cc0:	4baa      	ldr	r3, [pc, #680]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cce:	4aa7      	ldr	r2, [pc, #668]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007cea:	460b      	mov	r3, r1
 8007cec:	4313      	orrs	r3, r2
 8007cee:	d009      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cf0:	4b9e      	ldr	r3, [pc, #632]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a9b      	ldr	r2, [pc, #620]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d12:	2300      	movs	r3, #0
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	d009      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007d20:	4b92      	ldr	r3, [pc, #584]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2e:	4a8f      	ldr	r2, [pc, #572]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
 8007d42:	2300      	movs	r3, #0
 8007d44:	647b      	str	r3, [r7, #68]	; 0x44
 8007d46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d50:	4b86      	ldr	r3, [pc, #536]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	4a85      	ldr	r2, [pc, #532]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d5a:	6113      	str	r3, [r2, #16]
 8007d5c:	4b83      	ldr	r3, [pc, #524]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d5e:	6919      	ldr	r1, [r3, #16]
 8007d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d68:	4a80      	ldr	r2, [pc, #512]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007d84:	460b      	mov	r3, r1
 8007d86:	4313      	orrs	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d8a:	4b78      	ldr	r3, [pc, #480]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	4a74      	ldr	r2, [pc, #464]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d00a      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dba:	4b6c      	ldr	r3, [pc, #432]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dca:	4a68      	ldr	r2, [pc, #416]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	2100      	movs	r1, #0
 8007dda:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d011      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df0:	3308      	adds	r3, #8
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 f9a3 	bl	8009140 <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6239      	str	r1, [r7, #32]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e26:	460b      	mov	r3, r1
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	d011      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e30:	3308      	adds	r3, #8
 8007e32:	2101      	movs	r1, #1
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f983 	bl	8009140 <RCCEx_PLL2_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	61b9      	str	r1, [r7, #24]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e66:	460b      	mov	r3, r1
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	d011      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e70:	3308      	adds	r3, #8
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 f963 	bl	8009140 <RCCEx_PLL2_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6139      	str	r1, [r7, #16]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d011      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb0:	3328      	adds	r3, #40	; 0x28
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 f9f5 	bl	80092a4 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ecc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	d011      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef0:	3328      	adds	r3, #40	; 0x28
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f9d5 	bl	80092a4 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6039      	str	r1, [r7, #0]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f26:	460b      	mov	r3, r1
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d011      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f30:	3328      	adds	r3, #40	; 0x28
 8007f32:	2102      	movs	r1, #2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f9b5 	bl	80092a4 <RCCEx_PLL3_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007f50:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400

08007f70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b090      	sub	sp, #64	; 0x40
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007f82:	430b      	orrs	r3, r1
 8007f84:	f040 8094 	bne.w	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f88:	4b97      	ldr	r3, [pc, #604]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	f200 8087 	bhi.w	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fdd 	.word	0x08007fdd
 8007fa8:	08008005 	.word	0x08008005
 8007fac:	080080a1 	.word	0x080080a1
 8007fb0:	0800802d 	.word	0x0800802d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fb4:	4b8c      	ldr	r3, [pc, #560]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc0:	d108      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 ff68 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd0:	f000 bc97 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd8:	f000 bc93 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fdc:	4b82      	ldr	r3, [pc, #520]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe8:	d108      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fea:	f107 0318 	add.w	r3, r7, #24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fcac 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff8:	f000 bc83 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008000:	f000 bc7f 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008004:	4b78      	ldr	r3, [pc, #480]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008010:	d108      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008012:	f107 030c 	add.w	r3, r7, #12
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fdec 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008020:	f000 bc6f 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008028:	f000 bc6b 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800802c:	4b6e      	ldr	r3, [pc, #440]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800802e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008034:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008036:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b04      	cmp	r3, #4
 8008040:	d10c      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008048:	4b67      	ldr	r3, [pc, #412]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	4a66      	ldr	r2, [pc, #408]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805a:	e01f      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800805c:	4b62      	ldr	r3, [pc, #392]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d106      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008070:	d102      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008072:	4b5f      	ldr	r3, [pc, #380]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008076:	e011      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008078:	4b5b      	ldr	r3, [pc, #364]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008084:	d106      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808c:	d102      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800808e:	4b59      	ldr	r3, [pc, #356]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008092:	e003      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008098:	f000 bc33 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800809c:	f000 bc31 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080a0:	4b55      	ldr	r3, [pc, #340]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a4:	f000 bc2d 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ac:	f000 bc29 	b.w	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80080b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f040 809f 	bne.w	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80080be:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ce:	d04d      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	f200 8084 	bhi.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2bc0      	cmp	r3, #192	; 0xc0
 80080de:	d07d      	beq.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2bc0      	cmp	r3, #192	; 0xc0
 80080e4:	d87d      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b80      	cmp	r3, #128	; 0x80
 80080ea:	d02d      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2b80      	cmp	r3, #128	; 0x80
 80080f0:	d877      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d012      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80080fe:	e070      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008100:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800810e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fec2 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811c:	e3f1      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008122:	e3ee      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008124:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800812c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008132:	f107 0318 	add.w	r3, r7, #24
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fc08 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008140:	e3df      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008146:	e3dc      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008148:	4b27      	ldr	r3, [pc, #156]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008154:	d107      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fd4a 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008164:	e3cd      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816a:	e3ca      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800816c:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008174:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b04      	cmp	r3, #4
 8008180:	d10c      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a16      	ldr	r2, [pc, #88]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819a:	e01e      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b6:	e010      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081b8:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c4:	d106      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081cc:	d102      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d2:	e002      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081d8:	e393      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081da:	e392      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e38f      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e6:	e38c      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081e8:	58024400 	.word	0x58024400
 80081ec:	03d09000 	.word	0x03d09000
 80081f0:	003d0900 	.word	0x003d0900
 80081f4:	016e3600 	.word	0x016e3600
 80081f8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80081fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008200:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008204:	430b      	orrs	r3, r1
 8008206:	f040 809c 	bne.w	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800820a:	4b9e      	ldr	r3, [pc, #632]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008212:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800821a:	d054      	beq.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008222:	f200 808b 	bhi.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800822c:	f000 8083 	beq.w	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008236:	f200 8081 	bhi.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008240:	d02f      	beq.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008248:	d878      	bhi.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008256:	d012      	beq.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008258:	e070      	b.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800825a:	4b8a      	ldr	r3, [pc, #552]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008266:	d107      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fe15 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008276:	e344      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	e341      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827e:	4b81      	ldr	r3, [pc, #516]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800828a:	d107      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828c:	f107 0318 	add.w	r3, r7, #24
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fb5b 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829a:	e332      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a0:	e32f      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082a2:	4b78      	ldr	r3, [pc, #480]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ae:	d107      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fc9d 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082be:	e320      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c4:	e31d      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c6:	4b6f      	ldr	r3, [pc, #444]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082d0:	4b6c      	ldr	r3, [pc, #432]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d10c      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e2:	4b68      	ldr	r3, [pc, #416]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	08db      	lsrs	r3, r3, #3
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	4a66      	ldr	r2, [pc, #408]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80082ee:	fa22 f303 	lsr.w	r3, r2, r3
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f4:	e01e      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f6:	4b63      	ldr	r3, [pc, #396]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008302:	d106      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830a:	d102      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800830c:	4b5f      	ldr	r3, [pc, #380]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008310:	e010      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008312:	4b5c      	ldr	r3, [pc, #368]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800831e:	d106      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008326:	d102      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008328:	4b59      	ldr	r3, [pc, #356]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	e002      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008332:	e2e6      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008334:	e2e5      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008336:	4b57      	ldr	r3, [pc, #348]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833a:	e2e2      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008340:	e2df      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008346:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800834a:	430b      	orrs	r3, r1
 800834c:	f040 80a7 	bne.w	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008350:	4b4c      	ldr	r3, [pc, #304]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008360:	d055      	beq.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008368:	f200 8096 	bhi.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008372:	f000 8084 	beq.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800837c:	f200 808c 	bhi.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	d030      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800838e:	f200 8083 	bhi.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839e:	d012      	beq.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80083a0:	e07a      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083a2:	4b38      	ldr	r3, [pc, #224]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ae:	d107      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fd71 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083be:	e2a0      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c4:	e29d      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c6:	4b2f      	ldr	r3, [pc, #188]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d2:	d107      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d4:	f107 0318 	add.w	r3, r7, #24
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fab7 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e2:	e28e      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e8:	e28b      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ea:	4b26      	ldr	r3, [pc, #152]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f6:	d107      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fbf9 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	e27c      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840c:	e279      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800840e:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008416:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008418:	4b1a      	ldr	r3, [pc, #104]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b04      	cmp	r3, #4
 8008422:	d10c      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	2b00      	cmp	r3, #0
 8008428:	d109      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	4a14      	ldr	r2, [pc, #80]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800843c:	e01e      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800843e:	4b11      	ldr	r3, [pc, #68]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844a:	d106      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008452:	d102      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008454:	4b0d      	ldr	r3, [pc, #52]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008458:	e010      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008466:	d106      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846e:	d102      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008474:	e002      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800847a:	e242      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800847c:	e241      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008482:	e23e      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008484:	58024400 	.word	0x58024400
 8008488:	03d09000 	.word	0x03d09000
 800848c:	003d0900 	.word	0x003d0900
 8008490:	016e3600 	.word	0x016e3600
 8008494:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800849c:	e231      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800849e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80084a6:	430b      	orrs	r3, r1
 80084a8:	f040 8085 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084ac:	4b9c      	ldr	r3, [pc, #624]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084bc:	d06b      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084c4:	d874      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084cc:	d056      	beq.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084d4:	d86c      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084dc:	d03b      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084e4:	d864      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ec:	d021      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f4:	d85c      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d004      	beq.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008502:	d004      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008504:	e054      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008506:	f7fe fb5f 	bl	8006bc8 <HAL_RCC_GetPCLK1Freq>
 800850a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800850c:	e1f9      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800850e:	4b84      	ldr	r3, [pc, #528]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800851a:	d107      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851c:	f107 0318 	add.w	r3, r7, #24
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fa13 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852a:	e1ea      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008530:	e1e7      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008532:	4b7b      	ldr	r3, [pc, #492]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800853a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008540:	f107 030c 	add.w	r3, r7, #12
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fb55 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e1d8      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008554:	e1d5      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008556:	4b72      	ldr	r3, [pc, #456]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	2b04      	cmp	r3, #4
 8008560:	d109      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008562:	4b6f      	ldr	r3, [pc, #444]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	08db      	lsrs	r3, r3, #3
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	4a6d      	ldr	r2, [pc, #436]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800856e:	fa22 f303 	lsr.w	r3, r2, r3
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008574:	e1c5      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800857a:	e1c2      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800857c:	4b68      	ldr	r3, [pc, #416]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008588:	d102      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800858a:	4b67      	ldr	r3, [pc, #412]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858e:	e1b8      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008594:	e1b5      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008596:	4b62      	ldr	r3, [pc, #392]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80085a4:	4b61      	ldr	r3, [pc, #388]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a8:	e1ab      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ae:	e1a8      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	e1a5      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80085b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ba:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80085be:	430b      	orrs	r3, r1
 80085c0:	d173      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80085c2:	4b57      	ldr	r3, [pc, #348]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d2:	d02f      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085da:	d863      	bhi.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e8:	d012      	beq.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80085ea:	e05b      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ec:	4b4c      	ldr	r3, [pc, #304]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f8:	d107      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fa:	f107 0318 	add.w	r3, r7, #24
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f9a4 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008608:	e17b      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860e:	e178      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008610:	4b43      	ldr	r3, [pc, #268]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861c:	d107      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fae6 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862c:	e169      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008632:	e166      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008634:	4b3a      	ldr	r3, [pc, #232]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800863c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800863e:	4b38      	ldr	r3, [pc, #224]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b04      	cmp	r3, #4
 8008648:	d10c      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008650:	4b33      	ldr	r3, [pc, #204]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a32      	ldr	r2, [pc, #200]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008662:	e01e      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008664:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008670:	d106      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008678:	d102      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800867a:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800867e:	e010      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008680:	4b27      	ldr	r3, [pc, #156]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800868c:	d106      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800868e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008694:	d102      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008696:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869a:	e002      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086a0:	e12f      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086a2:	e12e      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a8:	e12b      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ae:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80086b2:	430b      	orrs	r3, r1
 80086b4:	d13c      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086cc:	d012      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80086ce:	e023      	b.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fbda 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e109      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f2:	e106      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008700:	d107      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008702:	f107 0318 	add.w	r3, r7, #24
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f920 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008710:	e0f7      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008716:	e0f4      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871c:	e0f1      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800871e:	bf00      	nop
 8008720:	58024400 	.word	0x58024400
 8008724:	03d09000 	.word	0x03d09000
 8008728:	003d0900 	.word	0x003d0900
 800872c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008734:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008738:	430b      	orrs	r3, r1
 800873a:	f040 8091 	bne.w	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800873e:	4b73      	ldr	r3, [pc, #460]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008742:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800874e:	f000 8081 	beq.w	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008758:	d87f      	bhi.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008760:	d06b      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008768:	d877      	bhi.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008770:	d056      	beq.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008778:	d86f      	bhi.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008780:	d03b      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008788:	d867      	bhi.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008790:	d021      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008798:	d85f      	bhi.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a6:	d004      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80087a8:	e057      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80087aa:	f000 f8b9 	bl	8008920 <HAL_RCCEx_GetD3PCLK1Freq>
 80087ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087b0:	e0a7      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b2:	4b56      	ldr	r3, [pc, #344]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087be:	d107      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c0:	f107 0318 	add.w	r3, r7, #24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f8c1 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ce:	e098      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d4:	e095      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d6:	4b4d      	ldr	r3, [pc, #308]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e2:	d107      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fa03 	bl	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f2:	e086      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f8:	e083      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087fa:	4b44      	ldr	r3, [pc, #272]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b04      	cmp	r3, #4
 8008804:	d109      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008806:	4b41      	ldr	r3, [pc, #260]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	08db      	lsrs	r3, r3, #3
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	4a3f      	ldr	r2, [pc, #252]	; (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008812:	fa22 f303 	lsr.w	r3, r2, r3
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008818:	e073      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881e:	e070      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008820:	4b3a      	ldr	r3, [pc, #232]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882c:	d102      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800882e:	4b39      	ldr	r3, [pc, #228]	; (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008832:	e066      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008838:	e063      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800883a:	4b34      	ldr	r3, [pc, #208]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008846:	d102      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008848:	4b33      	ldr	r3, [pc, #204]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884c:	e059      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008852:	e056      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008854:	4b31      	ldr	r3, [pc, #196]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008858:	e053      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885e:	e050      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008868:	430b      	orrs	r3, r1
 800886a:	d148      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800886e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008874:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887c:	d02a      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008884:	d838      	bhi.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008892:	d00d      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008894:	e030      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008896:	4b1d      	ldr	r3, [pc, #116]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a2:	d102      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80088a4:	4b1c      	ldr	r3, [pc, #112]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a8:	e02b      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ae:	e028      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088b0:	4b16      	ldr	r3, [pc, #88]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088bc:	d107      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 faea 	bl	8008e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088cc:	e019      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d2:	e016      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e0:	d107      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e2:	f107 0318 	add.w	r3, r7, #24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f830 	bl	800894c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f0:	e007      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f6:	e004      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088fc:	e001      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008904:	4618      	mov	r0, r3
 8008906:	3740      	adds	r7, #64	; 0x40
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	58024400 	.word	0x58024400
 8008910:	03d09000 	.word	0x03d09000
 8008914:	003d0900 	.word	0x003d0900
 8008918:	016e3600 	.word	0x016e3600
 800891c:	00bb8000 	.word	0x00bb8000

08008920 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008924:	f7fe f920 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4904      	ldr	r1, [pc, #16]	; (8008948 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	f003 031f 	and.w	r3, r3, #31
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008940:	4618      	mov	r0, r3
 8008942:	bd80      	pop	{r7, pc}
 8008944:	58024400 	.word	0x58024400
 8008948:	080094e0 	.word	0x080094e0

0800894c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008954:	4ba1      	ldr	r3, [pc, #644]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800895e:	4b9f      	ldr	r3, [pc, #636]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	0b1b      	lsrs	r3, r3, #12
 8008964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008968:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800896a:	4b9c      	ldr	r3, [pc, #624]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	091b      	lsrs	r3, r3, #4
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008976:	4b99      	ldr	r3, [pc, #612]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8111 	beq.w	8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b02      	cmp	r3, #2
 800899e:	f000 8083 	beq.w	8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	f200 80a1 	bhi.w	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d056      	beq.n	8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089b6:	e099      	b.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b8:	4b88      	ldr	r3, [pc, #544]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02d      	beq.n	8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c4:	4b85      	ldr	r3, [pc, #532]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	08db      	lsrs	r3, r3, #3
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	4a84      	ldr	r2, [pc, #528]	; (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b7b      	ldr	r3, [pc, #492]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a1e:	e087      	b.n	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b6a      	ldr	r3, [pc, #424]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a62:	e065      	b.n	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b59      	ldr	r3, [pc, #356]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e043      	b.n	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b48      	ldr	r3, [pc, #288]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	e021      	b.n	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b37      	ldr	r3, [pc, #220]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b30:	4b2a      	ldr	r3, [pc, #168]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	0a5b      	lsrs	r3, r3, #9
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b56:	ee17 2a90 	vmov	r2, s15
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b5e:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b84:	ee17 2a90 	vmov	r2, s15
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b8c:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	0e1b      	lsrs	r3, r3, #24
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb2:	ee17 2a90 	vmov	r2, s15
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bba:	e008      	b.n	8008bce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
}
 8008bce:	bf00      	nop
 8008bd0:	3724      	adds	r7, #36	; 0x24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	46000000 	.word	0x46000000
 8008be8:	4c742400 	.word	0x4c742400
 8008bec:	4a742400 	.word	0x4a742400
 8008bf0:	4bb71b00 	.word	0x4bb71b00

08008bf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b089      	sub	sp, #36	; 0x24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bfc:	4ba1      	ldr	r3, [pc, #644]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c06:	4b9f      	ldr	r3, [pc, #636]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	0d1b      	lsrs	r3, r3, #20
 8008c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c12:	4b9c      	ldr	r3, [pc, #624]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c1e:	4b99      	ldr	r3, [pc, #612]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	fb02 f303 	mul.w	r3, r2, r3
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8111 	beq.w	8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	f000 8083 	beq.w	8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f200 80a1 	bhi.w	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d056      	beq.n	8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c5e:	e099      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c60:	4b88      	ldr	r3, [pc, #544]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02d      	beq.n	8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c6c:	4b85      	ldr	r3, [pc, #532]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	08db      	lsrs	r3, r3, #3
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	4a84      	ldr	r2, [pc, #528]	; (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b7b      	ldr	r3, [pc, #492]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008caa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cc6:	e087      	b.n	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b6a      	ldr	r3, [pc, #424]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0a:	e065      	b.n	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b59      	ldr	r3, [pc, #356]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4e:	e043      	b.n	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b48      	ldr	r3, [pc, #288]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e021      	b.n	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b37      	ldr	r3, [pc, #220]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dd8:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	0a5b      	lsrs	r3, r3, #9
 8008dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfe:	ee17 2a90 	vmov	r2, s15
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e06:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e2c:	ee17 2a90 	vmov	r2, s15
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	0e1b      	lsrs	r3, r3, #24
 8008e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e5a:	ee17 2a90 	vmov	r2, s15
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e62:	e008      	b.n	8008e76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	609a      	str	r2, [r3, #8]
}
 8008e76:	bf00      	nop
 8008e78:	3724      	adds	r7, #36	; 0x24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	58024400 	.word	0x58024400
 8008e88:	03d09000 	.word	0x03d09000
 8008e8c:	46000000 	.word	0x46000000
 8008e90:	4c742400 	.word	0x4c742400
 8008e94:	4a742400 	.word	0x4a742400
 8008e98:	4bb71b00 	.word	0x4bb71b00

08008e9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b089      	sub	sp, #36	; 0x24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ea4:	4ba0      	ldr	r3, [pc, #640]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008eae:	4b9e      	ldr	r3, [pc, #632]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	091b      	lsrs	r3, r3, #4
 8008eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eb8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008eba:	4b9b      	ldr	r3, [pc, #620]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ec4:	4b98      	ldr	r3, [pc, #608]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	fb02 f303 	mul.w	r3, r2, r3
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 8111 	beq.w	800910a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	f000 8083 	beq.w	8008ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	f200 80a1 	bhi.w	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d056      	beq.n	8008fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f04:	e099      	b.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f06:	4b88      	ldr	r3, [pc, #544]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d02d      	beq.n	8008f6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f12:	4b85      	ldr	r3, [pc, #532]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	08db      	lsrs	r3, r3, #3
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	4a83      	ldr	r2, [pc, #524]	; (800912c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3c:	4b7a      	ldr	r3, [pc, #488]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f50:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f6c:	e087      	b.n	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009134 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f80:	4b69      	ldr	r3, [pc, #420]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f94:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fb0:	e065      	b.n	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009138 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc4:	4b58      	ldr	r3, [pc, #352]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff4:	e043      	b.n	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009000:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800913c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009008:	4b47      	ldr	r3, [pc, #284]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009018:	ed97 6a03 	vldr	s12, [r7, #12]
 800901c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800902c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009038:	e021      	b.n	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009044:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009134 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009060:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800907e:	4b2a      	ldr	r3, [pc, #168]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	0a5b      	lsrs	r3, r3, #9
 8009084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009088:	ee07 3a90 	vmov	s15, r3
 800908c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009098:	edd7 6a07 	vldr	s13, [r7, #28]
 800909c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a4:	ee17 2a90 	vmov	r2, s15
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80090ac:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d2:	ee17 2a90 	vmov	r2, s15
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80090da:	4b13      	ldr	r3, [pc, #76]	; (8009128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	0e1b      	lsrs	r3, r3, #24
 80090e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009100:	ee17 2a90 	vmov	r2, s15
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009108:	e008      	b.n	800911c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	609a      	str	r2, [r3, #8]
}
 800911c:	bf00      	nop
 800911e:	3724      	adds	r7, #36	; 0x24
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	58024400 	.word	0x58024400
 800912c:	03d09000 	.word	0x03d09000
 8009130:	46000000 	.word	0x46000000
 8009134:	4c742400 	.word	0x4c742400
 8009138:	4a742400 	.word	0x4a742400
 800913c:	4bb71b00 	.word	0x4bb71b00

08009140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800914e:	4b53      	ldr	r3, [pc, #332]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b03      	cmp	r3, #3
 8009158:	d101      	bne.n	800915e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e099      	b.n	8009292 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800915e:	4b4f      	ldr	r3, [pc, #316]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a4e      	ldr	r2, [pc, #312]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916a:	f7f8 fadb 	bl	8001724 <HAL_GetTick>
 800916e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009170:	e008      	b.n	8009184 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009172:	f7f8 fad7 	bl	8001724 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e086      	b.n	8009292 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009184:	4b45      	ldr	r3, [pc, #276]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f0      	bne.n	8009172 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009190:	4b42      	ldr	r3, [pc, #264]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	493f      	ldr	r1, [pc, #252]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	628b      	str	r3, [r1, #40]	; 0x28
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	025b      	lsls	r3, r3, #9
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	3b01      	subs	r3, #1
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	061b      	lsls	r3, r3, #24
 80091d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091d4:	4931      	ldr	r1, [pc, #196]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091da:	4b30      	ldr	r3, [pc, #192]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	492d      	ldr	r1, [pc, #180]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	f023 0220 	bic.w	r2, r3, #32
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4928      	ldr	r1, [pc, #160]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091fe:	4b27      	ldr	r3, [pc, #156]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	4a26      	ldr	r2, [pc, #152]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009204:	f023 0310 	bic.w	r3, r3, #16
 8009208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800920a:	4b24      	ldr	r3, [pc, #144]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 800920c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800920e:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <RCCEx_PLL2_Config+0x160>)
 8009210:	4013      	ands	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	69d2      	ldr	r2, [r2, #28]
 8009216:	00d2      	lsls	r2, r2, #3
 8009218:	4920      	ldr	r1, [pc, #128]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 800921a:	4313      	orrs	r3, r2
 800921c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800921e:	4b1f      	ldr	r3, [pc, #124]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	4a1e      	ldr	r2, [pc, #120]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009224:	f043 0310 	orr.w	r3, r3, #16
 8009228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d106      	bne.n	800923e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009230:	4b1a      	ldr	r3, [pc, #104]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800923a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800923c:	e00f      	b.n	800925e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009244:	4b15      	ldr	r3, [pc, #84]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a14      	ldr	r2, [pc, #80]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 800924a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009250:	e005      	b.n	800925e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	4a11      	ldr	r2, [pc, #68]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800925c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800925e:	4b0f      	ldr	r3, [pc, #60]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a0e      	ldr	r2, [pc, #56]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800926a:	f7f8 fa5b 	bl	8001724 <HAL_GetTick>
 800926e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009270:	e008      	b.n	8009284 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009272:	f7f8 fa57 	bl	8001724 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e006      	b.n	8009292 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <RCCEx_PLL2_Config+0x15c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f0      	beq.n	8009272 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	ffff0007 	.word	0xffff0007

080092a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092b2:	4b53      	ldr	r3, [pc, #332]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d101      	bne.n	80092c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e099      	b.n	80093f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092c2:	4b4f      	ldr	r3, [pc, #316]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a4e      	ldr	r2, [pc, #312]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80092c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ce:	f7f8 fa29 	bl	8001724 <HAL_GetTick>
 80092d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092d4:	e008      	b.n	80092e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092d6:	f7f8 fa25 	bl	8001724 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e086      	b.n	80093f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092e8:	4b45      	ldr	r3, [pc, #276]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1f0      	bne.n	80092d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092f4:	4b42      	ldr	r3, [pc, #264]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	051b      	lsls	r3, r3, #20
 8009302:	493f      	ldr	r1, [pc, #252]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009304:	4313      	orrs	r3, r2
 8009306:	628b      	str	r3, [r1, #40]	; 0x28
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	3b01      	subs	r3, #1
 800930e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	3b01      	subs	r3, #1
 8009318:	025b      	lsls	r3, r3, #9
 800931a:	b29b      	uxth	r3, r3
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	3b01      	subs	r3, #1
 8009324:	041b      	lsls	r3, r3, #16
 8009326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	3b01      	subs	r3, #1
 8009332:	061b      	lsls	r3, r3, #24
 8009334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009338:	4931      	ldr	r1, [pc, #196]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 800933a:	4313      	orrs	r3, r2
 800933c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800933e:	4b30      	ldr	r3, [pc, #192]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	492d      	ldr	r1, [pc, #180]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 800934c:	4313      	orrs	r3, r2
 800934e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009350:	4b2b      	ldr	r3, [pc, #172]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	4928      	ldr	r1, [pc, #160]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 800935e:	4313      	orrs	r3, r2
 8009360:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009362:	4b27      	ldr	r3, [pc, #156]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	4a26      	ldr	r2, [pc, #152]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800936e:	4b24      	ldr	r3, [pc, #144]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <RCCEx_PLL3_Config+0x160>)
 8009374:	4013      	ands	r3, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	69d2      	ldr	r2, [r2, #28]
 800937a:	00d2      	lsls	r2, r2, #3
 800937c:	4920      	ldr	r1, [pc, #128]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 800937e:	4313      	orrs	r3, r2
 8009380:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009382:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800938c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d106      	bne.n	80093a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009394:	4b1a      	ldr	r3, [pc, #104]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	4a19      	ldr	r2, [pc, #100]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 800939a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800939e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093a0:	e00f      	b.n	80093c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d106      	bne.n	80093b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093a8:	4b15      	ldr	r3, [pc, #84]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4a14      	ldr	r2, [pc, #80]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093b4:	e005      	b.n	80093c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	4a11      	ldr	r2, [pc, #68]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a0e      	ldr	r2, [pc, #56]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ce:	f7f8 f9a9 	bl	8001724 <HAL_GetTick>
 80093d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093d4:	e008      	b.n	80093e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093d6:	f7f8 f9a5 	bl	8001724 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d901      	bls.n	80093e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e006      	b.n	80093f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <RCCEx_PLL3_Config+0x15c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0f0      	beq.n	80093d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	58024400 	.word	0x58024400
 8009404:	ffff0007 	.word	0xffff0007

08009408 <memset>:
 8009408:	4402      	add	r2, r0
 800940a:	4603      	mov	r3, r0
 800940c:	4293      	cmp	r3, r2
 800940e:	d100      	bne.n	8009412 <memset+0xa>
 8009410:	4770      	bx	lr
 8009412:	f803 1b01 	strb.w	r1, [r3], #1
 8009416:	e7f9      	b.n	800940c <memset+0x4>

08009418 <__libc_init_array>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	4d0d      	ldr	r5, [pc, #52]	; (8009450 <__libc_init_array+0x38>)
 800941c:	4c0d      	ldr	r4, [pc, #52]	; (8009454 <__libc_init_array+0x3c>)
 800941e:	1b64      	subs	r4, r4, r5
 8009420:	10a4      	asrs	r4, r4, #2
 8009422:	2600      	movs	r6, #0
 8009424:	42a6      	cmp	r6, r4
 8009426:	d109      	bne.n	800943c <__libc_init_array+0x24>
 8009428:	4d0b      	ldr	r5, [pc, #44]	; (8009458 <__libc_init_array+0x40>)
 800942a:	4c0c      	ldr	r4, [pc, #48]	; (800945c <__libc_init_array+0x44>)
 800942c:	f000 f826 	bl	800947c <_init>
 8009430:	1b64      	subs	r4, r4, r5
 8009432:	10a4      	asrs	r4, r4, #2
 8009434:	2600      	movs	r6, #0
 8009436:	42a6      	cmp	r6, r4
 8009438:	d105      	bne.n	8009446 <__libc_init_array+0x2e>
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009440:	4798      	blx	r3
 8009442:	3601      	adds	r6, #1
 8009444:	e7ee      	b.n	8009424 <__libc_init_array+0xc>
 8009446:	f855 3b04 	ldr.w	r3, [r5], #4
 800944a:	4798      	blx	r3
 800944c:	3601      	adds	r6, #1
 800944e:	e7f2      	b.n	8009436 <__libc_init_array+0x1e>
 8009450:	080094f8 	.word	0x080094f8
 8009454:	080094f8 	.word	0x080094f8
 8009458:	080094f8 	.word	0x080094f8
 800945c:	080094fc 	.word	0x080094fc

08009460 <memcpy>:
 8009460:	440a      	add	r2, r1
 8009462:	4291      	cmp	r1, r2
 8009464:	f100 33ff 	add.w	r3, r0, #4294967295
 8009468:	d100      	bne.n	800946c <memcpy+0xc>
 800946a:	4770      	bx	lr
 800946c:	b510      	push	{r4, lr}
 800946e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009476:	4291      	cmp	r1, r2
 8009478:	d1f9      	bne.n	800946e <memcpy+0xe>
 800947a:	bd10      	pop	{r4, pc}

0800947c <_init>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr

08009488 <_fini>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	bf00      	nop
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr

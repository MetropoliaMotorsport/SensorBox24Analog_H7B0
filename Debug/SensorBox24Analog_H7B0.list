
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae24  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b0d0  0800b0d0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b144  0800b144  0000c144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b14c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008d8  24000010  0800b15c  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240008e8  0800b15c  0000d8e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c8e9  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fc9  00000000  00000000  00029927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d8  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001364  00000000  00000000  0002e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e75  00000000  00000000  0002f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f6de  00000000  00000000  000633a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a1a0  00000000  00000000  00082a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dcc1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d70  00000000  00000000  001dcc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b0b8 	.word	0x0800b0b8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800b0b8 	.word	0x0800b0b8

080002ec <Config_Setup>:

#include "config.h"

#define ID 1

void Config_Setup(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
	Config_2();
#elif ID == 3
	Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

	CAN_interval = 50;
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <Config_1+0xd4>)
 80002fe:	2232      	movs	r2, #50	@ 0x32
 8000300:	801a      	strh	r2, [r3, #0]

	transfer_functions[0] = VOLTAGE_3V3;		// PA6
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <Config_1+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = VOLTAGE_3V3;	// PC4
 8000308:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <Config_1+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = VOLTAGE_24V;		//PB1
 800030e:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <Config_1+0xd8>)
 8000310:	2202      	movs	r2, #2
 8000312:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = VOLTAGE_3V3;		//PA7
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <Config_1+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = VOLTAGE_24V;		//PC5
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <Config_1+0xd8>)
 800031c:	2202      	movs	r2, #2
 800031e:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = VOLTAGE_24V;			//PB0
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <Config_1+0xd8>)
 8000322:	2202      	movs	r2, #2
 8000324:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = VOLTAGE_3V3;			//PC0
 8000326:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <Config_1+0xd8>)
 8000328:	2200      	movs	r2, #0
 800032a:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = VOLTAGE_3V3;			//PC1
 800032c:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <Config_1+0xd8>)
 800032e:	2200      	movs	r2, #0
 8000330:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = VOLTAGE_5V;		//PC2
 8000332:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <Config_1+0xd8>)
 8000334:	2201      	movs	r2, #1
 8000336:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = VOLTAGE_5V;		//PC3
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <Config_1+0xd8>)
 800033a:	2201      	movs	r2, #1
 800033c:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = VOLTAGE_5V;	//PA2
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_1+0xd8>)
 8000340:	2201      	movs	r2, #1
 8000342:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = VOLTAGE_5V;	//PA3
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <Config_1+0xd8>)
 8000346:	2201      	movs	r2, #1
 8000348:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = VOLTAGE_5V;	//PA0
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <Config_1+0xd8>)
 800034c:	2201      	movs	r2, #1
 800034e:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = VOLTAGE_5V;	//PA1
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <Config_1+0xd8>)
 8000352:	2201      	movs	r2, #1
 8000354:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = VOLTAGE_5V;	//PA4
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_1+0xd8>)
 8000358:	2201      	movs	r2, #1
 800035a:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = VOLTAGE_3V3;	//PA5
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Config_1+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	83da      	strh	r2, [r3, #30]

	CAN_ID[0] = 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <Config_1+0xdc>)
 8000364:	2201      	movs	r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
	CAN_ID[1] = 2;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <Config_1+0xdc>)
 800036a:	2202      	movs	r2, #2
 800036c:	805a      	strh	r2, [r3, #2]
	CAN_ID[2] = 3;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Config_1+0xdc>)
 8000370:	2203      	movs	r2, #3
 8000372:	809a      	strh	r2, [r3, #4]
	CAN_ID[3] = 4;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Config_1+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	80da      	strh	r2, [r3, #6]
	CAN_ID[4] = 5;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <Config_1+0xdc>)
 800037c:	2205      	movs	r2, #5
 800037e:	811a      	strh	r2, [r3, #8]
	CAN_ID[5] = 6;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Config_1+0xdc>)
 8000382:	2206      	movs	r2, #6
 8000384:	815a      	strh	r2, [r3, #10]
	CAN_ID[6] = 7;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <Config_1+0xdc>)
 8000388:	2207      	movs	r2, #7
 800038a:	819a      	strh	r2, [r3, #12]
	CAN_ID[7] = 8;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <Config_1+0xdc>)
 800038e:	2208      	movs	r2, #8
 8000390:	81da      	strh	r2, [r3, #14]
	CAN_ID[8] = 9;
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <Config_1+0xdc>)
 8000394:	2209      	movs	r2, #9
 8000396:	821a      	strh	r2, [r3, #16]
	CAN_ID[9] = 10;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <Config_1+0xdc>)
 800039a:	220a      	movs	r2, #10
 800039c:	825a      	strh	r2, [r3, #18]
	CAN_ID[10] = 11;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_1+0xdc>)
 80003a0:	220b      	movs	r2, #11
 80003a2:	829a      	strh	r2, [r3, #20]
	CAN_ID[11] = 12;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <Config_1+0xdc>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	82da      	strh	r2, [r3, #22]
	CAN_ID[12] = 13;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <Config_1+0xdc>)
 80003ac:	220d      	movs	r2, #13
 80003ae:	831a      	strh	r2, [r3, #24]
	CAN_ID[13] = 14;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <Config_1+0xdc>)
 80003b2:	220e      	movs	r2, #14
 80003b4:	835a      	strh	r2, [r3, #26]
	CAN_ID[14] = 15;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Config_1+0xdc>)
 80003b8:	220f      	movs	r2, #15
 80003ba:	839a      	strh	r2, [r3, #28]
	CAN_ID[15] = 16;
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <Config_1+0xdc>)
 80003be:	2210      	movs	r2, #16
 80003c0:	83da      	strh	r2, [r3, #30]

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	2400084e 	.word	0x2400084e
 80003d0:	24000874 	.word	0x24000874
 80003d4:	24000850 	.word	0x24000850

080003d8 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e0:	e001      	b.n	80003e6 <CanSend+0xe>
		Error_Handler();
 80003e2:	f000 feb3 	bl	800114c <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <CanSend+0x34>)
 80003e8:	f005 fcae 	bl	8005d48 <HAL_FDCAN_GetTxFifoFreeLevel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d007      	beq.n	8000402 <CanSend+0x2a>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4906      	ldr	r1, [pc, #24]	@ (8000410 <CanSend+0x38>)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <CanSend+0x34>)
 80003f8:	f005 fadf 	bl	80059ba <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <CanSend+0xa>
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000118 	.word	0x24000118
 8000410:	24000894 	.word	0x24000894

08000414 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d017      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f005 fb1e 	bl	8005a70 <HAL_FDCAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800043a:	f000 fe87 	bl	800114c <Error_Handler>
 800043e:	e001      	b.n	8000444 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000440:	f000 f848 	bl	80004d4 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f005 fc8f 	bl	8005d6c <HAL_FDCAN_ActivateNotification>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000454:	f000 fe7a 	bl	800114c <Error_Handler>
		}
	}
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	24000034 	.word	0x24000034
 8000464:	240008b8 	.word	0x240008b8

08000468 <print>:



void print(uint16_t select){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
		uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <print+0x58>)
 8000476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <print+0x5c>)
 800047e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	2001      	movs	r0, #1
 8000488:	f001 fa1c 	bl	80018c4 <TF_Select>
 800048c:	4603      	mov	r3, r0
 800048e:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <print+0x60>)
 8000496:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <print+0x60>)
 80004a2:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = CAN_ID[select];
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	4a09      	ldr	r2, [pc, #36]	@ (80004cc <print+0x64>)
 80004a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <print+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <print+0x60>)
 80004b4:	f7ff ff90 	bl	80003d8 <CanSend>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2400080c 	.word	0x2400080c
 80004c4:	24000874 	.word	0x24000874
 80004c8:	2400002c 	.word	0x2400002c
 80004cc:	24000850 	.word	0x24000850
 80004d0:	24000894 	.word	0x24000894

080004d4 <decode>:

void decode(){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	switch(TxData[0]){
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <decode+0x6c>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d01d      	beq.n	800051e <decode+0x4a>
 80004e2:	2b03      	cmp	r3, #3
 80004e4:	dc26      	bgt.n	8000534 <decode+0x60>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d002      	beq.n	80004f0 <decode+0x1c>
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d00b      	beq.n	8000506 <decode+0x32>
		break;
	case 3:					//change CAN_id for sensor (most probably not to be used but in case let's have it)
		uint8_t select_id = TxData[1];
		CAN_ID[select_id] = TxData[2];
	}
}
 80004ee:	e021      	b.n	8000534 <decode+0x60>
		uint8_t select_type = TxData[1];
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <decode+0x6c>)
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	717b      	strb	r3, [r7, #5]
		transfer_functions[select_type] = TxData[2];
 80004f6:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <decode+0x6c>)
 80004f8:	789a      	ldrb	r2, [r3, #2]
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <decode+0x70>)
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000504:	e016      	b.n	8000534 <decode+0x60>
		uint8_t divider = TxData[1];
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <decode+0x6c>)
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	71bb      	strb	r3, [r7, #6]
		CAN_interval = 1000 / divider;
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000512:	fb92 f3f3 	sdiv	r3, r2, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <decode+0x74>)
 800051a:	801a      	strh	r2, [r3, #0]
		break;
 800051c:	e00a      	b.n	8000534 <decode+0x60>
		uint8_t select_id = TxData[1];
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <decode+0x6c>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	71fb      	strb	r3, [r7, #7]
		CAN_ID[select_id] = TxData[2];
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <decode+0x6c>)
 8000526:	789a      	ldrb	r2, [r3, #2]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4611      	mov	r1, r2
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <decode+0x78>)
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000532:	e7ff      	b.n	8000534 <decode+0x60>
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	2400002c 	.word	0x2400002c
 8000544:	24000874 	.word	0x24000874
 8000548:	2400084e 	.word	0x2400084e
 800054c:	24000850 	.word	0x24000850

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f001 fb77 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f87b 	bl	8000654 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800055e:	f000 f8e7 	bl	8000730 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 8000562:	f7ff fec3 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fd19 	bl	8000f9c <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f000 fcf7 	bl	8000f5c <MX_DMA_Init>
  MX_FDCAN1_Init();
 800056e:	f000 fa87 	bl	8000a80 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000572:	f000 fb0b 	bl	8000b8c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000576:	f000 fb8f 	bl	8000c98 <MX_I2C1_Init>
  MX_I2C3_Init();
 800057a:	f000 fbcd 	bl	8000d18 <MX_I2C3_Init>
  MX_ADC1_Init();
 800057e:	f000 f909 	bl	8000794 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000582:	f000 fc09 	bl	8000d98 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000586:	f000 fc47 	bl	8000e18 <MX_TIM1_Init>
  MX_TIM3_Init();
 800058a:	f000 fc99 	bl	8000ec0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 800058e:	4829      	ldr	r0, [pc, #164]	@ (8000634 <main+0xe4>)
 8000590:	f00a f8be 	bl	800a710 <HAL_TIM_Base_Start_IT>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x4e>
 800059a:	f000 fdd7 	bl	800114c <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 800059e:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <main+0xe8>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4925      	ldr	r1, [pc, #148]	@ (800063c <main+0xec>)
 80005a6:	4824      	ldr	r0, [pc, #144]	@ (8000638 <main+0xe8>)
 80005a8:	f001 ff22 	bl	80023f0 <HAL_ADC_Start_DMA>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <main+0x66>
 80005b2:	f000 fdcb 	bl	800114c <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(GPIOA,LED1_Pin, SET);}
 80005b6:	4822      	ldr	r0, [pc, #136]	@ (8000640 <main+0xf0>)
 80005b8:	f005 f9d4 	bl	8005964 <HAL_FDCAN_Start>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <main+0x78>
 80005c2:	f000 fdc3 	bl	800114c <Error_Handler>
 80005c6:	e005      	b.n	80005d4 <main+0x84>
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ce:	481d      	ldr	r0, [pc, #116]	@ (8000644 <main+0xf4>)
 80005d0:	f006 faf2 	bl	8006bb8 <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4819      	ldr	r0, [pc, #100]	@ (8000640 <main+0xf0>)
 80005da:	f005 fbc7 	bl	8005d6c <HAL_FDCAN_ActivateNotification>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x98>
 80005e4:	f000 fdb2 	bl	800114c <Error_Handler>


  uint8_t counter = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <main+0xf8>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1fb      	bne.n	80005ec <main+0x9c>
		  if(millis % CAN_interval == 0){
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <main+0xfc>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <main+0x100>)
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000600:	fb01 f202 	mul.w	r2, r1, r2
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1ef      	bne.n	80005ec <main+0x9c>
			  print(counter);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	b29b      	uxth	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff29 	bl	8000468 <print>
			  counter++;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	3301      	adds	r3, #1
 800061a:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b10      	cmp	r3, #16
 8000620:	d1e4      	bne.n	80005ec <main+0x9c>
				  HAL_GPIO_TogglePin(GPIOA,LED2_Pin);
 8000622:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <main+0xf4>)
 8000628:	f006 fadf 	bl	8006bea <HAL_GPIO_TogglePin>
				  counter = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000630:	e7dc      	b.n	80005ec <main+0x9c>
 8000632:	bf00      	nop
 8000634:	240003a0 	.word	0x240003a0
 8000638:	2400003c 	.word	0x2400003c
 800063c:	240003ec 	.word	0x240003ec
 8000640:	24000118 	.word	0x24000118
 8000644:	58020000 	.word	0x58020000
 8000648:	24000872 	.word	0x24000872
 800064c:	24000870 	.word	0x24000870
 8000650:	2400084e 	.word	0x2400084e

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065e:	224c      	movs	r2, #76	@ 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fcee 	bl	800b044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a fce8 	bl	800b044 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <SystemClock_Config+0xd4>)
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800067e:	2002      	movs	r0, #2
 8000680:	f006 fc02 	bl	8006e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <SystemClock_Config+0xd8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <SystemClock_Config+0xd8>)
 800068e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SystemClock_Config+0xd8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd8>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <SystemClock_Config+0xd4>)
 80006b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006b4:	f023 0303 	bic.w	r3, r3, #3
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <SystemClock_Config+0xd4>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c0:	2303      	movs	r3, #3
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006ce:	2340      	movs	r3, #64	@ 0x40
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fc0e 	bl	8006efc <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e6:	f000 fd31 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	233f      	movs	r3, #63	@ 0x3f
 80006ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2102      	movs	r1, #2
 8000710:	4618      	mov	r0, r3
 8000712:	f007 f825 	bl	8007760 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800071c:	f000 fd16 	bl	800114c <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3770      	adds	r7, #112	@ 0x70
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024400 	.word	0x58024400
 800072c:	58024800 	.word	0x58024800

08000730 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b0      	sub	sp, #192	@ 0xc0
 8000734:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	22c0      	movs	r2, #192	@ 0xc0
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f00a fc81 	bl	800b044 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 8000742:	f44f 2208 	mov.w	r2, #557056	@ 0x88000
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8000752:	2320      	movs	r3, #32
 8000754:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000756:	2308      	movs	r3, #8
 8000758:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 25;
 800075a:	2319      	movs	r3, #25
 800075c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000762:	23c0      	movs	r3, #192	@ 0xc0
 8000764:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800076e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000772:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4618      	mov	r0, r3
 800077e:	f007 fb65 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000788:	f000 fce0 	bl	800114c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	37c0      	adds	r7, #192	@ 0xc0
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b8:	4b9f      	ldr	r3, [pc, #636]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007ba:	4aa0      	ldr	r2, [pc, #640]	@ (8000a3c <MX_ADC1_Init+0x2a8>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007be:	4b9e      	ldr	r3, [pc, #632]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007cc:	4b9a      	ldr	r3, [pc, #616]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d2:	4b99      	ldr	r3, [pc, #612]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d8:	4b97      	ldr	r3, [pc, #604]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007de:	4b96      	ldr	r3, [pc, #600]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80007e4:	4b94      	ldr	r3, [pc, #592]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b93      	ldr	r3, [pc, #588]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b91      	ldr	r3, [pc, #580]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	4b90      	ldr	r3, [pc, #576]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007fc:	4b8e      	ldr	r3, [pc, #568]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80007fe:	2203      	movs	r2, #3
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b8d      	ldr	r3, [pc, #564]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000808:	4b8b      	ldr	r3, [pc, #556]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800080e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000816:	4888      	ldr	r0, [pc, #544]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000818:	f001 fc90 	bl	800213c <HAL_ADC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000822:	f000 fc93 	bl	800114c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4881      	ldr	r0, [pc, #516]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000832:	f002 fb93 	bl	8002f5c <HAL_ADCEx_MultiModeConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800083c:	f000 fc86 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000840:	4b7f      	ldr	r3, [pc, #508]	@ (8000a40 <MX_ADC1_Init+0x2ac>)
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000844:	2306      	movs	r3, #6
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000848:	2306      	movs	r3, #6
 800084a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000850:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000852:	2304      	movs	r3, #4
 8000854:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4875      	ldr	r0, [pc, #468]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000864:	f001 fe8c 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800086e:	f000 fc6d 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000872:	4b74      	ldr	r3, [pc, #464]	@ (8000a44 <MX_ADC1_Init+0x2b0>)
 8000874:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000876:	230c      	movs	r3, #12
 8000878:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	486e      	ldr	r0, [pc, #440]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000880:	f001 fe7e 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800088a:	f000 fc5f 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800088e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a48 <MX_ADC1_Init+0x2b4>)
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000892:	2312      	movs	r3, #18
 8000894:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4867      	ldr	r0, [pc, #412]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 800089c:	f001 fe70 	bl	8002580 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80008a6:	f000 fc51 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008aa:	4b68      	ldr	r3, [pc, #416]	@ (8000a4c <MX_ADC1_Init+0x2b8>)
 80008ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008ae:	2318      	movs	r3, #24
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4860      	ldr	r0, [pc, #384]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80008b8:	f001 fe62 	bl	8002580 <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008c2:	f000 fc43 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008c6:	4b62      	ldr	r3, [pc, #392]	@ (8000a50 <MX_ADC1_Init+0x2bc>)
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4858      	ldr	r0, [pc, #352]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80008d6:	f001 fe53 	bl	8002580 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80008e0:	f000 fc34 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a54 <MX_ADC1_Init+0x2c0>)
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008e8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4851      	ldr	r0, [pc, #324]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80008f4:	f001 fe44 	bl	8002580 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80008fe:	f000 fc25 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000902:	4b55      	ldr	r3, [pc, #340]	@ (8000a58 <MX_ADC1_Init+0x2c4>)
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000906:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800090a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	4849      	ldr	r0, [pc, #292]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000912:	f001 fe35 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800091c:	f000 fc16 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000920:	4b4e      	ldr	r3, [pc, #312]	@ (8000a5c <MX_ADC1_Init+0x2c8>)
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000924:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000928:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4842      	ldr	r0, [pc, #264]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000930:	f001 fe26 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800093a:	f000 fc07 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800093e:	4b48      	ldr	r3, [pc, #288]	@ (8000a60 <MX_ADC1_Init+0x2cc>)
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000942:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	483a      	ldr	r0, [pc, #232]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 800094e:	f001 fe17 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000958:	f000 fbf8 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800095c:	4b41      	ldr	r3, [pc, #260]	@ (8000a64 <MX_ADC1_Init+0x2d0>)
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000964:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4833      	ldr	r0, [pc, #204]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 800096c:	f001 fe08 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000976:	f000 fbe9 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800097a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a68 <MX_ADC1_Init+0x2d4>)
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800097e:	f240 2306 	movw	r3, #518	@ 0x206
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	482b      	ldr	r0, [pc, #172]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 800098a:	f001 fdf9 	bl	8002580 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000994:	f000 fbda 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <MX_ADC1_Init+0x2d8>)
 800099a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800099c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80009a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80009a8:	f001 fdea 	bl	8002580 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 80009b2:	f000 fbcb 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80009b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <MX_ADC1_Init+0x2dc>)
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80009ba:	f240 2312 	movw	r3, #530	@ 0x212
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80009c6:	f001 fddb 	bl	8002580 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80009d0:	f000 fbbc 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_ADC1_Init+0x2e0>)
 80009d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80009d8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 80009e4:	f001 fdcc 	bl	8002580 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 80009ee:	f000 fbad 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_ADC1_Init+0x2e4>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80009f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000a02:	f001 fdbd 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000a0c:	f000 fb9e 	bl	800114c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_ADC1_Init+0x2e8>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a14:	f240 3306 	movw	r3, #774	@ 0x306
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_ADC1_Init+0x2a4>)
 8000a20:	f001 fdae 	bl	8002580 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 8000a2a:	f000 fb8f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	@ 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2400003c 	.word	0x2400003c
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	0c900008 	.word	0x0c900008
 8000a44:	10c00010 	.word	0x10c00010
 8000a48:	14f00020 	.word	0x14f00020
 8000a4c:	1d500080 	.word	0x1d500080
 8000a50:	21800100 	.word	0x21800100
 8000a54:	25b00200 	.word	0x25b00200
 8000a58:	2a000400 	.word	0x2a000400
 8000a5c:	2e300800 	.word	0x2e300800
 8000a60:	32601000 	.word	0x32601000
 8000a64:	36902000 	.word	0x36902000
 8000a68:	3ac04000 	.word	0x3ac04000
 8000a6c:	3ef08000 	.word	0x3ef08000
 8000a70:	43210000 	.word	0x43210000
 8000a74:	47520000 	.word	0x47520000
 8000a78:	4b840000 	.word	0x4b840000
 8000a7c:	4fb80000 	.word	0x4fb80000

08000a80 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a84:	4b3d      	ldr	r3, [pc, #244]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000a86:	4a3e      	ldr	r2, [pc, #248]	@ (8000b80 <MX_FDCAN1_Init+0x100>)
 8000a88:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a90:	4b3a      	ldr	r3, [pc, #232]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a96:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000aa8:	4b34      	ldr	r3, [pc, #208]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aae:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ab4:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ab6:	220d      	movs	r2, #13
 8000ab8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000aba:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000ade:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ae0:	221c      	movs	r2, #28
 8000ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aea:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000af0:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b2c:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <MX_FDCAN1_Init+0xfc>)
 8000b2e:	f004 fd3b 	bl	80055a8 <HAL_FDCAN_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b38:	f000 fb08 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_FDCAN1_Init+0x104>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b44:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <MX_FDCAN1_Init+0x108>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000118 	.word	0x24000118
 8000b80:	4000a000 	.word	0x4000a000
 8000b84:	24000850 	.word	0x24000850
 8000b88:	24000894 	.word	0x24000894

08000b8c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b90:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000b92:	4a3e      	ldr	r2, [pc, #248]	@ (8000c8c <MX_FDCAN2_Init+0x100>)
 8000b94:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ba8:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bae:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000bba:	4b33      	ldr	r3, [pc, #204]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8000bc0:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bc2:	220d      	movs	r2, #13
 8000bc4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c38:	4813      	ldr	r0, [pc, #76]	@ (8000c88 <MX_FDCAN2_Init+0xfc>)
 8000c3a:	f004 fcb5 	bl	80055a8 <HAL_FDCAN_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c44:	f000 fa82 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_FDCAN2_Init+0x104>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c50:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <MX_FDCAN2_Init+0x108>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	240001b8 	.word	0x240001b8
 8000c8c:	4000a400 	.word	0x4000a400
 8000c90:	24000850 	.word	0x24000850
 8000c94:	24000894 	.word	0x24000894

08000c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <MX_I2C1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_I2C1_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cd4:	f005 ffa4 	bl	8006c20 <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 fa35 	bl	800114c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000ce6:	f006 f837 	bl	8006d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 fa2c 	bl	800114c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cf8:	f006 f879 	bl	8006dee <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 fa23 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	24000258 	.word	0x24000258
 8000d10:	40005400 	.word	0x40005400
 8000d14:	00707cbb 	.word	0x00707cbb

08000d18 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_I2C3_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <MX_I2C3_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d54:	f005 ff64 	bl	8006c20 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 f9f5 	bl	800114c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d66:	f005 fff7 	bl	8006d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 f9ec 	bl	800114c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_I2C3_Init+0x74>)
 8000d78:	f006 f839 	bl	8006dee <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f9e3 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	240002ac 	.word	0x240002ac
 8000d90:	40005c00 	.word	0x40005c00
 8000d94:	00707cbb 	.word	0x00707cbb

08000d98 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_I2C4_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <MX_I2C4_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000dd4:	f005 ff24 	bl	8006c20 <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f000 f9b5 	bl	800114c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000de6:	f005 ffb7 	bl	8006d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 f9ac 	bl	800114c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_I2C4_Init+0x74>)
 8000df8:	f005 fff9 	bl	8006dee <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 f9a3 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	24000300 	.word	0x24000300
 8000e10:	58001c00 	.word	0x58001c00
 8000e14:	00707cbb 	.word	0x00707cbb

08000e18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e36:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e38:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <MX_TIM1_Init+0xa4>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e3e:	223f      	movs	r2, #63	@ 0x3f
 8000e40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e62:	4815      	ldr	r0, [pc, #84]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e64:	f009 fbfc 	bl	800a660 <HAL_TIM_Base_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e6e:	f000 f96d 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000e80:	f009 fdc6 	bl	800aa10 <HAL_TIM_ConfigClockSource>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e8a:	f000 f95f 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_TIM1_Init+0xa0>)
 8000ea0:	f00a f824 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eaa:	f000 f94f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000354 	.word	0x24000354
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <MX_TIM3_Init+0x98>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000ee6:	223f      	movs	r2, #63	@ 0x3f
 8000ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000ef2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000f06:	f009 fbab 	bl	800a660 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f10:	f000 f91c 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000f22:	f009 fd75 	bl	800aa10 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f000 f90e 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_TIM3_Init+0x94>)
 8000f3e:	f009 ffd5 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f48:	f000 f900 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	240003a0 	.word	0x240003a0
 8000f58:	40000400 	.word	0x40000400

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f64:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f68:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_DMA_Init+0x3c>)
 8000f74:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	200b      	movs	r0, #11
 8000f86:	f002 f960 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f8a:	200b      	movs	r0, #11
 8000f8c:	f002 f977 	bl	800327e <HAL_NVIC_EnableIRQ>

}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	58024400 	.word	0x58024400

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb8:	4a28      	ldr	r2, [pc, #160]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fd6:	4a21      	ldr	r2, [pc, #132]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000fe2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000ff0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ff4:	4a19      	ldr	r2, [pc, #100]	@ (800105c <MX_GPIO_Init+0xc0>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_GPIO_Init+0xc0>)
 8001000:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_GPIO_Init+0xc0>)
 800100e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <MX_GPIO_Init+0xc0>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_GPIO_Init+0xc0>)
 800101e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <MX_GPIO_Init+0xc4>)
 8001032:	f005 fdc1 	bl	8006bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001036:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	@ (8001060 <MX_GPIO_Init+0xc4>)
 8001050:	f005 fc02 	bl	8006858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	@ 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400
 8001060:	58020000 	.word	0x58020000

08001064 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a31      	ldr	r2, [pc, #196]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d159      	bne.n	800112a <HAL_ADC_ConvCpltCallback+0xc6>
		if(AVE_POS < ROLLING_AVE){
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b1f      	cmp	r3, #31
 800107c:	d806      	bhi.n	800108c <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e035      	b.n	80010f8 <HAL_ADC_ConvCpltCallback+0x94>
		}
		else{
			AVE_POS = 0;
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e02a      	b.n	80010ee <HAL_ADC_ConvCpltCallback+0x8a>
				for(int z = 0; z < ROLLING_AVE;z++){
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	e021      	b.n	80010e2 <HAL_ADC_ConvCpltCallback+0x7e>
					if(z == 0){
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10a      	bne.n	80010ba <HAL_ADC_ConvCpltCallback+0x56>
						averages[i] = all_raw_data[i][0];
 80010a4:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <HAL_ADC_ConvCpltCallback+0xdc>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	4413      	add	r3, r2
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010b8:	e010      	b.n	80010dc <HAL_ADC_ConvCpltCallback+0x78>
					}else{
						averages[i]=(averages[i] + all_raw_data[i][z])/2;
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	481f      	ldr	r0, [pc, #124]	@ (8001140 <HAL_ADC_ConvCpltCallback+0xdc>)
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	0151      	lsls	r1, r2, #5
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	440a      	add	r2, r1
 80010cc:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80010d0:	4413      	add	r3, r2
 80010d2:	085a      	lsrs	r2, r3, #1
 80010d4:	491b      	ldr	r1, [pc, #108]	@ (8001144 <HAL_ADC_ConvCpltCallback+0xe0>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int z = 0; z < ROLLING_AVE;z++){
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3301      	adds	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b1f      	cmp	r3, #31
 80010e6:	ddda      	ble.n	800109e <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8cf      	bhi.n	8001098 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e010      	b.n	8001120 <HAL_ADC_ConvCpltCallback+0xbc>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	4910      	ldr	r1, [pc, #64]	@ (8001148 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <HAL_ADC_ConvCpltCallback+0xdc>)
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	0152      	lsls	r2, r2, #5
 8001112:	4413      	add	r3, r2
 8001114:	4602      	mov	r2, r0
 8001116:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8e9      	bhi.n	80010fe <HAL_ADC_ConvCpltCallback+0x9a>
		}
	}
}
 800112a:	bf00      	nop
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000
 800113c:	2400084c 	.word	0x2400084c
 8001140:	2400040c 	.word	0x2400040c
 8001144:	2400080c 	.word	0x2400080c
 8001148:	240003ec 	.word	0x240003ec

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_MspInit+0x30>)
 8001160:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001164:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x30>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x30>)
 8001170:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58024400 	.word	0x58024400

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	@ 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_ADC_MspInit+0x14c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f040 8090 	bne.w	80012d0 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011b6:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80011c0:	4b46      	ldr	r3, [pc, #280]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011c2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d4:	4a41      	ldr	r2, [pc, #260]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011de:	4b3f      	ldr	r3, [pc, #252]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011f2:	4a3a      	ldr	r2, [pc, #232]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 80011fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 800120c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001210:	4a32      	ldr	r2, [pc, #200]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_ADC_MspInit+0x150>)
 800121c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001228:	233f      	movs	r3, #63	@ 0x3f
 800122a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <HAL_ADC_MspInit+0x154>)
 800123c:	f005 fb0c 	bl	8006858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001240:	23ff      	movs	r3, #255	@ 0xff
 8001242:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <HAL_ADC_MspInit+0x158>)
 8001254:	f005 fb00 	bl	8006858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001258:	2303      	movs	r3, #3
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	481f      	ldr	r0, [pc, #124]	@ (80012e8 <HAL_ADC_MspInit+0x15c>)
 800126c:	f005 faf4 	bl	8006858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001270:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <HAL_ADC_MspInit+0x164>)
 8001274:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001276:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 8001278:	2209      	movs	r2, #9
 800127a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 800128a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 8001292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001296:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 800129a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800129e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012b6:	f001 fffd 	bl	80032b4 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80012c0:	f7ff ff44 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_ADC_MspInit+0x160>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	@ 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40022000 	.word	0x40022000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020800 	.word	0x58020800
 80012e4:	58020000 	.word	0x58020000
 80012e8:	58020400 	.word	0x58020400
 80012ec:	240000a0 	.word	0x240000a0
 80012f0:	40020010 	.word	0x40020010

080012f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	@ 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a42      	ldr	r2, [pc, #264]	@ (800141c <HAL_FDCAN_MspInit+0x128>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d140      	bne.n	8001398 <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001316:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a40      	ldr	r2, [pc, #256]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 800131e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001320:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d10e      	bne.n	8001346 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001328:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 800132a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800132e:	4a3d      	ldr	r2, [pc, #244]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001334:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 800133a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 8001348:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800134c:	4a35      	ldr	r2, [pc, #212]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001364:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001376:	2309      	movs	r3, #9
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4829      	ldr	r0, [pc, #164]	@ (8001428 <HAL_FDCAN_MspInit+0x134>)
 8001382:	f005 fa69 	bl	8006858 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2013      	movs	r0, #19
 800138c:	f001 ff5d 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001390:	2013      	movs	r0, #19
 8001392:	f001 ff74 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001396:	e03c      	b.n	8001412 <HAL_FDCAN_MspInit+0x11e>
  else if(hfdcan->Instance==FDCAN2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a23      	ldr	r2, [pc, #140]	@ (800142c <HAL_FDCAN_MspInit+0x138>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d137      	bne.n	8001412 <HAL_FDCAN_MspInit+0x11e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 80013aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_FDCAN_MspInit+0x12c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10e      	bne.n	80013d2 <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013b6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d8:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_FDCAN_MspInit+0x130>)
 80013e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80013f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001402:	2309      	movs	r3, #9
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <HAL_FDCAN_MspInit+0x13c>)
 800140e:	f005 fa23 	bl	8006858 <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	@ 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	4000a000 	.word	0x4000a000
 8001420:	240008e0 	.word	0x240008e0
 8001424:	58024400 	.word	0x58024400
 8001428:	58020000 	.word	0x58020000
 800142c:	4000a400 	.word	0x4000a400
 8001430:	58020400 	.word	0x58020400

08001434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0c0      	sub	sp, #256	@ 0x100
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001450:	22c0      	movs	r2, #192	@ 0xc0
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f009 fdf5 	bl	800b044 <memset>
  if(hi2c->Instance==I2C1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a86      	ldr	r2, [pc, #536]	@ (8001678 <HAL_I2C_MspInit+0x244>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d146      	bne.n	80014f2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001464:	f04f 0208 	mov.w	r2, #8
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	4618      	mov	r0, r3
 800147c:	f006 fce6 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001486:	f7ff fe61 	bl	800114c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b7c      	ldr	r3, [pc, #496]	@ (800167c <HAL_I2C_MspInit+0x248>)
 800148c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001490:	4a7a      	ldr	r2, [pc, #488]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800149a:	4b78      	ldr	r3, [pc, #480]	@ (800167c <HAL_I2C_MspInit+0x248>)
 800149c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23c0      	movs	r3, #192	@ 0xc0
 80014aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014ca:	4619      	mov	r1, r3
 80014cc:	486c      	ldr	r0, [pc, #432]	@ (8001680 <HAL_I2C_MspInit+0x24c>)
 80014ce:	f005 f9c3 	bl	8006858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d2:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80014d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014d8:	4a68      	ldr	r2, [pc, #416]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80014e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80014f0:	e0bd      	b.n	800166e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a63      	ldr	r2, [pc, #396]	@ (8001684 <HAL_I2C_MspInit+0x250>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d16c      	bne.n	80015d6 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014fc:	f04f 0208 	mov.w	r2, #8
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001512:	4618      	mov	r0, r3
 8001514:	f006 fc9a 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800151e:	f7ff fe15 	bl	800114c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	4b56      	ldr	r3, [pc, #344]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001524:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001528:	4a54      	ldr	r2, [pc, #336]	@ (800167c <HAL_I2C_MspInit+0x248>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001532:	4b52      	ldr	r3, [pc, #328]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001534:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001542:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001546:	4a4d      	ldr	r2, [pc, #308]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001550:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001552:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800155e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001566:	2312      	movs	r3, #18
 8001568:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001578:	2304      	movs	r3, #4
 800157a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001582:	4619      	mov	r1, r3
 8001584:	4840      	ldr	r0, [pc, #256]	@ (8001688 <HAL_I2C_MspInit+0x254>)
 8001586:	f005 f967 	bl	8006858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a4:	2304      	movs	r3, #4
 80015a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015ae:	4619      	mov	r1, r3
 80015b0:	4836      	ldr	r0, [pc, #216]	@ (800168c <HAL_I2C_MspInit+0x258>)
 80015b2:	f005 f951 	bl	8006858 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80015b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015bc:	4a2f      	ldr	r2, [pc, #188]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80015be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_I2C_MspInit+0x248>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697b      	ldr	r3, [r7, #20]
}
 80015d4:	e04b      	b.n	800166e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2d      	ldr	r2, [pc, #180]	@ (8001690 <HAL_I2C_MspInit+0x25c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d146      	bne.n	800166e <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015e0:	f04f 0210 	mov.w	r2, #16
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fc28 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001602:	f7ff fda3 	bl	800114c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001608:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800160c:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <HAL_I2C_MspInit+0x248>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001618:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001624:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001628:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800163e:	2306      	movs	r3, #6
 8001640:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <HAL_I2C_MspInit+0x24c>)
 800164c:	f005 f904 	bl	8006858 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001652:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_I2C_MspInit+0x248>)
 8001662:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
}
 800166e:	bf00      	nop
 8001670:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40005400 	.word	0x40005400
 800167c:	58024400 	.word	0x58024400
 8001680:	58020400 	.word	0x58020400
 8001684:	40005c00 	.word	0x40005c00
 8001688:	58020800 	.word	0x58020800
 800168c:	58020000 	.word	0x58020000
 8001690:	58001c00 	.word	0x58001c00

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <HAL_TIM_Base_MspInit+0x74>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10f      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016ac:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016c4:	e01b      	b.n	80016fe <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_TIM_Base_MspInit+0x7c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d116      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016d6:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_TIM_Base_MspInit+0x78>)
 80016e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	201d      	movs	r0, #29
 80016f4:	f001 fda9 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f8:	201d      	movs	r0, #29
 80016fa:	f001 fdc0 	bl	800327e <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	58024400 	.word	0x58024400
 8001710:	40000400 	.word	0x40000400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 fadf 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Stream0_IRQHandler+0x10>)
 800177a:	f002 fb93 	bl	8003ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	240000a0 	.word	0x240000a0

08001788 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <FDCAN1_IT0_IRQHandler+0x10>)
 800178e:	f004 fb67 	bl	8005e60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000118 	.word	0x24000118

0800179c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <TIM3_IRQHandler+0x2c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <TIM3_IRQHandler+0x2c>)
 80017aa:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <TIM3_IRQHandler+0x2c>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b4:	d102      	bne.n	80017bc <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <TIM3_IRQHandler+0x30>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <TIM3_IRQHandler+0x34>)
 80017be:	f009 f81f 	bl	800a800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24000870 	.word	0x24000870
 80017cc:	24000872 	.word	0x24000872
 80017d0:	240003a0 	.word	0x240003a0

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d8:	4b32      	ldr	r3, [pc, #200]	@ (80018a4 <SystemInit+0xd0>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a31      	ldr	r2, [pc, #196]	@ (80018a4 <SystemInit+0xd0>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e8:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <SystemInit+0xd4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d807      	bhi.n	8001804 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017f4:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <SystemInit+0xd4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 030f 	bic.w	r3, r3, #15
 80017fc:	4a2a      	ldr	r2, [pc, #168]	@ (80018a8 <SystemInit+0xd4>)
 80017fe:	f043 0303 	orr.w	r3, r3, #3
 8001802:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <SystemInit+0xd8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <SystemInit+0xd8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <SystemInit+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <SystemInit+0xd8>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4924      	ldr	r1, [pc, #144]	@ (80018ac <SystemInit+0xd8>)
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <SystemInit+0xdc>)
 800181e:	4013      	ands	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <SystemInit+0xd4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <SystemInit+0xd4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 030f 	bic.w	r3, r3, #15
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <SystemInit+0xd4>)
 8001838:	f043 0303 	orr.w	r3, r3, #3
 800183c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <SystemInit+0xd8>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <SystemInit+0xd8>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <SystemInit+0xd8>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <SystemInit+0xd8>)
 8001852:	4a18      	ldr	r2, [pc, #96]	@ (80018b4 <SystemInit+0xe0>)
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <SystemInit+0xd8>)
 8001858:	4a17      	ldr	r2, [pc, #92]	@ (80018b8 <SystemInit+0xe4>)
 800185a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <SystemInit+0xd8>)
 800185e:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <SystemInit+0xe8>)
 8001860:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <SystemInit+0xd8>)
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <SystemInit+0xd8>)
 800186a:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <SystemInit+0xe8>)
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <SystemInit+0xd8>)
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <SystemInit+0xd8>)
 8001876:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <SystemInit+0xe8>)
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <SystemInit+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001880:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <SystemInit+0xd8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <SystemInit+0xd8>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <SystemInit+0xd8>)
 800188e:	2200      	movs	r2, #0
 8001890:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <SystemInit+0xec>)
 8001894:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001898:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00
 80018a8:	52002000 	.word	0x52002000
 80018ac:	58024400 	.word	0x58024400
 80018b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80018b4:	02020200 	.word	0x02020200
 80018b8:	01ff0000 	.word	0x01ff0000
 80018bc:	01010280 	.word	0x01010280
 80018c0:	52004000 	.word	0x52004000

080018c4 <TF_Select>:
#include "functions.h"
#include "main.h"



uint16_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]

	uint16_t transmit = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	81fb      	strh	r3, [r7, #14]

	switch(sensor){
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	f200 8085 	bhi.w	80019ea <TF_Select+0x126>
 80018e0:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <TF_Select+0x24>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	0800191d 	.word	0x0800191d
 80018ec:	0800192d 	.word	0x0800192d
 80018f0:	0800193d 	.word	0x0800193d
 80018f4:	0800194d 	.word	0x0800194d
 80018f8:	0800195d 	.word	0x0800195d
 80018fc:	0800196d 	.word	0x0800196d
 8001900:	0800198d 	.word	0x0800198d
 8001904:	0800197d 	.word	0x0800197d
 8001908:	0800199d 	.word	0x0800199d
 800190c:	080019ad 	.word	0x080019ad
 8001910:	080019bd 	.word	0x080019bd
 8001914:	080019cd 	.word	0x080019cd
 8001918:	080019dd 	.word	0x080019dd
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f869 	bl	80019f8 <TF_3V3>
 8001926:	4603      	mov	r3, r0
 8001928:	81fb      	strh	r3, [r7, #14]
		break;
 800192a:	e05f      	b.n	80019ec <TF_Select+0x128>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f87f 	bl	8001a34 <TF_5V>
 8001936:	4603      	mov	r3, r0
 8001938:	81fb      	strh	r3, [r7, #14]
		break;
 800193a:	e057      	b.n	80019ec <TF_Select+0x128>
	case VOLTAGE_24V:
		transmit = TF_24V(bytes,raw);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f895 	bl	8001a70 <TF_24V>
 8001946:	4603      	mov	r3, r0
 8001948:	81fb      	strh	r3, [r7, #14]
		break;
 800194a:	e04f      	b.n	80019ec <TF_Select+0x128>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f8ab 	bl	8001aac <TF_BPPS>
 8001956:	4603      	mov	r3, r0
 8001958:	81fb      	strh	r3, [r7, #14]
		break;
 800195a:	e047      	b.n	80019ec <TF_Select+0x128>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f8c1 	bl	8001ae8 <TF_APPS>
 8001966:	4603      	mov	r3, r0
 8001968:	81fb      	strh	r3, [r7, #14]
		break;
 800196a:	e03f      	b.n	80019ec <TF_Select+0x128>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f8d7 	bl	8001b24 <TF_FRONT_HEAVE>
 8001976:	4603      	mov	r3, r0
 8001978:	81fb      	strh	r3, [r7, #14]
		break;
 800197a:	e037      	b.n	80019ec <TF_Select+0x128>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8dc 	bl	8001b3e <TF_REAR_HEAVE>
 8001986:	4603      	mov	r3, r0
 8001988:	81fb      	strh	r3, [r7, #14]
		break;
 800198a:	e02f      	b.n	80019ec <TF_Select+0x128>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f8e1 	bl	8001b58 <TF_FRONT_ROLL>
 8001996:	4603      	mov	r3, r0
 8001998:	81fb      	strh	r3, [r7, #14]
		break;
 800199a:	e027      	b.n	80019ec <TF_Select+0x128>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f8e6 	bl	8001b72 <TF_REAR_ROLL>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81fb      	strh	r3, [r7, #14]
		break;
 80019aa:	e01f      	b.n	80019ec <TF_Select+0x128>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f8eb 	bl	8001b8c <TF_TYRE_TEMP>
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]
		break;
 80019ba:	e017      	b.n	80019ec <TF_Select+0x128>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f8f0 	bl	8001ba6 <TF_ANGLE_GEAR>
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]
		break;
 80019ca:	e00f      	b.n	80019ec <TF_Select+0x128>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f8f5 	bl	8001bc0 <TF_WATER_LVL>
 80019d6:	4603      	mov	r3, r0
 80019d8:	81fb      	strh	r3, [r7, #14]
		break;
 80019da:	e007      	b.n	80019ec <TF_Select+0x128>
	case BRK_PRES:
		transmit = TF_BRK_PRES(bytes, raw);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f8fa 	bl	8001bda <TF_BRK_PRES>
 80019e6:	4603      	mov	r3, r0
 80019e8:	81fb      	strh	r3, [r7, #14]
	default:
		//TODO implement error here
		break;
 80019ea:	bf00      	nop
	}

	return transmit;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop

080019f8 <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 8001a04:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001a08:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <TF_3V3+0x38>)
 8001a14:	fba3 1302 	umull	r1, r3, r3, r2
 8001a18:	1ad2      	subs	r2, r2, r3
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001a22:	89bb      	ldrh	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	00100101 	.word	0x00100101

08001a34 <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 5000;
 8001a40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a44:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	fb03 f202 	mul.w	r2, r3, r2
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <TF_5V+0x38>)
 8001a50:	fba3 1302 	umull	r1, r3, r3, r2
 8001a54:	1ad2      	subs	r2, r2, r3
 8001a56:	0852      	lsrs	r2, r2, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	0adb      	lsrs	r3, r3, #11
 8001a5c:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001a5e:	89bb      	ldrh	r3, [r7, #12]

}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	00100101 	.word	0x00100101

08001a70 <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw){
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 24000;
 8001a7c:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001a80:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	fb03 f202 	mul.w	r2, r3, r2
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <TF_24V+0x38>)
 8001a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a90:	1ad2      	subs	r2, r2, r3
 8001a92:	0852      	lsrs	r2, r2, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	0adb      	lsrs	r3, r3, #11
 8001a98:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	00100101 	.word	0x00100101

08001aac <TF_BPPS>:
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001ab8:	23c8      	movs	r3, #200	@ 0xc8
 8001aba:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	fb03 f202 	mul.w	r2, r3, r2
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <TF_BPPS+0x38>)
 8001ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	0adb      	lsrs	r3, r3, #11
 8001ad2:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 8001ad4:	89bb      	ldrh	r3, [r7, #12]

}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	00100101 	.word	0x00100101

08001ae8 <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 8001af4:	2364      	movs	r3, #100	@ 0x64
 8001af6:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	fb03 f202 	mul.w	r2, r3, r2
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <TF_APPS+0x38>)
 8001b02:	fba3 1302 	umull	r1, r3, r3, r2
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0852      	lsrs	r2, r2, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	0adb      	lsrs	r3, r3, #11
 8001b0e:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001b10:	89bb      	ldrh	r3, [r7, #12]

}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	00100101 	.word	0x00100101

08001b24 <TF_FRONT_HEAVE>:
uint16_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]

}
 8001b30:	bf00      	nop
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <TF_REAR_HEAVE>:
uint16_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	6039      	str	r1, [r7, #0]
 8001b48:	71fb      	strb	r3, [r7, #7]

}
 8001b4a:	bf00      	nop
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <TF_FRONT_ROLL>:
uint16_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]

}
 8001b64:	bf00      	nop
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <TF_REAR_ROLL>:
uint16_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6039      	str	r1, [r7, #0]
 8001b7c:	71fb      	strb	r3, [r7, #7]

}
 8001b7e:	bf00      	nop
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <TF_TYRE_TEMP>:
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]

}
 8001b98:	bf00      	nop
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <TF_ANGLE_GEAR>:
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	6039      	str	r1, [r7, #0]
 8001bb0:	71fb      	strb	r3, [r7, #7]

}
 8001bb2:	bf00      	nop
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <TF_WATER_LVL>:
uint16_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]

}
 8001bcc:	bf00      	nop
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <TF_BRK_PRES>:

uint16_t TF_BRK_PRES(uint8_t bytes, uint32_t raw){
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	6039      	str	r1, [r7, #0]
 8001be4:	71fb      	strb	r3, [r7, #7]

}
 8001be6:	bf00      	nop
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <Reset_Handler>:
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c2c <LoopFillZerobss+0xe>
 8001bf8:	f7ff fdec 	bl	80017d4 <SystemInit>
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <LoopFillZerobss+0x12>)
 8001bfe:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x16>)
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x1a>)
 8001c02:	2300      	movs	r3, #0
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:
 8001c06:	58d4      	ldr	r4, [r2, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:
 8001c0c:	18c4      	adds	r4, r0, r3
 8001c0e:	428c      	cmp	r4, r1
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x1e>)
 8001c14:	4c0a      	ldr	r4, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x22>)
 8001c16:	2300      	movs	r3, #0
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:
 8001c1e:	42a2      	cmp	r2, r4
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
 8001c22:	f009 fa17 	bl	800b054 <__libc_init_array>
 8001c26:	f7fe fc93 	bl	8000550 <main>
 8001c2a:	4770      	bx	lr
 8001c2c:	24100000 	.word	0x24100000
 8001c30:	24000000 	.word	0x24000000
 8001c34:	24000010 	.word	0x24000010
 8001c38:	0800b14c 	.word	0x0800b14c
 8001c3c:	24000010 	.word	0x24000010
 8001c40:	240008e8 	.word	0x240008e8

08001c44 <ADC_IRQHandler>:
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f001 faf0 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c54:	f005 ff3a 	bl	8007acc <HAL_RCC_GetSysClockFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_Init+0x68>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4913      	ldr	r1, [pc, #76]	@ (8001cb4 <HAL_Init+0x6c>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_Init+0x68>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb4 <HAL_Init+0x6c>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_Init+0x70>)
 8001c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_Init+0x74>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f814 	bl	8001cc0 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e002      	b.n	8001ca8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca2:	f7ff fa59 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	0800b11c 	.word	0x0800b11c
 8001cb8:	24000004 	.word	0x24000004
 8001cbc:	24000000 	.word	0x24000000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_InitTick+0x60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <HAL_InitTick+0x64>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_InitTick+0x60>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fad5 	bl	800329a <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f001 fa9f 	bl	800324a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <HAL_InitTick+0x68>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2400000c 	.word	0x2400000c
 8001d24:	24000000 	.word	0x24000000
 8001d28:	24000008 	.word	0x24000008

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2400000c 	.word	0x2400000c
 8001d50:	240008e4 	.word	0x240008e4

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	240008e4 	.word	0x240008e4

08001d6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3360      	adds	r3, #96	@ 0x60
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	611a      	str	r2, [r3, #16]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3360      	adds	r3, #96	@ 0x60
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]
  }
}
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3330      	adds	r3, #48	@ 0x30
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	211f      	movs	r1, #31
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 011f 	and.w	r1, r3, #31
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f023 0203 	bic.w	r2, r3, #3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0e5b      	lsrs	r3, r3, #25
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0d1b      	lsrs	r3, r3, #20
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0318 	and.w	r3, r3, #24
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	000fffff 	.word	0x000fffff

08001fc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6093      	str	r3, [r2, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	5fffffc0 	.word	0x5fffffc0

08002000 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002014:	d101      	bne.n	800201a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <LL_ADC_EnableInternalRegulator+0x24>)
 8002036:	4013      	ands	r3, r2
 8002038:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	6fffffc0 	.word	0x6fffffc0

08002050 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002064:	d101      	bne.n	800206a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <LL_ADC_Enable+0x24>)
 8002086:	4013      	ands	r3, r2
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	7fffffc0 	.word	0x7fffffc0

080020a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_IsEnabled+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_IsEnabled+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <LL_ADC_REG_StartConversion+0x24>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	7fffffc0 	.word	0x7fffffc0

080020f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d101      	bne.n	8002108 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b08      	cmp	r3, #8
 8002128:	d101      	bne.n	800212e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e138      	b.n	80023c8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff f811 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff3f 	bl	8002000 <LL_ADC_IsDeepPowerDownEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff25 	bl	8001fdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff5a 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d114      	bne.n	80021cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff3e 	bl	8002028 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ac:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_ADC_Init+0x294>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	4a88      	ldr	r2, [pc, #544]	@ (80023d4 <HAL_ADC_Init+0x298>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	3301      	adds	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021be:	e002      	b.n	80021c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff3d 	bl	8002050 <LL_ADC_IsInternalRegulatorEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff77 	bl	80020f0 <LL_ADC_REG_IsConversionOngoing>
 8002202:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 80d2 	bne.w	80023b6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 80ce 	bne.w	80023b6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff36 	bl	80020a0 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d110      	bne.n	800225c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800223a:	4867      	ldr	r0, [pc, #412]	@ (80023d8 <HAL_ADC_Init+0x29c>)
 800223c:	f7ff ff30 	bl	80020a0 <LL_ADC_IsEnabled>
 8002240:	4604      	mov	r4, r0
 8002242:	4866      	ldr	r0, [pc, #408]	@ (80023dc <HAL_ADC_Init+0x2a0>)
 8002244:	f7ff ff2c 	bl	80020a0 <LL_ADC_IsEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	4323      	orrs	r3, r4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4619      	mov	r1, r3
 8002256:	4862      	ldr	r0, [pc, #392]	@ (80023e0 <HAL_ADC_Init+0x2a4>)
 8002258:	f7ff fd88 	bl	8001d6c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7d5b      	ldrb	r3, [r3, #21]
 8002260:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002266:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800226c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7f1b      	ldrb	r3, [r3, #28]
 8002272:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7f1b      	ldrb	r3, [r3, #28]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	3b01      	subs	r3, #1
 8002286:	045b      	lsls	r3, r3, #17
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_ADC_Init+0x2a8>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	430b      	orrs	r3, r1
 80022bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff14 	bl	80020f0 <LL_ADC_REG_IsConversionOngoing>
 80022c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff21 	bl	8002116 <LL_ADC_INJ_IsConversionOngoing>
 80022d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14a      	bne.n	8002372 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d147      	bne.n	8002372 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7d1b      	ldrb	r3, [r3, #20]
 80022e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <HAL_ADC_Init+0x2ac>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	430b      	orrs	r3, r1
 8002302:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800230a:	2b01      	cmp	r3, #1
 800230c:	d11b      	bne.n	8002346 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <HAL_ADC_Init+0x2b0>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002322:	3a01      	subs	r2, #1
 8002324:	0411      	lsls	r1, r2, #16
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002336:	430a      	orrs	r2, r1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	e007      	b.n	8002356 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fd01 	bl	8002d74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10c      	bne.n	8002394 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f023 010f 	bic.w	r1, r3, #15
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	631a      	str	r2, [r3, #48]	@ 0x30
 8002392:	e007      	b.n	80023a4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020f 	bic.w	r2, r2, #15
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	f023 0303 	bic.w	r3, r3, #3
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023b4:	e007      	b.n	80023c6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3724      	adds	r7, #36	@ 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}
 80023d0:	24000000 	.word	0x24000000
 80023d4:	053e2d63 	.word	0x053e2d63
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40022100 	.word	0x40022100
 80023e0:	40022300 	.word	0x40022300
 80023e4:	fff0c003 	.word	0xfff0c003
 80023e8:	ffffbffc 	.word	0xffffbffc
 80023ec:	fc00f81e 	.word	0xfc00f81e

080023f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fc:	484f      	ldr	r0, [pc, #316]	@ (800253c <HAL_ADC_Start_DMA+0x14c>)
 80023fe:	f7ff fddf 	bl	8001fc0 <LL_ADC_GetMultimode>
 8002402:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fe71 	bl	80020f0 <LL_ADC_REG_IsConversionOngoing>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 808c 	bne.w	800252e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADC_Start_DMA+0x34>
 8002420:	2302      	movs	r3, #2
 8002422:	e087      	b.n	8002534 <HAL_ADC_Start_DMA+0x144>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d002      	beq.n	800243e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b09      	cmp	r3, #9
 800243c:	d170      	bne.n	8002520 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fb88 	bl	8002b54 <ADC_Enable>
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d163      	bne.n	8002516 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <HAL_ADC_Start_DMA+0x150>)
 8002454:	4013      	ands	r3, r2
 8002456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a38      	ldr	r2, [pc, #224]	@ (8002544 <HAL_ADC_Start_DMA+0x154>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d002      	beq.n	800246e <HAL_ADC_Start_DMA+0x7e>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e000      	b.n	8002470 <HAL_ADC_Start_DMA+0x80>
 800246e:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <HAL_ADC_Start_DMA+0x158>)
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4293      	cmp	r3, r2
 8002476:	d002      	beq.n	800247e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	f023 0206 	bic.w	r2, r3, #6
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a27      	ldr	r2, [pc, #156]	@ (800254c <HAL_ADC_Start_DMA+0x15c>)
 80024b0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	4a26      	ldr	r2, [pc, #152]	@ (8002550 <HAL_ADC_Start_DMA+0x160>)
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_ADC_Start_DMA+0x164>)
 80024c0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	221c      	movs	r2, #28
 80024c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0210 	orr.w	r2, r2, #16
 80024e0:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7ff fd04 	bl	8001efa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3340      	adds	r3, #64	@ 0x40
 80024fc:	4619      	mov	r1, r3
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f001 fa65 	bl	80039d0 <HAL_DMA_Start_IT>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdda 	bl	80020c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002514:	e00d      	b.n	8002532 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800251e:	e008      	b.n	8002532 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800252c:	e001      	b.n	8002532 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40022300 	.word	0x40022300
 8002540:	fffff0fe 	.word	0xfffff0fe
 8002544:	40022100 	.word	0x40022100
 8002548:	40022000 	.word	0x40022000
 800254c:	08002c4d 	.word	0x08002c4d
 8002550:	08002d25 	.word	0x08002d25
 8002554:	08002d41 	.word	0x08002d41

08002558 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b0a1      	sub	sp, #132	@ 0x84
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a95      	ldr	r2, [pc, #596]	@ (80027f0 <HAL_ADC_ConfigChannel+0x270>)
 800259a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e2c0      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x5ac>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd9a 	bl	80020f0 <LL_ADC_REG_IsConversionOngoing>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 82a5 	bne.w	8002b0e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db2c      	blt.n	8002626 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d108      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x6a>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2201      	movs	r2, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	e016      	b.n	8002618 <HAL_ADC_ConfigChannel+0x98>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025fa:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2201      	movs	r2, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	69d1      	ldr	r1, [r2, #28]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	430b      	orrs	r3, r1
 8002624:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7ff fc35 	bl	8001ea2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fd57 	bl	80020f0 <LL_ADC_REG_IsConversionOngoing>
 8002642:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd64 	bl	8002116 <LL_ADC_INJ_IsConversionOngoing>
 800264e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80a0 	bne.w	8002798 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 809c 	bne.w	8002798 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	461a      	mov	r2, r3
 800266e:	f7ff fc57 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x118>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	e00a      	b.n	80026ae <HAL_ADC_ConfigChannel+0x12e>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d027      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6919      	ldr	r1, [r3, #16]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c6:	f7ff fb85 	bl	8001dd4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7e5b      	ldrb	r3, [r3, #25]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x160>
 80026da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026de:	e000      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x162>
 80026e0:	2300      	movs	r3, #0
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff fbaf 	bl	8001e46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6919      	ldr	r1, [r3, #16]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7e1b      	ldrb	r3, [r3, #24]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x17e>
 80026f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026fc:	e000      	b.n	8002700 <HAL_ADC_ConfigChannel+0x180>
 80026fe:	2300      	movs	r3, #0
 8002700:	461a      	mov	r2, r3
 8002702:	f7ff fb87 	bl	8001e14 <LL_ADC_SetDataRightShift>
 8002706:	e047      	b.n	8002798 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800272a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800274e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002756:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002772:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002796:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc7f 	bl	80020a0 <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 81bb 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7ff fbde 	bl	8001f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a0b      	ldr	r2, [pc, #44]	@ (80027f0 <HAL_ADC_ConfigChannel+0x270>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f040 8130 	bne.w	8002a28 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x274>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	3301      	adds	r3, #1
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e01b      	b.n	8002828 <HAL_ADC_ConfigChannel+0x2a8>
 80027f0:	47ff0000 	.word	0x47ff0000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002804:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2b09      	cmp	r3, #9
 8002820:	bf94      	ite	ls
 8002822:	2301      	movls	r3, #1
 8002824:	2300      	movhi	r3, #0
 8002826:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002828:	2b00      	cmp	r3, #0
 800282a:	d079      	beq.n	8002920 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2c8>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	3301      	adds	r3, #1
 8002840:	069b      	lsls	r3, r3, #26
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002846:	e015      	b.n	8002874 <HAL_ADC_ConfigChannel+0x2f4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002858:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800285a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e003      	b.n	800286c <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3301      	adds	r3, #1
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x314>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	e017      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x344>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e003      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80028b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x36a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e9b      	lsrs	r3, r3, #26
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	051b      	lsls	r3, r3, #20
 80028e8:	e018      	b.n	800291c <HAL_ADC_ConfigChannel+0x39c>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291c:	430b      	orrs	r3, r1
 800291e:	e07e      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_ADC_ConfigChannel+0x3bc>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293a:	e015      	b.n	8002968 <HAL_ADC_ConfigChannel+0x3e8>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800294e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x408>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	3301      	adds	r3, #1
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	e017      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x438>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	61bb      	str	r3, [r7, #24]
  return result;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	ea42 0103 	orr.w	r1, r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x464>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	3b1e      	subs	r3, #30
 80029dc:	051b      	lsls	r3, r3, #20
 80029de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	e01b      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x49c>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	60fb      	str	r3, [r7, #12]
  return result;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e003      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 021f 	and.w	r2, r3, #31
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	051b      	lsls	r3, r3, #20
 8002a18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6892      	ldr	r2, [r2, #8]
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7ff fa7c 	bl	8001f20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da77      	bge.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a30:	4840      	ldr	r0, [pc, #256]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a32:	f7ff f9c1 	bl	8001db8 <LL_ADC_GetCommonPathInternalCh>
 8002a36:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a38:	483f      	ldr	r0, [pc, #252]	@ (8002b38 <HAL_ADC_ConfigChannel+0x5b8>)
 8002a3a:	f7ff fb31 	bl	80020a0 <LL_ADC_IsEnabled>
 8002a3e:	4604      	mov	r4, r0
 8002a40:	483e      	ldr	r0, [pc, #248]	@ (8002b3c <HAL_ADC_ConfigChannel+0x5bc>)
 8002a42:	f7ff fb2d 	bl	80020a0 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4323      	orrs	r3, r4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d155      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	@ (8002b40 <HAL_ADC_ConfigChannel+0x5c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d122      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x51e>
 8002a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11d      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a35      	ldr	r2, [pc, #212]	@ (8002b3c <HAL_ADC_ConfigChannel+0x5bc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d159      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a72:	4619      	mov	r1, r3
 8002a74:	482f      	ldr	r0, [pc, #188]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a76:	f7ff f98c 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a7a:	4b32      	ldr	r3, [pc, #200]	@ (8002b44 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	4a31      	ldr	r2, [pc, #196]	@ (8002b48 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	3301      	adds	r3, #1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a9c:	e040      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <HAL_ADC_ConfigChannel+0x5cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x54c>
 8002aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_ADC_ConfigChannel+0x5bc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d131      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	481b      	ldr	r0, [pc, #108]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ac6:	f7ff f964 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aca:	e029      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d124      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
 8002ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11f      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <HAL_ADC_ConfigChannel+0x5bc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11a      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002af0:	4619      	mov	r1, r3
 8002af2:	4810      	ldr	r0, [pc, #64]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5b4>)
 8002af4:	f7ff f94d 	bl	8001d92 <LL_ADC_SetCommonPathInternalCh>
 8002af8:	e012      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b0c:	e008      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3784      	adds	r7, #132	@ 0x84
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	40022300 	.word	0x40022300
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40022100 	.word	0x40022100
 8002b40:	cb840000 	.word	0xcb840000
 8002b44:	24000000 	.word	0x24000000
 8002b48:	053e2d63 	.word	0x053e2d63
 8002b4c:	bac04000 	.word	0xbac04000
 8002b50:	cfb80000 	.word	0xcfb80000

08002b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fa9d 	bl	80020a0 <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d161      	bne.n	8002c30 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <ADC_Enable+0xe8>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e04d      	b.n	8002c32 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fa6c 	bl	8002078 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ba0:	f7ff f8d8 	bl	8001d54 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba6:	4826      	ldr	r0, [pc, #152]	@ (8002c40 <ADC_Enable+0xec>)
 8002ba8:	f7ff fa0a 	bl	8001fc0 <LL_ADC_GetMultimode>
 8002bac:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <ADC_Enable+0xf0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d002      	beq.n	8002bbe <ADC_Enable+0x6a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e000      	b.n	8002bc0 <ADC_Enable+0x6c>
 8002bbe:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <ADC_Enable+0xf4>)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d02c      	beq.n	8002c22 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d130      	bne.n	8002c30 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bce:	e028      	b.n	8002c22 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fa63 	bl	80020a0 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fa47 	bl	8002078 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bea:	f7ff f8b3 	bl	8001d54 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d1cf      	bne.n	8002bd0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	8000003f 	.word	0x8000003f
 8002c40:	40022300 	.word	0x40022300
 8002c44:	40022100 	.word	0x40022100
 8002c48:	40022000 	.word	0x40022000

08002c4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d14b      	bne.n	8002cfe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d021      	beq.n	8002cc4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f8f9 	bl	8001e7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d032      	beq.n	8002cf6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12b      	bne.n	8002cf6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002cc2:	e018      	b.n	8002cf6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d111      	bne.n	8002cf6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7fe f9b4 	bl	8001064 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cfc:	e00e      	b.n	8002d1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff fc2e 	bl	800256c <HAL_ADC_ErrorCallback>
}
 8002d10:	e004      	b.n	8002d1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fc10 	bl	8002558 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fc00 	bl	800256c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d7c:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <ADC_ConfigureBoostMode+0x18c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d88:	f005 f81a 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8002d8c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d96:	d010      	beq.n	8002dba <ADC_ConfigureBoostMode+0x46>
 8002d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d9c:	d873      	bhi.n	8002e86 <ADC_ConfigureBoostMode+0x112>
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da2:	d002      	beq.n	8002daa <ADC_ConfigureBoostMode+0x36>
 8002da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da8:	d16d      	bne.n	8002e86 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	60fb      	str	r3, [r7, #12]
        break;
 8002db8:	e068      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
        break;
 8002dc0:	e064      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002dc2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	f006 f9fd 	bl	80091c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002dd8:	d051      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x10a>
 8002dda:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002dde:	d854      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002de0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002de4:	d047      	beq.n	8002e76 <ADC_ConfigureBoostMode+0x102>
 8002de6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002dea:	d84e      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002dec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002df0:	d03d      	beq.n	8002e6e <ADC_ConfigureBoostMode+0xfa>
 8002df2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002df6:	d848      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfc:	d033      	beq.n	8002e66 <ADC_ConfigureBoostMode+0xf2>
 8002dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e02:	d842      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e04:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e08:	d029      	beq.n	8002e5e <ADC_ConfigureBoostMode+0xea>
 8002e0a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e0e:	d83c      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e10:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e14:	d01a      	beq.n	8002e4c <ADC_ConfigureBoostMode+0xd8>
 8002e16:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e1a:	d836      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e1c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e20:	d014      	beq.n	8002e4c <ADC_ConfigureBoostMode+0xd8>
 8002e22:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e26:	d830      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e2c:	d00e      	beq.n	8002e4c <ADC_ConfigureBoostMode+0xd8>
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e32:	d82a      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e38:	d008      	beq.n	8002e4c <ADC_ConfigureBoostMode+0xd8>
 8002e3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e3e:	d824      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x116>
 8002e40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e44:	d002      	beq.n	8002e4c <ADC_ConfigureBoostMode+0xd8>
 8002e46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e4a:	d11e      	bne.n	8002e8a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	60fb      	str	r3, [r7, #12]
        break;
 8002e5c:	e016      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
        break;
 8002e64:	e012      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	60fb      	str	r3, [r7, #12]
        break;
 8002e6c:	e00e      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	60fb      	str	r3, [r7, #12]
        break;
 8002e74:	e00a      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	09db      	lsrs	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
        break;
 8002e7c:	e006      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	60fb      	str	r3, [r7, #12]
        break;
 8002e84:	e002      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
        break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002e8a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a1b      	ldr	r2, [pc, #108]	@ (8002f04 <ADC_ConfigureBoostMode+0x190>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d808      	bhi.n	8002eac <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ea8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002eaa:	e025      	b.n	8002ef8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <ADC_ConfigureBoostMode+0x194>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d80a      	bhi.n	8002eca <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	e016      	b.n	8002ef8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f0c <ADC_ConfigureBoostMode+0x198>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d80a      	bhi.n	8002ee8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee4:	609a      	str	r2, [r3, #8]
}
 8002ee6:	e007      	b.n	8002ef8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40022300 	.word	0x40022300
 8002f04:	005f5e10 	.word	0x005f5e10
 8002f08:	00bebc20 	.word	0x00bebc20
 8002f0c:	017d7840 	.word	0x017d7840

08002f10 <LL_ADC_IsEnabled>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_IsEnabled+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_IsEnabled+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b09f      	sub	sp, #124	@ 0x7c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e080      	b.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f94:	4b3c      	ldr	r3, [pc, #240]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	e001      	b.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e05f      	b.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ffb9 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ffb3 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d141      	bne.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d13e      	bne.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002fde:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffa:	4822      	ldr	r0, [pc, #136]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ffc:	f7ff ff88 	bl	8002f10 <LL_ADC_IsEnabled>
 8003000:	4604      	mov	r4, r0
 8003002:	4821      	ldr	r0, [pc, #132]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003004:	f7ff ff84 	bl	8002f10 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d12e      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b1e      	ldr	r3, [pc, #120]	@ (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003016:	4013      	ands	r3, r2
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	430a      	orrs	r2, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003026:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003028:	e021      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800302a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003034:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003036:	4813      	ldr	r0, [pc, #76]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003038:	f7ff ff6a 	bl	8002f10 <LL_ADC_IsEnabled>
 800303c:	4604      	mov	r4, r0
 800303e:	4812      	ldr	r0, [pc, #72]	@ (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003040:	f7ff ff66 	bl	8002f10 <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	4323      	orrs	r3, r4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d110      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800304c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b0f      	ldr	r3, [pc, #60]	@ (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003052:	4013      	ands	r3, r2
 8003054:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003056:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003058:	e009      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800306c:	e000      	b.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800306e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003078:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800307c:	4618      	mov	r0, r3
 800307e:	377c      	adds	r7, #124	@ 0x7c
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	40022000 	.word	0x40022000
 8003088:	40022100 	.word	0x40022100
 800308c:	40022300 	.word	0x40022300
 8003090:	fffff0e0 	.word	0xfffff0e0

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x40>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c2:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <__NVIC_SetPriorityGrouping+0x40>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00
 80030d8:	05fa0000 	.word	0x05fa0000

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	@ (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff29 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff40 	bl	80030dc <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff90 	bl	8003188 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5f 	bl	8003134 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff33 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffa4 	bl	80031f0 <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7fe fd4a 	bl	8001d54 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e37d      	b.n	80039c8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a66      	ldr	r2, [pc, #408]	@ (800346c <HAL_DMA_Init+0x1b8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a65      	ldr	r2, [pc, #404]	@ (8003470 <HAL_DMA_Init+0x1bc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a63      	ldr	r2, [pc, #396]	@ (8003474 <HAL_DMA_Init+0x1c0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a62      	ldr	r2, [pc, #392]	@ (8003478 <HAL_DMA_Init+0x1c4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a60      	ldr	r2, [pc, #384]	@ (800347c <HAL_DMA_Init+0x1c8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <HAL_DMA_Init+0xb8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5f      	ldr	r2, [pc, #380]	@ (8003480 <HAL_DMA_Init+0x1cc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5d      	ldr	r2, [pc, #372]	@ (8003484 <HAL_DMA_Init+0x1d0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5c      	ldr	r2, [pc, #368]	@ (8003488 <HAL_DMA_Init+0x1d4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5a      	ldr	r2, [pc, #360]	@ (800348c <HAL_DMA_Init+0x1d8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a59      	ldr	r2, [pc, #356]	@ (8003490 <HAL_DMA_Init+0x1dc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a57      	ldr	r2, [pc, #348]	@ (8003494 <HAL_DMA_Init+0x1e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_DMA_Init+0x1e4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a54      	ldr	r2, [pc, #336]	@ (800349c <HAL_DMA_Init+0x1e8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a53      	ldr	r2, [pc, #332]	@ (80034a0 <HAL_DMA_Init+0x1ec>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a51      	ldr	r2, [pc, #324]	@ (80034a4 <HAL_DMA_Init+0x1f0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a50      	ldr	r2, [pc, #320]	@ (80034a8 <HAL_DMA_Init+0x1f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0xbc>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_DMA_Init+0xbe>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 813c 	beq.w	80035f0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a37      	ldr	r2, [pc, #220]	@ (800346c <HAL_DMA_Init+0x1b8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a36      	ldr	r2, [pc, #216]	@ (8003470 <HAL_DMA_Init+0x1bc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a34      	ldr	r2, [pc, #208]	@ (8003474 <HAL_DMA_Init+0x1c0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a33      	ldr	r2, [pc, #204]	@ (8003478 <HAL_DMA_Init+0x1c4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a31      	ldr	r2, [pc, #196]	@ (800347c <HAL_DMA_Init+0x1c8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a30      	ldr	r2, [pc, #192]	@ (8003480 <HAL_DMA_Init+0x1cc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <HAL_DMA_Init+0x1d0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003488 <HAL_DMA_Init+0x1d4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	@ (800348c <HAL_DMA_Init+0x1d8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003490 <HAL_DMA_Init+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <HAL_DMA_Init+0x1e0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Init+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <HAL_DMA_Init+0x1e4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a25      	ldr	r2, [pc, #148]	@ (800349c <HAL_DMA_Init+0x1e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <HAL_DMA_Init+0x1ec>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_DMA_Init+0x1f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_DMA_Init+0x1f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <HAL_DMA_Init+0x186>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e007      	b.n	800344a <HAL_DMA_Init+0x196>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800344a:	e02f      	b.n	80034ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344c:	f7fe fc82 	bl	8001d54 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b05      	cmp	r3, #5
 8003458:	d928      	bls.n	80034ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2203      	movs	r2, #3
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e2ad      	b.n	80039c8 <HAL_DMA_Init+0x714>
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1c8      	bne.n	800344c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4b73      	ldr	r3, [pc, #460]	@ (8003694 <HAL_DMA_Init+0x3e0>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	4313      	orrs	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b28      	cmp	r3, #40	@ 0x28
 8003516:	d903      	bls.n	8003520 <HAL_DMA_Init+0x26c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b2e      	cmp	r3, #46	@ 0x2e
 800351e:	d91f      	bls.n	8003560 <HAL_DMA_Init+0x2ac>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b3e      	cmp	r3, #62	@ 0x3e
 8003526:	d903      	bls.n	8003530 <HAL_DMA_Init+0x27c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b42      	cmp	r3, #66	@ 0x42
 800352e:	d917      	bls.n	8003560 <HAL_DMA_Init+0x2ac>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b46      	cmp	r3, #70	@ 0x46
 8003536:	d903      	bls.n	8003540 <HAL_DMA_Init+0x28c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b48      	cmp	r3, #72	@ 0x48
 800353e:	d90f      	bls.n	8003560 <HAL_DMA_Init+0x2ac>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b4e      	cmp	r3, #78	@ 0x4e
 8003546:	d903      	bls.n	8003550 <HAL_DMA_Init+0x29c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b52      	cmp	r3, #82	@ 0x52
 800354e:	d907      	bls.n	8003560 <HAL_DMA_Init+0x2ac>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b73      	cmp	r3, #115	@ 0x73
 8003556:	d905      	bls.n	8003564 <HAL_DMA_Init+0x2b0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b77      	cmp	r3, #119	@ 0x77
 800355e:	d801      	bhi.n	8003564 <HAL_DMA_Init+0x2b0>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_DMA_Init+0x2b2>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003570:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 0307 	bic.w	r3, r3, #7
 8003588:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d117      	bne.n	80035cc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f001 fe70 	bl	8005294 <DMA_CheckFifoParam>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2240      	movs	r2, #64	@ 0x40
 80035be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e1fd      	b.n	80039c8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f001 fdab 	bl	8005130 <DMA_CalcBaseAndBitshift>
 80035da:	4603      	mov	r3, r0
 80035dc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	223f      	movs	r2, #63	@ 0x3f
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	e0fd      	b.n	80037ec <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a28      	ldr	r2, [pc, #160]	@ (8003698 <HAL_DMA_Init+0x3e4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04a      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a27      	ldr	r2, [pc, #156]	@ (800369c <HAL_DMA_Init+0x3e8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d045      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a25      	ldr	r2, [pc, #148]	@ (80036a0 <HAL_DMA_Init+0x3ec>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d040      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <HAL_DMA_Init+0x3f0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d03b      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a22      	ldr	r2, [pc, #136]	@ (80036a8 <HAL_DMA_Init+0x3f4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d036      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <HAL_DMA_Init+0x3f8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d031      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1f      	ldr	r2, [pc, #124]	@ (80036b0 <HAL_DMA_Init+0x3fc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d02c      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1e      	ldr	r2, [pc, #120]	@ (80036b4 <HAL_DMA_Init+0x400>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d027      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_DMA_Init+0x404>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d022      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <HAL_DMA_Init+0x408>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01d      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	@ (80036c0 <HAL_DMA_Init+0x40c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_DMA_Init+0x410>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <HAL_DMA_Init+0x414>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a15      	ldr	r2, [pc, #84]	@ (80036cc <HAL_DMA_Init+0x418>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <HAL_DMA_Init+0x41c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_DMA_Init+0x3dc>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <HAL_DMA_Init+0x420>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d123      	bne.n	80036d8 <HAL_DMA_Init+0x424>
 8003690:	2301      	movs	r3, #1
 8003692:	e022      	b.n	80036da <HAL_DMA_Init+0x426>
 8003694:	fe10803f 	.word	0xfe10803f
 8003698:	48022c08 	.word	0x48022c08
 800369c:	48022c1c 	.word	0x48022c1c
 80036a0:	48022c30 	.word	0x48022c30
 80036a4:	48022c44 	.word	0x48022c44
 80036a8:	48022c58 	.word	0x48022c58
 80036ac:	48022c6c 	.word	0x48022c6c
 80036b0:	48022c80 	.word	0x48022c80
 80036b4:	48022c94 	.word	0x48022c94
 80036b8:	58025408 	.word	0x58025408
 80036bc:	5802541c 	.word	0x5802541c
 80036c0:	58025430 	.word	0x58025430
 80036c4:	58025444 	.word	0x58025444
 80036c8:	58025458 	.word	0x58025458
 80036cc:	5802546c 	.word	0x5802546c
 80036d0:	58025480 	.word	0x58025480
 80036d4:	58025494 	.word	0x58025494
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d07d      	beq.n	80037da <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7f      	ldr	r2, [pc, #508]	@ (80038e0 <HAL_DMA_Init+0x62c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d021      	beq.n	800372c <HAL_DMA_Init+0x478>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7d      	ldr	r2, [pc, #500]	@ (80038e4 <HAL_DMA_Init+0x630>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01c      	beq.n	800372c <HAL_DMA_Init+0x478>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7c      	ldr	r2, [pc, #496]	@ (80038e8 <HAL_DMA_Init+0x634>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d017      	beq.n	800372c <HAL_DMA_Init+0x478>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7a      	ldr	r2, [pc, #488]	@ (80038ec <HAL_DMA_Init+0x638>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d012      	beq.n	800372c <HAL_DMA_Init+0x478>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a79      	ldr	r2, [pc, #484]	@ (80038f0 <HAL_DMA_Init+0x63c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00d      	beq.n	800372c <HAL_DMA_Init+0x478>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a77      	ldr	r2, [pc, #476]	@ (80038f4 <HAL_DMA_Init+0x640>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d008      	beq.n	800372c <HAL_DMA_Init+0x478>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a76      	ldr	r2, [pc, #472]	@ (80038f8 <HAL_DMA_Init+0x644>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <HAL_DMA_Init+0x478>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a74      	ldr	r2, [pc, #464]	@ (80038fc <HAL_DMA_Init+0x648>)
 800372a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4b6e      	ldr	r3, [pc, #440]	@ (8003900 <HAL_DMA_Init+0x64c>)
 8003748:	4013      	ands	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x4b2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b80      	cmp	r3, #128	@ 0x80
 800375a:	d102      	bne.n	8003762 <HAL_DMA_Init+0x4ae>
 800375c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003760:	e002      	b.n	8003768 <HAL_DMA_Init+0x4b4>
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_DMA_Init+0x4b4>
 8003766:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68d2      	ldr	r2, [r2, #12]
 800376c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800376e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003776:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800377e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003786:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800378e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003796:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b55      	ldr	r3, [pc, #340]	@ (8003904 <HAL_DMA_Init+0x650>)
 80037ae:	4413      	add	r3, r2
 80037b0:	4a55      	ldr	r2, [pc, #340]	@ (8003908 <HAL_DMA_Init+0x654>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 fcb6 	bl	8005130 <DMA_CalcBaseAndBitshift>
 80037c4:	4603      	mov	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	e008      	b.n	80037ec <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2240      	movs	r2, #64	@ 0x40
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0ed      	b.n	80039c8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a46      	ldr	r2, [pc, #280]	@ (800390c <HAL_DMA_Init+0x658>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d072      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a45      	ldr	r2, [pc, #276]	@ (8003910 <HAL_DMA_Init+0x65c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d06d      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a43      	ldr	r2, [pc, #268]	@ (8003914 <HAL_DMA_Init+0x660>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d068      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a42      	ldr	r2, [pc, #264]	@ (8003918 <HAL_DMA_Init+0x664>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d063      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a40      	ldr	r2, [pc, #256]	@ (800391c <HAL_DMA_Init+0x668>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d05e      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3f      	ldr	r2, [pc, #252]	@ (8003920 <HAL_DMA_Init+0x66c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d059      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3d      	ldr	r2, [pc, #244]	@ (8003924 <HAL_DMA_Init+0x670>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d054      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3c      	ldr	r2, [pc, #240]	@ (8003928 <HAL_DMA_Init+0x674>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04f      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3a      	ldr	r2, [pc, #232]	@ (800392c <HAL_DMA_Init+0x678>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d04a      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a39      	ldr	r2, [pc, #228]	@ (8003930 <HAL_DMA_Init+0x67c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d045      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a37      	ldr	r2, [pc, #220]	@ (8003934 <HAL_DMA_Init+0x680>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d040      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a36      	ldr	r2, [pc, #216]	@ (8003938 <HAL_DMA_Init+0x684>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d03b      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a34      	ldr	r2, [pc, #208]	@ (800393c <HAL_DMA_Init+0x688>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d036      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a33      	ldr	r2, [pc, #204]	@ (8003940 <HAL_DMA_Init+0x68c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d031      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a31      	ldr	r2, [pc, #196]	@ (8003944 <HAL_DMA_Init+0x690>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02c      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <HAL_DMA_Init+0x694>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d027      	beq.n	80038dc <HAL_DMA_Init+0x628>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <HAL_DMA_Init+0x62c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMA_Init+0x628>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_DMA_Init+0x630>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01d      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_DMA_Init+0x634>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0f      	ldr	r2, [pc, #60]	@ (80038ec <HAL_DMA_Init+0x638>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	@ (80038f0 <HAL_DMA_Init+0x63c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <HAL_DMA_Init+0x640>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <HAL_DMA_Init+0x644>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_Init+0x628>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a09      	ldr	r2, [pc, #36]	@ (80038fc <HAL_DMA_Init+0x648>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d137      	bne.n	800394c <HAL_DMA_Init+0x698>
 80038dc:	2301      	movs	r3, #1
 80038de:	e036      	b.n	800394e <HAL_DMA_Init+0x69a>
 80038e0:	58025408 	.word	0x58025408
 80038e4:	5802541c 	.word	0x5802541c
 80038e8:	58025430 	.word	0x58025430
 80038ec:	58025444 	.word	0x58025444
 80038f0:	58025458 	.word	0x58025458
 80038f4:	5802546c 	.word	0x5802546c
 80038f8:	58025480 	.word	0x58025480
 80038fc:	58025494 	.word	0x58025494
 8003900:	fffe000f 	.word	0xfffe000f
 8003904:	a7fdabf8 	.word	0xa7fdabf8
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	40020010 	.word	0x40020010
 8003910:	40020028 	.word	0x40020028
 8003914:	40020040 	.word	0x40020040
 8003918:	40020058 	.word	0x40020058
 800391c:	40020070 	.word	0x40020070
 8003920:	40020088 	.word	0x40020088
 8003924:	400200a0 	.word	0x400200a0
 8003928:	400200b8 	.word	0x400200b8
 800392c:	40020410 	.word	0x40020410
 8003930:	40020428 	.word	0x40020428
 8003934:	40020440 	.word	0x40020440
 8003938:	40020458 	.word	0x40020458
 800393c:	40020470 	.word	0x40020470
 8003940:	40020488 	.word	0x40020488
 8003944:	400204a0 	.word	0x400204a0
 8003948:	400204b8 	.word	0x400204b8
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d032      	beq.n	80039b8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 fd1a 	bl	800538c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b80      	cmp	r3, #128	@ 0x80
 800395e:	d102      	bne.n	8003966 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800397a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_DMA_Init+0x6f2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d80c      	bhi.n	80039a6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f001 fd97 	bl	80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	e008      	b.n	80039b8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e226      	b.n	8003e3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_DMA_Start_IT+0x2a>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e21f      	b.n	8003e3a <HAL_DMA_Start_IT+0x46a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 820a 	bne.w	8003e24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <HAL_DMA_Start_IT+0x1f4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a66      	ldr	r2, [pc, #408]	@ (8003bc8 <HAL_DMA_Start_IT+0x1f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_DMA_Start_IT+0x1fc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a63      	ldr	r2, [pc, #396]	@ (8003bd0 <HAL_DMA_Start_IT+0x200>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a62      	ldr	r2, [pc, #392]	@ (8003bd4 <HAL_DMA_Start_IT+0x204>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a60      	ldr	r2, [pc, #384]	@ (8003bd8 <HAL_DMA_Start_IT+0x208>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bdc <HAL_DMA_Start_IT+0x20c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_DMA_Start_IT+0x210>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5c      	ldr	r2, [pc, #368]	@ (8003be4 <HAL_DMA_Start_IT+0x214>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003be8 <HAL_DMA_Start_IT+0x218>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a59      	ldr	r2, [pc, #356]	@ (8003bec <HAL_DMA_Start_IT+0x21c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a57      	ldr	r2, [pc, #348]	@ (8003bf0 <HAL_DMA_Start_IT+0x220>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a56      	ldr	r2, [pc, #344]	@ (8003bf4 <HAL_DMA_Start_IT+0x224>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a54      	ldr	r2, [pc, #336]	@ (8003bf8 <HAL_DMA_Start_IT+0x228>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a53      	ldr	r2, [pc, #332]	@ (8003bfc <HAL_DMA_Start_IT+0x22c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_Start_IT+0xee>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a51      	ldr	r2, [pc, #324]	@ (8003c00 <HAL_DMA_Start_IT+0x230>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_Start_IT+0x100>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_DMA_Start_IT+0x110>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f001 f93e 	bl	8004d68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	@ (8003bc4 <HAL_DMA_Start_IT+0x1f4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <HAL_DMA_Start_IT+0x1f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a31      	ldr	r2, [pc, #196]	@ (8003bcc <HAL_DMA_Start_IT+0x1fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	@ (8003bd0 <HAL_DMA_Start_IT+0x200>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd4 <HAL_DMA_Start_IT+0x204>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd8 <HAL_DMA_Start_IT+0x208>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_DMA_Start_IT+0x20c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <HAL_DMA_Start_IT+0x210>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	@ (8003be4 <HAL_DMA_Start_IT+0x214>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	@ (8003be8 <HAL_DMA_Start_IT+0x218>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a25      	ldr	r2, [pc, #148]	@ (8003bec <HAL_DMA_Start_IT+0x21c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	@ (8003bf0 <HAL_DMA_Start_IT+0x220>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <HAL_DMA_Start_IT+0x224>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <HAL_DMA_Start_IT+0x228>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bfc <HAL_DMA_Start_IT+0x22c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Start_IT+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	@ (8003c00 <HAL_DMA_Start_IT+0x230>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Start_IT+0x1c0>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_Start_IT+0x1c2>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d036      	beq.n	8003c04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 021e 	bic.w	r2, r3, #30
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0216 	orr.w	r2, r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03e      	beq.n	8003c30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e035      	b.n	8003c30 <HAL_DMA_Start_IT+0x260>
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 020e 	bic.w	r2, r3, #14
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 020a 	orr.w	r2, r2, #10
 8003c16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0204 	orr.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a83      	ldr	r2, [pc, #524]	@ (8003e44 <HAL_DMA_Start_IT+0x474>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d072      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a82      	ldr	r2, [pc, #520]	@ (8003e48 <HAL_DMA_Start_IT+0x478>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d06d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a80      	ldr	r2, [pc, #512]	@ (8003e4c <HAL_DMA_Start_IT+0x47c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d068      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7f      	ldr	r2, [pc, #508]	@ (8003e50 <HAL_DMA_Start_IT+0x480>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d063      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e54 <HAL_DMA_Start_IT+0x484>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d05e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	@ (8003e58 <HAL_DMA_Start_IT+0x488>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d059      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7a      	ldr	r2, [pc, #488]	@ (8003e5c <HAL_DMA_Start_IT+0x48c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d054      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a79      	ldr	r2, [pc, #484]	@ (8003e60 <HAL_DMA_Start_IT+0x490>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d04f      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a77      	ldr	r2, [pc, #476]	@ (8003e64 <HAL_DMA_Start_IT+0x494>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a76      	ldr	r2, [pc, #472]	@ (8003e68 <HAL_DMA_Start_IT+0x498>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a74      	ldr	r2, [pc, #464]	@ (8003e6c <HAL_DMA_Start_IT+0x49c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	@ (8003e70 <HAL_DMA_Start_IT+0x4a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a71      	ldr	r2, [pc, #452]	@ (8003e74 <HAL_DMA_Start_IT+0x4a4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a70      	ldr	r2, [pc, #448]	@ (8003e78 <HAL_DMA_Start_IT+0x4a8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_DMA_Start_IT+0x4ac>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6d      	ldr	r2, [pc, #436]	@ (8003e80 <HAL_DMA_Start_IT+0x4b0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003e84 <HAL_DMA_Start_IT+0x4b4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <HAL_DMA_Start_IT+0x4b8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	@ (8003e8c <HAL_DMA_Start_IT+0x4bc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a67      	ldr	r2, [pc, #412]	@ (8003e90 <HAL_DMA_Start_IT+0x4c0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	@ (8003e94 <HAL_DMA_Start_IT+0x4c4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a64      	ldr	r2, [pc, #400]	@ (8003e98 <HAL_DMA_Start_IT+0x4c8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a62      	ldr	r2, [pc, #392]	@ (8003e9c <HAL_DMA_Start_IT+0x4cc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a61      	ldr	r2, [pc, #388]	@ (8003ea0 <HAL_DMA_Start_IT+0x4d0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Start_IT+0x354>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_Start_IT+0x356>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01a      	beq.n	8003d60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a37      	ldr	r2, [pc, #220]	@ (8003e44 <HAL_DMA_Start_IT+0x474>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d04a      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a36      	ldr	r2, [pc, #216]	@ (8003e48 <HAL_DMA_Start_IT+0x478>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d045      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <HAL_DMA_Start_IT+0x47c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d040      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <HAL_DMA_Start_IT+0x480>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d03b      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_DMA_Start_IT+0x484>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d036      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a30      	ldr	r2, [pc, #192]	@ (8003e58 <HAL_DMA_Start_IT+0x488>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d031      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e5c <HAL_DMA_Start_IT+0x48c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02c      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <HAL_DMA_Start_IT+0x490>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d027      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e64 <HAL_DMA_Start_IT+0x494>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003e68 <HAL_DMA_Start_IT+0x498>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01d      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <HAL_DMA_Start_IT+0x49c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <HAL_DMA_Start_IT+0x4a0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	@ (8003e74 <HAL_DMA_Start_IT+0x4a4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a24      	ldr	r2, [pc, #144]	@ (8003e78 <HAL_DMA_Start_IT+0x4a8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <HAL_DMA_Start_IT+0x4ac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_Start_IT+0x430>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <HAL_DMA_Start_IT+0x4b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d108      	bne.n	8003e12 <HAL_DMA_Start_IT+0x442>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e012      	b.n	8003e38 <HAL_DMA_Start_IT+0x468>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e009      	b.n	8003e38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40020010 	.word	0x40020010
 8003e48:	40020028 	.word	0x40020028
 8003e4c:	40020040 	.word	0x40020040
 8003e50:	40020058 	.word	0x40020058
 8003e54:	40020070 	.word	0x40020070
 8003e58:	40020088 	.word	0x40020088
 8003e5c:	400200a0 	.word	0x400200a0
 8003e60:	400200b8 	.word	0x400200b8
 8003e64:	40020410 	.word	0x40020410
 8003e68:	40020428 	.word	0x40020428
 8003e6c:	40020440 	.word	0x40020440
 8003e70:	40020458 	.word	0x40020458
 8003e74:	40020470 	.word	0x40020470
 8003e78:	40020488 	.word	0x40020488
 8003e7c:	400204a0 	.word	0x400204a0
 8003e80:	400204b8 	.word	0x400204b8
 8003e84:	58025408 	.word	0x58025408
 8003e88:	5802541c 	.word	0x5802541c
 8003e8c:	58025430 	.word	0x58025430
 8003e90:	58025444 	.word	0x58025444
 8003e94:	58025458 	.word	0x58025458
 8003e98:	5802546c 	.word	0x5802546c
 8003e9c:	58025480 	.word	0x58025480
 8003ea0:	58025494 	.word	0x58025494

08003ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eb0:	4b67      	ldr	r3, [pc, #412]	@ (8004050 <HAL_DMA_IRQHandler+0x1ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a67      	ldr	r2, [pc, #412]	@ (8004054 <HAL_DMA_IRQHandler+0x1b0>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0a9b      	lsrs	r3, r3, #10
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5f      	ldr	r2, [pc, #380]	@ (8004058 <HAL_DMA_IRQHandler+0x1b4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800405c <HAL_DMA_IRQHandler+0x1b8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5c      	ldr	r2, [pc, #368]	@ (8004060 <HAL_DMA_IRQHandler+0x1bc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8004064 <HAL_DMA_IRQHandler+0x1c0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a59      	ldr	r2, [pc, #356]	@ (8004068 <HAL_DMA_IRQHandler+0x1c4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a57      	ldr	r2, [pc, #348]	@ (800406c <HAL_DMA_IRQHandler+0x1c8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a56      	ldr	r2, [pc, #344]	@ (8004070 <HAL_DMA_IRQHandler+0x1cc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a54      	ldr	r2, [pc, #336]	@ (8004074 <HAL_DMA_IRQHandler+0x1d0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a53      	ldr	r2, [pc, #332]	@ (8004078 <HAL_DMA_IRQHandler+0x1d4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a51      	ldr	r2, [pc, #324]	@ (800407c <HAL_DMA_IRQHandler+0x1d8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a50      	ldr	r2, [pc, #320]	@ (8004080 <HAL_DMA_IRQHandler+0x1dc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a4e      	ldr	r2, [pc, #312]	@ (8004084 <HAL_DMA_IRQHandler+0x1e0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4d      	ldr	r2, [pc, #308]	@ (8004088 <HAL_DMA_IRQHandler+0x1e4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800408c <HAL_DMA_IRQHandler+0x1e8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <HAL_DMA_IRQHandler+0x1ec>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xd2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a48      	ldr	r2, [pc, #288]	@ (8004094 <HAL_DMA_IRQHandler+0x1f0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_DMA_IRQHandler+0xd6>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_DMA_IRQHandler+0xd8>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 842b 	beq.w	80047d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80a2 	beq.w	80040dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004058 <HAL_DMA_IRQHandler+0x1b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <HAL_DMA_IRQHandler+0x1b8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004060 <HAL_DMA_IRQHandler+0x1bc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2a      	ldr	r2, [pc, #168]	@ (8004064 <HAL_DMA_IRQHandler+0x1c0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <HAL_DMA_IRQHandler+0x1c4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a27      	ldr	r2, [pc, #156]	@ (800406c <HAL_DMA_IRQHandler+0x1c8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <HAL_DMA_IRQHandler+0x1cc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a24      	ldr	r2, [pc, #144]	@ (8004074 <HAL_DMA_IRQHandler+0x1d0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_DMA_IRQHandler+0x1d4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	@ (800407c <HAL_DMA_IRQHandler+0x1d8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_DMA_IRQHandler+0x1dc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <HAL_DMA_IRQHandler+0x1e0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_DMA_IRQHandler+0x1e4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_DMA_IRQHandler+0x1e8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	@ (8004090 <HAL_DMA_IRQHandler+0x1ec>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_IRQHandler+0x194>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <HAL_DMA_IRQHandler+0x1f0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d12f      	bne.n	8004098 <HAL_DMA_IRQHandler+0x1f4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e02e      	b.n	80040ac <HAL_DMA_IRQHandler+0x208>
 800404e:	bf00      	nop
 8004050:	24000000 	.word	0x24000000
 8004054:	1b4e81b5 	.word	0x1b4e81b5
 8004058:	40020010 	.word	0x40020010
 800405c:	40020028 	.word	0x40020028
 8004060:	40020040 	.word	0x40020040
 8004064:	40020058 	.word	0x40020058
 8004068:	40020070 	.word	0x40020070
 800406c:	40020088 	.word	0x40020088
 8004070:	400200a0 	.word	0x400200a0
 8004074:	400200b8 	.word	0x400200b8
 8004078:	40020410 	.word	0x40020410
 800407c:	40020428 	.word	0x40020428
 8004080:	40020440 	.word	0x40020440
 8004084:	40020458 	.word	0x40020458
 8004088:	40020470 	.word	0x40020470
 800408c:	40020488 	.word	0x40020488
 8004090:	400204a0 	.word	0x400204a0
 8004094:	400204b8 	.word	0x400204b8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0204 	bic.w	r2, r2, #4
 80040be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2208      	movs	r2, #8
 80040ca:	409a      	lsls	r2, r3
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d06e      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a69      	ldr	r2, [pc, #420]	@ (800429c <HAL_DMA_IRQHandler+0x3f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d04a      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a67      	ldr	r2, [pc, #412]	@ (80042a0 <HAL_DMA_IRQHandler+0x3fc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d045      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a66      	ldr	r2, [pc, #408]	@ (80042a4 <HAL_DMA_IRQHandler+0x400>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d040      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a64      	ldr	r2, [pc, #400]	@ (80042a8 <HAL_DMA_IRQHandler+0x404>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d03b      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a63      	ldr	r2, [pc, #396]	@ (80042ac <HAL_DMA_IRQHandler+0x408>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d036      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a61      	ldr	r2, [pc, #388]	@ (80042b0 <HAL_DMA_IRQHandler+0x40c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d031      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a60      	ldr	r2, [pc, #384]	@ (80042b4 <HAL_DMA_IRQHandler+0x410>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d02c      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5e      	ldr	r2, [pc, #376]	@ (80042b8 <HAL_DMA_IRQHandler+0x414>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d027      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5d      	ldr	r2, [pc, #372]	@ (80042bc <HAL_DMA_IRQHandler+0x418>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d022      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5b      	ldr	r2, [pc, #364]	@ (80042c0 <HAL_DMA_IRQHandler+0x41c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01d      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5a      	ldr	r2, [pc, #360]	@ (80042c4 <HAL_DMA_IRQHandler+0x420>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d018      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <HAL_DMA_IRQHandler+0x424>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a57      	ldr	r2, [pc, #348]	@ (80042cc <HAL_DMA_IRQHandler+0x428>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a55      	ldr	r2, [pc, #340]	@ (80042d0 <HAL_DMA_IRQHandler+0x42c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d009      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a54      	ldr	r2, [pc, #336]	@ (80042d4 <HAL_DMA_IRQHandler+0x430>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_DMA_IRQHandler+0x2ee>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_DMA_IRQHandler+0x434>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10a      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x304>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e003      	b.n	80041b0 <HAL_DMA_IRQHandler+0x30c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	f043 0202 	orr.w	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2204      	movs	r2, #4
 80041da:	409a      	lsls	r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 808f 	beq.w	8004304 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	@ (800429c <HAL_DMA_IRQHandler+0x3f8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2a      	ldr	r2, [pc, #168]	@ (80042a0 <HAL_DMA_IRQHandler+0x3fc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a29      	ldr	r2, [pc, #164]	@ (80042a4 <HAL_DMA_IRQHandler+0x400>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <HAL_DMA_IRQHandler+0x404>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <HAL_DMA_IRQHandler+0x408>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <HAL_DMA_IRQHandler+0x40c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a23      	ldr	r2, [pc, #140]	@ (80042b4 <HAL_DMA_IRQHandler+0x410>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	@ (80042b8 <HAL_DMA_IRQHandler+0x414>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a20      	ldr	r2, [pc, #128]	@ (80042bc <HAL_DMA_IRQHandler+0x418>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <HAL_DMA_IRQHandler+0x41c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_DMA_IRQHandler+0x420>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <HAL_DMA_IRQHandler+0x424>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <HAL_DMA_IRQHandler+0x428>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_DMA_IRQHandler+0x42c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_DMA_IRQHandler+0x430>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0x3e2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a15      	ldr	r2, [pc, #84]	@ (80042d8 <HAL_DMA_IRQHandler+0x434>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d12a      	bne.n	80042dc <HAL_DMA_IRQHandler+0x438>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e023      	b.n	80042e4 <HAL_DMA_IRQHandler+0x440>
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2204      	movs	r2, #4
 80042f2:	409a      	lsls	r2, r3
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fc:	f043 0204 	orr.w	r2, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2210      	movs	r2, #16
 800430e:	409a      	lsls	r2, r3
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a6 	beq.w	8004466 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a85      	ldr	r2, [pc, #532]	@ (8004534 <HAL_DMA_IRQHandler+0x690>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d04a      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a83      	ldr	r2, [pc, #524]	@ (8004538 <HAL_DMA_IRQHandler+0x694>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d045      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a82      	ldr	r2, [pc, #520]	@ (800453c <HAL_DMA_IRQHandler+0x698>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d040      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a80      	ldr	r2, [pc, #512]	@ (8004540 <HAL_DMA_IRQHandler+0x69c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d03b      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7f      	ldr	r2, [pc, #508]	@ (8004544 <HAL_DMA_IRQHandler+0x6a0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d036      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7d      	ldr	r2, [pc, #500]	@ (8004548 <HAL_DMA_IRQHandler+0x6a4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d031      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7c      	ldr	r2, [pc, #496]	@ (800454c <HAL_DMA_IRQHandler+0x6a8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d02c      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7a      	ldr	r2, [pc, #488]	@ (8004550 <HAL_DMA_IRQHandler+0x6ac>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d027      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a79      	ldr	r2, [pc, #484]	@ (8004554 <HAL_DMA_IRQHandler+0x6b0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a77      	ldr	r2, [pc, #476]	@ (8004558 <HAL_DMA_IRQHandler+0x6b4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a76      	ldr	r2, [pc, #472]	@ (800455c <HAL_DMA_IRQHandler+0x6b8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a74      	ldr	r2, [pc, #464]	@ (8004560 <HAL_DMA_IRQHandler+0x6bc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a73      	ldr	r2, [pc, #460]	@ (8004564 <HAL_DMA_IRQHandler+0x6c0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a71      	ldr	r2, [pc, #452]	@ (8004568 <HAL_DMA_IRQHandler+0x6c4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a70      	ldr	r2, [pc, #448]	@ (800456c <HAL_DMA_IRQHandler+0x6c8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_IRQHandler+0x516>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004570 <HAL_DMA_IRQHandler+0x6cc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10a      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x52c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e009      	b.n	80043e4 <HAL_DMA_IRQHandler+0x540>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d03e      	beq.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2210      	movs	r2, #16
 80043f2:	409a      	lsls	r2, r3
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d024      	beq.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
 8004424:	e01f      	b.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e016      	b.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0208 	bic.w	r2, r2, #8
 8004454:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2220      	movs	r2, #32
 8004470:	409a      	lsls	r2, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8110 	beq.w	800469c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <HAL_DMA_IRQHandler+0x690>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <HAL_DMA_IRQHandler+0x694>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a29      	ldr	r2, [pc, #164]	@ (800453c <HAL_DMA_IRQHandler+0x698>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a28      	ldr	r2, [pc, #160]	@ (8004540 <HAL_DMA_IRQHandler+0x69c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <HAL_DMA_IRQHandler+0x6a0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <HAL_DMA_IRQHandler+0x6a4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a23      	ldr	r2, [pc, #140]	@ (800454c <HAL_DMA_IRQHandler+0x6a8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a22      	ldr	r2, [pc, #136]	@ (8004550 <HAL_DMA_IRQHandler+0x6ac>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a20      	ldr	r2, [pc, #128]	@ (8004554 <HAL_DMA_IRQHandler+0x6b0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1f      	ldr	r2, [pc, #124]	@ (8004558 <HAL_DMA_IRQHandler+0x6b4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1d      	ldr	r2, [pc, #116]	@ (800455c <HAL_DMA_IRQHandler+0x6b8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <HAL_DMA_IRQHandler+0x6bc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004564 <HAL_DMA_IRQHandler+0x6c0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <HAL_DMA_IRQHandler+0x6c4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a17      	ldr	r2, [pc, #92]	@ (800456c <HAL_DMA_IRQHandler+0x6c8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_IRQHandler+0x678>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <HAL_DMA_IRQHandler+0x6cc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d12b      	bne.n	8004574 <HAL_DMA_IRQHandler+0x6d0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e02a      	b.n	8004588 <HAL_DMA_IRQHandler+0x6e4>
 8004532:	bf00      	nop
 8004534:	40020010 	.word	0x40020010
 8004538:	40020028 	.word	0x40020028
 800453c:	40020040 	.word	0x40020040
 8004540:	40020058 	.word	0x40020058
 8004544:	40020070 	.word	0x40020070
 8004548:	40020088 	.word	0x40020088
 800454c:	400200a0 	.word	0x400200a0
 8004550:	400200b8 	.word	0x400200b8
 8004554:	40020410 	.word	0x40020410
 8004558:	40020428 	.word	0x40020428
 800455c:	40020440 	.word	0x40020440
 8004560:	40020458 	.word	0x40020458
 8004564:	40020470 	.word	0x40020470
 8004568:	40020488 	.word	0x40020488
 800456c:	400204a0 	.word	0x400204a0
 8004570:	400204b8 	.word	0x400204b8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8087 	beq.w	800469c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2220      	movs	r2, #32
 8004598:	409a      	lsls	r2, r3
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d139      	bne.n	800461e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0216 	bic.w	r2, r2, #22
 80045b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_DMA_IRQHandler+0x736>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0208 	bic.w	r2, r2, #8
 80045e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	223f      	movs	r2, #63	@ 0x3f
 80045f4:	409a      	lsls	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8382 	beq.w	8004d18 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
          }
          return;
 800461c:	e37c      	b.n	8004d18 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d018      	beq.n	800465e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02c      	beq.n	800469c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
 800464a:	e027      	b.n	800469c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d023      	beq.n	800469c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
 800465c:	e01e      	b.n	800469c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10f      	bne.n	800468c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0210 	bic.w	r2, r2, #16
 800467a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 833e 	beq.w	8004d22 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8088 	beq.w	80047c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2204      	movs	r2, #4
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a89      	ldr	r2, [pc, #548]	@ (80048e8 <HAL_DMA_IRQHandler+0xa44>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a88      	ldr	r2, [pc, #544]	@ (80048ec <HAL_DMA_IRQHandler+0xa48>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a86      	ldr	r2, [pc, #536]	@ (80048f0 <HAL_DMA_IRQHandler+0xa4c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a85      	ldr	r2, [pc, #532]	@ (80048f4 <HAL_DMA_IRQHandler+0xa50>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	@ (80048f8 <HAL_DMA_IRQHandler+0xa54>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a82      	ldr	r2, [pc, #520]	@ (80048fc <HAL_DMA_IRQHandler+0xa58>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a80      	ldr	r2, [pc, #512]	@ (8004900 <HAL_DMA_IRQHandler+0xa5c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7f      	ldr	r2, [pc, #508]	@ (8004904 <HAL_DMA_IRQHandler+0xa60>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a7d      	ldr	r2, [pc, #500]	@ (8004908 <HAL_DMA_IRQHandler+0xa64>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7c      	ldr	r2, [pc, #496]	@ (800490c <HAL_DMA_IRQHandler+0xa68>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7a      	ldr	r2, [pc, #488]	@ (8004910 <HAL_DMA_IRQHandler+0xa6c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a79      	ldr	r2, [pc, #484]	@ (8004914 <HAL_DMA_IRQHandler+0xa70>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a77      	ldr	r2, [pc, #476]	@ (8004918 <HAL_DMA_IRQHandler+0xa74>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a76      	ldr	r2, [pc, #472]	@ (800491c <HAL_DMA_IRQHandler+0xa78>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a74      	ldr	r2, [pc, #464]	@ (8004920 <HAL_DMA_IRQHandler+0xa7c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_DMA_IRQHandler+0x8b8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a73      	ldr	r2, [pc, #460]	@ (8004924 <HAL_DMA_IRQHandler+0xa80>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <HAL_DMA_IRQHandler+0x8ca>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e007      	b.n	800477e <HAL_DMA_IRQHandler+0x8da>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004786:	429a      	cmp	r2, r3
 8004788:	d307      	bcc.n	800479a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f2      	bne.n	800477e <HAL_DMA_IRQHandler+0x8da>
 8004798:	e000      	b.n	800479c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800479a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2203      	movs	r2, #3
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80047b2:	e003      	b.n	80047bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 82aa 	beq.w	8004d22 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
 80047d6:	e2a4      	b.n	8004d22 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a52      	ldr	r2, [pc, #328]	@ (8004928 <HAL_DMA_IRQHandler+0xa84>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04a      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a51      	ldr	r2, [pc, #324]	@ (800492c <HAL_DMA_IRQHandler+0xa88>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d045      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004930 <HAL_DMA_IRQHandler+0xa8c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d040      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004934 <HAL_DMA_IRQHandler+0xa90>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d03b      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a4c      	ldr	r2, [pc, #304]	@ (8004938 <HAL_DMA_IRQHandler+0xa94>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d036      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4b      	ldr	r2, [pc, #300]	@ (800493c <HAL_DMA_IRQHandler+0xa98>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d031      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a49      	ldr	r2, [pc, #292]	@ (8004940 <HAL_DMA_IRQHandler+0xa9c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02c      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a48      	ldr	r2, [pc, #288]	@ (8004944 <HAL_DMA_IRQHandler+0xaa0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d027      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <HAL_DMA_IRQHandler+0xaa4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a45      	ldr	r2, [pc, #276]	@ (800494c <HAL_DMA_IRQHandler+0xaa8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d01d      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a43      	ldr	r2, [pc, #268]	@ (8004950 <HAL_DMA_IRQHandler+0xaac>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a42      	ldr	r2, [pc, #264]	@ (8004954 <HAL_DMA_IRQHandler+0xab0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a40      	ldr	r2, [pc, #256]	@ (8004958 <HAL_DMA_IRQHandler+0xab4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3f      	ldr	r2, [pc, #252]	@ (800495c <HAL_DMA_IRQHandler+0xab8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3d      	ldr	r2, [pc, #244]	@ (8004960 <HAL_DMA_IRQHandler+0xabc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x9d4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3c      	ldr	r2, [pc, #240]	@ (8004964 <HAL_DMA_IRQHandler+0xac0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <HAL_DMA_IRQHandler+0x9d8>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_DMA_IRQHandler+0x9da>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 824f 	beq.w	8004d22 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2204      	movs	r2, #4
 8004896:	409a      	lsls	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80dd 	beq.w	8004a5c <HAL_DMA_IRQHandler+0xbb8>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80d7 	beq.w	8004a5c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d059      	beq.n	800497c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d14a      	bne.n	8004968 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8220 	beq.w	8004d1c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e4:	e21a      	b.n	8004d1c <HAL_DMA_IRQHandler+0xe78>
 80048e6:	bf00      	nop
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
 8004928:	48022c08 	.word	0x48022c08
 800492c:	48022c1c 	.word	0x48022c1c
 8004930:	48022c30 	.word	0x48022c30
 8004934:	48022c44 	.word	0x48022c44
 8004938:	48022c58 	.word	0x48022c58
 800493c:	48022c6c 	.word	0x48022c6c
 8004940:	48022c80 	.word	0x48022c80
 8004944:	48022c94 	.word	0x48022c94
 8004948:	58025408 	.word	0x58025408
 800494c:	5802541c 	.word	0x5802541c
 8004950:	58025430 	.word	0x58025430
 8004954:	58025444 	.word	0x58025444
 8004958:	58025458 	.word	0x58025458
 800495c:	5802546c 	.word	0x5802546c
 8004960:	58025480 	.word	0x58025480
 8004964:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 81d5 	beq.w	8004d1c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497a:	e1cf      	b.n	8004d1c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d160      	bne.n	8004a48 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b88 <HAL_DMA_IRQHandler+0xce4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7d      	ldr	r2, [pc, #500]	@ (8004b8c <HAL_DMA_IRQHandler+0xce8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b90 <HAL_DMA_IRQHandler+0xcec>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a7a      	ldr	r2, [pc, #488]	@ (8004b94 <HAL_DMA_IRQHandler+0xcf0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a79      	ldr	r2, [pc, #484]	@ (8004b98 <HAL_DMA_IRQHandler+0xcf4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a77      	ldr	r2, [pc, #476]	@ (8004b9c <HAL_DMA_IRQHandler+0xcf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a76      	ldr	r2, [pc, #472]	@ (8004ba0 <HAL_DMA_IRQHandler+0xcfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a74      	ldr	r2, [pc, #464]	@ (8004ba4 <HAL_DMA_IRQHandler+0xd00>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a73      	ldr	r2, [pc, #460]	@ (8004ba8 <HAL_DMA_IRQHandler+0xd04>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a71      	ldr	r2, [pc, #452]	@ (8004bac <HAL_DMA_IRQHandler+0xd08>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a70      	ldr	r2, [pc, #448]	@ (8004bb0 <HAL_DMA_IRQHandler+0xd0c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb4 <HAL_DMA_IRQHandler+0xd10>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6d      	ldr	r2, [pc, #436]	@ (8004bb8 <HAL_DMA_IRQHandler+0xd14>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bbc <HAL_DMA_IRQHandler+0xd18>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc0 <HAL_DMA_IRQHandler+0xd1c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_IRQHandler+0xb82>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a68      	ldr	r2, [pc, #416]	@ (8004bc4 <HAL_DMA_IRQHandler+0xd20>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_DMA_IRQHandler+0xb94>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0208 	bic.w	r2, r2, #8
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e007      	b.n	8004a48 <HAL_DMA_IRQHandler+0xba4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8165 	beq.w	8004d1c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5a:	e15f      	b.n	8004d1c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2202      	movs	r2, #2
 8004a66:	409a      	lsls	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80c5 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xd58>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80bf 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2202      	movs	r2, #2
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 813a 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab4:	e134      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8130 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac8:	e12a      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 8089 	bne.w	8004be8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2b      	ldr	r2, [pc, #172]	@ (8004b88 <HAL_DMA_IRQHandler+0xce4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	@ (8004b8c <HAL_DMA_IRQHandler+0xce8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <HAL_DMA_IRQHandler+0xcec>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <HAL_DMA_IRQHandler+0xcf0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a25      	ldr	r2, [pc, #148]	@ (8004b98 <HAL_DMA_IRQHandler+0xcf4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <HAL_DMA_IRQHandler+0xcf8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a22      	ldr	r2, [pc, #136]	@ (8004ba0 <HAL_DMA_IRQHandler+0xcfc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a20      	ldr	r2, [pc, #128]	@ (8004ba4 <HAL_DMA_IRQHandler+0xd00>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba8 <HAL_DMA_IRQHandler+0xd04>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <HAL_DMA_IRQHandler+0xd08>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb0 <HAL_DMA_IRQHandler+0xd0c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb4 <HAL_DMA_IRQHandler+0xd10>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <HAL_DMA_IRQHandler+0xd14>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_DMA_IRQHandler+0xd18>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <HAL_DMA_IRQHandler+0xd1c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_IRQHandler+0xcd2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <HAL_DMA_IRQHandler+0xd20>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d128      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0xd24>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0214 	bic.w	r2, r2, #20
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e027      	b.n	8004bd8 <HAL_DMA_IRQHandler+0xd34>
 8004b88:	40020010 	.word	0x40020010
 8004b8c:	40020028 	.word	0x40020028
 8004b90:	40020040 	.word	0x40020040
 8004b94:	40020058 	.word	0x40020058
 8004b98:	40020070 	.word	0x40020070
 8004b9c:	40020088 	.word	0x40020088
 8004ba0:	400200a0 	.word	0x400200a0
 8004ba4:	400200b8 	.word	0x400200b8
 8004ba8:	40020410 	.word	0x40020410
 8004bac:	40020428 	.word	0x40020428
 8004bb0:	40020440 	.word	0x40020440
 8004bb4:	40020458 	.word	0x40020458
 8004bb8:	40020470 	.word	0x40020470
 8004bbc:	40020488 	.word	0x40020488
 8004bc0:	400204a0 	.word	0x400204a0
 8004bc4:	400204b8 	.word	0x400204b8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 020a 	bic.w	r2, r2, #10
 8004bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8097 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bfa:	e091      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2208      	movs	r2, #8
 8004c06:	409a      	lsls	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8088 	beq.w	8004d22 <HAL_DMA_IRQHandler+0xe7e>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8082 	beq.w	8004d22 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a41      	ldr	r2, [pc, #260]	@ (8004d28 <HAL_DMA_IRQHandler+0xe84>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d04a      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d2c <HAL_DMA_IRQHandler+0xe88>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d045      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a3e      	ldr	r2, [pc, #248]	@ (8004d30 <HAL_DMA_IRQHandler+0xe8c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d040      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a3c      	ldr	r2, [pc, #240]	@ (8004d34 <HAL_DMA_IRQHandler+0xe90>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d03b      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d38 <HAL_DMA_IRQHandler+0xe94>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a39      	ldr	r2, [pc, #228]	@ (8004d3c <HAL_DMA_IRQHandler+0xe98>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d031      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a38      	ldr	r2, [pc, #224]	@ (8004d40 <HAL_DMA_IRQHandler+0xe9c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d02c      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a36      	ldr	r2, [pc, #216]	@ (8004d44 <HAL_DMA_IRQHandler+0xea0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a35      	ldr	r2, [pc, #212]	@ (8004d48 <HAL_DMA_IRQHandler+0xea4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a33      	ldr	r2, [pc, #204]	@ (8004d4c <HAL_DMA_IRQHandler+0xea8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a32      	ldr	r2, [pc, #200]	@ (8004d50 <HAL_DMA_IRQHandler+0xeac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a30      	ldr	r2, [pc, #192]	@ (8004d54 <HAL_DMA_IRQHandler+0xeb0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d58 <HAL_DMA_IRQHandler+0xeb4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d5c <HAL_DMA_IRQHandler+0xeb8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2c      	ldr	r2, [pc, #176]	@ (8004d60 <HAL_DMA_IRQHandler+0xebc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe1a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004d64 <HAL_DMA_IRQHandler+0xec0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0xe2c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 021c 	bic.w	r2, r2, #28
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e007      	b.n	8004ce0 <HAL_DMA_IRQHandler+0xe3c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 020e 	bic.w	r2, r2, #14
 8004cde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
 8004d16:	e004      	b.n	8004d22 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004d18:	bf00      	nop
 8004d1a:	e002      	b.n	8004d22 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1c:	bf00      	nop
 8004d1e:	e000      	b.n	8004d22 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d22:	3728      	adds	r7, #40	@ 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40020010 	.word	0x40020010
 8004d2c:	40020028 	.word	0x40020028
 8004d30:	40020040 	.word	0x40020040
 8004d34:	40020058 	.word	0x40020058
 8004d38:	40020070 	.word	0x40020070
 8004d3c:	40020088 	.word	0x40020088
 8004d40:	400200a0 	.word	0x400200a0
 8004d44:	400200b8 	.word	0x400200b8
 8004d48:	40020410 	.word	0x40020410
 8004d4c:	40020428 	.word	0x40020428
 8004d50:	40020440 	.word	0x40020440
 8004d54:	40020458 	.word	0x40020458
 8004d58:	40020470 	.word	0x40020470
 8004d5c:	40020488 	.word	0x40020488
 8004d60:	400204a0 	.word	0x400204a0
 8004d64:	400204b8 	.word	0x400204b8

08004d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7f      	ldr	r2, [pc, #508]	@ (8004f84 <DMA_SetConfig+0x21c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d072      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7d      	ldr	r2, [pc, #500]	@ (8004f88 <DMA_SetConfig+0x220>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d06d      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f8c <DMA_SetConfig+0x224>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d068      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7a      	ldr	r2, [pc, #488]	@ (8004f90 <DMA_SetConfig+0x228>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d063      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a79      	ldr	r2, [pc, #484]	@ (8004f94 <DMA_SetConfig+0x22c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d05e      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a77      	ldr	r2, [pc, #476]	@ (8004f98 <DMA_SetConfig+0x230>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d059      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a76      	ldr	r2, [pc, #472]	@ (8004f9c <DMA_SetConfig+0x234>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d054      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a74      	ldr	r2, [pc, #464]	@ (8004fa0 <DMA_SetConfig+0x238>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04f      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a73      	ldr	r2, [pc, #460]	@ (8004fa4 <DMA_SetConfig+0x23c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a71      	ldr	r2, [pc, #452]	@ (8004fa8 <DMA_SetConfig+0x240>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a70      	ldr	r2, [pc, #448]	@ (8004fac <DMA_SetConfig+0x244>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6e      	ldr	r2, [pc, #440]	@ (8004fb0 <DMA_SetConfig+0x248>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb4 <DMA_SetConfig+0x24c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb8 <DMA_SetConfig+0x250>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6a      	ldr	r2, [pc, #424]	@ (8004fbc <DMA_SetConfig+0x254>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a68      	ldr	r2, [pc, #416]	@ (8004fc0 <DMA_SetConfig+0x258>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a67      	ldr	r2, [pc, #412]	@ (8004fc4 <DMA_SetConfig+0x25c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a65      	ldr	r2, [pc, #404]	@ (8004fc8 <DMA_SetConfig+0x260>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a64      	ldr	r2, [pc, #400]	@ (8004fcc <DMA_SetConfig+0x264>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a62      	ldr	r2, [pc, #392]	@ (8004fd0 <DMA_SetConfig+0x268>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a61      	ldr	r2, [pc, #388]	@ (8004fd4 <DMA_SetConfig+0x26c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd8 <DMA_SetConfig+0x270>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a5e      	ldr	r2, [pc, #376]	@ (8004fdc <DMA_SetConfig+0x274>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <DMA_SetConfig+0x10a>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe0 <DMA_SetConfig+0x278>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <DMA_SetConfig+0x10e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <DMA_SetConfig+0x110>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	@ (8004f84 <DMA_SetConfig+0x21c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04a      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	@ (8004f88 <DMA_SetConfig+0x220>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d045      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <DMA_SetConfig+0x224>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d040      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <DMA_SetConfig+0x228>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d03b      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	@ (8004f94 <DMA_SetConfig+0x22c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d036      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <DMA_SetConfig+0x230>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d031      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	@ (8004f9c <DMA_SetConfig+0x234>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02c      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <DMA_SetConfig+0x238>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d027      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <DMA_SetConfig+0x23c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <DMA_SetConfig+0x240>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d01d      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	@ (8004fac <DMA_SetConfig+0x244>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <DMA_SetConfig+0x248>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a27      	ldr	r2, [pc, #156]	@ (8004fb4 <DMA_SetConfig+0x24c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	@ (8004fb8 <DMA_SetConfig+0x250>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a24      	ldr	r2, [pc, #144]	@ (8004fbc <DMA_SetConfig+0x254>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <DMA_SetConfig+0x1d0>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a23      	ldr	r2, [pc, #140]	@ (8004fc0 <DMA_SetConfig+0x258>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <DMA_SetConfig+0x1d4>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <DMA_SetConfig+0x1d6>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d059      	beq.n	8004ff6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	223f      	movs	r2, #63	@ 0x3f
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d138      	bne.n	8004fe4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f82:	e0ae      	b.n	80050e2 <DMA_SetConfig+0x37a>
 8004f84:	40020010 	.word	0x40020010
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020040 	.word	0x40020040
 8004f90:	40020058 	.word	0x40020058
 8004f94:	40020070 	.word	0x40020070
 8004f98:	40020088 	.word	0x40020088
 8004f9c:	400200a0 	.word	0x400200a0
 8004fa0:	400200b8 	.word	0x400200b8
 8004fa4:	40020410 	.word	0x40020410
 8004fa8:	40020428 	.word	0x40020428
 8004fac:	40020440 	.word	0x40020440
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	40020470 	.word	0x40020470
 8004fb8:	40020488 	.word	0x40020488
 8004fbc:	400204a0 	.word	0x400204a0
 8004fc0:	400204b8 	.word	0x400204b8
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	e075      	b.n	80050e2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80050f0 <DMA_SetConfig+0x388>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a3b      	ldr	r2, [pc, #236]	@ (80050f4 <DMA_SetConfig+0x38c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3a      	ldr	r2, [pc, #232]	@ (80050f8 <DMA_SetConfig+0x390>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <DMA_SetConfig+0x394>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a37      	ldr	r2, [pc, #220]	@ (8005100 <DMA_SetConfig+0x398>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a35      	ldr	r2, [pc, #212]	@ (8005104 <DMA_SetConfig+0x39c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a34      	ldr	r2, [pc, #208]	@ (8005108 <DMA_SetConfig+0x3a0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a32      	ldr	r2, [pc, #200]	@ (800510c <DMA_SetConfig+0x3a4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a31      	ldr	r2, [pc, #196]	@ (8005110 <DMA_SetConfig+0x3a8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2f      	ldr	r2, [pc, #188]	@ (8005114 <DMA_SetConfig+0x3ac>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2e      	ldr	r2, [pc, #184]	@ (8005118 <DMA_SetConfig+0x3b0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2c      	ldr	r2, [pc, #176]	@ (800511c <DMA_SetConfig+0x3b4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	@ (8005120 <DMA_SetConfig+0x3b8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <DMA_SetConfig+0x3bc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <DMA_SetConfig+0x32e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <DMA_SetConfig+0x3c0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <DMA_SetConfig+0x32e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	@ (800512c <DMA_SetConfig+0x3c4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d101      	bne.n	800509a <DMA_SetConfig+0x332>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <DMA_SetConfig+0x334>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b40      	cmp	r3, #64	@ 0x40
 80050be:	d108      	bne.n	80050d2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	60da      	str	r2, [r3, #12]
}
 80050d0:	e007      	b.n	80050e2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	48022c08 	.word	0x48022c08
 80050f4:	48022c1c 	.word	0x48022c1c
 80050f8:	48022c30 	.word	0x48022c30
 80050fc:	48022c44 	.word	0x48022c44
 8005100:	48022c58 	.word	0x48022c58
 8005104:	48022c6c 	.word	0x48022c6c
 8005108:	48022c80 	.word	0x48022c80
 800510c:	48022c94 	.word	0x48022c94
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494

08005130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a42      	ldr	r2, [pc, #264]	@ (8005248 <DMA_CalcBaseAndBitshift+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04a      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a41      	ldr	r2, [pc, #260]	@ (800524c <DMA_CalcBaseAndBitshift+0x11c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d045      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3f      	ldr	r2, [pc, #252]	@ (8005250 <DMA_CalcBaseAndBitshift+0x120>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d040      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3e      	ldr	r2, [pc, #248]	@ (8005254 <DMA_CalcBaseAndBitshift+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d03b      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a3c      	ldr	r2, [pc, #240]	@ (8005258 <DMA_CalcBaseAndBitshift+0x128>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d036      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <DMA_CalcBaseAndBitshift+0x12c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d031      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a39      	ldr	r2, [pc, #228]	@ (8005260 <DMA_CalcBaseAndBitshift+0x130>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d02c      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a38      	ldr	r2, [pc, #224]	@ (8005264 <DMA_CalcBaseAndBitshift+0x134>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d027      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a36      	ldr	r2, [pc, #216]	@ (8005268 <DMA_CalcBaseAndBitshift+0x138>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a35      	ldr	r2, [pc, #212]	@ (800526c <DMA_CalcBaseAndBitshift+0x13c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01d      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a33      	ldr	r2, [pc, #204]	@ (8005270 <DMA_CalcBaseAndBitshift+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a32      	ldr	r2, [pc, #200]	@ (8005274 <DMA_CalcBaseAndBitshift+0x144>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a30      	ldr	r2, [pc, #192]	@ (8005278 <DMA_CalcBaseAndBitshift+0x148>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2f      	ldr	r2, [pc, #188]	@ (800527c <DMA_CalcBaseAndBitshift+0x14c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005280 <DMA_CalcBaseAndBitshift+0x150>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005284 <DMA_CalcBaseAndBitshift+0x154>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d101      	bne.n	80051dc <DMA_CalcBaseAndBitshift+0xac>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <DMA_CalcBaseAndBitshift+0xae>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d024      	beq.n	800522c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3b10      	subs	r3, #16
 80051ea:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <DMA_CalcBaseAndBitshift+0x158>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	4a24      	ldr	r2, [pc, #144]	@ (800528c <DMA_CalcBaseAndBitshift+0x15c>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d908      	bls.n	800521c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	4b1f      	ldr	r3, [pc, #124]	@ (8005290 <DMA_CalcBaseAndBitshift+0x160>)
 8005212:	4013      	ands	r3, r2
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	@ 0x58
 800521a:	e00d      	b.n	8005238 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <DMA_CalcBaseAndBitshift+0x160>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6593      	str	r3, [r2, #88]	@ 0x58
 800522a:	e005      	b.n	8005238 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
 8005288:	aaaaaaab 	.word	0xaaaaaaab
 800528c:	0800b12c 	.word	0x0800b12c
 8005290:	fffffc00 	.word	0xfffffc00

08005294 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d120      	bne.n	80052ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d858      	bhi.n	8005362 <DMA_CheckFifoParam+0xce>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <DMA_CheckFifoParam+0x24>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052db 	.word	0x080052db
 80052c0:	080052c9 	.word	0x080052c9
 80052c4:	08005363 	.word	0x08005363
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d048      	beq.n	8005366 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052d8:	e045      	b.n	8005366 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052e2:	d142      	bne.n	800536a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e8:	e03f      	b.n	800536a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f2:	d123      	bne.n	800533c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d838      	bhi.n	800536e <DMA_CheckFifoParam+0xda>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <DMA_CheckFifoParam+0x70>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005315 	.word	0x08005315
 8005308:	0800531b 	.word	0x0800531b
 800530c:	08005315 	.word	0x08005315
 8005310:	0800532d 	.word	0x0800532d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
        break;
 8005318:	e030      	b.n	800537c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d025      	beq.n	8005372 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800532a:	e022      	b.n	8005372 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005334:	d11f      	bne.n	8005376 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800533a:	e01c      	b.n	8005376 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	2b02      	cmp	r3, #2
 8005342:	d902      	bls.n	800534a <DMA_CheckFifoParam+0xb6>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d003      	beq.n	8005350 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005348:	e018      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
        break;
 800534e:	e015      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
    break;
 8005360:	e00b      	b.n	800537a <DMA_CheckFifoParam+0xe6>
        break;
 8005362:	bf00      	nop
 8005364:	e00a      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005366:	bf00      	nop
 8005368:	e008      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 800536a:	bf00      	nop
 800536c:	e006      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <DMA_CheckFifoParam+0xe8>
        break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <DMA_CheckFifoParam+0xe8>
    break;
 800537a:	bf00      	nop
    }
  }

  return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a38      	ldr	r2, [pc, #224]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a36      	ldr	r2, [pc, #216]	@ (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a30      	ldr	r2, [pc, #192]	@ (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2f      	ldr	r2, [pc, #188]	@ (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	3b08      	subs	r3, #8
 80053fc:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a24      	ldr	r2, [pc, #144]	@ (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005418:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2201      	movs	r2, #1
 8005422:	409a      	lsls	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005428:	e024      	b.n	8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	3b10      	subs	r3, #16
 8005432:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d806      	bhi.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d902      	bls.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3308      	adds	r3, #8
 8005450:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4b18      	ldr	r3, [pc, #96]	@ (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	@ (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005464:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	58025408 	.word	0x58025408
 8005484:	5802541c 	.word	0x5802541c
 8005488:	58025430 	.word	0x58025430
 800548c:	58025444 	.word	0x58025444
 8005490:	58025458 	.word	0x58025458
 8005494:	5802546c 	.word	0x5802546c
 8005498:	58025480 	.word	0x58025480
 800549c:	58025494 	.word	0x58025494
 80054a0:	cccccccd 	.word	0xcccccccd
 80054a4:	16009600 	.word	0x16009600
 80054a8:	58025880 	.word	0x58025880
 80054ac:	aaaaaaab 	.word	0xaaaaaaab
 80054b0:	400204b8 	.word	0x400204b8
 80054b4:	4002040f 	.word	0x4002040f
 80054b8:	10008200 	.word	0x10008200
 80054bc:	40020880 	.word	0x40020880

080054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04a      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d847      	bhi.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	@ (800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d01d      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	@ (8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	@ (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1c      	ldr	r2, [pc, #112]	@ (8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a15      	ldr	r2, [pc, #84]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005548:	671a      	str	r2, [r3, #112]	@ 0x70
 800554a:	e009      	b.n	8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a11      	ldr	r2, [pc, #68]	@ (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800555e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b01      	subs	r3, #1
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	58025408 	.word	0x58025408
 800557c:	5802541c 	.word	0x5802541c
 8005580:	58025430 	.word	0x58025430
 8005584:	58025444 	.word	0x58025444
 8005588:	58025458 	.word	0x58025458
 800558c:	5802546c 	.word	0x5802546c
 8005590:	58025480 	.word	0x58025480
 8005594:	58025494 	.word	0x58025494
 8005598:	1600963f 	.word	0x1600963f
 800559c:	58025940 	.word	0x58025940
 80055a0:	1000823f 	.word	0x1000823f
 80055a4:	40020940 	.word	0x40020940

080055a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b098      	sub	sp, #96	@ 0x60
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80055b0:	4a84      	ldr	r2, [pc, #528]	@ (80057c4 <HAL_FDCAN_Init+0x21c>)
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	4611      	mov	r1, r2
 80055b8:	224c      	movs	r2, #76	@ 0x4c
 80055ba:	4618      	mov	r0, r3
 80055bc:	f005 fd6e 	bl	800b09c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1c6      	b.n	8005958 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7e      	ldr	r2, [pc, #504]	@ (80057c8 <HAL_FDCAN_Init+0x220>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d106      	bne.n	80055e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fe7c 	bl	80012f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0210 	bic.w	r2, r2, #16
 800560a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800560c:	f7fc fba2 	bl	8001d54 <HAL_GetTick>
 8005610:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005612:	e014      	b.n	800563e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005614:	f7fc fb9e 	bl	8001d54 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d90d      	bls.n	800563e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005628:	f043 0201 	orr.w	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2203      	movs	r2, #3
 8005636:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e18c      	b.n	8005958 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d0e3      	beq.n	8005614 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800565c:	f7fc fb7a 	bl	8001d54 <HAL_GetTick>
 8005660:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005662:	e014      	b.n	800568e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005664:	f7fc fb76 	bl	8001d54 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d90d      	bls.n	800568e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e164      	b.n	8005958 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0e3      	beq.n	8005664 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0202 	orr.w	r2, r2, #2
 80056aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7c1b      	ldrb	r3, [r3, #16]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d108      	bne.n	80056c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056c2:	619a      	str	r2, [r3, #24]
 80056c4:	e007      	b.n	80056d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c5b      	ldrb	r3, [r3, #17]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d108      	bne.n	80056f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ec:	619a      	str	r2, [r3, #24]
 80056ee:	e007      	b.n	8005700 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7c9b      	ldrb	r3, [r3, #18]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d108      	bne.n	800571a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005716:	619a      	str	r2, [r3, #24]
 8005718:	e007      	b.n	800572a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005728:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800574e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0210 	bic.w	r2, r2, #16
 800575e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d108      	bne.n	800577a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0204 	orr.w	r2, r2, #4
 8005776:	619a      	str	r2, [r3, #24]
 8005778:	e030      	b.n	80057dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02c      	beq.n	80057dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d020      	beq.n	80057cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005798:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0210 	orr.w	r2, r2, #16
 80057a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d114      	bne.n	80057dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0220 	orr.w	r2, r2, #32
 80057c0:	619a      	str	r2, [r3, #24]
 80057c2:	e00b      	b.n	80057dc <HAL_FDCAN_Init+0x234>
 80057c4:	0800b0d0 	.word	0x0800b0d0
 80057c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0220 	orr.w	r2, r2, #32
 80057da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005804:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005806:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005810:	d115      	bne.n	800583e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	3b01      	subs	r3, #1
 800581e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005820:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	3b01      	subs	r3, #1
 8005828:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800582a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	3b01      	subs	r3, #1
 8005834:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800583a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800583c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005864:	4413      	add	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d011      	beq.n	800588e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005872:	f023 0107 	bic.w	r1, r3, #7
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	3360      	adds	r3, #96	@ 0x60
 800587e:	443b      	add	r3, r7
 8005880:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800589e:	f023 0107 	bic.w	r1, r3, #7
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	3360      	adds	r3, #96	@ 0x60
 80058aa:	443b      	add	r3, r7
 80058ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058ca:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3360      	adds	r3, #96	@ 0x60
 80058d6:	443b      	add	r3, r7
 80058d8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d012      	beq.n	8005916 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3360      	adds	r3, #96	@ 0x60
 8005904:	443b      	add	r3, r7
 8005906:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <HAL_FDCAN_Init+0x3b8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d107      	bne.n	8005930 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f022 0203 	bic.w	r2, r2, #3
 800592e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fd81 	bl	8006450 <FDCAN_CalcultateRamBlockAddresses>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005954:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005958:	4618      	mov	r0, r3
 800595a:	3760      	adds	r7, #96	@ 0x60
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	4000a000 	.word	0x4000a000

08005964 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d111      	bne.n	800599c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e008      	b.n	80059ae <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d141      	bne.n	8005a56 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059da:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e038      	b.n	8005a68 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80059fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e026      	b.n	8005a68 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fe93 	bl	800675c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a42:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005a46:	2201      	movs	r2, #1
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e008      	b.n	8005a68 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a5c:	f043 0208 	orr.w	r2, r3, #8
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b08b      	sub	sp, #44	@ 0x2c
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005a88:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a8a:	7efb      	ldrb	r3, [r7, #27]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f040 8149 	bne.w	8005d24 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d14c      	bne.n	8005b32 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aa0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e13c      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ad2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e12a      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ae8:	0e1b      	lsrs	r3, r3, #24
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10a      	bne.n	8005b08 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005afa:	0fdb      	lsrs	r3, r3, #31
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005b04:	2301      	movs	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b30:	e068      	b.n	8005c04 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b41      	cmp	r3, #65	@ 0x41
 8005b36:	d14c      	bne.n	8005bd2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b40:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0ec      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0da      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d10a      	bne.n	8005ba8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b9a:	0fdb      	lsrs	r3, r3, #31
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd0:	e018      	b.n	8005c04 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d309      	bcc.n	8005bf0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005be2:	f043 0220 	orr.w	r2, r3, #32
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0a2      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d107      	bne.n	8005c28 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	0c9b      	lsrs	r3, r3, #18
 8005c1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e005      	b.n	8005c34 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	3304      	adds	r3, #4
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	0e1b      	lsrs	r3, r3, #24
 8005c88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0fda      	lsrs	r2, r3, #31
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	e00a      	b.n	8005cc0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	441a      	add	r2, r3
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d44 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005cc6:	5cd3      	ldrb	r3, [r2, r3]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d3ec      	bcc.n	8005caa <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d105      	bne.n	8005ce2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005ce0:	e01e      	b.n	8005d20 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b41      	cmp	r3, #65	@ 0x41
 8005ce6:	d105      	bne.n	8005cf4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005cf2:	e015      	b.n	8005d20 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b1f      	cmp	r3, #31
 8005cf8:	d808      	bhi.n	8005d0c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	fa01 f202 	lsl.w	r2, r1, r2
 8005d06:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005d0a:	e009      	b.n	8005d20 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 021f 	and.w	r2, r3, #31
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e008      	b.n	8005d36 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d2a:	f043 0208 	orr.w	r2, r3, #8
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	372c      	adds	r7, #44	@ 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	0800b134 	.word	0x0800b134

08005d48 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005d7e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d002      	beq.n	8005d8c <HAL_FDCAN_ActivateNotification+0x20>
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d155      	bne.n	8005e38 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d108      	bne.n	8005dac <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005daa:	e014      	b.n	8005dd6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d108      	bne.n	8005dce <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0202 	orr.w	r2, r2, #2
 8005dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dcc:	e003      	b.n	8005dd6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <HAL_FDCAN_ActivateNotification+0xec>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0f9b      	lsrs	r3, r3, #30
 8005e2e:	490b      	ldr	r1, [pc, #44]	@ (8005e5c <HAL_FDCAN_ActivateNotification+0xf0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e008      	b.n	8005e4a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	3fcfffff 	.word	0x3fcfffff
 8005e5c:	4000a800 	.word	0x4000a800

08005e60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b096      	sub	sp, #88	@ 0x58
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005e68:	4b95      	ldr	r3, [pc, #596]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005e70:	4b93      	ldr	r3, [pc, #588]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	079b      	lsls	r3, r3, #30
 8005e76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e78:	4013      	ands	r3, r2
 8005e7a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005e86:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e90:	4013      	ands	r3, r2
 8005e92:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eca:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005ece:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed8:	4013      	ands	r3, r2
 8005eda:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00f      	beq.n	8005f2e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f20:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f22:	4b67      	ldr	r3, [pc, #412]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa44 	bl	80063b6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01c      	beq.n	8005f72 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d017      	beq.n	8005f72 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f56:	4013      	ands	r3, r2
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f64:	4b56      	ldr	r3, [pc, #344]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005f6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f9f9 	bl	8006364 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00d      	beq.n	8005f94 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f7e:	4b51      	ldr	r3, [pc, #324]	@ (80060c4 <HAL_FDCAN_IRQHandler+0x264>)
 8005f80:	400b      	ands	r3, r1
 8005f82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f84:	4a4e      	ldr	r2, [pc, #312]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f88:	0f9b      	lsrs	r3, r3, #30
 8005f8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9b2 	bl	80062f8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fa0:	4b48      	ldr	r3, [pc, #288]	@ (80060c4 <HAL_FDCAN_IRQHandler+0x264>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005faa:	0f9b      	lsrs	r3, r3, #30
 8005fac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005fae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9ac 	bl	800630e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00d      	beq.n	8005fd8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005fc2:	4b40      	ldr	r3, [pc, #256]	@ (80060c4 <HAL_FDCAN_IRQHandler+0x264>)
 8005fc4:	400b      	ands	r3, r1
 8005fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fcc:	0f9b      	lsrs	r3, r3, #30
 8005fce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005fd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fa fa1e 	bl	8000414 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fe4:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <HAL_FDCAN_IRQHandler+0x264>)
 8005fe6:	400b      	ands	r3, r1
 8005fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fea:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8005fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fee:	0f9b      	lsrs	r3, r3, #30
 8005ff0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ff2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f995 	bl	8006324 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006016:	651a      	str	r2, [r3, #80]	@ 0x50
 8006018:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f98b 	bl	800633a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01c      	beq.n	8006068 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006034:	2b00      	cmp	r3, #0
 8006036:	d017      	beq.n	8006068 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006040:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800604a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604c:	4013      	ands	r3, r2
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50
 800605a:	4b19      	ldr	r3, [pc, #100]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006060:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f973 	bl	800634e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00f      	beq.n	8006092 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006074:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006084:	651a      	str	r2, [r3, #80]	@ 0x50
 8006086:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 8006088:	2200      	movs	r2, #0
 800608a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f974 	bl	800637a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d010      	beq.n	80060c8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80060ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80060b0:	4b03      	ldr	r3, [pc, #12]	@ (80060c0 <HAL_FDCAN_IRQHandler+0x260>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f969 	bl	800638e <HAL_FDCAN_TimestampWraparoundCallback>
 80060bc:	e004      	b.n	80060c8 <HAL_FDCAN_IRQHandler+0x268>
 80060be:	bf00      	nop
 80060c0:	4000a800 	.word	0x4000a800
 80060c4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80060c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80060e6:	4b81      	ldr	r3, [pc, #516]	@ (80062ec <HAL_FDCAN_IRQHandler+0x48c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f958 	bl	80063a2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80060f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d014      	beq.n	8006126 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00f      	beq.n	8006126 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800610e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006110:	4b76      	ldr	r3, [pc, #472]	@ (80062ec <HAL_FDCAN_IRQHandler+0x48c>)
 8006112:	2200      	movs	r2, #0
 8006114:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800611c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006132:	4b6f      	ldr	r3, [pc, #444]	@ (80062f0 <HAL_FDCAN_IRQHandler+0x490>)
 8006134:	400b      	ands	r3, r1
 8006136:	6513      	str	r3, [r2, #80]	@ 0x50
 8006138:	4a6c      	ldr	r2, [pc, #432]	@ (80062ec <HAL_FDCAN_IRQHandler+0x48c>)
 800613a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800613c:	0f9b      	lsrs	r3, r3, #30
 800613e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f94b 	bl	80063de <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800614a:	2b00      	cmp	r3, #0
 800614c:	d011      	beq.n	8006172 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006154:	4b66      	ldr	r3, [pc, #408]	@ (80062f0 <HAL_FDCAN_IRQHandler+0x490>)
 8006156:	400b      	ands	r3, r1
 8006158:	6513      	str	r3, [r2, #80]	@ 0x50
 800615a:	4a64      	ldr	r2, [pc, #400]	@ (80062ec <HAL_FDCAN_IRQHandler+0x48c>)
 800615c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800615e:	0f9b      	lsrs	r3, r3, #30
 8006160:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	@ (80062f4 <HAL_FDCAN_IRQHandler+0x494>)
 8006178:	4293      	cmp	r3, r2
 800617a:	f040 80aa 	bne.w	80062d2 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80a2 	beq.w	80062d2 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a2:	4013      	ands	r3, r2
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ba:	4013      	ands	r3, r2
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d2:	4013      	ands	r3, r2
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80061e0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	4013      	ands	r3, r2
 80061ec:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80061f8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	4013      	ands	r3, r2
 8006204:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006222:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8e4 	bl	80063f4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006238:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800623a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8e4 	bl	800640a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d019      	beq.n	8006280 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d014      	beq.n	8006280 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	0c1b      	lsrs	r3, r3, #16
 800625e:	b29b      	uxth	r3, r3
 8006260:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800626c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6939      	ldr	r1, [r7, #16]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8d0 	bl	8006420 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800628e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8d1 	bl	8006438 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f874 	bl	80063ca <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80062e2:	bf00      	nop
 80062e4:	3758      	adds	r7, #88	@ 0x58
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	4000a800 	.word	0x4000a800
 80062f0:	3fcfffff 	.word	0x3fcfffff
 80062f4:	4000a000 	.word	0x4000a000

080062f8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006466:	4ba7      	ldr	r3, [pc, #668]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006468:	4013      	ands	r3, r2
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0091      	lsls	r1, r2, #2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	430b      	orrs	r3, r1
 8006474:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006480:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	041a      	lsls	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4413      	add	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80064a6:	4b97      	ldr	r3, [pc, #604]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0091      	lsls	r1, r2, #2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	041a      	lsls	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064e8:	4b86      	ldr	r3, [pc, #536]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	0091      	lsls	r1, r2, #2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006502:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	041a      	lsls	r2, r3, #16
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006530:	4b74      	ldr	r3, [pc, #464]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006532:	4013      	ands	r3, r2
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	0091      	lsls	r1, r2, #2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	430b      	orrs	r3, r1
 800653e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800654a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006552:	041a      	lsls	r2, r3, #16
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006578:	4b62      	ldr	r3, [pc, #392]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800657a:	4013      	ands	r3, r2
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	0091      	lsls	r1, r2, #2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	430b      	orrs	r3, r1
 8006586:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	4413      	add	r3, r2
 800659a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80065a4:	4b57      	ldr	r3, [pc, #348]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	0091      	lsls	r1, r2, #2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065be:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c6:	041a      	lsls	r2, r3, #16
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4413      	add	r3, r2
 80065dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0091      	lsls	r1, r2, #2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	430b      	orrs	r3, r1
 80065f4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006600:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006608:	041a      	lsls	r2, r3, #16
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800661c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006624:	061a      	lsls	r2, r3, #24
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006634:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006636:	4413      	add	r3, r2
 8006638:	009a      	lsls	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	441a      	add	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006670:	441a      	add	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	4a04      	ldr	r2, [pc, #16]	@ (800670c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d915      	bls.n	800672c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006700:	e006      	b.n	8006710 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006702:	bf00      	nop
 8006704:	ffff0003 	.word	0xffff0003
 8006708:	10002b00 	.word	0x10002b00
 800670c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2203      	movs	r2, #3
 8006724:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e010      	b.n	800674e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e005      	b.n	8006740 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3304      	adds	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d3f3      	bcc.n	8006734 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop

0800675c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	@ 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800677a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006782:	4313      	orrs	r3, r2
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e00a      	b.n	800679e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006790:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006796:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006798:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800679c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80067a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80067ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80067b4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	3304      	adds	r3, #4
 80067e0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	3304      	adds	r3, #4
 80067ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e020      	b.n	8006836 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3303      	adds	r3, #3
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4413      	add	r3, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3302      	adds	r3, #2
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	440b      	add	r3, r1
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800680c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	3301      	adds	r3, #1
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	440b      	add	r3, r1
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800681a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	440a      	add	r2, r1
 8006822:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006824:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3304      	adds	r3, #4
 800682e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3304      	adds	r3, #4
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4a06      	ldr	r2, [pc, #24]	@ (8006854 <FDCAN_CopyMessageToRAM+0xf8>)
 800683c:	5cd3      	ldrb	r3, [r2, r3]
 800683e:	461a      	mov	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4293      	cmp	r3, r2
 8006844:	d3d6      	bcc.n	80067f4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	3724      	adds	r7, #36	@ 0x24
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	0800b134 	.word	0x0800b134

08006858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006858:	b480      	push	{r7}
 800685a:	b089      	sub	sp, #36	@ 0x24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006866:	4b89      	ldr	r3, [pc, #548]	@ (8006a8c <HAL_GPIO_Init+0x234>)
 8006868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800686a:	e194      	b.n	8006b96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	2101      	movs	r1, #1
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	fa01 f303 	lsl.w	r3, r1, r3
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8186 	beq.w	8006b90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d005      	beq.n	800689c <HAL_GPIO_Init+0x44>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d130      	bne.n	80068fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	2203      	movs	r2, #3
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068d2:	2201      	movs	r2, #1
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43db      	mvns	r3, r3
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4013      	ands	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 0201 	and.w	r2, r3, #1
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d017      	beq.n	800693a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	2203      	movs	r2, #3
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43db      	mvns	r3, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4013      	ands	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4313      	orrs	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d123      	bne.n	800698e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	08da      	lsrs	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3208      	adds	r2, #8
 800694e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	220f      	movs	r2, #15
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	08da      	lsrs	r2, r3, #3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3208      	adds	r2, #8
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0203 	and.w	r2, r3, #3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80e0 	beq.w	8006b90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006a90 <HAL_GPIO_Init+0x238>)
 80069d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80069d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006a90 <HAL_GPIO_Init+0x238>)
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80069e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <HAL_GPIO_Init+0x238>)
 80069e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ee:	4a29      	ldr	r2, [pc, #164]	@ (8006a94 <HAL_GPIO_Init+0x23c>)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	3302      	adds	r3, #2
 80069f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	220f      	movs	r2, #15
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a20      	ldr	r2, [pc, #128]	@ (8006a98 <HAL_GPIO_Init+0x240>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d052      	beq.n	8006ac0 <HAL_GPIO_Init+0x268>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <HAL_GPIO_Init+0x244>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d031      	beq.n	8006a86 <HAL_GPIO_Init+0x22e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <HAL_GPIO_Init+0x248>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d02b      	beq.n	8006a82 <HAL_GPIO_Init+0x22a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa4 <HAL_GPIO_Init+0x24c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d025      	beq.n	8006a7e <HAL_GPIO_Init+0x226>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <HAL_GPIO_Init+0x250>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01f      	beq.n	8006a7a <HAL_GPIO_Init+0x222>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_GPIO_Init+0x254>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d019      	beq.n	8006a76 <HAL_GPIO_Init+0x21e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <HAL_GPIO_Init+0x258>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <HAL_GPIO_Init+0x21a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	@ (8006ab4 <HAL_GPIO_Init+0x25c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00d      	beq.n	8006a6e <HAL_GPIO_Init+0x216>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a18      	ldr	r2, [pc, #96]	@ (8006ab8 <HAL_GPIO_Init+0x260>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d007      	beq.n	8006a6a <HAL_GPIO_Init+0x212>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a17      	ldr	r2, [pc, #92]	@ (8006abc <HAL_GPIO_Init+0x264>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_GPIO_Init+0x20e>
 8006a62:	2309      	movs	r3, #9
 8006a64:	e02d      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a66:	230a      	movs	r3, #10
 8006a68:	e02b      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	e029      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a6e:	2307      	movs	r3, #7
 8006a70:	e027      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a72:	2306      	movs	r3, #6
 8006a74:	e025      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a76:	2305      	movs	r3, #5
 8006a78:	e023      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	e021      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e01f      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e01d      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e01b      	b.n	8006ac2 <HAL_GPIO_Init+0x26a>
 8006a8a:	bf00      	nop
 8006a8c:	58000080 	.word	0x58000080
 8006a90:	58024400 	.word	0x58024400
 8006a94:	58000400 	.word	0x58000400
 8006a98:	58020000 	.word	0x58020000
 8006a9c:	58020400 	.word	0x58020400
 8006aa0:	58020800 	.word	0x58020800
 8006aa4:	58020c00 	.word	0x58020c00
 8006aa8:	58021000 	.word	0x58021000
 8006aac:	58021400 	.word	0x58021400
 8006ab0:	58021800 	.word	0x58021800
 8006ab4:	58021c00 	.word	0x58021c00
 8006ab8:	58022000 	.word	0x58022000
 8006abc:	58022400 	.word	0x58022400
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	f002 0203 	and.w	r2, r2, #3
 8006ac8:	0092      	lsls	r2, r2, #2
 8006aca:	4093      	lsls	r3, r2
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ad2:	4938      	ldr	r1, [pc, #224]	@ (8006bb4 <HAL_GPIO_Init+0x35c>)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	3302      	adds	r3, #2
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	43db      	mvns	r3, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4013      	ands	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4013      	ands	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	3301      	adds	r3, #1
 8006b94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f47f ae63 	bne.w	800686c <HAL_GPIO_Init+0x14>
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3724      	adds	r7, #36	@ 0x24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	58000400 	.word	0x58000400

08006bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	807b      	strh	r3, [r7, #2]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bc8:	787b      	ldrb	r3, [r7, #1]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006bd4:	e003      	b.n	8006bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	041a      	lsls	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	619a      	str	r2, [r3, #24]
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bfc:	887a      	ldrh	r2, [r7, #2]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4013      	ands	r3, r2
 8006c02:	041a      	lsls	r2, r3, #16
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	43d9      	mvns	r1, r3
 8006c08:	887b      	ldrh	r3, [r7, #2]
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	619a      	str	r2, [r3, #24]
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e08b      	b.n	8006d4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa fbf4 	bl	8001434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2224      	movs	r2, #36	@ 0x24
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	e006      	b.n	8006ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d108      	bne.n	8006cc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	e007      	b.n	8006cd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d54 <HAL_I2C_Init+0x134>)
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	02008000 	.word	0x02008000

08006d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d138      	bne.n	8006de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e032      	b.n	8006de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	@ 0x24
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6819      	ldr	r1, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d139      	bne.n	8006e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e033      	b.n	8006e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2224      	movs	r2, #36	@ 0x24
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e90:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e9c:	4b16      	ldr	r3, [pc, #88]	@ (8006ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d001      	beq.n	8006eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e01f      	b.n	8006eee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e01d      	b.n	8006eee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006eb2:	4b11      	ldr	r3, [pc, #68]	@ (8006ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f023 0207 	bic.w	r2, r3, #7
 8006eba:	490f      	ldr	r1, [pc, #60]	@ (8006ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ec2:	f7fa ff47 	bl	8001d54 <HAL_GetTick>
 8006ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ec8:	e009      	b.n	8006ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eca:	f7fa ff43 	bl	8001d54 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ed8:	d901      	bls.n	8006ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e007      	b.n	8006eee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ede:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eea:	d1ee      	bne.n	8006eca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	58024800 	.word	0x58024800

08006efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08c      	sub	sp, #48	@ 0x30
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f000 bc1f 	b.w	800774e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80b3 	beq.w	8007084 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f1e:	4b95      	ldr	r3, [pc, #596]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f28:	4b92      	ldr	r3, [pc, #584]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d007      	beq.n	8006f44 <HAL_RCC_OscConfig+0x48>
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	2b18      	cmp	r3, #24
 8006f38:	d112      	bne.n	8006f60 <HAL_RCC_OscConfig+0x64>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d10d      	bne.n	8006f60 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f44:	4b8b      	ldr	r3, [pc, #556]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8098 	beq.w	8007082 <HAL_RCC_OscConfig+0x186>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 8093 	bne.w	8007082 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e3f6      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f68:	d106      	bne.n	8006f78 <HAL_RCC_OscConfig+0x7c>
 8006f6a:	4b82      	ldr	r3, [pc, #520]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a81      	ldr	r2, [pc, #516]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e058      	b.n	800702a <HAL_RCC_OscConfig+0x12e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d112      	bne.n	8006fa6 <HAL_RCC_OscConfig+0xaa>
 8006f80:	4b7c      	ldr	r3, [pc, #496]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a7b      	ldr	r2, [pc, #492]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	4b79      	ldr	r3, [pc, #484]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a78      	ldr	r2, [pc, #480]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	4b76      	ldr	r3, [pc, #472]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a75      	ldr	r2, [pc, #468]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	e041      	b.n	800702a <HAL_RCC_OscConfig+0x12e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fae:	d112      	bne.n	8006fd6 <HAL_RCC_OscConfig+0xda>
 8006fb0:	4b70      	ldr	r3, [pc, #448]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a6f      	ldr	r2, [pc, #444]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6c      	ldr	r2, [pc, #432]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a69      	ldr	r2, [pc, #420]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e029      	b.n	800702a <HAL_RCC_OscConfig+0x12e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006fde:	d112      	bne.n	8007006 <HAL_RCC_OscConfig+0x10a>
 8006fe0:	4b64      	ldr	r3, [pc, #400]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a63      	ldr	r2, [pc, #396]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fe6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4b61      	ldr	r3, [pc, #388]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a60      	ldr	r2, [pc, #384]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8006ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	e011      	b.n	800702a <HAL_RCC_OscConfig+0x12e>
 8007006:	4b5b      	ldr	r3, [pc, #364]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a5a      	ldr	r2, [pc, #360]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 800700c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	4b58      	ldr	r3, [pc, #352]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a57      	ldr	r2, [pc, #348]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	4b55      	ldr	r3, [pc, #340]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a54      	ldr	r2, [pc, #336]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007028:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d013      	beq.n	800705a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007032:	f7fa fe8f 	bl	8001d54 <HAL_GetTick>
 8007036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007038:	e008      	b.n	800704c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800703a:	f7fa fe8b 	bl	8001d54 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b64      	cmp	r3, #100	@ 0x64
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e380      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800704c:	4b49      	ldr	r3, [pc, #292]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f0      	beq.n	800703a <HAL_RCC_OscConfig+0x13e>
 8007058:	e014      	b.n	8007084 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705a:	f7fa fe7b 	bl	8001d54 <HAL_GetTick>
 800705e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007062:	f7fa fe77 	bl	8001d54 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b64      	cmp	r3, #100	@ 0x64
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e36c      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007074:	4b3f      	ldr	r3, [pc, #252]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f0      	bne.n	8007062 <HAL_RCC_OscConfig+0x166>
 8007080:	e000      	b.n	8007084 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007082:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 808c 	beq.w	80071aa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007092:	4b38      	ldr	r3, [pc, #224]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800709c:	4b35      	ldr	r3, [pc, #212]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <HAL_RCC_OscConfig+0x1bc>
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	2b18      	cmp	r3, #24
 80070ac:	d137      	bne.n	800711e <HAL_RCC_OscConfig+0x222>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d132      	bne.n	800711e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_OscConfig+0x1d4>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e33e      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070d0:	4b28      	ldr	r3, [pc, #160]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f023 0219 	bic.w	r2, r3, #25
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4925      	ldr	r1, [pc, #148]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e2:	f7fa fe37 	bl	8001d54 <HAL_GetTick>
 80070e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ea:	f7fa fe33 	bl	8001d54 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e328      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007108:	4b1a      	ldr	r3, [pc, #104]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	4917      	ldr	r1, [pc, #92]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007118:	4313      	orrs	r3, r2
 800711a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800711c:	e045      	b.n	80071aa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d028      	beq.n	8007178 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007126:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 0219 	bic.w	r2, r3, #25
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	4910      	ldr	r1, [pc, #64]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fa fe0c 	bl	8001d54 <HAL_GetTick>
 800713c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007140:	f7fa fe08 	bl	8001d54 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e2fd      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007152:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715e:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	4901      	ldr	r1, [pc, #4]	@ (8007174 <HAL_RCC_OscConfig+0x278>)
 800716e:	4313      	orrs	r3, r2
 8007170:	604b      	str	r3, [r1, #4]
 8007172:	e01a      	b.n	80071aa <HAL_RCC_OscConfig+0x2ae>
 8007174:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007178:	4b97      	ldr	r3, [pc, #604]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a96      	ldr	r2, [pc, #600]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fa fde6 	bl	8001d54 <HAL_GetTick>
 8007188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718c:	f7fa fde2 	bl	8001d54 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e2d7      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800719e:	4b8e      	ldr	r3, [pc, #568]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06a      	beq.n	800728c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071b6:	4b88      	ldr	r3, [pc, #544]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071c0:	4b85      	ldr	r3, [pc, #532]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d007      	beq.n	80071dc <HAL_RCC_OscConfig+0x2e0>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b18      	cmp	r3, #24
 80071d0:	d11b      	bne.n	800720a <HAL_RCC_OscConfig+0x30e>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d116      	bne.n	800720a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071dc:	4b7e      	ldr	r3, [pc, #504]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b80      	cmp	r3, #128	@ 0x80
 80071ee:	d001      	beq.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e2ac      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071f4:	4b78      	ldr	r3, [pc, #480]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	061b      	lsls	r3, r3, #24
 8007202:	4975      	ldr	r1, [pc, #468]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007204:	4313      	orrs	r3, r2
 8007206:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007208:	e040      	b.n	800728c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d023      	beq.n	800725a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007212:	4b71      	ldr	r3, [pc, #452]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a70      	ldr	r2, [pc, #448]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7fa fd99 	bl	8001d54 <HAL_GetTick>
 8007222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007226:	f7fa fd95 	bl	8001d54 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e28a      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007238:	4b67      	ldr	r3, [pc, #412]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007244:	4b64      	ldr	r3, [pc, #400]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	061b      	lsls	r3, r3, #24
 8007252:	4961      	ldr	r1, [pc, #388]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007254:	4313      	orrs	r3, r2
 8007256:	60cb      	str	r3, [r1, #12]
 8007258:	e018      	b.n	800728c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800725a:	4b5f      	ldr	r3, [pc, #380]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5e      	ldr	r2, [pc, #376]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fa fd75 	bl	8001d54 <HAL_GetTick>
 800726a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800726e:	f7fa fd71 	bl	8001d54 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e266      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007280:	4b55      	ldr	r3, [pc, #340]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f0      	bne.n	800726e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d036      	beq.n	8007306 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d019      	beq.n	80072d4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072a0:	4b4d      	ldr	r3, [pc, #308]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a4:	4a4c      	ldr	r2, [pc, #304]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ac:	f7fa fd52 	bl	8001d54 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b4:	f7fa fd4e 	bl	8001d54 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e243      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072c6:	4b44      	ldr	r3, [pc, #272]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0f0      	beq.n	80072b4 <HAL_RCC_OscConfig+0x3b8>
 80072d2:	e018      	b.n	8007306 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d4:	4b40      	ldr	r3, [pc, #256]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d8:	4a3f      	ldr	r2, [pc, #252]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e0:	f7fa fd38 	bl	8001d54 <HAL_GetTick>
 80072e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e8:	f7fa fd34 	bl	8001d54 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e229      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072fa:	4b37      	ldr	r3, [pc, #220]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80072fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d036      	beq.n	8007380 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d019      	beq.n	800734e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800731a:	4b2f      	ldr	r3, [pc, #188]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a2e      	ldr	r2, [pc, #184]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007326:	f7fa fd15 	bl	8001d54 <HAL_GetTick>
 800732a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800732e:	f7fa fd11 	bl	8001d54 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e206      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007340:	4b25      	ldr	r3, [pc, #148]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCC_OscConfig+0x432>
 800734c:	e018      	b.n	8007380 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800734e:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a21      	ldr	r2, [pc, #132]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007358:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800735a:	f7fa fcfb 	bl	8001d54 <HAL_GetTick>
 800735e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007362:	f7fa fcf7 	bl	8001d54 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e1ec      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007374:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80af 	beq.w	80074ec <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800738e:	4b13      	ldr	r3, [pc, #76]	@ (80073dc <HAL_RCC_OscConfig+0x4e0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a12      	ldr	r2, [pc, #72]	@ (80073dc <HAL_RCC_OscConfig+0x4e0>)
 8007394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800739a:	f7fa fcdb 	bl	8001d54 <HAL_GetTick>
 800739e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a2:	f7fa fcd7 	bl	8001d54 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b64      	cmp	r3, #100	@ 0x64
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e1cc      	b.n	800774e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073b4:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <HAL_RCC_OscConfig+0x4e0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0f0      	beq.n	80073a2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d10b      	bne.n	80073e0 <HAL_RCC_OscConfig+0x4e4>
 80073c8:	4b03      	ldr	r3, [pc, #12]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a02      	ldr	r2, [pc, #8]	@ (80073d8 <HAL_RCC_OscConfig+0x4dc>)
 80073ce:	f043 0301 	orr.w	r3, r3, #1
 80073d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d4:	e05b      	b.n	800748e <HAL_RCC_OscConfig+0x592>
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
 80073dc:	58024800 	.word	0x58024800
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d112      	bne.n	800740e <HAL_RCC_OscConfig+0x512>
 80073e8:	4b9d      	ldr	r3, [pc, #628]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ec:	4a9c      	ldr	r2, [pc, #624]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f4:	4b9a      	ldr	r3, [pc, #616]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f8:	4a99      	ldr	r2, [pc, #612]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80073fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007400:	4b97      	ldr	r3, [pc, #604]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007404:	4a96      	ldr	r2, [pc, #600]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007406:	f023 0304 	bic.w	r3, r3, #4
 800740a:	6713      	str	r3, [r2, #112]	@ 0x70
 800740c:	e03f      	b.n	800748e <HAL_RCC_OscConfig+0x592>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b05      	cmp	r3, #5
 8007414:	d112      	bne.n	800743c <HAL_RCC_OscConfig+0x540>
 8007416:	4b92      	ldr	r3, [pc, #584]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741a:	4a91      	ldr	r2, [pc, #580]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800741c:	f043 0304 	orr.w	r3, r3, #4
 8007420:	6713      	str	r3, [r2, #112]	@ 0x70
 8007422:	4b8f      	ldr	r3, [pc, #572]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	4a8e      	ldr	r2, [pc, #568]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800742c:	6713      	str	r3, [r2, #112]	@ 0x70
 800742e:	4b8c      	ldr	r3, [pc, #560]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	4a8b      	ldr	r2, [pc, #556]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	6713      	str	r3, [r2, #112]	@ 0x70
 800743a:	e028      	b.n	800748e <HAL_RCC_OscConfig+0x592>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b85      	cmp	r3, #133	@ 0x85
 8007442:	d112      	bne.n	800746a <HAL_RCC_OscConfig+0x56e>
 8007444:	4b86      	ldr	r3, [pc, #536]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007448:	4a85      	ldr	r2, [pc, #532]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800744a:	f043 0304 	orr.w	r3, r3, #4
 800744e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007450:	4b83      	ldr	r3, [pc, #524]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	4a82      	ldr	r2, [pc, #520]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
 800745c:	4b80      	ldr	r3, [pc, #512]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007460:	4a7f      	ldr	r2, [pc, #508]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	@ 0x70
 8007468:	e011      	b.n	800748e <HAL_RCC_OscConfig+0x592>
 800746a:	4b7d      	ldr	r3, [pc, #500]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	4a7c      	ldr	r2, [pc, #496]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	@ 0x70
 8007476:	4b7a      	ldr	r3, [pc, #488]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747a:	4a79      	ldr	r2, [pc, #484]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	6713      	str	r3, [r2, #112]	@ 0x70
 8007482:	4b77      	ldr	r3, [pc, #476]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	4a76      	ldr	r2, [pc, #472]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800748c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d015      	beq.n	80074c2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fa fc5d 	bl	8001d54 <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fa fc59 	bl	8001d54 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e14c      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ee      	beq.n	800749e <HAL_RCC_OscConfig+0x5a2>
 80074c0:	e014      	b.n	80074ec <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fa fc47 	bl	8001d54 <HAL_GetTick>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ca:	f7fa fc43 	bl	8001d54 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074d8:	4293      	cmp	r3, r2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e136      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074e0:	4b5f      	ldr	r3, [pc, #380]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ee      	bne.n	80074ca <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 812b 	beq.w	800774c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074f6:	4b5a      	ldr	r3, [pc, #360]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074fe:	2b18      	cmp	r3, #24
 8007500:	f000 80bb 	beq.w	800767a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	2b02      	cmp	r3, #2
 800750a:	f040 8095 	bne.w	8007638 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750e:	4b54      	ldr	r3, [pc, #336]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a53      	ldr	r2, [pc, #332]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007514:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751a:	f7fa fc1b 	bl	8001d54 <HAL_GetTick>
 800751e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007522:	f7fa fc17 	bl	8001d54 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e10c      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007534:	4b4a      	ldr	r3, [pc, #296]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f0      	bne.n	8007522 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007540:	4b47      	ldr	r3, [pc, #284]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007542:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007544:	4b47      	ldr	r3, [pc, #284]	@ (8007664 <HAL_RCC_OscConfig+0x768>)
 8007546:	4013      	ands	r3, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007550:	0112      	lsls	r2, r2, #4
 8007552:	430a      	orrs	r2, r1
 8007554:	4942      	ldr	r1, [pc, #264]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007556:	4313      	orrs	r3, r2
 8007558:	628b      	str	r3, [r1, #40]	@ 0x28
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	3b01      	subs	r3, #1
 8007560:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007568:	3b01      	subs	r3, #1
 800756a:	025b      	lsls	r3, r3, #9
 800756c:	b29b      	uxth	r3, r3
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	3b01      	subs	r3, #1
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007582:	3b01      	subs	r3, #1
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800758a:	4935      	ldr	r1, [pc, #212]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800758c:	4313      	orrs	r3, r2
 800758e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007590:	4b33      	ldr	r3, [pc, #204]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	4a32      	ldr	r2, [pc, #200]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800759c:	4b30      	ldr	r3, [pc, #192]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800759e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075a0:	4b31      	ldr	r3, [pc, #196]	@ (8007668 <HAL_RCC_OscConfig+0x76c>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075a8:	00d2      	lsls	r2, r2, #3
 80075aa:	492d      	ldr	r1, [pc, #180]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	f023 020c 	bic.w	r2, r3, #12
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	4928      	ldr	r1, [pc, #160]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075c2:	4b27      	ldr	r3, [pc, #156]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	f023 0202 	bic.w	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ce:	4924      	ldr	r1, [pc, #144]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075d4:	4b22      	ldr	r3, [pc, #136]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	4a21      	ldr	r2, [pc, #132]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075f8:	4b19      	ldr	r3, [pc, #100]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a18      	ldr	r2, [pc, #96]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007604:	4b16      	ldr	r3, [pc, #88]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a15      	ldr	r2, [pc, #84]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800760a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800760e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fa fba0 	bl	8001d54 <HAL_GetTick>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007618:	f7fa fb9c 	bl	8001d54 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e091      	b.n	800774e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0x71c>
 8007636:	e089      	b.n	800774c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a08      	ldr	r2, [pc, #32]	@ (8007660 <HAL_RCC_OscConfig+0x764>)
 800763e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007644:	f7fa fb86 	bl	8001d54 <HAL_GetTick>
 8007648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800764a:	e00f      	b.n	800766c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764c:	f7fa fb82 	bl	8001d54 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d908      	bls.n	800766c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e077      	b.n	800774e <HAL_RCC_OscConfig+0x852>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
 8007664:	fffffc0c 	.word	0xfffffc0c
 8007668:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800766c:	4b3a      	ldr	r3, [pc, #232]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e9      	bne.n	800764c <HAL_RCC_OscConfig+0x750>
 8007678:	e068      	b.n	800774c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800767a:	4b37      	ldr	r3, [pc, #220]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 800767c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007680:	4b35      	ldr	r3, [pc, #212]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 8007682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007684:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	2b01      	cmp	r3, #1
 800768c:	d031      	beq.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f003 0203 	and.w	r2, r3, #3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007698:	429a      	cmp	r2, r3
 800769a:	d12a      	bne.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d122      	bne.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d11a      	bne.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0a5b      	lsrs	r3, r3, #9
 80076c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d111      	bne.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d108      	bne.n	80076f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0e1b      	lsrs	r3, r3, #24
 80076e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d001      	beq.n	80076f6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e02b      	b.n	800774e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076f6:	4b18      	ldr	r3, [pc, #96]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 80076f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007700:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	429a      	cmp	r2, r3
 800770a:	d01f      	beq.n	800774c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800770c:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4a11      	ldr	r2, [pc, #68]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007718:	f7fa fb1c 	bl	8001d54 <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800771e:	bf00      	nop
 8007720:	f7fa fb18 	bl	8001d54 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	4293      	cmp	r3, r2
 800772a:	d0f9      	beq.n	8007720 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800772c:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 800772e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <HAL_RCC_OscConfig+0x860>)
 8007732:	4013      	ands	r3, r2
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007738:	00d2      	lsls	r2, r2, #3
 800773a:	4907      	ldr	r1, [pc, #28]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <HAL_RCC_OscConfig+0x85c>)
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3730      	adds	r7, #48	@ 0x30
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	58024400 	.word	0x58024400
 800775c:	ffff0007 	.word	0xffff0007

08007760 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e19c      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007774:	4b8a      	ldr	r3, [pc, #552]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d910      	bls.n	80077a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007782:	4b87      	ldr	r3, [pc, #540]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f023 020f 	bic.w	r2, r3, #15
 800778a:	4985      	ldr	r1, [pc, #532]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	4313      	orrs	r3, r2
 8007790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007792:	4b83      	ldr	r3, [pc, #524]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d001      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e184      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d010      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	4b7b      	ldr	r3, [pc, #492]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077bc:	429a      	cmp	r2, r3
 80077be:	d908      	bls.n	80077d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077c0:	4b78      	ldr	r3, [pc, #480]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	4975      	ldr	r1, [pc, #468]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	4b70      	ldr	r3, [pc, #448]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d908      	bls.n	8007800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077ee:	4b6d      	ldr	r3, [pc, #436]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	496a      	ldr	r1, [pc, #424]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	4b64      	ldr	r3, [pc, #400]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007818:	429a      	cmp	r2, r3
 800781a:	d908      	bls.n	800782e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	495e      	ldr	r1, [pc, #376]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800782a:	4313      	orrs	r3, r2
 800782c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	4b59      	ldr	r3, [pc, #356]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007846:	429a      	cmp	r2, r3
 8007848:	d908      	bls.n	800785c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800784a:	4b56      	ldr	r3, [pc, #344]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	4953      	ldr	r1, [pc, #332]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007858:	4313      	orrs	r3, r2
 800785a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d010      	beq.n	800788a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	4b4d      	ldr	r3, [pc, #308]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	429a      	cmp	r2, r3
 8007876:	d908      	bls.n	800788a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007878:	4b4a      	ldr	r3, [pc, #296]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f023 020f 	bic.w	r2, r3, #15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	4947      	ldr	r1, [pc, #284]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007886:	4313      	orrs	r3, r2
 8007888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d055      	beq.n	8007942 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007896:	4b43      	ldr	r3, [pc, #268]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4940      	ldr	r1, [pc, #256]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d107      	bne.n	80078c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078b0:	4b3c      	ldr	r3, [pc, #240]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d121      	bne.n	8007900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0f6      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078c8:	4b36      	ldr	r3, [pc, #216]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d115      	bne.n	8007900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0ea      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d107      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078e0:	4b30      	ldr	r3, [pc, #192]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0de      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078f0:	4b2c      	ldr	r3, [pc, #176]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0d6      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007900:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f023 0207 	bic.w	r2, r3, #7
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4925      	ldr	r1, [pc, #148]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800790e:	4313      	orrs	r3, r2
 8007910:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007912:	f7fa fa1f 	bl	8001d54 <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007918:	e00a      	b.n	8007930 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800791a:	f7fa fa1b 	bl	8001d54 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e0be      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007930:	4b1c      	ldr	r3, [pc, #112]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	429a      	cmp	r2, r3
 8007940:	d1eb      	bne.n	800791a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d010      	beq.n	8007970 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	429a      	cmp	r2, r3
 800795c:	d208      	bcs.n	8007970 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800795e:	4b11      	ldr	r3, [pc, #68]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f023 020f 	bic.w	r2, r3, #15
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	490e      	ldr	r1, [pc, #56]	@ (80079a4 <HAL_RCC_ClockConfig+0x244>)
 800796c:	4313      	orrs	r3, r2
 800796e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d214      	bcs.n	80079a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797e:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f023 020f 	bic.w	r2, r3, #15
 8007986:	4906      	ldr	r1, [pc, #24]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800798e:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <HAL_RCC_ClockConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d005      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e086      	b.n	8007aae <HAL_RCC_ClockConfig+0x34e>
 80079a0:	52002000 	.word	0x52002000
 80079a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d010      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d208      	bcs.n	80079d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079c4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	4939      	ldr	r1, [pc, #228]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d010      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	4b34      	ldr	r3, [pc, #208]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d208      	bcs.n	8007a04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079f2:	4b31      	ldr	r3, [pc, #196]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	492e      	ldr	r1, [pc, #184]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	4b28      	ldr	r3, [pc, #160]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d208      	bcs.n	8007a32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a20:	4b25      	ldr	r3, [pc, #148]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	4922      	ldr	r1, [pc, #136]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69da      	ldr	r2, [r3, #28]
 8007a42:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d208      	bcs.n	8007a60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4917      	ldr	r1, [pc, #92]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007a60:	f000 f834 	bl	8007acc <HAL_RCC_GetSysClockFreq>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b14      	ldr	r3, [pc, #80]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	4912      	ldr	r1, [pc, #72]	@ (8007abc <HAL_RCC_ClockConfig+0x35c>)
 8007a72:	5ccb      	ldrb	r3, [r1, r3]
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab8 <HAL_RCC_ClockConfig+0x358>)
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	4a0d      	ldr	r2, [pc, #52]	@ (8007abc <HAL_RCC_ClockConfig+0x35c>)
 8007a88:	5cd3      	ldrb	r3, [r2, r3]
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
 8007a94:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac0 <HAL_RCC_ClockConfig+0x360>)
 8007a96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a98:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac4 <HAL_RCC_ClockConfig+0x364>)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <HAL_RCC_ClockConfig+0x368>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fa f90c 	bl	8001cc0 <HAL_InitTick>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	0800b11c 	.word	0x0800b11c
 8007ac0:	24000004 	.word	0x24000004
 8007ac4:	24000000 	.word	0x24000000
 8007ac8:	24000008 	.word	0x24000008

08007acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b089      	sub	sp, #36	@ 0x24
 8007ad0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ad2:	4bb3      	ldr	r3, [pc, #716]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ada:	2b18      	cmp	r3, #24
 8007adc:	f200 8155 	bhi.w	8007d8a <HAL_RCC_GetSysClockFreq+0x2be>
 8007ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae6:	bf00      	nop
 8007ae8:	08007b4d 	.word	0x08007b4d
 8007aec:	08007d8b 	.word	0x08007d8b
 8007af0:	08007d8b 	.word	0x08007d8b
 8007af4:	08007d8b 	.word	0x08007d8b
 8007af8:	08007d8b 	.word	0x08007d8b
 8007afc:	08007d8b 	.word	0x08007d8b
 8007b00:	08007d8b 	.word	0x08007d8b
 8007b04:	08007d8b 	.word	0x08007d8b
 8007b08:	08007b73 	.word	0x08007b73
 8007b0c:	08007d8b 	.word	0x08007d8b
 8007b10:	08007d8b 	.word	0x08007d8b
 8007b14:	08007d8b 	.word	0x08007d8b
 8007b18:	08007d8b 	.word	0x08007d8b
 8007b1c:	08007d8b 	.word	0x08007d8b
 8007b20:	08007d8b 	.word	0x08007d8b
 8007b24:	08007d8b 	.word	0x08007d8b
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	08007d8b 	.word	0x08007d8b
 8007b30:	08007d8b 	.word	0x08007d8b
 8007b34:	08007d8b 	.word	0x08007d8b
 8007b38:	08007d8b 	.word	0x08007d8b
 8007b3c:	08007d8b 	.word	0x08007d8b
 8007b40:	08007d8b 	.word	0x08007d8b
 8007b44:	08007d8b 	.word	0x08007d8b
 8007b48:	08007b7f 	.word	0x08007b7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b4c:	4b94      	ldr	r3, [pc, #592]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b58:	4b91      	ldr	r3, [pc, #580]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	4a90      	ldr	r2, [pc, #576]	@ (8007da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b6a:	e111      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8007da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b6e:	61bb      	str	r3, [r7, #24]
      break;
 8007b70:	e10e      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b72:	4b8d      	ldr	r3, [pc, #564]	@ (8007da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b74:	61bb      	str	r3, [r7, #24]
      break;
 8007b76:	e10b      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b78:	4b8c      	ldr	r3, [pc, #560]	@ (8007dac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b7a:	61bb      	str	r3, [r7, #24]
      break;
 8007b7c:	e108      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b7e:	4b88      	ldr	r3, [pc, #544]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b88:	4b85      	ldr	r3, [pc, #532]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	091b      	lsrs	r3, r3, #4
 8007b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b94:	4b82      	ldr	r3, [pc, #520]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b9e:	4b80      	ldr	r3, [pc, #512]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba2:	08db      	lsrs	r3, r3, #3
 8007ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80e1 	beq.w	8007d84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	f000 8083 	beq.w	8007cd0 <HAL_RCC_GetSysClockFreq+0x204>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	f200 80a1 	bhi.w	8007d14 <HAL_RCC_GetSysClockFreq+0x248>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_RCC_GetSysClockFreq+0x114>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d056      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bde:	e099      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007be0:	4b6f      	ldr	r3, [pc, #444]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02d      	beq.n	8007c48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bec:	4b6c      	ldr	r3, [pc, #432]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	08db      	lsrs	r3, r3, #3
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8007da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c16:	4b62      	ldr	r3, [pc, #392]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c46:	e087      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007db4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	4b51      	ldr	r3, [pc, #324]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c8a:	e065      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9e:	4b40      	ldr	r3, [pc, #256]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cce:	e043      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007dbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cf6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d12:	e021      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d26:	4b1e      	ldr	r3, [pc, #120]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d58:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	0a5b      	lsrs	r3, r3, #9
 8007d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d62:	3301      	adds	r3, #1
 8007d64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7c:	ee17 3a90 	vmov	r3, s15
 8007d80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d82:	e005      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
      break;
 8007d88:	e002      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d8a:	4b07      	ldr	r3, [pc, #28]	@ (8007da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d8c:	61bb      	str	r3, [r7, #24]
      break;
 8007d8e:	bf00      	nop
  }

  return sysclockfreq;
 8007d90:	69bb      	ldr	r3, [r7, #24]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3724      	adds	r7, #36	@ 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	017d7840 	.word	0x017d7840
 8007db0:	46000000 	.word	0x46000000
 8007db4:	4c742400 	.word	0x4c742400
 8007db8:	4a742400 	.word	0x4a742400
 8007dbc:	4bbebc20 	.word	0x4bbebc20

08007dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007dc6:	f7ff fe81 	bl	8007acc <HAL_RCC_GetSysClockFreq>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	490f      	ldr	r1, [pc, #60]	@ (8007e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dd8:	5ccb      	ldrb	r3, [r1, r3]
 8007dda:	f003 031f 	and.w	r3, r3, #31
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007de4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	4a09      	ldr	r2, [pc, #36]	@ (8007e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dee:	5cd3      	ldrb	r3, [r2, r3]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfa:	4a07      	ldr	r2, [pc, #28]	@ (8007e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dfe:	4a07      	ldr	r2, [pc, #28]	@ (8007e1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e04:	4b04      	ldr	r3, [pc, #16]	@ (8007e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e06:	681b      	ldr	r3, [r3, #0]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	58024400 	.word	0x58024400
 8007e14:	0800b11c 	.word	0x0800b11c
 8007e18:	24000004 	.word	0x24000004
 8007e1c:	24000000 	.word	0x24000000

08007e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007e24:	f7ff ffcc 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	091b      	lsrs	r3, r3, #4
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	4904      	ldr	r1, [pc, #16]	@ (8007e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e36:	5ccb      	ldrb	r3, [r1, r3]
 8007e38:	f003 031f 	and.w	r3, r3, #31
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	58024400 	.word	0x58024400
 8007e48:	0800b11c 	.word	0x0800b11c

08007e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e50:	b0c8      	sub	sp, #288	@ 0x120
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007e70:	2500      	movs	r5, #0
 8007e72:	ea54 0305 	orrs.w	r3, r4, r5
 8007e76:	d049      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e82:	d02f      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e88:	d828      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8e:	d01a      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e94:	d822      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d007      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ea0:	e01c      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea2:	4ba7      	ldr	r3, [pc, #668]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	4aa6      	ldr	r2, [pc, #664]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eae:	e01a      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fa6d 	bl	800a398 <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ec4:	e00f      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eca:	3328      	adds	r3, #40	@ 0x28
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 fb14 	bl	800a4fc <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007eee:	4b94      	ldr	r3, [pc, #592]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007efc:	4a90      	ldr	r2, [pc, #576]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8007f20:	d047      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d82a      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f49 	.word	0x08007f49
 8007f38:	08007f57 	.word	0x08007f57
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007f8b 	.word	0x08007f8b
 8007f44:	08007f8b 	.word	0x08007f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f48:	4b7d      	ldr	r3, [pc, #500]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	4a7c      	ldr	r2, [pc, #496]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f54:	e01a      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 fa1a 	bl	800a398 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e00f      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f70:	3328      	adds	r3, #40	@ 0x28
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f002 fac1 	bl	800a4fc <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f80:	e004      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f88:	e000      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f94:	4b6a      	ldr	r3, [pc, #424]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f98:	f023 0107 	bic.w	r1, r3, #7
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa2:	4a67      	ldr	r2, [pc, #412]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa8:	e003      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007faa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007fbe:	f04f 0b00 	mov.w	fp, #0
 8007fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007fc6:	d054      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007fd2:	d036      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007fd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007fd8:	d82f      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fde:	d032      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe4:	d829      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe8:	d02f      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fec:	d825      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007ff2:	2b80      	cmp	r3, #128	@ 0x80
 8007ff4:	d821      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d007      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007ffe:	e01c      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008000:	4b4f      	ldr	r3, [pc, #316]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	4a4e      	ldr	r2, [pc, #312]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800800c:	e01e      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008012:	3308      	adds	r3, #8
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f002 f9be 	bl	800a398 <RCCEx_PLL2_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008022:	e013      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008028:	3328      	adds	r3, #40	@ 0x28
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f002 fa65 	bl	800a4fc <RCCEx_PLL3_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008038:	e008      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008042:	bf00      	nop
 8008044:	e002      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008046:	bf00      	nop
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008054:	4b3a      	ldr	r3, [pc, #232]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008058:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008062:	4a37      	ldr	r2, [pc, #220]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008064:	430b      	orrs	r3, r1
 8008066:	6513      	str	r3, [r2, #80]	@ 0x50
 8008068:	e003      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800806e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800807e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008082:	2300      	movs	r3, #0
 8008084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008088:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d05c      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008098:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800809c:	d03b      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800809e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80080a2:	d834      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a8:	d037      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ae:	d82e      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080b4:	d033      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80080b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080ba:	d828      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c0:	d01a      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80080c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c6:	d822      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80080cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d0:	d007      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80080d2:	e01c      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	4a19      	ldr	r2, [pc, #100]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080e0:	e01e      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e6:	3308      	adds	r3, #8
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 f954 	bl	800a398 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080f6:	e013      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fc:	3328      	adds	r3, #40	@ 0x28
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f002 f9fb 	bl	800a4fc <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800810c:	e008      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800811e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10d      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008136:	4a02      	ldr	r2, [pc, #8]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6513      	str	r3, [r2, #80]	@ 0x50
 800813c:	e006      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800813e:	bf00      	nop
 8008140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800814c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008162:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d03a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800816c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008172:	2b30      	cmp	r3, #48	@ 0x30
 8008174:	d01f      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008176:	2b30      	cmp	r3, #48	@ 0x30
 8008178:	d819      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d00c      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800817e:	2b20      	cmp	r3, #32
 8008180:	d815      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d019      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008186:	2b10      	cmp	r3, #16
 8008188:	d111      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818a:	4bae      	ldr	r3, [pc, #696]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	4aad      	ldr	r2, [pc, #692]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008196:	e011      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800819c:	3308      	adds	r3, #8
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 f8f9 	bl	800a398 <RCCEx_PLL2_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80081c4:	4b9f      	ldr	r3, [pc, #636]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d2:	4a9c      	ldr	r2, [pc, #624]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d051      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800820c:	d035      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800820e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008212:	d82e      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008218:	d031      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800821a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800821e:	d828      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008224:	d01a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822a:	d822      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008234:	d007      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008236:	e01c      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008238:	4b82      	ldr	r3, [pc, #520]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	4a81      	ldr	r2, [pc, #516]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008244:	e01c      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824a:	3308      	adds	r3, #8
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f002 f8a2 	bl	800a398 <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800825a:	e011      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800825c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008260:	3328      	adds	r3, #40	@ 0x28
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f002 f949 	bl	800a4fc <RCCEx_PLL3_Config>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800827e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008288:	4b6e      	ldr	r3, [pc, #440]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800828a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008296:	4a6b      	ldr	r2, [pc, #428]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008298:	430b      	orrs	r3, r1
 800829a:	6513      	str	r3, [r2, #80]	@ 0x50
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80082b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082b6:	2300      	movs	r3, #0
 80082b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d053      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d0:	d033      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80082d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d6:	d82c      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082dc:	d02f      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80082de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e2:	d826      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082e8:	d02b      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80082ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082ee:	d820      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f4:	d012      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fa:	d81a      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d022      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008304:	d115      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830a:	3308      	adds	r3, #8
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f002 f842 	bl	800a398 <RCCEx_PLL2_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800831a:	e015      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008320:	3328      	adds	r3, #40	@ 0x28
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f002 f8e9 	bl	800a4fc <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008330:	e00a      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008338:	e006      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800833a:	bf00      	nop
 800833c:	e004      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008350:	4b3c      	ldr	r3, [pc, #240]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008354:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800835e:	4a39      	ldr	r2, [pc, #228]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008360:	430b      	orrs	r3, r1
 8008362:	6513      	str	r3, [r2, #80]	@ 0x50
 8008364:	e003      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800836a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800837a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800837e:	2300      	movs	r3, #0
 8008380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008384:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008388:	460b      	mov	r3, r1
 800838a:	4313      	orrs	r3, r2
 800838c:	d060      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008396:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800839a:	d039      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800839c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80083a0:	d832      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083a6:	d035      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80083a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ac:	d82c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b2:	d031      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b8:	d826      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083be:	d02d      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80083c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083c4:	d820      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ca:	d012      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d0:	d81a      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d024      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80083d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083da:	d115      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e0:	3308      	adds	r3, #8
 80083e2:	2101      	movs	r1, #1
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 ffd7 	bl	800a398 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083f0:	e017      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	3328      	adds	r3, #40	@ 0x28
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 f87e 	bl	800a4fc <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008406:	e00c      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800840e:	e008      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008410:	bf00      	nop
 8008412:	e006      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008414:	bf00      	nop
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10e      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800842a:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800843a:	4a02      	ldr	r2, [pc, #8]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800843c:	430b      	orrs	r3, r1
 800843e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008442:	bf00      	nop
 8008444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800844c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800845c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008460:	2300      	movs	r3, #0
 8008462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800846a:	460b      	mov	r3, r1
 800846c:	4313      	orrs	r3, r2
 800846e:	d037      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847a:	d00e      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800847c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008480:	d816      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d018      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800848a:	d111      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800848c:	4bc4      	ldr	r3, [pc, #784]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	4ac3      	ldr	r2, [pc, #780]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008498:	e00f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800849a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849e:	3308      	adds	r3, #8
 80084a0:	2101      	movs	r1, #1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 ff78 	bl	800a398 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084c2:	4bb7      	ldr	r3, [pc, #732]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084d0:	4ab3      	ldr	r2, [pc, #716]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80084d6:	e003      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d039      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008506:	2b03      	cmp	r3, #3
 8008508:	d81c      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	0800854d 	.word	0x0800854d
 8008514:	08008521 	.word	0x08008521
 8008518:	0800852f 	.word	0x0800852f
 800851c:	0800854d 	.word	0x0800854d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008520:	4b9f      	ldr	r3, [pc, #636]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	4a9e      	ldr	r2, [pc, #632]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800852a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	3308      	adds	r3, #8
 8008534:	2102      	movs	r1, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 ff2e 	bl	800a398 <RCCEx_PLL2_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800854c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008556:	4b92      	ldr	r3, [pc, #584]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855a:	f023 0103 	bic.w	r1, r3, #3
 800855e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008564:	4a8e      	ldr	r2, [pc, #568]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008566:	430b      	orrs	r3, r1
 8008568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800858a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	f000 8099 	beq.w	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008596:	4b83      	ldr	r3, [pc, #524]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a82      	ldr	r2, [pc, #520]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800859c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085a2:	f7f9 fbd7 	bl	8001d54 <HAL_GetTick>
 80085a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085aa:	e00b      	b.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ac:	f7f9 fbd2 	bl	8001d54 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b64      	cmp	r3, #100	@ 0x64
 80085ba:	d903      	bls.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085c2:	e005      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085c4:	4b77      	ldr	r3, [pc, #476]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ed      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80085d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d173      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085d8:	4b71      	ldr	r3, [pc, #452]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e4:	4053      	eors	r3, r2
 80085e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d015      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ee:	4b6c      	ldr	r3, [pc, #432]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085fa:	4b69      	ldr	r3, [pc, #420]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fe:	4a68      	ldr	r2, [pc, #416]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008606:	4b66      	ldr	r3, [pc, #408]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	4a65      	ldr	r2, [pc, #404]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008610:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008612:	4a63      	ldr	r2, [pc, #396]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008618:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	d118      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7f9 fb94 	bl	8001d54 <HAL_GetTick>
 800862c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008630:	e00d      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008632:	f7f9 fb8f 	bl	8001d54 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800863c:	1ad2      	subs	r2, r2, r3
 800863e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008642:	429a      	cmp	r2, r3
 8008644:	d903      	bls.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800864c:	e005      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864e:	4b54      	ldr	r3, [pc, #336]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0eb      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800865a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800865e:	2b00      	cmp	r3, #0
 8008660:	d129      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008672:	d10e      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008674:	4b4a      	ldr	r3, [pc, #296]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800867c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008684:	091a      	lsrs	r2, r3, #4
 8008686:	4b48      	ldr	r3, [pc, #288]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008688:	4013      	ands	r3, r2
 800868a:	4a45      	ldr	r2, [pc, #276]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800868c:	430b      	orrs	r3, r1
 800868e:	6113      	str	r3, [r2, #16]
 8008690:	e005      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008692:	4b43      	ldr	r3, [pc, #268]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	4a42      	ldr	r2, [pc, #264]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800869c:	6113      	str	r3, [r2, #16]
 800869e:	4b40      	ldr	r3, [pc, #256]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ae:	4a3c      	ldr	r2, [pc, #240]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b4:	e008      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f002 0301 	and.w	r3, r2, #1
 80086d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f000 8090 	beq.w	800880a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f2:	2b28      	cmp	r3, #40	@ 0x28
 80086f4:	d870      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80086f6:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	080087e1 	.word	0x080087e1
 8008700:	080087d9 	.word	0x080087d9
 8008704:	080087d9 	.word	0x080087d9
 8008708:	080087d9 	.word	0x080087d9
 800870c:	080087d9 	.word	0x080087d9
 8008710:	080087d9 	.word	0x080087d9
 8008714:	080087d9 	.word	0x080087d9
 8008718:	080087d9 	.word	0x080087d9
 800871c:	080087ad 	.word	0x080087ad
 8008720:	080087d9 	.word	0x080087d9
 8008724:	080087d9 	.word	0x080087d9
 8008728:	080087d9 	.word	0x080087d9
 800872c:	080087d9 	.word	0x080087d9
 8008730:	080087d9 	.word	0x080087d9
 8008734:	080087d9 	.word	0x080087d9
 8008738:	080087d9 	.word	0x080087d9
 800873c:	080087c3 	.word	0x080087c3
 8008740:	080087d9 	.word	0x080087d9
 8008744:	080087d9 	.word	0x080087d9
 8008748:	080087d9 	.word	0x080087d9
 800874c:	080087d9 	.word	0x080087d9
 8008750:	080087d9 	.word	0x080087d9
 8008754:	080087d9 	.word	0x080087d9
 8008758:	080087d9 	.word	0x080087d9
 800875c:	080087e1 	.word	0x080087e1
 8008760:	080087d9 	.word	0x080087d9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087d9 	.word	0x080087d9
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080087d9 	.word	0x080087d9
 8008774:	080087d9 	.word	0x080087d9
 8008778:	080087d9 	.word	0x080087d9
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087d9 	.word	0x080087d9
 8008788:	080087d9 	.word	0x080087d9
 800878c:	080087d9 	.word	0x080087d9
 8008790:	080087d9 	.word	0x080087d9
 8008794:	080087d9 	.word	0x080087d9
 8008798:	080087d9 	.word	0x080087d9
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	58024400 	.word	0x58024400
 80087a4:	58024800 	.word	0x58024800
 80087a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b0:	3308      	adds	r3, #8
 80087b2:	2101      	movs	r1, #1
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fdef 	bl	800a398 <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087c0:	e00f      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c6:	3328      	adds	r3, #40	@ 0x28
 80087c8:	2101      	movs	r1, #1
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fe96 	bl	800a4fc <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087d6:	e004      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087de:	e000      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80087e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ea:	4bc0      	ldr	r3, [pc, #768]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087fa:	4abc      	ldr	r2, [pc, #752]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008800:	e003      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008806:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800880a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f002 0302 	and.w	r3, r2, #2
 8008816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008820:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008824:	460b      	mov	r3, r1
 8008826:	4313      	orrs	r3, r2
 8008828:	d043      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800882a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800882e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008832:	2b05      	cmp	r3, #5
 8008834:	d824      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008836:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008889 	.word	0x08008889
 8008840:	08008855 	.word	0x08008855
 8008844:	0800886b 	.word	0x0800886b
 8008848:	08008889 	.word	0x08008889
 800884c:	08008889 	.word	0x08008889
 8008850:	08008889 	.word	0x08008889
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008858:	3308      	adds	r3, #8
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fd9b 	bl	800a398 <RCCEx_PLL2_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008868:	e00f      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800886a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800886e:	3328      	adds	r3, #40	@ 0x28
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fe42 	bl	800a4fc <RCCEx_PLL3_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800887e:	e004      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008886:	e000      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008892:	4b96      	ldr	r3, [pc, #600]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008896:	f023 0107 	bic.w	r1, r3, #7
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a2:	4a92      	ldr	r2, [pc, #584]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f002 0304 	and.w	r3, r2, #4
 80088be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4313      	orrs	r3, r2
 80088d0:	d043      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80088d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d824      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80088de:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008931 	.word	0x08008931
 80088e8:	080088fd 	.word	0x080088fd
 80088ec:	08008913 	.word	0x08008913
 80088f0:	08008931 	.word	0x08008931
 80088f4:	08008931 	.word	0x08008931
 80088f8:	08008931 	.word	0x08008931
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008900:	3308      	adds	r3, #8
 8008902:	2101      	movs	r1, #1
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fd47 	bl	800a398 <RCCEx_PLL2_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008910:	e00f      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	3328      	adds	r3, #40	@ 0x28
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fdee 	bl	800a4fc <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008926:	e004      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800893a:	4b6c      	ldr	r3, [pc, #432]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800893e:	f023 0107 	bic.w	r1, r3, #7
 8008942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800894a:	4a68      	ldr	r2, [pc, #416]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800894c:	430b      	orrs	r3, r1
 800894e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008956:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f002 0320 	and.w	r3, r2, #32
 8008966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800896a:	2300      	movs	r3, #0
 800896c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d055      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008986:	d033      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800898c:	d82c      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008992:	d02f      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008998:	d826      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800899a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800899e:	d02b      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80089a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089a4:	d820      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089aa:	d012      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80089ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b0:	d81a      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d022      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80089b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ba:	d115      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c0:	3308      	adds	r3, #8
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fce7 	bl	800a398 <RCCEx_PLL2_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089d0:	e015      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d6:	3328      	adds	r3, #40	@ 0x28
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 fd8e 	bl	800a4fc <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089e6:	e00a      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089ee:	e006      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f0:	bf00      	nop
 80089f2:	e004      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f4:	bf00      	nop
 80089f6:	e002      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a06:	4b39      	ldr	r3, [pc, #228]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a16:	4a35      	ldr	r2, [pc, #212]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d058      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a52:	d033      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008a54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a58:	d82c      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5e:	d02f      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a64:	d826      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a6a:	d02b      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008a6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a70:	d820      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a76:	d012      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a7c:	d81a      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a86:	d115      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fc81 	bl	800a398 <RCCEx_PLL2_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a9c:	e015      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa2:	3328      	adds	r3, #40	@ 0x28
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 fd28 	bl	800a4fc <RCCEx_PLL3_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ab2:	e00a      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008aba:	e006      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008abc:	bf00      	nop
 8008abe:	e004      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10e      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ad2:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ae2:	4a02      	ldr	r2, [pc, #8]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ae8:	e006      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008aea:	bf00      	nop
 8008aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d055      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b24:	d033      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008b26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b2a:	d82c      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b30:	d02f      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b36:	d826      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b3c:	d02b      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008b3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b42:	d820      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b48:	d012      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b4e:	d81a      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d022      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d115      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5e:	3308      	adds	r3, #8
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fc18 	bl	800a398 <RCCEx_PLL2_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b6e:	e015      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	3328      	adds	r3, #40	@ 0x28
 8008b76:	2102      	movs	r1, #2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fcbf 	bl	800a4fc <RCCEx_PLL3_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b84:	e00a      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b8c:	e006      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bba:	e003      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 0308 	and.w	r3, r2, #8
 8008bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d01e      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bf0:	d10c      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf6:	3328      	adds	r3, #40	@ 0x28
 8008bf8:	2102      	movs	r1, #2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f001 fc7e 	bl	800a4fc <RCCEx_PLL3_Config>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c0c:	4b87      	ldr	r3, [pc, #540]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c1c:	4a83      	ldr	r2, [pc, #524]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f002 0310 	and.w	r3, r2, #16
 8008c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d01e      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4e:	d10c      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c54:	3328      	adds	r3, #40	@ 0x28
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fc4f 	bl	800a4fc <RCCEx_PLL3_Config>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c6a:	4b70      	ldr	r3, [pc, #448]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d03e      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cac:	d022      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cb2:	d81b      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d00b      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008cbe:	e015      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fb65 	bl	800a398 <RCCEx_PLL2_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cd4:	e00f      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cda:	3328      	adds	r3, #40	@ 0x28
 8008cdc:	2102      	movs	r1, #2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fc0c 	bl	800a4fc <RCCEx_PLL3_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cea:	e004      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10b      	bne.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d0e:	4a47      	ldr	r2, [pc, #284]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d10:	430b      	orrs	r3, r1
 8008d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d14:	e003      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d34:	460b      	mov	r3, r1
 8008d36:	4313      	orrs	r3, r2
 8008d38:	d03b      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d46:	d01f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008d48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d4c:	d818      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d52:	d003      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d58:	d007      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008d5a:	e011      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5c:	4b33      	ldr	r3, [pc, #204]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	4a32      	ldr	r2, [pc, #200]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d68:	e00f      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	3328      	adds	r3, #40	@ 0x28
 8008d70:	2101      	movs	r1, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fbc2 	bl	800a4fc <RCCEx_PLL3_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d7e:	e004      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d86:	e000      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d92:	4b26      	ldr	r3, [pc, #152]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da2:	4a22      	ldr	r2, [pc, #136]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008dc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	d034      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ddc:	d007      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008dde:	e011      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4a11      	ldr	r2, [pc, #68]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dec:	e00e      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df2:	3308      	adds	r3, #8
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 face 	bl	800a398 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e02:	e003      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e14:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e22:	4a02      	ldr	r2, [pc, #8]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e24:	430b      	orrs	r3, r1
 8008e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e28:	e006      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e46:	2300      	movs	r3, #0
 8008e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4313      	orrs	r3, r2
 8008e52:	d00c      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	3328      	adds	r3, #40	@ 0x28
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fb4d 	bl	800a4fc <RCCEx_PLL3_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e84:	460b      	mov	r3, r1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	d038      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e96:	d018      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e9c:	d811      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea2:	d014      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea8:	d80b      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb2:	d106      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4bc3      	ldr	r3, [pc, #780]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4ac2      	ldr	r2, [pc, #776]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ec8:	e004      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10b      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008edc:	4bb9      	ldr	r3, [pc, #740]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eec:	4ab5      	ldr	r2, [pc, #724]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ef2:	e003      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f12:	460b      	mov	r3, r1
 8008f14:	4313      	orrs	r3, r2
 8008f16:	d009      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f18:	4baa      	ldr	r3, [pc, #680]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f26:	4aa7      	ldr	r2, [pc, #668]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008f42:	460b      	mov	r3, r1
 8008f44:	4313      	orrs	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f48:	4b9e      	ldr	r3, [pc, #632]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	4a9b      	ldr	r2, [pc, #620]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008f78:	4b92      	ldr	r3, [pc, #584]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f7c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f86:	4a8f      	ldr	r2, [pc, #572]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fa8:	4b86      	ldr	r3, [pc, #536]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4a85      	ldr	r2, [pc, #532]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fb2:	6113      	str	r3, [r2, #16]
 8008fb4:	4b83      	ldr	r3, [pc, #524]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fb6:	6919      	ldr	r1, [r3, #16]
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008fc0:	4a80      	ldr	r2, [pc, #512]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fe2:	4b78      	ldr	r3, [pc, #480]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff0:	4a74      	ldr	r2, [pc, #464]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009002:	633b      	str	r3, [r7, #48]	@ 0x30
 8009004:	2300      	movs	r3, #0
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
 8009008:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800900c:	460b      	mov	r3, r1
 800900e:	4313      	orrs	r3, r2
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009012:	4b6c      	ldr	r3, [pc, #432]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009016:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009022:	4a68      	ldr	r2, [pc, #416]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009024:	430b      	orrs	r3, r1
 8009026:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	2100      	movs	r1, #0
 8009032:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800903a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800903e:	460b      	mov	r3, r1
 8009040:	4313      	orrs	r3, r2
 8009042:	d011      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	3308      	adds	r3, #8
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f001 f9a3 	bl	800a398 <RCCEx_PLL2_Config>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009064:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	2100      	movs	r1, #0
 8009072:	6239      	str	r1, [r7, #32]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
 800907a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800907e:	460b      	mov	r3, r1
 8009080:	4313      	orrs	r3, r2
 8009082:	d011      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009088:	3308      	adds	r3, #8
 800908a:	2101      	movs	r1, #1
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f983 	bl	800a398 <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80090a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	2100      	movs	r1, #0
 80090b2:	61b9      	str	r1, [r7, #24]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d011      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c8:	3308      	adds	r3, #8
 80090ca:	2102      	movs	r1, #2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 f963 	bl	800a398 <RCCEx_PLL2_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	2100      	movs	r1, #0
 80090f2:	6139      	str	r1, [r7, #16]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090fe:	460b      	mov	r3, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	d011      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009108:	3328      	adds	r3, #40	@ 0x28
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f001 f9f5 	bl	800a4fc <RCCEx_PLL3_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	2100      	movs	r1, #0
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800913e:	460b      	mov	r3, r1
 8009140:	4313      	orrs	r3, r2
 8009142:	d011      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009148:	3328      	adds	r3, #40	@ 0x28
 800914a:	2101      	movs	r1, #1
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f9d5 	bl	800a4fc <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009164:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	2100      	movs	r1, #0
 8009172:	6039      	str	r1, [r7, #0]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800917e:	460b      	mov	r3, r1
 8009180:	4313      	orrs	r3, r2
 8009182:	d011      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009188:	3328      	adds	r3, #40	@ 0x28
 800918a:	2102      	movs	r1, #2
 800918c:	4618      	mov	r0, r3
 800918e:	f001 f9b5 	bl	800a4fc <RCCEx_PLL3_Config>
 8009192:	4603      	mov	r3, r0
 8009194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80091a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e000      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80091bc:	46bd      	mov	sp, r7
 80091be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400

080091c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b090      	sub	sp, #64	@ 0x40
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80091da:	430b      	orrs	r3, r1
 80091dc:	f040 8094 	bne.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80091e0:	4b97      	ldr	r3, [pc, #604]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	f200 8087 	bhi.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091f2:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	0800920d 	.word	0x0800920d
 80091fc:	08009235 	.word	0x08009235
 8009200:	0800925d 	.word	0x0800925d
 8009204:	080092f9 	.word	0x080092f9
 8009208:	08009285 	.word	0x08009285
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800920c:	4b8c      	ldr	r3, [pc, #560]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009218:	d108      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800921a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800921e:	4618      	mov	r0, r3
 8009220:	f000 ff68 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009228:	f000 bc97 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	f000 bc93 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009234:	4b82      	ldr	r3, [pc, #520]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800923c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009240:	d108      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009242:	f107 0318 	add.w	r3, r7, #24
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fcac 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009250:	f000 bc83 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009258:	f000 bc7f 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800925c:	4b78      	ldr	r3, [pc, #480]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009268:	d108      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926a:	f107 030c 	add.w	r3, r7, #12
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fdec 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009278:	f000 bc6f 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009280:	f000 bc6b 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009284:	4b6e      	ldr	r3, [pc, #440]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800928e:	4b6c      	ldr	r3, [pc, #432]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b04      	cmp	r3, #4
 8009298:	d10c      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800929a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092a0:	4b67      	ldr	r3, [pc, #412]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	4a66      	ldr	r2, [pc, #408]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b2:	e01f      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092b4:	4b62      	ldr	r3, [pc, #392]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c0:	d106      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80092c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c8:	d102      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092ca:	4b5f      	ldr	r3, [pc, #380]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ce:	e011      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d0:	4b5b      	ldr	r3, [pc, #364]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092dc:	d106      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80092de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e4:	d102      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092e6:	4b59      	ldr	r3, [pc, #356]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ea:	e003      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092f0:	f000 bc33 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80092f4:	f000 bc31 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092f8:	4b55      	ldr	r3, [pc, #340]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	f000 bc2d 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	f000 bc29 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009310:	430b      	orrs	r3, r1
 8009312:	f040 809f 	bne.w	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009316:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	d04d      	beq.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932e:	f200 8084 	bhi.w	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2bc0      	cmp	r3, #192	@ 0xc0
 8009336:	d07d      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	2bc0      	cmp	r3, #192	@ 0xc0
 800933c:	d87d      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d02d      	beq.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2b80      	cmp	r3, #128	@ 0x80
 8009348:	d877      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	2b40      	cmp	r3, #64	@ 0x40
 8009354:	d012      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009356:	e070      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009358:	4b39      	ldr	r3, [pc, #228]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009364:	d107      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fec2 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009374:	e3f1      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937a:	e3ee      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937c:	4b30      	ldr	r3, [pc, #192]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009388:	d107      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938a:	f107 0318 	add.w	r3, r7, #24
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fc08 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009398:	e3df      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939e:	e3dc      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a0:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fd4a 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093bc:	e3cd      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c2:	e3ca      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d10c      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80093da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e0:	4b17      	ldr	r3, [pc, #92]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	08db      	lsrs	r3, r3, #3
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	4a16      	ldr	r2, [pc, #88]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f2:	e01e      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093f4:	4b12      	ldr	r3, [pc, #72]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009400:	d106      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009408:	d102      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800940e:	e010      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009410:	4b0b      	ldr	r3, [pc, #44]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941c:	d106      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800941e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009424:	d102      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800942a:	e002      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009430:	e393      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009432:	e392      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009434:	4b06      	ldr	r3, [pc, #24]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009438:	e38f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e38c      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009440:	58024400 	.word	0x58024400
 8009444:	03d09000 	.word	0x03d09000
 8009448:	003d0900 	.word	0x003d0900
 800944c:	017d7840 	.word	0x017d7840
 8009450:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009458:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800945c:	430b      	orrs	r3, r1
 800945e:	f040 809c 	bne.w	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009462:	4b9e      	ldr	r3, [pc, #632]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009466:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009472:	d054      	beq.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800947a:	f200 808b 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009484:	f000 8083 	beq.w	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800948e:	f200 8081 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009498:	d02f      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a0:	d878      	bhi.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ae:	d012      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80094b0:	e070      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094b2:	4b8a      	ldr	r3, [pc, #552]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094be:	d107      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fe15 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ce:	e344      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d4:	e341      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094d6:	4b81      	ldr	r3, [pc, #516]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094e2:	d107      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e4:	f107 0318 	add.w	r3, r7, #24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fb5b 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f2:	e332      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f8:	e32f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094fa:	4b78      	ldr	r3, [pc, #480]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009506:	d107      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009508:	f107 030c 	add.w	r3, r7, #12
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fc9d 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009516:	e320      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951c:	e31d      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800951e:	4b6f      	ldr	r3, [pc, #444]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009528:	4b6c      	ldr	r3, [pc, #432]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b04      	cmp	r3, #4
 8009532:	d10c      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800953a:	4b68      	ldr	r3, [pc, #416]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	08db      	lsrs	r3, r3, #3
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	4a66      	ldr	r2, [pc, #408]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009546:	fa22 f303 	lsr.w	r3, r2, r3
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800954c:	e01e      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800954e:	4b63      	ldr	r3, [pc, #396]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800955a:	d106      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009562:	d102      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009564:	4b5f      	ldr	r3, [pc, #380]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009568:	e010      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800956a:	4b5c      	ldr	r3, [pc, #368]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009576:	d106      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800957e:	d102      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009580:	4b59      	ldr	r3, [pc, #356]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009584:	e002      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800958a:	e2e6      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800958c:	e2e5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800958e:	4b57      	ldr	r3, [pc, #348]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009592:	e2e2      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e2df      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800959a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80095a2:	430b      	orrs	r3, r1
 80095a4:	f040 80a7 	bne.w	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80095a8:	4b4c      	ldr	r3, [pc, #304]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095b8:	d055      	beq.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c0:	f200 8096 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095ca:	f000 8084 	beq.w	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095d4:	f200 808c 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095de:	d030      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e6:	f200 8083 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f6:	d012      	beq.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80095f8:	e07a      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095fa:	4b38      	ldr	r3, [pc, #224]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009606:	d107      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fd71 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009616:	e2a0      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e29d      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800961e:	4b2f      	ldr	r3, [pc, #188]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800962a:	d107      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800962c:	f107 0318 	add.w	r3, r7, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fab7 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963a:	e28e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009640:	e28b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009642:	4b26      	ldr	r3, [pc, #152]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800964a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800964e:	d107      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009650:	f107 030c 	add.w	r3, r7, #12
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fbf9 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800965e:	e27c      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009664:	e279      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009666:	4b1d      	ldr	r3, [pc, #116]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800966e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009670:	4b1a      	ldr	r3, [pc, #104]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b04      	cmp	r3, #4
 800967a:	d10c      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009682:	4b16      	ldr	r3, [pc, #88]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	08db      	lsrs	r3, r3, #3
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	4a14      	ldr	r2, [pc, #80]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800968e:	fa22 f303 	lsr.w	r3, r2, r3
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009694:	e01e      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009696:	4b11      	ldr	r3, [pc, #68]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	d106      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80096a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096aa:	d102      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b0:	e010      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b2:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096be:	d106      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80096c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c6:	d102      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096c8:	4b07      	ldr	r3, [pc, #28]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096cc:	e002      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096d2:	e242      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80096d4:	e241      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096d6:	4b05      	ldr	r3, [pc, #20]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096da:	e23e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80096dc:	58024400 	.word	0x58024400
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	003d0900 	.word	0x003d0900
 80096e8:	017d7840 	.word	0x017d7840
 80096ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f4:	e231      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80096f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80096fe:	430b      	orrs	r3, r1
 8009700:	f040 8085 	bne.w	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009704:	4b9c      	ldr	r3, [pc, #624]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009708:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800970c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009714:	d06b      	beq.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800971c:	d874      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009724:	d056      	beq.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800972c:	d86c      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009734:	d03b      	beq.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800973c:	d864      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009744:	d021      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800974c:	d85c      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800975a:	d004      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800975c:	e054      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800975e:	f7fe fb5f 	bl	8007e20 <HAL_RCC_GetPCLK1Freq>
 8009762:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009764:	e1f9      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009766:	4b84      	ldr	r3, [pc, #528]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009774:	f107 0318 	add.w	r3, r7, #24
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fa13 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009782:	e1ea      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e1e7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800978a:	4b7b      	ldr	r3, [pc, #492]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009796:	d107      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fb55 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a6:	e1d8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ac:	e1d5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097ae:	4b72      	ldr	r3, [pc, #456]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d109      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	4a6d      	ldr	r2, [pc, #436]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097c6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097cc:	e1c5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d2:	e1c2      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097d4:	4b68      	ldr	r3, [pc, #416]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e0:	d102      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80097e2:	4b67      	ldr	r3, [pc, #412]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80097e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e6:	e1b8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ec:	e1b5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097ee:	4b62      	ldr	r3, [pc, #392]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097fa:	d102      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80097fc:	4b61      	ldr	r3, [pc, #388]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80097fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009800:	e1ab      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009806:	e1a8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800980c:	e1a5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800980e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009812:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009816:	430b      	orrs	r3, r1
 8009818:	d173      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800981a:	4b57      	ldr	r3, [pc, #348]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800981c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009822:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800982a:	d02f      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009832:	d863      	bhi.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009840:	d012      	beq.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009842:	e05b      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009844:	4b4c      	ldr	r3, [pc, #304]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009850:	d107      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009852:	f107 0318 	add.w	r3, r7, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f9a4 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009860:	e17b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009866:	e178      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009868:	4b43      	ldr	r3, [pc, #268]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009874:	d107      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009876:	f107 030c 	add.w	r3, r7, #12
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fae6 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009884:	e169      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e166      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800988c:	4b3a      	ldr	r3, [pc, #232]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800988e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009896:	4b38      	ldr	r3, [pc, #224]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0304 	and.w	r3, r3, #4
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d10c      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80098a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a8:	4b33      	ldr	r3, [pc, #204]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	08db      	lsrs	r3, r3, #3
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	4a32      	ldr	r2, [pc, #200]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80098b4:	fa22 f303 	lsr.w	r3, r2, r3
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ba:	e01e      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098c8:	d106      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80098ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098d0:	d102      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d6:	e010      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098d8:	4b27      	ldr	r3, [pc, #156]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e4:	d106      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d102      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098ee:	4b25      	ldr	r3, [pc, #148]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f2:	e002      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098f8:	e12f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80098fa:	e12e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e12b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009906:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800990a:	430b      	orrs	r3, r1
 800990c:	d13c      	bne.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800990e:	4b1a      	ldr	r3, [pc, #104]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009916:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009924:	d012      	beq.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009926:	e023      	b.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009928:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009934:	d107      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fbda 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009944:	e109      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994a:	e106      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800994c:	4b0a      	ldr	r3, [pc, #40]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009958:	d107      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f920 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009968:	e0f7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996e:	e0f4      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e0f1      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	03d09000 	.word	0x03d09000
 8009980:	003d0900 	.word	0x003d0900
 8009984:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009990:	430b      	orrs	r3, r1
 8009992:	f040 8091 	bne.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009996:	4b73      	ldr	r3, [pc, #460]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800999e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099a6:	f000 8081 	beq.w	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099b0:	d87f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099b8:	d06b      	beq.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c0:	d877      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c8:	d056      	beq.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d0:	d86f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099d8:	d03b      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099e0:	d867      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d021      	beq.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099f0:	d85f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099fe:	d004      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009a00:	e057      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a02:	f000 f8b9 	bl	8009b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a08:	e0a7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a0a:	4b56      	ldr	r3, [pc, #344]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a16:	d107      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a18:	f107 0318 	add.w	r3, r7, #24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f8c1 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a26:	e098      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2c:	e095      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a3a:	d107      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3c:	f107 030c 	add.w	r3, r7, #12
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fa03 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a4a:	e086      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a50:	e083      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a52:	4b44      	ldr	r3, [pc, #272]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d109      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a5e:	4b41      	ldr	r3, [pc, #260]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	08db      	lsrs	r3, r3, #3
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	4a3f      	ldr	r2, [pc, #252]	@ (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a70:	e073      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a76:	e070      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a78:	4b3a      	ldr	r3, [pc, #232]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a84:	d102      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009a86:	4b39      	ldr	r3, [pc, #228]	@ (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a8a:	e066      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	e063      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a92:	4b34      	ldr	r3, [pc, #208]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a9e:	d102      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009aa0:	4b33      	ldr	r3, [pc, #204]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aa4:	e059      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aaa:	e056      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009aac:	4b31      	ldr	r3, [pc, #196]	@ (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e053      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab6:	e050      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	d148      	bne.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ac4:	4b27      	ldr	r3, [pc, #156]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009acc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad4:	d02a      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009adc:	d838      	bhi.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aea:	d00d      	beq.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009aec:	e030      	b.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009aee:	4b1d      	ldr	r3, [pc, #116]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009afa:	d102      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009afc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b00:	e02b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b06:	e028      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b14:	d107      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 faea 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b24:	e019      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2a:	e016      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b38:	d107      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3a:	f107 0318 	add.w	r3, r7, #24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f830 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b48:	e007      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4e:	e004      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b54:	e001      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3740      	adds	r7, #64	@ 0x40
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	58024400 	.word	0x58024400
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	017d7840 	.word	0x017d7840
 8009b74:	00bb8000 	.word	0x00bb8000

08009b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009b7c:	f7fe f920 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8009b80:	4602      	mov	r2, r0
 8009b82:	4b06      	ldr	r3, [pc, #24]	@ (8009b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	091b      	lsrs	r3, r3, #4
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	4904      	ldr	r1, [pc, #16]	@ (8009ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b8e:	5ccb      	ldrb	r3, [r1, r3]
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	0800b11c 	.word	0x0800b11c

08009ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b089      	sub	sp, #36	@ 0x24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bac:	4ba1      	ldr	r3, [pc, #644]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	0b1b      	lsrs	r3, r3, #12
 8009bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc6:	091b      	lsrs	r3, r3, #4
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009bce:	4b99      	ldr	r3, [pc, #612]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8111 	beq.w	8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	f000 8083 	beq.w	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	f200 80a1 	bhi.w	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d056      	beq.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c0e:	e099      	b.n	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c10:	4b88      	ldr	r3, [pc, #544]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d02d      	beq.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c1c:	4b85      	ldr	r3, [pc, #532]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	08db      	lsrs	r3, r3, #3
 8009c22:	f003 0303 	and.w	r3, r3, #3
 8009c26:	4a84      	ldr	r2, [pc, #528]	@ (8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b7b      	ldr	r3, [pc, #492]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c76:	e087      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cba:	e065      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cce:	4b59      	ldr	r3, [pc, #356]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cfe:	e043      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d12:	4b48      	ldr	r3, [pc, #288]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d42:	e021      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d56:	4b37      	ldr	r3, [pc, #220]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d88:	4b2a      	ldr	r3, [pc, #168]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	0a5b      	lsrs	r3, r3, #9
 8009d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dae:	ee17 2a90 	vmov	r2, s15
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009db6:	4b1f      	ldr	r3, [pc, #124]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ddc:	ee17 2a90 	vmov	r2, s15
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009de4:	4b13      	ldr	r3, [pc, #76]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e0a:	ee17 2a90 	vmov	r2, s15
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e12:	e008      	b.n	8009e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	609a      	str	r2, [r3, #8]
}
 8009e26:	bf00      	nop
 8009e28:	3724      	adds	r7, #36	@ 0x24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	03d09000 	.word	0x03d09000
 8009e3c:	46000000 	.word	0x46000000
 8009e40:	4c742400 	.word	0x4c742400
 8009e44:	4a742400 	.word	0x4a742400
 8009e48:	4bbebc20 	.word	0x4bbebc20

08009e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b089      	sub	sp, #36	@ 0x24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e54:	4ba1      	ldr	r3, [pc, #644]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e5e:	4b9f      	ldr	r3, [pc, #636]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	0d1b      	lsrs	r3, r3, #20
 8009e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e6a:	4b9c      	ldr	r3, [pc, #624]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	0a1b      	lsrs	r3, r3, #8
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e76:	4b99      	ldr	r3, [pc, #612]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 8111 	beq.w	800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	f000 8083 	beq.w	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f200 80a1 	bhi.w	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d056      	beq.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009eb6:	e099      	b.n	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb8:	4b88      	ldr	r3, [pc, #544]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d02d      	beq.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ec4:	4b85      	ldr	r3, [pc, #532]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	08db      	lsrs	r3, r3, #3
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	4a84      	ldr	r2, [pc, #528]	@ (800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	ee07 3a90 	vmov	s15, r3
 8009edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b7b      	ldr	r3, [pc, #492]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f1e:	e087      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f32:	4b6a      	ldr	r3, [pc, #424]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f62:	e065      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f76:	4b59      	ldr	r3, [pc, #356]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fa6:	e043      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fba:	4b48      	ldr	r3, [pc, #288]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fea:	e021      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffe:	4b37      	ldr	r3, [pc, #220]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a02e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a030:	4b2a      	ldr	r3, [pc, #168]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	0a5b      	lsrs	r3, r3, #9
 800a036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a056:	ee17 2a90 	vmov	r2, s15
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a05e:	4b1f      	ldr	r3, [pc, #124]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a068:	ee07 3a90 	vmov	s15, r3
 800a06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a078:	edd7 6a07 	vldr	s13, [r7, #28]
 800a07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a084:	ee17 2a90 	vmov	r2, s15
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a08c:	4b13      	ldr	r3, [pc, #76]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a090:	0e1b      	lsrs	r3, r3, #24
 800a092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b2:	ee17 2a90 	vmov	r2, s15
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0ba:	e008      	b.n	800a0ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	609a      	str	r2, [r3, #8]
}
 800a0ce:	bf00      	nop
 800a0d0:	3724      	adds	r7, #36	@ 0x24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	03d09000 	.word	0x03d09000
 800a0e4:	46000000 	.word	0x46000000
 800a0e8:	4c742400 	.word	0x4c742400
 800a0ec:	4a742400 	.word	0x4a742400
 800a0f0:	4bbebc20 	.word	0x4bbebc20

0800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b089      	sub	sp, #36	@ 0x24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0fc:	4ba0      	ldr	r3, [pc, #640]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a106:	4b9e      	ldr	r3, [pc, #632]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10a:	091b      	lsrs	r3, r3, #4
 800a10c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a110:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a112:	4b9b      	ldr	r3, [pc, #620]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a11c:	4b98      	ldr	r3, [pc, #608]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a120:	08db      	lsrs	r3, r3, #3
 800a122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	fb02 f303 	mul.w	r3, r2, r3
 800a12c:	ee07 3a90 	vmov	s15, r3
 800a130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a134:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 8111 	beq.w	800a362 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	2b02      	cmp	r3, #2
 800a144:	f000 8083 	beq.w	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	f200 80a1 	bhi.w	800a292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d056      	beq.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a15c:	e099      	b.n	800a292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15e:	4b88      	ldr	r3, [pc, #544]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d02d      	beq.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a16a:	4b85      	ldr	r3, [pc, #532]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	08db      	lsrs	r3, r3, #3
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	4a83      	ldr	r2, [pc, #524]	@ (800a384 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a176:	fa22 f303 	lsr.w	r3, r2, r3
 800a17a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a194:	4b7a      	ldr	r3, [pc, #488]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1c4:	e087      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d8:	4b69      	ldr	r3, [pc, #420]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a208:	e065      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a214:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21c:	4b58      	ldr	r3, [pc, #352]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a230:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a24c:	e043      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a258:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a260:	4b47      	ldr	r3, [pc, #284]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a268:	ee07 3a90 	vmov	s15, r3
 800a26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a270:	ed97 6a03 	vldr	s12, [r7, #12]
 800a274:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a290:	e021      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	ee07 3a90 	vmov	s15, r3
 800a298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a4:	4b36      	ldr	r3, [pc, #216]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ac:	ee07 3a90 	vmov	s15, r3
 800a2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a2d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2da:	0a5b      	lsrs	r3, r3, #9
 800a2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2fc:	ee17 2a90 	vmov	r2, s15
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a304:	4b1e      	ldr	r3, [pc, #120]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a308:	0c1b      	lsrs	r3, r3, #16
 800a30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a32a:	ee17 2a90 	vmov	r2, s15
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a332:	4b13      	ldr	r3, [pc, #76]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a336:	0e1b      	lsrs	r3, r3, #24
 800a338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a34c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a358:	ee17 2a90 	vmov	r2, s15
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a360:	e008      	b.n	800a374 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	609a      	str	r2, [r3, #8]
}
 800a374:	bf00      	nop
 800a376:	3724      	adds	r7, #36	@ 0x24
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	58024400 	.word	0x58024400
 800a384:	03d09000 	.word	0x03d09000
 800a388:	46000000 	.word	0x46000000
 800a38c:	4c742400 	.word	0x4c742400
 800a390:	4a742400 	.word	0x4a742400
 800a394:	4bbebc20 	.word	0x4bbebc20

0800a398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3a6:	4b53      	ldr	r3, [pc, #332]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d101      	bne.n	800a3b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e099      	b.n	800a4ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a4e      	ldr	r2, [pc, #312]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3c2:	f7f7 fcc7 	bl	8001d54 <HAL_GetTick>
 800a3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3c8:	e008      	b.n	800a3dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3ca:	f7f7 fcc3 	bl	8001d54 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d901      	bls.n	800a3dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e086      	b.n	800a4ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3dc:	4b45      	ldr	r3, [pc, #276]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1f0      	bne.n	800a3ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3e8:	4b42      	ldr	r3, [pc, #264]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	031b      	lsls	r3, r3, #12
 800a3f6:	493f      	ldr	r1, [pc, #252]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	3b01      	subs	r3, #1
 800a402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	025b      	lsls	r3, r3, #9
 800a40e:	b29b      	uxth	r3, r3
 800a410:	431a      	orrs	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	3b01      	subs	r3, #1
 800a418:	041b      	lsls	r3, r3, #16
 800a41a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a41e:	431a      	orrs	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	3b01      	subs	r3, #1
 800a426:	061b      	lsls	r3, r3, #24
 800a428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a42c:	4931      	ldr	r1, [pc, #196]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a432:	4b30      	ldr	r3, [pc, #192]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	492d      	ldr	r1, [pc, #180]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a440:	4313      	orrs	r3, r2
 800a442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a444:	4b2b      	ldr	r3, [pc, #172]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a448:	f023 0220 	bic.w	r2, r3, #32
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	4928      	ldr	r1, [pc, #160]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a452:	4313      	orrs	r3, r2
 800a454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a456:	4b27      	ldr	r3, [pc, #156]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45a:	4a26      	ldr	r2, [pc, #152]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a45c:	f023 0310 	bic.w	r3, r3, #16
 800a460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a462:	4b24      	ldr	r3, [pc, #144]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a466:	4b24      	ldr	r3, [pc, #144]	@ (800a4f8 <RCCEx_PLL2_Config+0x160>)
 800a468:	4013      	ands	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	69d2      	ldr	r2, [r2, #28]
 800a46e:	00d2      	lsls	r2, r2, #3
 800a470:	4920      	ldr	r1, [pc, #128]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a472:	4313      	orrs	r3, r2
 800a474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a476:	4b1f      	ldr	r3, [pc, #124]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a47c:	f043 0310 	orr.w	r3, r3, #16
 800a480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d106      	bne.n	800a496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a488:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48c:	4a19      	ldr	r2, [pc, #100]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a48e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a494:	e00f      	b.n	800a4b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d106      	bne.n	800a4aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a49c:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a0:	4a14      	ldr	r2, [pc, #80]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4a8:	e005      	b.n	800a4b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4aa:	4b12      	ldr	r3, [pc, #72]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	4a11      	ldr	r2, [pc, #68]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4c2:	f7f7 fc47 	bl	8001d54 <HAL_GetTick>
 800a4c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4c8:	e008      	b.n	800a4dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4ca:	f7f7 fc43 	bl	8001d54 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e006      	b.n	800a4ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <RCCEx_PLL2_Config+0x15c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0f0      	beq.n	800a4ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	ffff0007 	.word	0xffff0007

0800a4fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a50a:	4b53      	ldr	r3, [pc, #332]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b03      	cmp	r3, #3
 800a514:	d101      	bne.n	800a51a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e099      	b.n	800a64e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a51a:	4b4f      	ldr	r3, [pc, #316]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a4e      	ldr	r2, [pc, #312]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a526:	f7f7 fc15 	bl	8001d54 <HAL_GetTick>
 800a52a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a52c:	e008      	b.n	800a540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a52e:	f7f7 fc11 	bl	8001d54 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d901      	bls.n	800a540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e086      	b.n	800a64e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a540:	4b45      	ldr	r3, [pc, #276]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f0      	bne.n	800a52e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a54c:	4b42      	ldr	r3, [pc, #264]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	051b      	lsls	r3, r3, #20
 800a55a:	493f      	ldr	r1, [pc, #252]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	3b01      	subs	r3, #1
 800a566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	3b01      	subs	r3, #1
 800a570:	025b      	lsls	r3, r3, #9
 800a572:	b29b      	uxth	r3, r3
 800a574:	431a      	orrs	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	041b      	lsls	r3, r3, #16
 800a57e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a582:	431a      	orrs	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	3b01      	subs	r3, #1
 800a58a:	061b      	lsls	r3, r3, #24
 800a58c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a590:	4931      	ldr	r1, [pc, #196]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a592:	4313      	orrs	r3, r2
 800a594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a596:	4b30      	ldr	r3, [pc, #192]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	492d      	ldr	r1, [pc, #180]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	4928      	ldr	r1, [pc, #160]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5ba:	4b27      	ldr	r3, [pc, #156]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	4a26      	ldr	r2, [pc, #152]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5c6:	4b24      	ldr	r3, [pc, #144]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5ca:	4b24      	ldr	r3, [pc, #144]	@ (800a65c <RCCEx_PLL3_Config+0x160>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	69d2      	ldr	r2, [r2, #28]
 800a5d2:	00d2      	lsls	r2, r2, #3
 800a5d4:	4920      	ldr	r1, [pc, #128]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5da:	4b1f      	ldr	r3, [pc, #124]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	4a1e      	ldr	r2, [pc, #120]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f0:	4a19      	ldr	r2, [pc, #100]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a5f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a5f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5f8:	e00f      	b.n	800a61a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d106      	bne.n	800a60e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a600:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a604:	4a14      	ldr	r2, [pc, #80]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a60a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a60c:	e005      	b.n	800a61a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a60e:	4b12      	ldr	r3, [pc, #72]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a612:	4a11      	ldr	r2, [pc, #68]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a61a:	4b0f      	ldr	r3, [pc, #60]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a0e      	ldr	r2, [pc, #56]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a626:	f7f7 fb95 	bl	8001d54 <HAL_GetTick>
 800a62a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a62c:	e008      	b.n	800a640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a62e:	f7f7 fb91 	bl	8001d54 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d901      	bls.n	800a640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e006      	b.n	800a64e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a640:	4b05      	ldr	r3, [pc, #20]	@ (800a658 <RCCEx_PLL3_Config+0x15c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d0f0      	beq.n	800a62e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	58024400 	.word	0x58024400
 800a65c:	ffff0007 	.word	0xffff0007

0800a660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e049      	b.n	800a706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7f7 f804 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f000 fae0 	bl	800ac64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e054      	b.n	800a7d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a26      	ldr	r2, [pc, #152]	@ (800a7e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d022      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a752:	d01d      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a22      	ldr	r2, [pc, #136]	@ (800a7e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d018      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a21      	ldr	r2, [pc, #132]	@ (800a7e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d013      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00e      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a1e      	ldr	r2, [pc, #120]	@ (800a7f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d009      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a1c      	ldr	r2, [pc, #112]	@ (800a7f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d004      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d115      	bne.n	800a7bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	4b19      	ldr	r3, [pc, #100]	@ (800a7fc <HAL_TIM_Base_Start_IT+0xec>)
 800a798:	4013      	ands	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b06      	cmp	r3, #6
 800a7a0:	d015      	beq.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a8:	d011      	beq.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f042 0201 	orr.w	r2, r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ba:	e008      	b.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0201 	orr.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	e000      	b.n	800a7d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	40010000 	.word	0x40010000
 800a7e4:	40000400 	.word	0x40000400
 800a7e8:	40000800 	.word	0x40000800
 800a7ec:	40000c00 	.word	0x40000c00
 800a7f0:	40010400 	.word	0x40010400
 800a7f4:	40001800 	.word	0x40001800
 800a7f8:	40014000 	.word	0x40014000
 800a7fc:	00010007 	.word	0x00010007

0800a800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d020      	beq.n	800a864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01b      	beq.n	800a864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f06f 0202 	mvn.w	r2, #2
 800a834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f9ec 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a850:	e005      	b.n	800a85e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9de 	bl	800ac14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f9ef 	bl	800ac3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 0304 	and.w	r3, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d020      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01b      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0204 	mvn.w	r2, #4
 800a880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2202      	movs	r2, #2
 800a886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9c6 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a89c:	e005      	b.n	800a8aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f9b8 	bl	800ac14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9c9 	bl	800ac3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d020      	beq.n	800a8fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01b      	beq.n	800a8fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0208 	mvn.w	r2, #8
 800a8cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2204      	movs	r2, #4
 800a8d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f9a0 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a8e8:	e005      	b.n	800a8f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f992 	bl	800ac14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f9a3 	bl	800ac3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b00      	cmp	r3, #0
 800a904:	d020      	beq.n	800a948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01b      	beq.n	800a948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0210 	mvn.w	r2, #16
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2208      	movs	r2, #8
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f97a 	bl	800ac28 <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f96c 	bl	800ac14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f97d 	bl	800ac3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00c      	beq.n	800a96c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0201 	mvn.w	r2, #1
 800a964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f94a 	bl	800ac00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00c      	beq.n	800a99a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a986:	2b00      	cmp	r3, #0
 800a988:	d007      	beq.n	800a99a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fb41 	bl	800b01c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00c      	beq.n	800a9be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fb39 	bl	800b030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00c      	beq.n	800a9e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d007      	beq.n	800a9e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f937 	bl	800ac50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00c      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d007      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f06f 0220 	mvn.w	r2, #32
 800a9fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fb01 	bl	800b008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa06:	bf00      	nop
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_TIM_ConfigClockSource+0x1c>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e0dc      	b.n	800abe6 <HAL_TIM_ConfigClockSource+0x1d6>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	4b6a      	ldr	r3, [pc, #424]	@ (800abf0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a64      	ldr	r2, [pc, #400]	@ (800abf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	f000 80a9 	beq.w	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa68:	4a62      	ldr	r2, [pc, #392]	@ (800abf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	f200 80ae 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aa70:	4a61      	ldr	r2, [pc, #388]	@ (800abf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	f000 80a1 	beq.w	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa78:	4a5f      	ldr	r2, [pc, #380]	@ (800abf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	f200 80a6 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aa80:	4a5e      	ldr	r2, [pc, #376]	@ (800abfc <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	f000 8099 	beq.w	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa88:	4a5c      	ldr	r2, [pc, #368]	@ (800abfc <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	f200 809e 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aa90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa94:	f000 8091 	beq.w	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa9c:	f200 8096 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aaa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaa4:	f000 8089 	beq.w	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aaa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaac:	f200 808e 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aab4:	d03e      	beq.n	800ab34 <HAL_TIM_ConfigClockSource+0x124>
 800aab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aaba:	f200 8087 	bhi.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aabe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aac2:	f000 8086 	beq.w	800abd2 <HAL_TIM_ConfigClockSource+0x1c2>
 800aac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaca:	d87f      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aacc:	2b70      	cmp	r3, #112	@ 0x70
 800aace:	d01a      	beq.n	800ab06 <HAL_TIM_ConfigClockSource+0xf6>
 800aad0:	2b70      	cmp	r3, #112	@ 0x70
 800aad2:	d87b      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aad4:	2b60      	cmp	r3, #96	@ 0x60
 800aad6:	d050      	beq.n	800ab7a <HAL_TIM_ConfigClockSource+0x16a>
 800aad8:	2b60      	cmp	r3, #96	@ 0x60
 800aada:	d877      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aadc:	2b50      	cmp	r3, #80	@ 0x50
 800aade:	d03c      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x14a>
 800aae0:	2b50      	cmp	r3, #80	@ 0x50
 800aae2:	d873      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aae4:	2b40      	cmp	r3, #64	@ 0x40
 800aae6:	d058      	beq.n	800ab9a <HAL_TIM_ConfigClockSource+0x18a>
 800aae8:	2b40      	cmp	r3, #64	@ 0x40
 800aaea:	d86f      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aaec:	2b30      	cmp	r3, #48	@ 0x30
 800aaee:	d064      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aaf0:	2b30      	cmp	r3, #48	@ 0x30
 800aaf2:	d86b      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	d060      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	d867      	bhi.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d05c      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800ab00:	2b10      	cmp	r3, #16
 800ab02:	d05a      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x1aa>
 800ab04:	e062      	b.n	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab16:	f000 f9c9 	bl	800aeac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	609a      	str	r2, [r3, #8]
      break;
 800ab32:	e04f      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab44:	f000 f9b2 	bl	800aeac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab56:	609a      	str	r2, [r3, #8]
      break;
 800ab58:	e03c      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab66:	461a      	mov	r2, r3
 800ab68:	f000 f922 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2150      	movs	r1, #80	@ 0x50
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f97c 	bl	800ae70 <TIM_ITRx_SetConfig>
      break;
 800ab78:	e02c      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab86:	461a      	mov	r2, r3
 800ab88:	f000 f941 	bl	800ae0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2160      	movs	r1, #96	@ 0x60
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f96c 	bl	800ae70 <TIM_ITRx_SetConfig>
      break;
 800ab98:	e01c      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aba6:	461a      	mov	r2, r3
 800aba8:	f000 f902 	bl	800adb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2140      	movs	r1, #64	@ 0x40
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 f95c 	bl	800ae70 <TIM_ITRx_SetConfig>
      break;
 800abb8:	e00c      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4619      	mov	r1, r3
 800abc4:	4610      	mov	r0, r2
 800abc6:	f000 f953 	bl	800ae70 <TIM_ITRx_SetConfig>
      break;
 800abca:	e003      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	73fb      	strb	r3, [r7, #15]
      break;
 800abd0:	e000      	b.n	800abd4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800abd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	ffceff88 	.word	0xffceff88
 800abf4:	00100040 	.word	0x00100040
 800abf8:	00100030 	.word	0x00100030
 800abfc:	00100020 	.word	0x00100020

0800ac00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a46      	ldr	r2, [pc, #280]	@ (800ad90 <TIM_Base_SetConfig+0x12c>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d013      	beq.n	800aca4 <TIM_Base_SetConfig+0x40>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac82:	d00f      	beq.n	800aca4 <TIM_Base_SetConfig+0x40>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a43      	ldr	r2, [pc, #268]	@ (800ad94 <TIM_Base_SetConfig+0x130>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d00b      	beq.n	800aca4 <TIM_Base_SetConfig+0x40>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a42      	ldr	r2, [pc, #264]	@ (800ad98 <TIM_Base_SetConfig+0x134>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d007      	beq.n	800aca4 <TIM_Base_SetConfig+0x40>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a41      	ldr	r2, [pc, #260]	@ (800ad9c <TIM_Base_SetConfig+0x138>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d003      	beq.n	800aca4 <TIM_Base_SetConfig+0x40>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a40      	ldr	r2, [pc, #256]	@ (800ada0 <TIM_Base_SetConfig+0x13c>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d108      	bne.n	800acb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a35      	ldr	r2, [pc, #212]	@ (800ad90 <TIM_Base_SetConfig+0x12c>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01f      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acc4:	d01b      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a32      	ldr	r2, [pc, #200]	@ (800ad94 <TIM_Base_SetConfig+0x130>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d017      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a31      	ldr	r2, [pc, #196]	@ (800ad98 <TIM_Base_SetConfig+0x134>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d013      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a30      	ldr	r2, [pc, #192]	@ (800ad9c <TIM_Base_SetConfig+0x138>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00f      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a2f      	ldr	r2, [pc, #188]	@ (800ada0 <TIM_Base_SetConfig+0x13c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00b      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a2e      	ldr	r2, [pc, #184]	@ (800ada4 <TIM_Base_SetConfig+0x140>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d007      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a2d      	ldr	r2, [pc, #180]	@ (800ada8 <TIM_Base_SetConfig+0x144>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d003      	beq.n	800acfe <TIM_Base_SetConfig+0x9a>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a2c      	ldr	r2, [pc, #176]	@ (800adac <TIM_Base_SetConfig+0x148>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d108      	bne.n	800ad10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a16      	ldr	r2, [pc, #88]	@ (800ad90 <TIM_Base_SetConfig+0x12c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00f      	beq.n	800ad5c <TIM_Base_SetConfig+0xf8>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a18      	ldr	r2, [pc, #96]	@ (800ada0 <TIM_Base_SetConfig+0x13c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00b      	beq.n	800ad5c <TIM_Base_SetConfig+0xf8>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a17      	ldr	r2, [pc, #92]	@ (800ada4 <TIM_Base_SetConfig+0x140>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d007      	beq.n	800ad5c <TIM_Base_SetConfig+0xf8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a16      	ldr	r2, [pc, #88]	@ (800ada8 <TIM_Base_SetConfig+0x144>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d003      	beq.n	800ad5c <TIM_Base_SetConfig+0xf8>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a15      	ldr	r2, [pc, #84]	@ (800adac <TIM_Base_SetConfig+0x148>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d103      	bne.n	800ad64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	691a      	ldr	r2, [r3, #16]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d105      	bne.n	800ad82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	611a      	str	r2, [r3, #16]
  }
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40000400 	.word	0x40000400
 800ad98:	40000800 	.word	0x40000800
 800ad9c:	40000c00 	.word	0x40000c00
 800ada0:	40010400 	.word	0x40010400
 800ada4:	40014000 	.word	0x40014000
 800ada8:	40014400 	.word	0x40014400
 800adac:	40014800 	.word	0x40014800

0800adb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 030a 	bic.w	r3, r3, #10
 800adec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b087      	sub	sp, #28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f023 0210 	bic.w	r2, r3, #16
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	011b      	lsls	r3, r3, #4
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	621a      	str	r2, [r3, #32]
}
 800ae62:	bf00      	nop
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4b09      	ldr	r3, [pc, #36]	@ (800aea8 <TIM_ITRx_SetConfig+0x38>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	f043 0307 	orr.w	r3, r3, #7
 800ae92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	609a      	str	r2, [r3, #8]
}
 800ae9a:	bf00      	nop
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	ffcfff8f 	.word	0xffcfff8f

0800aeac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	021a      	lsls	r2, r3, #8
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	431a      	orrs	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	609a      	str	r2, [r3, #8]
}
 800aee0:	bf00      	nop
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af00:	2302      	movs	r3, #2
 800af02:	e06d      	b.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2202      	movs	r2, #2
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a30      	ldr	r2, [pc, #192]	@ (800afec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a2f      	ldr	r2, [pc, #188]	@ (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d108      	bne.n	800af4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	4313      	orrs	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a20      	ldr	r2, [pc, #128]	@ (800afec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d022      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af76:	d01d      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d018      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a1c      	ldr	r2, [pc, #112]	@ (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d013      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1a      	ldr	r2, [pc, #104]	@ (800affc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00e      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a15      	ldr	r2, [pc, #84]	@ (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d009      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a16      	ldr	r2, [pc, #88]	@ (800b000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d10c      	bne.n	800afce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	40010000 	.word	0x40010000
 800aff0:	40010400 	.word	0x40010400
 800aff4:	40000400 	.word	0x40000400
 800aff8:	40000800 	.word	0x40000800
 800affc:	40000c00 	.word	0x40000c00
 800b000:	40001800 	.word	0x40001800
 800b004:	40014000 	.word	0x40014000

0800b008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <memset>:
 800b044:	4402      	add	r2, r0
 800b046:	4603      	mov	r3, r0
 800b048:	4293      	cmp	r3, r2
 800b04a:	d100      	bne.n	800b04e <memset+0xa>
 800b04c:	4770      	bx	lr
 800b04e:	f803 1b01 	strb.w	r1, [r3], #1
 800b052:	e7f9      	b.n	800b048 <memset+0x4>

0800b054 <__libc_init_array>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	4d0d      	ldr	r5, [pc, #52]	@ (800b08c <__libc_init_array+0x38>)
 800b058:	4c0d      	ldr	r4, [pc, #52]	@ (800b090 <__libc_init_array+0x3c>)
 800b05a:	1b64      	subs	r4, r4, r5
 800b05c:	10a4      	asrs	r4, r4, #2
 800b05e:	2600      	movs	r6, #0
 800b060:	42a6      	cmp	r6, r4
 800b062:	d109      	bne.n	800b078 <__libc_init_array+0x24>
 800b064:	4d0b      	ldr	r5, [pc, #44]	@ (800b094 <__libc_init_array+0x40>)
 800b066:	4c0c      	ldr	r4, [pc, #48]	@ (800b098 <__libc_init_array+0x44>)
 800b068:	f000 f826 	bl	800b0b8 <_init>
 800b06c:	1b64      	subs	r4, r4, r5
 800b06e:	10a4      	asrs	r4, r4, #2
 800b070:	2600      	movs	r6, #0
 800b072:	42a6      	cmp	r6, r4
 800b074:	d105      	bne.n	800b082 <__libc_init_array+0x2e>
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07c:	4798      	blx	r3
 800b07e:	3601      	adds	r6, #1
 800b080:	e7ee      	b.n	800b060 <__libc_init_array+0xc>
 800b082:	f855 3b04 	ldr.w	r3, [r5], #4
 800b086:	4798      	blx	r3
 800b088:	3601      	adds	r6, #1
 800b08a:	e7f2      	b.n	800b072 <__libc_init_array+0x1e>
 800b08c:	0800b144 	.word	0x0800b144
 800b090:	0800b144 	.word	0x0800b144
 800b094:	0800b144 	.word	0x0800b144
 800b098:	0800b148 	.word	0x0800b148

0800b09c <memcpy>:
 800b09c:	440a      	add	r2, r1
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0a4:	d100      	bne.n	800b0a8 <memcpy+0xc>
 800b0a6:	4770      	bx	lr
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0b2:	4291      	cmp	r1, r2
 800b0b4:	d1f9      	bne.n	800b0aa <memcpy+0xe>
 800b0b6:	bd10      	pop	{r4, pc}

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr

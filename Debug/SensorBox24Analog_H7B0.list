
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac00  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800aeac  0800aeac  0000beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800af90  0800af90  0000bf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800af94  0800af94  0000bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800af98  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  24000010  0800afa8  0000c010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400093c  0800afa8  0000c93c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c82c  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030a0  00000000  00000000  0002886a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d0  00000000  00000000  0002b90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000135b  00000000  00000000  0002d1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003408e  00000000  00000000  0002e535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f69a  00000000  00000000  000625c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a83d  00000000  00000000  00081c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc49a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d54  00000000  00000000  001dc4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800ae94 	.word	0x0800ae94

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800ae94 	.word	0x0800ae94

080002ec <Config_Setup>:
#include "config.h"

#define ID 1


void Config_Setup(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(void) {
 80002f8:	b490      	push	{r4, r7}
 80002fa:	b09e      	sub	sp, #120	@ 0x78
 80002fc:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < 16; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	677b      	str	r3, [r7, #116]	@ 0x74
 8000302:	e026      	b.n	8000352 <Config_1+0x5a>
		sensors[i].transfer_function = TF_3V3;
 8000304:	4a52      	ldr	r2, [pc, #328]	@ (8000450 <Config_1+0x158>)
 8000306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	4413      	add	r3, r2
 800030c:	4a51      	ldr	r2, [pc, #324]	@ (8000454 <Config_1+0x15c>)
 800030e:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 8000310:	4a4f      	ldr	r2, [pc, #316]	@ (8000450 <Config_1+0x158>)
 8000312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	3304      	adds	r3, #4
 800031a:	2200      	movs	r2, #0
 800031c:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 100;
 800031e:	4a4c      	ldr	r2, [pc, #304]	@ (8000450 <Config_1+0x158>)
 8000320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	4413      	add	r3, r2
 8000326:	3306      	adds	r3, #6
 8000328:	2264      	movs	r2, #100	@ 0x64
 800032a:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 800032c:	4a48      	ldr	r2, [pc, #288]	@ (8000450 <Config_1+0x158>)
 800032e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3308      	adds	r3, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 800033a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a44      	ldr	r2, [pc, #272]	@ (8000450 <Config_1+0x158>)
 8000340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	330c      	adds	r3, #12
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800034c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800034e:	3301      	adds	r3, #1
 8000350:	677b      	str	r3, [r7, #116]	@ 0x74
 8000352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000354:	2b0f      	cmp	r3, #15
 8000356:	ddd5      	ble.n	8000304 <Config_1+0xc>
	}

	// Sensor definitions
	Sensor APPS1 = {TF_APPS, 0x21, 100, 0, V24_in1};
 8000358:	4b3f      	ldr	r3, [pc, #252]	@ (8000458 <Config_1+0x160>)
 800035a:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 800035e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor APPS2 = {TF_APPS, 0x22, 100, 0, V5_in0};
 8000364:	4b3d      	ldr	r3, [pc, #244]	@ (800045c <Config_1+0x164>)
 8000366:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800036a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800036c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BPPS = {TF_BPPS, 0x23, 100, 0, V5_in2};
 8000370:	4b3b      	ldr	r3, [pc, #236]	@ (8000460 <Config_1+0x168>)
 8000372:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor ANGLE_GEAR = {TF_ANGLE_GEAR, 0x24, 100, 0, V24_in0};
 800037c:	4b39      	ldr	r3, [pc, #228]	@ (8000464 <Config_1+0x16c>)
 800037e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN1 = {TF_BTN, 0x25, 100, 0, V5_in3};
 8000388:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <Config_1+0x170>)
 800038a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800038e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN2 = {TF_BTN, 0x26, 100, 0, V5_in4};
 8000394:	4b35      	ldr	r3, [pc, #212]	@ (800046c <Config_1+0x174>)
 8000396:	f107 0414 	add.w	r4, r7, #20
 800039a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Sensor BTN3 = {TF_BTN, 0x27, 100, 0, V5_in5};
 80003a0:	4b33      	ldr	r3, [pc, #204]	@ (8000470 <Config_1+0x178>)
 80003a2:	1d3c      	adds	r4, r7, #4
 80003a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    sensors[APPS1.pin] = APPS1;
 80003aa:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80003ae:	4a28      	ldr	r2, [pc, #160]	@ (8000450 <Config_1+0x158>)
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	4413      	add	r3, r2
 80003b4:	461c      	mov	r4, r3
 80003b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[APPS2.pin] = APPS2;
 80003c0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80003c4:	4a22      	ldr	r2, [pc, #136]	@ (8000450 <Config_1+0x158>)
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	4413      	add	r3, r2
 80003ca:	461c      	mov	r4, r3
 80003cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[BPPS.pin] = BPPS;
 80003d6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80003da:	4a1d      	ldr	r2, [pc, #116]	@ (8000450 <Config_1+0x158>)
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	4413      	add	r3, r2
 80003e0:	461c      	mov	r4, r3
 80003e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80003e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[ANGLE_GEAR.pin] = ANGLE_GEAR;
 80003ec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80003f0:	4a17      	ldr	r2, [pc, #92]	@ (8000450 <Config_1+0x158>)
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	461c      	mov	r4, r3
 80003f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN1.pin] = BTN1;
 8000402:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000406:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <Config_1+0x158>)
 8000408:	011b      	lsls	r3, r3, #4
 800040a:	4413      	add	r3, r2
 800040c:	461c      	mov	r4, r3
 800040e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN2.pin] = BTN2;
 8000418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800041c:	4a0c      	ldr	r2, [pc, #48]	@ (8000450 <Config_1+0x158>)
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	4413      	add	r3, r2
 8000422:	461c      	mov	r4, r3
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800042a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN3.pin] = BTN3;
 800042e:	7c3b      	ldrb	r3, [r7, #16]
 8000430:	4a07      	ldr	r2, [pc, #28]	@ (8000450 <Config_1+0x158>)
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	4413      	add	r3, r2
 8000436:	461c      	mov	r4, r3
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	

    CAN_interval = 100;
 8000440:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <Config_1+0x17c>)
 8000442:	2264      	movs	r2, #100	@ 0x64
 8000444:	801a      	strh	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	3778      	adds	r7, #120	@ 0x78
 800044a:	46bd      	mov	sp, r7
 800044c:	bc90      	pop	{r4, r7}
 800044e:	4770      	bx	lr
 8000450:	240003a0 	.word	0x240003a0
 8000454:	080018e9 	.word	0x080018e9
 8000458:	0800aeac 	.word	0x0800aeac
 800045c:	0800aebc 	.word	0x0800aebc
 8000460:	0800aecc 	.word	0x0800aecc
 8000464:	0800aedc 	.word	0x0800aedc
 8000468:	0800aeec 	.word	0x0800aeec
 800046c:	0800aefc 	.word	0x0800aefc
 8000470:	0800af0c 	.word	0x0800af0c
 8000474:	240008c2 	.word	0x240008c2

08000478 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000480:	e001      	b.n	8000486 <CanSend+0xe>
		Error_Handler();
 8000482:	f000 fe13 	bl	80010ac <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000486:	4809      	ldr	r0, [pc, #36]	@ (80004ac <CanSend+0x34>)
 8000488:	f005 fb4c 	bl	8005b24 <HAL_FDCAN_GetTxFifoFreeLevel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d007      	beq.n	80004a2 <CanSend+0x2a>
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4906      	ldr	r1, [pc, #24]	@ (80004b0 <CanSend+0x38>)
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <CanSend+0x34>)
 8000498:	f005 f97d 	bl	8005796 <HAL_FDCAN_AddMessageToTxFifoQ>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d1ef      	bne.n	8000482 <CanSend+0xa>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	24000118 	.word	0x24000118
 80004b0:	240008e8 	.word	0x240008e8

080004b4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d017      	beq.n	80004f8 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80004c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f005 f9bc 	bl	800584c <HAL_FDCAN_GetRxMessage>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 80004da:	f000 fde7 	bl	80010ac <Error_Handler>
 80004de:	e001      	b.n	80004e4 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 80004e0:	f000 f848 	bl	8000574 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f005 fb2d 	bl	8005b48 <HAL_FDCAN_ActivateNotification>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 80004f4:	f000 fdda 	bl	80010ac <Error_Handler>
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	24000034 	.word	0x24000034
 8000504:	2400090c 	.word	0x2400090c

08000508 <print>:



void print(uint16_t select){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
		//uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
		uint16_t Data = sensors[select].transfer_function(1,sensors[select].averages);
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <print+0x60>)
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	88fa      	ldrh	r2, [r7, #6]
 800051e:	4912      	ldr	r1, [pc, #72]	@ (8000568 <print+0x60>)
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	440a      	add	r2, r1
 8000524:	3208      	adds	r2, #8
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	2001      	movs	r0, #1
 800052c:	4798      	blx	r3
 800052e:	4603      	mov	r3, r0
 8000530:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <print+0x64>)
 8000538:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <print+0x64>)
 8000544:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = sensors[select].CAN_ID;
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <print+0x60>)
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	3304      	adds	r3, #4
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <print+0x68>)
 8000556:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <print+0x64>)
 800055a:	f7ff ff8d 	bl	8000478 <CanSend>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	240003a0 	.word	0x240003a0
 800056c:	2400002c 	.word	0x2400002c
 8000570:	240008e8 	.word	0x240008e8

08000574 <decode>:

void decode(){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	switch(TxData[0]){
	
	}
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 fa4b 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f87b 	bl	8000688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 8000592:	f7ff feab 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fc95 	bl	8000ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 800059a:	f000 fc73 	bl	8000e84 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800059e:	f000 fa57 	bl	8000a50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005a2:	f000 fadb 	bl	8000b5c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80005a6:	f000 fb5f 	bl	8000c68 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005aa:	f000 fb9d 	bl	8000ce8 <MX_I2C3_Init>
  MX_ADC1_Init();
 80005ae:	f000 f8d9 	bl	8000764 <MX_ADC1_Init>
  MX_I2C4_Init();
 80005b2:	f000 fbd9 	bl	8000d68 <MX_I2C4_Init>
  MX_TIM3_Init();
 80005b6:	f000 fc17 	bl	8000de8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <main+0xe0>)
 80005bc:	f009 ff96 	bl	800a4ec <HAL_TIM_Base_Start_IT>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x46>
 80005c6:	f000 fd71 	bl	80010ac <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <main+0xe4>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4926      	ldr	r1, [pc, #152]	@ (800066c <main+0xe8>)
 80005d2:	4825      	ldr	r0, [pc, #148]	@ (8000668 <main+0xe4>)
 80005d4:	f001 fdfa 	bl	80021cc <HAL_ADC_Start_DMA>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x5e>
 80005de:	f000 fd65 	bl	80010ac <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 80005e2:	4823      	ldr	r0, [pc, #140]	@ (8000670 <main+0xec>)
 80005e4:	f005 f8ac 	bl	8005740 <HAL_FDCAN_Start>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <main+0x70>
 80005ee:	f000 fd5d 	bl	80010ac <Error_Handler>
 80005f2:	e008      	b.n	8000606 <main+0x82>
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <main+0xf0>)
 80005fc:	f006 f9ca 	bl	8006994 <HAL_GPIO_WritePin>
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <main+0xf4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4819      	ldr	r0, [pc, #100]	@ (8000670 <main+0xec>)
 800060c:	f005 fa9c 	bl	8005b48 <HAL_FDCAN_ActivateNotification>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0x96>
 8000616:	f000 fd49 	bl	80010ac <Error_Handler>


  uint8_t counter = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <main+0xf4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d1fb      	bne.n	800061e <main+0x9a>
		  if(millis % CAN_interval == 0){
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <main+0xf8>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <main+0xfc>)
 800062c:	8812      	ldrh	r2, [r2, #0]
 800062e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1ef      	bne.n	800061e <main+0x9a>
			  print(counter);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b29b      	uxth	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff60 	bl	8000508 <print>
			  counter++;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	3301      	adds	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b10      	cmp	r3, #16
 8000652:	d1e4      	bne.n	800061e <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <main+0x100>)
 8000658:	f006 f9b5 	bl	80069c6 <HAL_GPIO_TogglePin>
				  counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000660:	e7dd      	b.n	800061e <main+0x9a>
 8000662:	bf00      	nop
 8000664:	24000354 	.word	0x24000354
 8000668:	2400003c 	.word	0x2400003c
 800066c:	240004a0 	.word	0x240004a0
 8000670:	24000118 	.word	0x24000118
 8000674:	58020400 	.word	0x58020400
 8000678:	240008e6 	.word	0x240008e6
 800067c:	240008e4 	.word	0x240008e4
 8000680:	240008c2 	.word	0x240008c2
 8000684:	58020800 	.word	0x58020800

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	224c      	movs	r2, #76	@ 0x4c
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00a fbc2 	bl	800ae20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2220      	movs	r2, #32
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00a fbbc 	bl	800ae20 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xd4>)
 80006aa:	f04f 32ff 	mov.w	r2, #4294967295
 80006ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f006 fad6 	bl	8006c64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xd8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xd8>)
 80006c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d4:	bf00      	nop
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006e2:	d1f8      	bne.n	80006d6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemClock_Config+0xd4>)
 80006e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e8:	f023 0303 	bic.w	r3, r3, #3
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <SystemClock_Config+0xd4>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006f4:	2303      	movs	r3, #3
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006fe:	2301      	movs	r3, #1
 8000700:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fae2 	bl	8006cd8 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800071a:	f000 fcc7 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	233f      	movs	r3, #63	@ 0x3f
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2102      	movs	r1, #2
 8000744:	4618      	mov	r0, r3
 8000746:	f006 fef9 	bl	800753c <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000750:	f000 fcac 	bl	80010ac <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	@ 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58024400 	.word	0x58024400
 8000760:	58024800 	.word	0x58024800

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000788:	4b9f      	ldr	r3, [pc, #636]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800078a:	4aa0      	ldr	r2, [pc, #640]	@ (8000a0c <MX_ADC1_Init+0x2a8>)
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800078e:	4b9e      	ldr	r3, [pc, #632]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000790:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b9c      	ldr	r3, [pc, #624]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000798:	2208      	movs	r2, #8
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800079c:	4b9a      	ldr	r3, [pc, #616]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a2:	4b99      	ldr	r3, [pc, #612]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a8:	4b97      	ldr	r3, [pc, #604]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ae:	4b96      	ldr	r3, [pc, #600]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 80007b4:	4b94      	ldr	r3, [pc, #592]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007b6:	2210      	movs	r2, #16
 80007b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b93      	ldr	r3, [pc, #588]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b91      	ldr	r3, [pc, #580]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b90      	ldr	r3, [pc, #576]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007cc:	4b8e      	ldr	r3, [pc, #568]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007ce:	2203      	movs	r2, #3
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007de:	4b8a      	ldr	r3, [pc, #552]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	4888      	ldr	r0, [pc, #544]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80007e8:	f001 fb96 	bl	8001f18 <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007f2:	f000 fc5b 	bl	80010ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4881      	ldr	r0, [pc, #516]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000802:	f002 fa99 	bl	8002d38 <HAL_ADCEx_MultiModeConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800080c:	f000 fc4e 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000810:	4b7f      	ldr	r3, [pc, #508]	@ (8000a10 <MX_ADC1_Init+0x2ac>)
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2306      	movs	r3, #6
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000818:	2307      	movs	r3, #7
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2304      	movs	r3, #4
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4875      	ldr	r0, [pc, #468]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000834:	f001 fd92 	bl	800235c <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800083e:	f000 fc35 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000842:	4b74      	ldr	r3, [pc, #464]	@ (8000a14 <MX_ADC1_Init+0x2b0>)
 8000844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000846:	230c      	movs	r3, #12
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	486e      	ldr	r0, [pc, #440]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000850:	f001 fd84 	bl	800235c <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800085a:	f000 fc27 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085e:	4b6e      	ldr	r3, [pc, #440]	@ (8000a18 <MX_ADC1_Init+0x2b4>)
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000862:	2312      	movs	r3, #18
 8000864:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4867      	ldr	r0, [pc, #412]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800086c:	f001 fd76 	bl	800235c <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000876:	f000 fc19 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800087a:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <MX_ADC1_Init+0x2b8>)
 800087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800087e:	2318      	movs	r3, #24
 8000880:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4860      	ldr	r0, [pc, #384]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000888:	f001 fd68 	bl	800235c <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000892:	f000 fc0b 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000896:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <MX_ADC1_Init+0x2bc>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800089a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4858      	ldr	r0, [pc, #352]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008a6:	f001 fd59 	bl	800235c <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80008b0:	f000 fbfc 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <MX_ADC1_Init+0x2c0>)
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4851      	ldr	r0, [pc, #324]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008c4:	f001 fd4a 	bl	800235c <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80008ce:	f000 fbed 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008d2:	4b55      	ldr	r3, [pc, #340]	@ (8000a28 <MX_ADC1_Init+0x2c4>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008d6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4849      	ldr	r0, [pc, #292]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80008e2:	f001 fd3b 	bl	800235c <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008ec:	f000 fbde 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a2c <MX_ADC1_Init+0x2c8>)
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008f4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4842      	ldr	r0, [pc, #264]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000900:	f001 fd2c 	bl	800235c <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800090a:	f000 fbcf 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800090e:	4b48      	ldr	r3, [pc, #288]	@ (8000a30 <MX_ADC1_Init+0x2cc>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000912:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	483a      	ldr	r0, [pc, #232]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800091e:	f001 fd1d 	bl	800235c <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000928:	f000 fbc0 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800092c:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <MX_ADC1_Init+0x2d0>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4833      	ldr	r0, [pc, #204]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800093c:	f001 fd0e 	bl	800235c <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000946:	f000 fbb1 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800094a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <MX_ADC1_Init+0x2d4>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800094e:	f240 2306 	movw	r3, #518	@ 0x206
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	482b      	ldr	r0, [pc, #172]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 800095a:	f001 fcff 	bl	800235c <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000964:	f000 fba2 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <MX_ADC1_Init+0x2d8>)
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 800096c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4824      	ldr	r0, [pc, #144]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000978:	f001 fcf0 	bl	800235c <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 8000982:	f000 fb93 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_ADC1_Init+0x2dc>)
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800098a:	f240 2312 	movw	r3, #530	@ 0x212
 800098e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 8000996:	f001 fce1 	bl	800235c <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 80009a0:	f000 fb84 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80009a4:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_ADC1_Init+0x2e0>)
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80009a8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009b4:	f001 fcd2 	bl	800235c <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 80009be:	f000 fb75 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_ADC1_Init+0x2e4>)
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80009c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009d2:	f001 fcc3 	bl	800235c <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80009dc:	f000 fb66 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_ADC1_Init+0x2e8>)
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80009e4:	f240 3306 	movw	r3, #774	@ 0x306
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_ADC1_Init+0x2a4>)
 80009f0:	f001 fcb4 	bl	800235c <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80009fa:	f000 fb57 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2400003c 	.word	0x2400003c
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	0c900008 	.word	0x0c900008
 8000a14:	10c00010 	.word	0x10c00010
 8000a18:	14f00020 	.word	0x14f00020
 8000a1c:	1d500080 	.word	0x1d500080
 8000a20:	21800100 	.word	0x21800100
 8000a24:	25b00200 	.word	0x25b00200
 8000a28:	2a000400 	.word	0x2a000400
 8000a2c:	2e300800 	.word	0x2e300800
 8000a30:	32601000 	.word	0x32601000
 8000a34:	36902000 	.word	0x36902000
 8000a38:	3ac04000 	.word	0x3ac04000
 8000a3c:	3ef08000 	.word	0x3ef08000
 8000a40:	43210000 	.word	0x43210000
 8000a44:	47520000 	.word	0x47520000
 8000a48:	4b840000 	.word	0x4b840000
 8000a4c:	4fb80000 	.word	0x4fb80000

08000a50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a54:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a56:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <MX_FDCAN1_Init+0x100>)
 8000a58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a60:	4b3a      	ldr	r3, [pc, #232]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a66:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a6c:	4b37      	ldr	r3, [pc, #220]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a78:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000a84:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a86:	2216      	movs	r2, #22
 8000a88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a8a:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ab0:	221c      	movs	r2, #28
 8000ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_FDCAN1_Init+0xfc>)
 8000afe:	f004 fc41 	bl	8005384 <HAL_FDCAN_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b08:	f000 fad0 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_FDCAN1_Init+0x104>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b14:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <MX_FDCAN1_Init+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24000118 	.word	0x24000118
 8000b50:	4000a000 	.word	0x4000a000
 8000b54:	240008c4 	.word	0x240008c4
 8000b58:	240008e8 	.word	0x240008e8

08000b5c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b60:	4b3d      	ldr	r3, [pc, #244]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b62:	4a3e      	ldr	r2, [pc, #248]	@ (8000c5c <MX_FDCAN2_Init+0x100>)
 8000b64:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b72:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b84:	4b34      	ldr	r3, [pc, #208]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b8a:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b92:	2216      	movs	r2, #22
 8000b94:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b96:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000bae:	4b2a      	ldr	r3, [pc, #168]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c08:	4813      	ldr	r0, [pc, #76]	@ (8000c58 <MX_FDCAN2_Init+0xfc>)
 8000c0a:	f004 fbbb 	bl	8005384 <HAL_FDCAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c14:	f000 fa4a 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_FDCAN2_Init+0x104>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c20:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <MX_FDCAN2_Init+0x108>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240001b8 	.word	0x240001b8
 8000c5c:	4000a400 	.word	0x4000a400
 8000c60:	240008c4 	.word	0x240008c4
 8000c64:	240008e8 	.word	0x240008e8

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <MX_I2C1_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <MX_I2C1_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000ca4:	f005 feaa 	bl	80069fc <HAL_I2C_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cae:	f000 f9fd 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cb6:	f005 ff3d 	bl	8006b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cc0:	f000 f9f4 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_I2C1_Init+0x74>)
 8000cc8:	f005 ff7f 	bl	8006bca <HAL_I2CEx_ConfigDigitalFilter>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 f9eb 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	24000258 	.word	0x24000258
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	00707cbb 	.word	0x00707cbb

08000ce8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C3_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C3_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d24:	f005 fe6a 	bl	80069fc <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 f9bd 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d36:	f005 fefd 	bl	8006b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f9b4 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_I2C3_Init+0x74>)
 8000d48:	f005 ff3f 	bl	8006bca <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f9ab 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	240002ac 	.word	0x240002ac
 8000d60:	40005c00 	.word	0x40005c00
 8000d64:	00707cbb 	.word	0x00707cbb

08000d68 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <MX_I2C4_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <MX_I2C4_Init+0x7c>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000da2:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000da4:	f005 fe2a 	bl	80069fc <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dae:	f000 f97d 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000db6:	f005 febd 	bl	8006b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 f974 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_I2C4_Init+0x74>)
 8000dc8:	f005 feff 	bl	8006bca <HAL_I2CEx_ConfigDigitalFilter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f96b 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	24000300 	.word	0x24000300
 8000de0:	58001c00 	.word	0x58001c00
 8000de4:	00707cbb 	.word	0x00707cbb

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e08:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <MX_TIM3_Init+0x98>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e0e:	223f      	movs	r2, #63	@ 0x3f
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e2e:	f009 fb05 	bl	800a43c <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e38:	f000 f938 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e4a:	f009 fccf 	bl	800a7ec <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e54:	f000 f92a 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e66:	f009 ff2f 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f000 f91c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000354 	.word	0x24000354
 8000e80:	40000400 	.word	0x40000400

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e8c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_DMA_Init+0x3c>)
 8000e9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	200b      	movs	r0, #11
 8000eae:	f002 f8ba 	bl	8003026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb2:	200b      	movs	r0, #11
 8000eb4:	f002 f8d1 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee0:	4a32      	ldr	r2, [pc, #200]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eea:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000efe:	4a2b      	ldr	r2, [pc, #172]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f1c:	4a23      	ldr	r2, [pc, #140]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_GPIO_Init+0xe8>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f58:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <MX_GPIO_Init+0xec>)
 8000f5a:	f005 fd1b 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	@ 0x40
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f64:	f005 fd16 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <MX_GPIO_Init+0xec>)
 8000f82:	f005 fb57 	bl	8006634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000f86:	2340      	movs	r3, #64	@ 0x40
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_GPIO_Init+0xf0>)
 8000f9e:	f005 fb49 	bl	8006634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020400 	.word	0x58020400
 8000fb4:	58020800 	.word	0x58020800

08000fb8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d15f      	bne.n	800108a <HAL_ADC_ConvCpltCallback+0xd2>
		if(AVE_POS < ROLLING_AVE){
 8000fca:	4b34      	ldr	r3, [pc, #208]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b1f      	cmp	r3, #31
 8000fd0:	d806      	bhi.n	8000fe0 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b30      	ldr	r3, [pc, #192]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e03b      	b.n	8001058 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e030      	b.n	800104e <HAL_ADC_ConvCpltCallback+0x96>
				for(int z = 0; z < ROLLING_AVE;z++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e027      	b.n	8001042 <HAL_ADC_ConvCpltCallback+0x8a>
					if(z == 0){
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10c      	bne.n	8001012 <HAL_ADC_ConvCpltCallback+0x5a>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8000ff8:	4a29      	ldr	r2, [pc, #164]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	4413      	add	r3, r2
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	3308      	adds	r3, #8
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	e014      	b.n	800103c <HAL_ADC_ConvCpltCallback+0x84>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 8001012:	4a24      	ldr	r2, [pc, #144]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	3308      	adds	r3, #8
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	0151      	lsls	r1, r2, #5
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	440a      	add	r2, r1
 8001028:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800102c:	4413      	add	r3, r2
 800102e:	085a      	lsrs	r2, r3, #1
 8001030:	491c      	ldr	r1, [pc, #112]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xec>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	601a      	str	r2, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	ddd4      	ble.n	8000ff2 <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699a      	ldr	r2, [r3, #24]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8c9      	bhi.n	8000fec <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e010      	b.n	8001080 <HAL_ADC_ConvCpltCallback+0xc8>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	4910      	ldr	r1, [pc, #64]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xe8>)
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	0152      	lsls	r2, r2, #5
 8001072:	4413      	add	r3, r2
 8001074:	4602      	mov	r2, r0
 8001076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	429a      	cmp	r2, r3
 8001088:	d8e9      	bhi.n	800105e <HAL_ADC_ConvCpltCallback+0xa6>
		}
	}
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000
 800109c:	240008c0 	.word	0x240008c0
 80010a0:	240004c0 	.word	0x240004c0
 80010a4:	240003a0 	.word	0x240003a0
 80010a8:	240004a0 	.word	0x240004a0

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_MspInit+0x3c>)
 80010d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2005      	movs	r0, #5
 80010e2:	f001 ffa0 	bl	8003026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f001 ffb7 	bl	800305a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58024400 	.word	0x58024400

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0bc      	sub	sp, #240	@ 0xf0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	22c0      	movs	r2, #192	@ 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f009 fe81 	bl	800ae20 <memset>
  if(hadc->Instance==ADC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a62      	ldr	r2, [pc, #392]	@ (80012ac <HAL_ADC_MspInit+0x1b4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f040 80bc 	bne.w	80012a2 <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 800113a:	2320      	movs	r3, #32
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 800113e:	2308      	movs	r3, #8
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 8001142:	2319      	movs	r3, #25
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800114a:	23c0      	movs	r3, #192	@ 0xc0
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f006 fd61 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800116c:	f7ff ff9e 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001170:	4b4f      	ldr	r3, [pc, #316]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001172:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001176:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001180:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001182:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b48      	ldr	r3, [pc, #288]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001190:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001194:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800119e:	4b44      	ldr	r3, [pc, #272]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b2:	4a3f      	ldr	r2, [pc, #252]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011bc:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b39      	ldr	r3, [pc, #228]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d0:	4a37      	ldr	r2, [pc, #220]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011da:	4b35      	ldr	r3, [pc, #212]	@ (80012b0 <HAL_ADC_MspInit+0x1b8>)
 80011dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e8:	233f      	movs	r3, #63	@ 0x3f
 80011ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fe:	4619      	mov	r1, r3
 8001200:	482c      	ldr	r0, [pc, #176]	@ (80012b4 <HAL_ADC_MspInit+0x1bc>)
 8001202:	f005 fa17 	bl	8006634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001206:	23ff      	movs	r3, #255	@ 0xff
 8001208:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800121c:	4619      	mov	r1, r3
 800121e:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <HAL_ADC_MspInit+0x1c0>)
 8001220:	f005 fa08 	bl	8006634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800123a:	4619      	mov	r1, r3
 800123c:	481f      	ldr	r0, [pc, #124]	@ (80012bc <HAL_ADC_MspInit+0x1c4>)
 800123e:	f005 f9f9 	bl	8006634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_ADC_MspInit+0x1cc>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800124a:	2209      	movs	r2, #9
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001264:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800126c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001278:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 8001288:	f001 ff02 	bl	8003090 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8001292:	f7ff ff0b 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800129a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_ADC_MspInit+0x1c8>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	37f0      	adds	r7, #240	@ 0xf0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020800 	.word	0x58020800
 80012b8:	58020000 	.word	0x58020000
 80012bc:	58020400 	.word	0x58020400
 80012c0:	240000a0 	.word	0x240000a0
 80012c4:	40020010 	.word	0x40020010

080012c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0bc      	sub	sp, #240	@ 0xf0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 fd99 	bl	800ae20 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_FDCAN_MspInit+0x194>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d158      	bne.n	80013aa <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fc8a 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800131a:	f7ff fec7 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800131e:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 8001326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10e      	bne.n	800134e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001330:	4b4c      	ldr	r3, [pc, #304]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001332:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001336:	4a4b      	ldr	r2, [pc, #300]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001340:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001342:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001354:	4a43      	ldr	r2, [pc, #268]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800136c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001386:	2309      	movs	r3, #9
 8001388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001390:	4619      	mov	r1, r3
 8001392:	4835      	ldr	r0, [pc, #212]	@ (8001468 <HAL_FDCAN_MspInit+0x1a0>)
 8001394:	f005 f94e 	bl	8006634 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2013      	movs	r0, #19
 800139e:	f001 fe42 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80013a2:	2013      	movs	r0, #19
 80013a4:	f001 fe59 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80013a8:	e054      	b.n	8001454 <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2f      	ldr	r2, [pc, #188]	@ (800146c <HAL_FDCAN_MspInit+0x1a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d14f      	bne.n	8001454 <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fc2c 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80013d6:	f7ff fe69 	bl	80010ac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <HAL_FDCAN_MspInit+0x198>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10e      	bne.n	800140a <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 80013fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 800140c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_FDCAN_MspInit+0x19c>)
 800141c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001428:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800142c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001442:	2309      	movs	r3, #9
 8001444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800144c:	4619      	mov	r1, r3
 800144e:	4808      	ldr	r0, [pc, #32]	@ (8001470 <HAL_FDCAN_MspInit+0x1a8>)
 8001450:	f005 f8f0 	bl	8006634 <HAL_GPIO_Init>
}
 8001454:	bf00      	nop
 8001456:	37f0      	adds	r7, #240	@ 0xf0
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	4000a000 	.word	0x4000a000
 8001460:	24000934 	.word	0x24000934
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000
 800146c:	4000a400 	.word	0x4000a400
 8001470:	58020400 	.word	0x58020400

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0c0      	sub	sp, #256	@ 0x100
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001490:	22c0      	movs	r2, #192	@ 0xc0
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f009 fcc3 	bl	800ae20 <memset>
  if(hi2c->Instance==I2C1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a86      	ldr	r2, [pc, #536]	@ (80016b8 <HAL_I2C_MspInit+0x244>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d146      	bne.n	8001532 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a4:	f04f 0208 	mov.w	r2, #8
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 fbb4 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014c6:	f7ff fdf1 	bl	80010ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014d0:	4a7a      	ldr	r2, [pc, #488]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014da:	4b78      	ldr	r3, [pc, #480]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80014dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001500:	2304      	movs	r3, #4
 8001502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800150a:	4619      	mov	r1, r3
 800150c:	486c      	ldr	r0, [pc, #432]	@ (80016c0 <HAL_I2C_MspInit+0x24c>)
 800150e:	f005 f891 	bl	8006634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	4b6a      	ldr	r3, [pc, #424]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001514:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001518:	4a68      	ldr	r2, [pc, #416]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001522:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001524:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001530:	e0bd      	b.n	80016ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a63      	ldr	r2, [pc, #396]	@ (80016c4 <HAL_I2C_MspInit+0x250>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d16c      	bne.n	8001616 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800153c:	f04f 0208 	mov.w	r2, #8
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fb68 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800155e:	f7ff fda5 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b56      	ldr	r3, [pc, #344]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001568:	4a54      	ldr	r2, [pc, #336]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001572:	4b52      	ldr	r3, [pc, #328]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001574:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001582:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001586:	4a4d      	ldr	r2, [pc, #308]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001590:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001592:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015c2:	4619      	mov	r1, r3
 80015c4:	4840      	ldr	r0, [pc, #256]	@ (80016c8 <HAL_I2C_MspInit+0x254>)
 80015c6:	f005 f835 	bl	8006634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e4:	2304      	movs	r3, #4
 80015e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015ee:	4619      	mov	r1, r3
 80015f0:	4836      	ldr	r0, [pc, #216]	@ (80016cc <HAL_I2C_MspInit+0x258>)
 80015f2:	f005 f81f 	bl	8006634 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80015f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015fc:	4a2f      	ldr	r2, [pc, #188]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80015fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001602:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001608:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800160c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
}
 8001614:	e04b      	b.n	80016ae <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2d      	ldr	r2, [pc, #180]	@ (80016d0 <HAL_I2C_MspInit+0x25c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d146      	bne.n	80016ae <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001620:	f04f 0210 	mov.w	r2, #16
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001636:	4618      	mov	r0, r3
 8001638:	f006 faf6 	bl	8007c28 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001642:	f7ff fd33 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800164c:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001664:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800167e:	2306      	movs	r3, #6
 8001680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <HAL_I2C_MspInit+0x24c>)
 800168c:	f004 ffd2 	bl	8006634 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001692:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_I2C_MspInit+0x248>)
 80016a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40005400 	.word	0x40005400
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020400 	.word	0x58020400
 80016c4:	40005c00 	.word	0x40005c00
 80016c8:	58020800 	.word	0x58020800
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58001c00 	.word	0x58001c00

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_TIM_Base_MspInit+0x48>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d116      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_TIM_Base_MspInit+0x4c>)
 80016f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	201d      	movs	r0, #29
 800170a:	f001 fc8c 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800170e:	201d      	movs	r0, #29
 8001710:	f001 fca3 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40000400 	.word	0x40000400
 8001720:	58024400 	.word	0x58024400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f9c5 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001796:	f002 fa73 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	240000a0 	.word	0x240000a0

080017a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80017aa:	f004 fa47 	bl	8005c3c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000118 	.word	0x24000118

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017c6:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <TIM3_IRQHandler+0x2c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d0:	d102      	bne.n	80017d8 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <TIM3_IRQHandler+0x30>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <TIM3_IRQHandler+0x34>)
 80017da:	f008 feff 	bl	800a5dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240008e4 	.word	0x240008e4
 80017e8:	240008e6 	.word	0x240008e6
 80017ec:	24000354 	.word	0x24000354

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f4:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <SystemInit+0xd8>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a33      	ldr	r2, [pc, #204]	@ (80018c8 <SystemInit+0xd8>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001804:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <SystemInit+0xdc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	2b02      	cmp	r3, #2
 800180e:	d807      	bhi.n	8001820 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001810:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <SystemInit+0xdc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <SystemInit+0xdc>)
 800181a:	f043 0303 	orr.w	r3, r3, #3
 800181e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <SystemInit+0xe0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <SystemInit+0xe0>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <SystemInit+0xe0>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <SystemInit+0xe0>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4926      	ldr	r1, [pc, #152]	@ (80018d0 <SystemInit+0xe0>)
 8001838:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <SystemInit+0xe4>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800183e:	4b23      	ldr	r3, [pc, #140]	@ (80018cc <SystemInit+0xdc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <SystemInit+0xdc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 030f 	bic.w	r3, r3, #15
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <SystemInit+0xdc>)
 8001854:	f043 0303 	orr.w	r3, r3, #3
 8001858:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <SystemInit+0xe0>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <SystemInit+0xe0>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <SystemInit+0xe0>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <SystemInit+0xe0>)
 800186e:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <SystemInit+0xe8>)
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <SystemInit+0xe0>)
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <SystemInit+0xec>)
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <SystemInit+0xe0>)
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <SystemInit+0xf0>)
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <SystemInit+0xe0>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <SystemInit+0xe0>)
 8001886:	4a16      	ldr	r2, [pc, #88]	@ (80018e0 <SystemInit+0xf0>)
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <SystemInit+0xe0>)
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <SystemInit+0xe0>)
 8001892:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <SystemInit+0xf0>)
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <SystemInit+0xe0>)
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <SystemInit+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <SystemInit+0xe0>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <SystemInit+0xe0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <SystemInit+0xf4>)
 80018b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SystemInit+0xd8>)
 80018b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018bc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018d8:	02020200 	.word	0x02020200
 80018dc:	01ff0000 	.word	0x01ff0000
 80018e0:	01010280 	.word	0x01010280
 80018e4:	52004000 	.word	0x52004000

080018e8 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 80018f4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80018f8:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	fb03 f202 	mul.w	r2, r3, r2
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <TF_3V3+0x38>)
 8001904:	fba3 1302 	umull	r1, r3, r3, r2
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	4413      	add	r3, r2
 800190e:	0adb      	lsrs	r3, r3, #11
 8001910:	81bb      	strh	r3, [r7, #12]
	return voltage;
 8001912:	89bb      	ldrh	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	00100101 	.word	0x00100101

08001924 <TF_BPPS>:
	uint16_t max_volt = 24000;

	uint16_t voltage = raw*max_volt / 4095;
	return voltage;
}
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001930:	23c8      	movs	r3, #200	@ 0xc8
 8001932:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	fb03 f202 	mul.w	r2, r3, r2
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <TF_BPPS+0x38>)
 800193e:	fba3 1302 	umull	r1, r3, r3, r2
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	4413      	add	r3, r2
 8001948:	0adb      	lsrs	r3, r3, #11
 800194a:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 800194c:	89bb      	ldrh	r3, [r7, #12]

}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	00100101 	.word	0x00100101

08001960 <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 800196c:	2364      	movs	r3, #100	@ 0x64
 800196e:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	fb03 f202 	mul.w	r2, r3, r2
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <TF_APPS+0x38>)
 800197a:	fba3 1302 	umull	r1, r3, r3, r2
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	0852      	lsrs	r2, r2, #1
 8001982:	4413      	add	r3, r2
 8001984:	0adb      	lsrs	r3, r3, #11
 8001986:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001988:	89bb      	ldrh	r3, [r7, #12]

}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	00100101 	.word	0x00100101

0800199c <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw){
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]

}
 80019a8:	bf00      	nop
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <TF_ANGLE_GEAR>:

}
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){

}
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	6039      	str	r1, [r7, #0]
 80019c0:	71fb      	strb	r3, [r7, #7]

}
 80019c2:	bf00      	nop
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a08 <LoopFillZerobss+0xe>
 80019d4:	f7ff ff0c 	bl	80017f0 <SystemInit>
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <LoopFillZerobss+0x12>)
 80019da:	490d      	ldr	r1, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x16>)
 80019dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <LoopFillZerobss+0x1a>)
 80019de:	2300      	movs	r3, #0
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:
 80019e2:	58d4      	ldr	r4, [r2, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:
 80019e8:	18c4      	adds	r4, r0, r3
 80019ea:	428c      	cmp	r4, r1
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x1e>)
 80019f0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a1c <LoopFillZerobss+0x22>)
 80019f2:	2300      	movs	r3, #0
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:
 80019fa:	42a2      	cmp	r2, r4
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>
 80019fe:	f009 fa17 	bl	800ae30 <__libc_init_array>
 8001a02:	f7fe fdbf 	bl	8000584 <main>
 8001a06:	4770      	bx	lr
 8001a08:	24100000 	.word	0x24100000
 8001a0c:	24000000 	.word	0x24000000
 8001a10:	24000010 	.word	0x24000010
 8001a14:	0800af98 	.word	0x0800af98
 8001a18:	24000010 	.word	0x24000010
 8001a1c:	2400093c 	.word	0x2400093c

08001a20 <ADC_IRQHandler>:
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2a:	2003      	movs	r0, #3
 8001a2c:	f001 faf0 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a30:	f005 ff3a 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_Init+0x68>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	4913      	ldr	r1, [pc, #76]	@ (8001a90 <HAL_Init+0x6c>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_Init+0x68>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <HAL_Init+0x6c>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_Init+0x70>)
 8001a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_Init+0x74>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f000 f814 	bl	8001a9c <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e002      	b.n	8001a84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7e:	f7ff fb1b 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	0800af68 	.word	0x0800af68
 8001a94:	24000004 	.word	0x24000004
 8001a98:	24000000 	.word	0x24000000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_InitTick+0x60>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e021      	b.n	8001af4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_InitTick+0x64>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_InitTick+0x60>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fad5 	bl	8003076 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f001 fa9f 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <HAL_InitTick+0x68>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2400000c 	.word	0x2400000c
 8001b00:	24000000 	.word	0x24000000
 8001b04:	24000008 	.word	0x24000008

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2400000c 	.word	0x2400000c
 8001b2c:	24000938 	.word	0x24000938

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	24000938 	.word	0x24000938

08001b48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3360      	adds	r3, #96	@ 0x60
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3360      	adds	r3, #96	@ 0x60
 8001c32:	461a      	mov	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3330      	adds	r3, #48	@ 0x30
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	211f      	movs	r1, #31
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 011f 	and.w	r1, r3, #31
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f023 0203 	bic.w	r2, r3, #3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0e5b      	lsrs	r3, r3, #25
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	0d1b      	lsrs	r3, r3, #20
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2107      	movs	r1, #7
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	401a      	ands	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0d1b      	lsrs	r3, r3, #20
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0318 	and.w	r3, r3, #24
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d78:	40d9      	lsrs	r1, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	000fffff 	.word	0x000fffff

08001d9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6093      	str	r3, [r2, #8]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	5fffffc0 	.word	0x5fffffc0

08001ddc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	6fffffc0 	.word	0x6fffffc0

08001e2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <LL_ADC_Enable+0x24>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	7fffffc0 	.word	0x7fffffc0

08001e7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_IsEnabled+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_IsEnabled+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <LL_ADC_REG_StartConversion+0x24>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	7fffffc0 	.word	0x7fffffc0

08001ecc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e138      	b.n	80021a4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff f8d9 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff3f 	bl	8001ddc <LL_ADC_IsDeepPowerDownEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff25 	bl	8001db8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff5a 	bl	8001e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d114      	bne.n	8001fa8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff3e 	bl	8001e04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f88:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_ADC_Init+0x294>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	4a88      	ldr	r2, [pc, #544]	@ (80021b0 <HAL_ADC_Init+0x298>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff3d 	bl	8001e2c <LL_ADC_IsInternalRegulatorEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff77 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 8001fde:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 80d2 	bne.w	8002192 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80ce 	bne.w	8002192 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff36 	bl	8001e7c <LL_ADC_IsEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d110      	bne.n	8002038 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002016:	4867      	ldr	r0, [pc, #412]	@ (80021b4 <HAL_ADC_Init+0x29c>)
 8002018:	f7ff ff30 	bl	8001e7c <LL_ADC_IsEnabled>
 800201c:	4604      	mov	r4, r0
 800201e:	4866      	ldr	r0, [pc, #408]	@ (80021b8 <HAL_ADC_Init+0x2a0>)
 8002020:	f7ff ff2c 	bl	8001e7c <LL_ADC_IsEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	4323      	orrs	r3, r4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4619      	mov	r1, r3
 8002032:	4862      	ldr	r0, [pc, #392]	@ (80021bc <HAL_ADC_Init+0x2a4>)
 8002034:	f7ff fd88 	bl	8001b48 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7d5b      	ldrb	r3, [r3, #21]
 800203c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002042:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002048:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7f1b      	ldrb	r3, [r3, #28]
 800204e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7f1b      	ldrb	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	3b01      	subs	r3, #1
 8002062:	045b      	lsls	r3, r3, #17
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4b4c      	ldr	r3, [pc, #304]	@ (80021c0 <HAL_ADC_Init+0x2a8>)
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	69b9      	ldr	r1, [r7, #24]
 8002096:	430b      	orrs	r3, r1
 8002098:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff14 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 80020a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff21 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 80020b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d14a      	bne.n	800214e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d147      	bne.n	800214e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7d1b      	ldrb	r3, [r3, #20]
 80020c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b3c      	ldr	r3, [pc, #240]	@ (80021c4 <HAL_ADC_Init+0x2ac>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	430b      	orrs	r3, r1
 80020de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11b      	bne.n	8002122 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_ADC_Init+0x2b0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020fe:	3a01      	subs	r2, #1
 8002100:	0411      	lsls	r1, r2, #16
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800210c:	4311      	orrs	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002112:	430a      	orrs	r2, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	e007      	b.n	8002132 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fd01 	bl	8002b50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10c      	bne.n	8002170 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	f023 010f 	bic.w	r1, r3, #15
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	@ 0x30
 800216e:	e007      	b.n	8002180 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 020f 	bic.w	r2, r2, #15
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002190:	e007      	b.n	80021a2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3724      	adds	r7, #36	@ 0x24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	24000000 	.word	0x24000000
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022100 	.word	0x40022100
 80021bc:	40022300 	.word	0x40022300
 80021c0:	fff0c003 	.word	0xfff0c003
 80021c4:	ffffbffc 	.word	0xffffbffc
 80021c8:	fc00f81e 	.word	0xfc00f81e

080021cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d8:	484f      	ldr	r0, [pc, #316]	@ (8002318 <HAL_ADC_Start_DMA+0x14c>)
 80021da:	f7ff fddf 	bl	8001d9c <LL_ADC_GetMultimode>
 80021de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe71 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 808c 	bne.w	800230a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_Start_DMA+0x34>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e087      	b.n	8002310 <HAL_ADC_Start_DMA+0x144>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d002      	beq.n	800221a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b09      	cmp	r3, #9
 8002218:	d170      	bne.n	80022fc <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fb88 	bl	8002930 <ADC_Enable>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d163      	bne.n	80022f2 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_ADC_Start_DMA+0x150>)
 8002230:	4013      	ands	r3, r2
 8002232:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <HAL_ADC_Start_DMA+0x154>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d002      	beq.n	800224a <HAL_ADC_Start_DMA+0x7e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e000      	b.n	800224c <HAL_ADC_Start_DMA+0x80>
 800224a:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <HAL_ADC_Start_DMA+0x158>)
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4293      	cmp	r3, r2
 8002252:	d002      	beq.n	800225a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	659a      	str	r2, [r3, #88]	@ 0x58
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_ADC_Start_DMA+0x15c>)
 800228c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4a26      	ldr	r2, [pc, #152]	@ (800232c <HAL_ADC_Start_DMA+0x160>)
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a25      	ldr	r2, [pc, #148]	@ (8002330 <HAL_ADC_Start_DMA+0x164>)
 800229c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	221c      	movs	r2, #28
 80022a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0210 	orr.w	r2, r2, #16
 80022bc:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7ff fd04 	bl	8001cd6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3340      	adds	r3, #64	@ 0x40
 80022d8:	4619      	mov	r1, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f001 fa65 	bl	80037ac <HAL_DMA_Start_IT>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fdda 	bl	8001ea4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80022f0:	e00d      	b.n	800230e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80022fa:	e008      	b.n	800230e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002308:	e001      	b.n	800230e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800230a:	2302      	movs	r3, #2
 800230c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022300 	.word	0x40022300
 800231c:	fffff0fe 	.word	0xfffff0fe
 8002320:	40022100 	.word	0x40022100
 8002324:	40022000 	.word	0x40022000
 8002328:	08002a29 	.word	0x08002a29
 800232c:	08002b01 	.word	0x08002b01
 8002330:	08002b1d 	.word	0x08002b1d

08002334 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b0a1      	sub	sp, #132	@ 0x84
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a95      	ldr	r2, [pc, #596]	@ (80025cc <HAL_ADC_ConfigChannel+0x270>)
 8002376:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x2a>
 8002382:	2302      	movs	r3, #2
 8002384:	e2c0      	b.n	8002908 <HAL_ADC_ConfigChannel+0x5ac>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fd9a 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 82a5 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db2c      	blt.n	8002402 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x6a>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	2201      	movs	r2, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	e016      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x98>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023d6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80023e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	69d1      	ldr	r1, [r2, #28]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	430b      	orrs	r3, r1
 8002400:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff fc35 	bl	8001c7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fd57 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 800241e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fd64 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 800242a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800242c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80a0 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 809c 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	461a      	mov	r2, r3
 800244a:	f7ff fc57 	bl	8001cfc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x118>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	e00a      	b.n	800248a <HAL_ADC_ConfigChannel+0x12e>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d027      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6919      	ldr	r1, [r3, #16]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024a2:	f7ff fb85 	bl	8001bb0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7e5b      	ldrb	r3, [r3, #25]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d102      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x160>
 80024b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80024ba:	e000      	b.n	80024be <HAL_ADC_ConfigChannel+0x162>
 80024bc:	2300      	movs	r3, #0
 80024be:	461a      	mov	r2, r3
 80024c0:	f7ff fbaf 	bl	8001c22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d102      	bne.n	80024da <HAL_ADC_ConfigChannel+0x17e>
 80024d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024d8:	e000      	b.n	80024dc <HAL_ADC_ConfigChannel+0x180>
 80024da:	2300      	movs	r3, #0
 80024dc:	461a      	mov	r2, r3
 80024de:	f7ff fb87 	bl	8001bf0 <LL_ADC_SetDataRightShift>
 80024e2:	e047      	b.n	8002574 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	069b      	lsls	r3, r3, #26
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002506:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800250e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	069b      	lsls	r3, r3, #26
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800252a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002532:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	069b      	lsls	r3, r3, #26
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800254e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	069b      	lsls	r3, r3, #26
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002572:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fc7f 	bl	8001e7c <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 81bb 	bne.w	80028fc <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	461a      	mov	r2, r3
 8002594:	f7ff fbde 	bl	8001d54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a0b      	ldr	r2, [pc, #44]	@ (80025cc <HAL_ADC_ConfigChannel+0x270>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 8130 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x274>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e01b      	b.n	8002604 <HAL_ADC_ConfigChannel+0x2a8>
 80025cc:	47ff0000 	.word	0x47ff0000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80025ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	bf94      	ite	ls
 80025fe:	2301      	movls	r3, #1
 8002600:	2300      	movhi	r3, #0
 8002602:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	2b00      	cmp	r3, #0
 8002606:	d079      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2c8>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	069b      	lsls	r3, r3, #26
 800261e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002622:	e015      	b.n	8002650 <HAL_ADC_ConfigChannel+0x2f4>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002634:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x314>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	e017      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x344>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800267e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800268c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	ea42 0103 	orr.w	r1, r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x36a>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	051b      	lsls	r3, r3, #20
 80026c4:	e018      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x39c>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80026e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f8:	430b      	orrs	r3, r1
 80026fa:	e07e      	b.n	80027fa <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x3bc>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	069b      	lsls	r3, r3, #26
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002716:	e015      	b.n	8002744 <HAL_ADC_ConfigChannel+0x3e8>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	069b      	lsls	r3, r3, #26
 8002740:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x408>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	e017      	b.n	8002794 <HAL_ADC_ConfigChannel+0x438>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	61bb      	str	r3, [r7, #24]
  return result;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x464>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	3b1e      	subs	r3, #30
 80027b8:	051b      	lsls	r3, r3, #20
 80027ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027be:	e01b      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x49c>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	60fb      	str	r3, [r7, #12]
  return result;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	051b      	lsls	r3, r3, #20
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	430b      	orrs	r3, r1
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	6892      	ldr	r2, [r2, #8]
 80027fe:	4619      	mov	r1, r3
 8002800:	f7ff fa7c 	bl	8001cfc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da77      	bge.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280c:	4840      	ldr	r0, [pc, #256]	@ (8002910 <HAL_ADC_ConfigChannel+0x5b4>)
 800280e:	f7ff f9c1 	bl	8001b94 <LL_ADC_GetCommonPathInternalCh>
 8002812:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002814:	483f      	ldr	r0, [pc, #252]	@ (8002914 <HAL_ADC_ConfigChannel+0x5b8>)
 8002816:	f7ff fb31 	bl	8001e7c <LL_ADC_IsEnabled>
 800281a:	4604      	mov	r4, r0
 800281c:	483e      	ldr	r0, [pc, #248]	@ (8002918 <HAL_ADC_ConfigChannel+0x5bc>)
 800281e:	f7ff fb2d 	bl	8001e7c <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	4323      	orrs	r3, r4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d155      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3b      	ldr	r2, [pc, #236]	@ (800291c <HAL_ADC_ConfigChannel+0x5c0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d122      	bne.n	800287a <HAL_ADC_ConfigChannel+0x51e>
 8002834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11d      	bne.n	800287a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a35      	ldr	r2, [pc, #212]	@ (8002918 <HAL_ADC_ConfigChannel+0x5bc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d159      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800284e:	4619      	mov	r1, r3
 8002850:	482f      	ldr	r0, [pc, #188]	@ (8002910 <HAL_ADC_ConfigChannel+0x5b4>)
 8002852:	f7ff f98c 	bl	8001b6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002856:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HAL_ADC_ConfigChannel+0x5c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <HAL_ADC_ConfigChannel+0x5c8>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	3301      	adds	r3, #1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800286a:	e002      	b.n	8002872 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3b01      	subs	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f9      	bne.n	800286c <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002878:	e040      	b.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2a      	ldr	r2, [pc, #168]	@ (8002928 <HAL_ADC_ConfigChannel+0x5cc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d111      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x54c>
 8002884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002886:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <HAL_ADC_ConfigChannel+0x5bc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d131      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289e:	4619      	mov	r1, r3
 80028a0:	481b      	ldr	r0, [pc, #108]	@ (8002910 <HAL_ADC_ConfigChannel+0x5b4>)
 80028a2:	f7ff f964 	bl	8001b6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a6:	e029      	b.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_ADC_ConfigChannel+0x5d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d124      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
 80028b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11f      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <HAL_ADC_ConfigChannel+0x5bc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d11a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028cc:	4619      	mov	r1, r3
 80028ce:	4810      	ldr	r0, [pc, #64]	@ (8002910 <HAL_ADC_ConfigChannel+0x5b4>)
 80028d0:	f7ff f94d 	bl	8001b6e <LL_ADC_SetCommonPathInternalCh>
 80028d4:	e012      	b.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028e8:	e008      	b.n	80028fc <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002904:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002908:	4618      	mov	r0, r3
 800290a:	3784      	adds	r7, #132	@ 0x84
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}
 8002910:	40022300 	.word	0x40022300
 8002914:	40022000 	.word	0x40022000
 8002918:	40022100 	.word	0x40022100
 800291c:	cb840000 	.word	0xcb840000
 8002920:	24000000 	.word	0x24000000
 8002924:	053e2d63 	.word	0x053e2d63
 8002928:	bac04000 	.word	0xbac04000
 800292c:	cfb80000 	.word	0xcfb80000

08002930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fa9d 	bl	8001e7c <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d161      	bne.n	8002a0c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	4b32      	ldr	r3, [pc, #200]	@ (8002a18 <ADC_Enable+0xe8>)
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e04d      	b.n	8002a0e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fa6c 	bl	8001e54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800297c:	f7ff f8d8 	bl	8001b30 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002982:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <ADC_Enable+0xec>)
 8002984:	f7ff fa0a 	bl	8001d9c <LL_ADC_GetMultimode>
 8002988:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <ADC_Enable+0xf0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d002      	beq.n	800299a <ADC_Enable+0x6a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e000      	b.n	800299c <ADC_Enable+0x6c>
 800299a:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <ADC_Enable+0xf4>)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d02c      	beq.n	80029fe <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d130      	bne.n	8002a0c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029aa:	e028      	b.n	80029fe <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fa63 	bl	8001e7c <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d104      	bne.n	80029c6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fa47 	bl	8001e54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029c6:	f7ff f8b3 	bl	8001b30 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d914      	bls.n	80029fe <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d00d      	beq.n	80029fe <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d1cf      	bne.n	80029ac <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	8000003f 	.word	0x8000003f
 8002a1c:	40022300 	.word	0x40022300
 8002a20:	40022100 	.word	0x40022100
 8002a24:	40022000 	.word	0x40022000

08002a28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d14b      	bne.n	8002ada <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d021      	beq.n	8002aa0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f8f9 	bl	8001c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d032      	beq.n	8002ad2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d12b      	bne.n	8002ad2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11f      	bne.n	8002ad2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a9e:	e018      	b.n	8002ad2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d111      	bne.n	8002ad2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7fe fa70 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ad8:	e00e      	b.n	8002af8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fc2e 	bl	8002348 <HAL_ADC_ErrorCallback>
}
 8002aec:	e004      	b.n	8002af8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff fc10 	bl	8002334 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff fc00 	bl	8002348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b58:	4b60      	ldr	r3, [pc, #384]	@ (8002cdc <ADC_ConfigureBoostMode+0x18c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01c      	beq.n	8002b9e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b64:	f005 f81a 	bl	8007b9c <HAL_RCC_GetHCLKFreq>
 8002b68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b72:	d010      	beq.n	8002b96 <ADC_ConfigureBoostMode+0x46>
 8002b74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b78:	d873      	bhi.n	8002c62 <ADC_ConfigureBoostMode+0x112>
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7e:	d002      	beq.n	8002b86 <ADC_ConfigureBoostMode+0x36>
 8002b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b84:	d16d      	bne.n	8002c62 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
        break;
 8002b94:	e068      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	60fb      	str	r3, [r7, #12]
        break;
 8002b9c:	e064      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	f006 f9fd 	bl	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002baa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bb4:	d051      	beq.n	8002c5a <ADC_ConfigureBoostMode+0x10a>
 8002bb6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002bba:	d854      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002bbc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bc0:	d047      	beq.n	8002c52 <ADC_ConfigureBoostMode+0x102>
 8002bc2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bc6:	d84e      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002bc8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bcc:	d03d      	beq.n	8002c4a <ADC_ConfigureBoostMode+0xfa>
 8002bce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bd2:	d848      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002bd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bd8:	d033      	beq.n	8002c42 <ADC_ConfigureBoostMode+0xf2>
 8002bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bde:	d842      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002be0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002be4:	d029      	beq.n	8002c3a <ADC_ConfigureBoostMode+0xea>
 8002be6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bea:	d83c      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002bec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bf0:	d01a      	beq.n	8002c28 <ADC_ConfigureBoostMode+0xd8>
 8002bf2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bf6:	d836      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002bf8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bfc:	d014      	beq.n	8002c28 <ADC_ConfigureBoostMode+0xd8>
 8002bfe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c02:	d830      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c08:	d00e      	beq.n	8002c28 <ADC_ConfigureBoostMode+0xd8>
 8002c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c0e:	d82a      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002c10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c14:	d008      	beq.n	8002c28 <ADC_ConfigureBoostMode+0xd8>
 8002c16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c1a:	d824      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x116>
 8002c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c20:	d002      	beq.n	8002c28 <ADC_ConfigureBoostMode+0xd8>
 8002c22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c26:	d11e      	bne.n	8002c66 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
        break;
 8002c38:	e016      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
        break;
 8002c40:	e012      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	60fb      	str	r3, [r7, #12]
        break;
 8002c48:	e00e      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	60fb      	str	r3, [r7, #12]
        break;
 8002c50:	e00a      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	09db      	lsrs	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
        break;
 8002c58:	e006      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	60fb      	str	r3, [r7, #12]
        break;
 8002c60:	e002      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
        break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002c66:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <ADC_ConfigureBoostMode+0x190>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d808      	bhi.n	8002c88 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c84:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c86:	e025      	b.n	8002cd4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ce4 <ADC_ConfigureBoostMode+0x194>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d80a      	bhi.n	8002ca6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	e016      	b.n	8002cd4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <ADC_ConfigureBoostMode+0x198>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d80a      	bhi.n	8002cc4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	e007      	b.n	8002cd4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40022300 	.word	0x40022300
 8002ce0:	005f5e10 	.word	0x005f5e10
 8002ce4:	00bebc20 	.word	0x00bebc20
 8002ce8:	017d7840 	.word	0x017d7840

08002cec <LL_ADC_IsEnabled>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <LL_ADC_IsEnabled+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_ADC_IsEnabled+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b09f      	sub	sp, #124	@ 0x7c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e080      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d70:	4b3c      	ldr	r3, [pc, #240]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e001      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e05f      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffb9 	bl	8002d12 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffb3 	bl	8002d12 <LL_ADC_REG_IsConversionOngoing>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d141      	bne.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13e      	bne.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002dba:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd6:	4822      	ldr	r0, [pc, #136]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002dd8:	f7ff ff88 	bl	8002cec <LL_ADC_IsEnabled>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4821      	ldr	r0, [pc, #132]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002de0:	f7ff ff84 	bl	8002cec <LL_ADC_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4323      	orrs	r3, r4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d12e      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6811      	ldr	r1, [r2, #0]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e04:	e021      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e12:	4813      	ldr	r0, [pc, #76]	@ (8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e14:	f7ff ff6a 	bl	8002cec <LL_ADC_IsEnabled>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	4812      	ldr	r0, [pc, #72]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e1c:	f7ff ff66 	bl	8002cec <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4323      	orrs	r3, r4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d110      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e34:	e009      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e48:	e000      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	377c      	adds	r7, #124	@ 0x7c
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40022100 	.word	0x40022100
 8002e68:	40022300 	.word	0x40022300
 8002e6c:	fffff0e0 	.word	0xfffff0e0

08002e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00
 8002eb4:	05fa0000 	.word	0x05fa0000

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4907      	ldr	r1, [pc, #28]	@ (8002f0c <__NVIC_EnableIRQ+0x38>)
 8002eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	@ (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff8e 	bl	8002f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	@ (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff29 	bl	8002e70 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff40 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff90 	bl	8002f64 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5f 	bl	8002f10 <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff33 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa4 	bl	8002fcc <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7fe fd4a 	bl	8001b30 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e37d      	b.n	80037a4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a66      	ldr	r2, [pc, #408]	@ (8003248 <HAL_DMA_Init+0x1b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_DMA_Init+0x1bc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d045      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a63      	ldr	r2, [pc, #396]	@ (8003250 <HAL_DMA_Init+0x1c0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a62      	ldr	r2, [pc, #392]	@ (8003254 <HAL_DMA_Init+0x1c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d03b      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a60      	ldr	r2, [pc, #384]	@ (8003258 <HAL_DMA_Init+0x1c8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d036      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5f      	ldr	r2, [pc, #380]	@ (800325c <HAL_DMA_Init+0x1cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d031      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003260 <HAL_DMA_Init+0x1d0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02c      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <HAL_DMA_Init+0x1d4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d027      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003268 <HAL_DMA_Init+0x1d8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_DMA_Init+0x1dc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01d      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a57      	ldr	r2, [pc, #348]	@ (8003270 <HAL_DMA_Init+0x1e0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_DMA_Init+0x1e4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a54      	ldr	r2, [pc, #336]	@ (8003278 <HAL_DMA_Init+0x1e8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a53      	ldr	r2, [pc, #332]	@ (800327c <HAL_DMA_Init+0x1ec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a51      	ldr	r2, [pc, #324]	@ (8003280 <HAL_DMA_Init+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a50      	ldr	r2, [pc, #320]	@ (8003284 <HAL_DMA_Init+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_DMA_Init+0xbc>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_DMA_Init+0xbe>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 813c 	beq.w	80033cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <HAL_DMA_Init+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_Init+0x174>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a36      	ldr	r2, [pc, #216]	@ (800324c <HAL_DMA_Init+0x1bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_DMA_Init+0x1c0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a33      	ldr	r2, [pc, #204]	@ (8003254 <HAL_DMA_Init+0x1c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_Init+0x174>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a31      	ldr	r2, [pc, #196]	@ (8003258 <HAL_DMA_Init+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a30      	ldr	r2, [pc, #192]	@ (800325c <HAL_DMA_Init+0x1cc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <HAL_DMA_Init+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_DMA_Init+0x1d4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <HAL_DMA_Init+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <HAL_DMA_Init+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a28      	ldr	r2, [pc, #160]	@ (8003270 <HAL_DMA_Init+0x1e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_DMA_Init+0x1e4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a25      	ldr	r2, [pc, #148]	@ (8003278 <HAL_DMA_Init+0x1e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a24      	ldr	r2, [pc, #144]	@ (800327c <HAL_DMA_Init+0x1ec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <HAL_DMA_Init+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <HAL_DMA_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <HAL_DMA_Init+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e007      	b.n	8003226 <HAL_DMA_Init+0x196>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003226:	e02f      	b.n	8003288 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003228:	f7fe fc82 	bl	8001b30 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b05      	cmp	r3, #5
 8003234:	d928      	bls.n	8003288 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e2ad      	b.n	80037a4 <HAL_DMA_Init+0x714>
 8003248:	40020010 	.word	0x40020010
 800324c:	40020028 	.word	0x40020028
 8003250:	40020040 	.word	0x40020040
 8003254:	40020058 	.word	0x40020058
 8003258:	40020070 	.word	0x40020070
 800325c:	40020088 	.word	0x40020088
 8003260:	400200a0 	.word	0x400200a0
 8003264:	400200b8 	.word	0x400200b8
 8003268:	40020410 	.word	0x40020410
 800326c:	40020428 	.word	0x40020428
 8003270:	40020440 	.word	0x40020440
 8003274:	40020458 	.word	0x40020458
 8003278:	40020470 	.word	0x40020470
 800327c:	40020488 	.word	0x40020488
 8003280:	400204a0 	.word	0x400204a0
 8003284:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1c8      	bne.n	8003228 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_DMA_Init+0x3e0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	4313      	orrs	r3, r2
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b28      	cmp	r3, #40	@ 0x28
 80032f2:	d903      	bls.n	80032fc <HAL_DMA_Init+0x26c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80032fa:	d91f      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b3e      	cmp	r3, #62	@ 0x3e
 8003302:	d903      	bls.n	800330c <HAL_DMA_Init+0x27c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b42      	cmp	r3, #66	@ 0x42
 800330a:	d917      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b46      	cmp	r3, #70	@ 0x46
 8003312:	d903      	bls.n	800331c <HAL_DMA_Init+0x28c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b48      	cmp	r3, #72	@ 0x48
 800331a:	d90f      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b4e      	cmp	r3, #78	@ 0x4e
 8003322:	d903      	bls.n	800332c <HAL_DMA_Init+0x29c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b52      	cmp	r3, #82	@ 0x52
 800332a:	d907      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b73      	cmp	r3, #115	@ 0x73
 8003332:	d905      	bls.n	8003340 <HAL_DMA_Init+0x2b0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b77      	cmp	r3, #119	@ 0x77
 800333a:	d801      	bhi.n	8003340 <HAL_DMA_Init+0x2b0>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_DMA_Init+0x2b2>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800334c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	2b04      	cmp	r3, #4
 8003376:	d117      	bne.n	80033a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 fe70 	bl	8005070 <DMA_CheckFifoParam>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e1fd      	b.n	80037a4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fdab 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	223f      	movs	r2, #63	@ 0x3f
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	e0fd      	b.n	80035c8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_DMA_Init+0x3e4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d04a      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <HAL_DMA_Init+0x3e8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d045      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_DMA_Init+0x3ec>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d040      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a24      	ldr	r2, [pc, #144]	@ (8003480 <HAL_DMA_Init+0x3f0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d03b      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_DMA_Init+0x3f4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d036      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <HAL_DMA_Init+0x3f8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d031      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_DMA_Init+0x3fc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02c      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_DMA_Init+0x400>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d027      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_DMA_Init+0x404>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_DMA_Init+0x408>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_DMA_Init+0x40c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_DMA_Init+0x410>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <HAL_DMA_Init+0x414>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <HAL_DMA_Init+0x418>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <HAL_DMA_Init+0x41c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <HAL_DMA_Init+0x420>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d123      	bne.n	80034b4 <HAL_DMA_Init+0x424>
 800346c:	2301      	movs	r3, #1
 800346e:	e022      	b.n	80034b6 <HAL_DMA_Init+0x426>
 8003470:	fe10803f 	.word	0xfe10803f
 8003474:	48022c08 	.word	0x48022c08
 8003478:	48022c1c 	.word	0x48022c1c
 800347c:	48022c30 	.word	0x48022c30
 8003480:	48022c44 	.word	0x48022c44
 8003484:	48022c58 	.word	0x48022c58
 8003488:	48022c6c 	.word	0x48022c6c
 800348c:	48022c80 	.word	0x48022c80
 8003490:	48022c94 	.word	0x48022c94
 8003494:	58025408 	.word	0x58025408
 8003498:	5802541c 	.word	0x5802541c
 800349c:	58025430 	.word	0x58025430
 80034a0:	58025444 	.word	0x58025444
 80034a4:	58025458 	.word	0x58025458
 80034a8:	5802546c 	.word	0x5802546c
 80034ac:	58025480 	.word	0x58025480
 80034b0:	58025494 	.word	0x58025494
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d07d      	beq.n	80035b6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7f      	ldr	r2, [pc, #508]	@ (80036bc <HAL_DMA_Init+0x62c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d021      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a7d      	ldr	r2, [pc, #500]	@ (80036c0 <HAL_DMA_Init+0x630>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01c      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7c      	ldr	r2, [pc, #496]	@ (80036c4 <HAL_DMA_Init+0x634>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d017      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7a      	ldr	r2, [pc, #488]	@ (80036c8 <HAL_DMA_Init+0x638>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d012      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a79      	ldr	r2, [pc, #484]	@ (80036cc <HAL_DMA_Init+0x63c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00d      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a77      	ldr	r2, [pc, #476]	@ (80036d0 <HAL_DMA_Init+0x640>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d008      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a76      	ldr	r2, [pc, #472]	@ (80036d4 <HAL_DMA_Init+0x644>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <HAL_DMA_Init+0x478>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a74      	ldr	r2, [pc, #464]	@ (80036d8 <HAL_DMA_Init+0x648>)
 8003506:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4b6e      	ldr	r3, [pc, #440]	@ (80036dc <HAL_DMA_Init+0x64c>)
 8003524:	4013      	ands	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x4b2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b80      	cmp	r3, #128	@ 0x80
 8003536:	d102      	bne.n	800353e <HAL_DMA_Init+0x4ae>
 8003538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800353c:	e002      	b.n	8003544 <HAL_DMA_Init+0x4b4>
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_DMA_Init+0x4b4>
 8003542:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68d2      	ldr	r2, [r2, #12]
 8003548:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800354a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003552:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800355a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003562:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800356a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003572:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4b55      	ldr	r3, [pc, #340]	@ (80036e0 <HAL_DMA_Init+0x650>)
 800358a:	4413      	add	r3, r2
 800358c:	4a55      	ldr	r2, [pc, #340]	@ (80036e4 <HAL_DMA_Init+0x654>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	009a      	lsls	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f001 fcb6 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 80035a0:	4603      	mov	r3, r0
 80035a2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2201      	movs	r2, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	e008      	b.n	80035c8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2240      	movs	r2, #64	@ 0x40
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ed      	b.n	80037a4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <HAL_DMA_Init+0x658>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d072      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a45      	ldr	r2, [pc, #276]	@ (80036ec <HAL_DMA_Init+0x65c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d06d      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a43      	ldr	r2, [pc, #268]	@ (80036f0 <HAL_DMA_Init+0x660>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d068      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a42      	ldr	r2, [pc, #264]	@ (80036f4 <HAL_DMA_Init+0x664>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d063      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <HAL_DMA_Init+0x668>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d05e      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_DMA_Init+0x66c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d059      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3d      	ldr	r2, [pc, #244]	@ (8003700 <HAL_DMA_Init+0x670>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d054      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_DMA_Init+0x674>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04f      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3a      	ldr	r2, [pc, #232]	@ (8003708 <HAL_DMA_Init+0x678>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a39      	ldr	r2, [pc, #228]	@ (800370c <HAL_DMA_Init+0x67c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d045      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a37      	ldr	r2, [pc, #220]	@ (8003710 <HAL_DMA_Init+0x680>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d040      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a36      	ldr	r2, [pc, #216]	@ (8003714 <HAL_DMA_Init+0x684>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d03b      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a34      	ldr	r2, [pc, #208]	@ (8003718 <HAL_DMA_Init+0x688>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	@ (800371c <HAL_DMA_Init+0x68c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	@ (8003720 <HAL_DMA_Init+0x690>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a30      	ldr	r2, [pc, #192]	@ (8003724 <HAL_DMA_Init+0x694>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d027      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <HAL_DMA_Init+0x62c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_DMA_Init+0x630>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01d      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_DMA_Init+0x634>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a0f      	ldr	r2, [pc, #60]	@ (80036c8 <HAL_DMA_Init+0x638>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <HAL_DMA_Init+0x63c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0c      	ldr	r2, [pc, #48]	@ (80036d0 <HAL_DMA_Init+0x640>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_DMA_Init+0x644>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a09      	ldr	r2, [pc, #36]	@ (80036d8 <HAL_DMA_Init+0x648>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d137      	bne.n	8003728 <HAL_DMA_Init+0x698>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e036      	b.n	800372a <HAL_DMA_Init+0x69a>
 80036bc:	58025408 	.word	0x58025408
 80036c0:	5802541c 	.word	0x5802541c
 80036c4:	58025430 	.word	0x58025430
 80036c8:	58025444 	.word	0x58025444
 80036cc:	58025458 	.word	0x58025458
 80036d0:	5802546c 	.word	0x5802546c
 80036d4:	58025480 	.word	0x58025480
 80036d8:	58025494 	.word	0x58025494
 80036dc:	fffe000f 	.word	0xfffe000f
 80036e0:	a7fdabf8 	.word	0xa7fdabf8
 80036e4:	cccccccd 	.word	0xcccccccd
 80036e8:	40020010 	.word	0x40020010
 80036ec:	40020028 	.word	0x40020028
 80036f0:	40020040 	.word	0x40020040
 80036f4:	40020058 	.word	0x40020058
 80036f8:	40020070 	.word	0x40020070
 80036fc:	40020088 	.word	0x40020088
 8003700:	400200a0 	.word	0x400200a0
 8003704:	400200b8 	.word	0x400200b8
 8003708:	40020410 	.word	0x40020410
 800370c:	40020428 	.word	0x40020428
 8003710:	40020440 	.word	0x40020440
 8003714:	40020458 	.word	0x40020458
 8003718:	40020470 	.word	0x40020470
 800371c:	40020488 	.word	0x40020488
 8003720:	400204a0 	.word	0x400204a0
 8003724:	400204b8 	.word	0x400204b8
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d032      	beq.n	8003794 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f001 fd1a 	bl	8005168 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b80      	cmp	r3, #128	@ 0x80
 800373a:	d102      	bne.n	8003742 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003756:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_DMA_Init+0x6f2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d80c      	bhi.n	8003782 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fd97 	bl	800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	e008      	b.n	8003794 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e226      	b.n	8003c16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Start_IT+0x2a>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e21f      	b.n	8003c16 <HAL_DMA_Start_IT+0x46a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 820a 	bne.w	8003c00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a68      	ldr	r2, [pc, #416]	@ (80039a0 <HAL_DMA_Start_IT+0x1f4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a66      	ldr	r2, [pc, #408]	@ (80039a4 <HAL_DMA_Start_IT+0x1f8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_DMA_Start_IT+0x1fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a63      	ldr	r2, [pc, #396]	@ (80039ac <HAL_DMA_Start_IT+0x200>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a62      	ldr	r2, [pc, #392]	@ (80039b0 <HAL_DMA_Start_IT+0x204>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a60      	ldr	r2, [pc, #384]	@ (80039b4 <HAL_DMA_Start_IT+0x208>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_DMA_Start_IT+0x20c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_DMA_Start_IT+0x210>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5c      	ldr	r2, [pc, #368]	@ (80039c0 <HAL_DMA_Start_IT+0x214>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5a      	ldr	r2, [pc, #360]	@ (80039c4 <HAL_DMA_Start_IT+0x218>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	@ (80039c8 <HAL_DMA_Start_IT+0x21c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_DMA_Start_IT+0x220>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <HAL_DMA_Start_IT+0x224>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a54      	ldr	r2, [pc, #336]	@ (80039d4 <HAL_DMA_Start_IT+0x228>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a53      	ldr	r2, [pc, #332]	@ (80039d8 <HAL_DMA_Start_IT+0x22c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a51      	ldr	r2, [pc, #324]	@ (80039dc <HAL_DMA_Start_IT+0x230>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <HAL_DMA_Start_IT+0x100>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <HAL_DMA_Start_IT+0x110>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 f93e 	bl	8004b44 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a34      	ldr	r2, [pc, #208]	@ (80039a0 <HAL_DMA_Start_IT+0x1f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d04a      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a33      	ldr	r2, [pc, #204]	@ (80039a4 <HAL_DMA_Start_IT+0x1f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d045      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_DMA_Start_IT+0x1fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d040      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a30      	ldr	r2, [pc, #192]	@ (80039ac <HAL_DMA_Start_IT+0x200>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d03b      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2e      	ldr	r2, [pc, #184]	@ (80039b0 <HAL_DMA_Start_IT+0x204>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d036      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <HAL_DMA_Start_IT+0x208>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d031      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2b      	ldr	r2, [pc, #172]	@ (80039b8 <HAL_DMA_Start_IT+0x20c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02c      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <HAL_DMA_Start_IT+0x210>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d027      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <HAL_DMA_Start_IT+0x214>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_DMA_Start_IT+0x218>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a25      	ldr	r2, [pc, #148]	@ (80039c8 <HAL_DMA_Start_IT+0x21c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a24      	ldr	r2, [pc, #144]	@ (80039cc <HAL_DMA_Start_IT+0x220>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <HAL_DMA_Start_IT+0x224>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <HAL_DMA_Start_IT+0x228>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_DMA_Start_IT+0x22c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_DMA_Start_IT+0x230>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_DMA_Start_IT+0x1c0>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_DMA_Start_IT+0x1c2>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 021e 	bic.w	r2, r3, #30
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0216 	orr.w	r2, r2, #22
 8003984:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03e      	beq.n	8003a0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0208 	orr.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e035      	b.n	8003a0c <HAL_DMA_Start_IT+0x260>
 80039a0:	40020010 	.word	0x40020010
 80039a4:	40020028 	.word	0x40020028
 80039a8:	40020040 	.word	0x40020040
 80039ac:	40020058 	.word	0x40020058
 80039b0:	40020070 	.word	0x40020070
 80039b4:	40020088 	.word	0x40020088
 80039b8:	400200a0 	.word	0x400200a0
 80039bc:	400200b8 	.word	0x400200b8
 80039c0:	40020410 	.word	0x40020410
 80039c4:	40020428 	.word	0x40020428
 80039c8:	40020440 	.word	0x40020440
 80039cc:	40020458 	.word	0x40020458
 80039d0:	40020470 	.word	0x40020470
 80039d4:	40020488 	.word	0x40020488
 80039d8:	400204a0 	.word	0x400204a0
 80039dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 020e 	bic.w	r2, r3, #14
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 020a 	orr.w	r2, r2, #10
 80039f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0204 	orr.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a83      	ldr	r2, [pc, #524]	@ (8003c20 <HAL_DMA_Start_IT+0x474>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d072      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a82      	ldr	r2, [pc, #520]	@ (8003c24 <HAL_DMA_Start_IT+0x478>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d06d      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a80      	ldr	r2, [pc, #512]	@ (8003c28 <HAL_DMA_Start_IT+0x47c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d068      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003c2c <HAL_DMA_Start_IT+0x480>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d063      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7d      	ldr	r2, [pc, #500]	@ (8003c30 <HAL_DMA_Start_IT+0x484>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d05e      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7c      	ldr	r2, [pc, #496]	@ (8003c34 <HAL_DMA_Start_IT+0x488>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d059      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c38 <HAL_DMA_Start_IT+0x48c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d054      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a79      	ldr	r2, [pc, #484]	@ (8003c3c <HAL_DMA_Start_IT+0x490>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d04f      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a77      	ldr	r2, [pc, #476]	@ (8003c40 <HAL_DMA_Start_IT+0x494>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a76      	ldr	r2, [pc, #472]	@ (8003c44 <HAL_DMA_Start_IT+0x498>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a74      	ldr	r2, [pc, #464]	@ (8003c48 <HAL_DMA_Start_IT+0x49c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	@ (8003c4c <HAL_DMA_Start_IT+0x4a0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a71      	ldr	r2, [pc, #452]	@ (8003c50 <HAL_DMA_Start_IT+0x4a4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a70      	ldr	r2, [pc, #448]	@ (8003c54 <HAL_DMA_Start_IT+0x4a8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c58 <HAL_DMA_Start_IT+0x4ac>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8003c5c <HAL_DMA_Start_IT+0x4b0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8003c60 <HAL_DMA_Start_IT+0x4b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6a      	ldr	r2, [pc, #424]	@ (8003c64 <HAL_DMA_Start_IT+0x4b8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	@ (8003c68 <HAL_DMA_Start_IT+0x4bc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a67      	ldr	r2, [pc, #412]	@ (8003c6c <HAL_DMA_Start_IT+0x4c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a65      	ldr	r2, [pc, #404]	@ (8003c70 <HAL_DMA_Start_IT+0x4c4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a64      	ldr	r2, [pc, #400]	@ (8003c74 <HAL_DMA_Start_IT+0x4c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a62      	ldr	r2, [pc, #392]	@ (8003c78 <HAL_DMA_Start_IT+0x4cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a61      	ldr	r2, [pc, #388]	@ (8003c7c <HAL_DMA_Start_IT+0x4d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Start_IT+0x354>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_Start_IT+0x356>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01a      	beq.n	8003b3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <HAL_DMA_Start_IT+0x474>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04a      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a36      	ldr	r2, [pc, #216]	@ (8003c24 <HAL_DMA_Start_IT+0x478>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d045      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	@ (8003c28 <HAL_DMA_Start_IT+0x47c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d040      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a33      	ldr	r2, [pc, #204]	@ (8003c2c <HAL_DMA_Start_IT+0x480>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d03b      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_DMA_Start_IT+0x484>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d036      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a30      	ldr	r2, [pc, #192]	@ (8003c34 <HAL_DMA_Start_IT+0x488>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d031      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c38 <HAL_DMA_Start_IT+0x48c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d02c      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2d      	ldr	r2, [pc, #180]	@ (8003c3c <HAL_DMA_Start_IT+0x490>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d027      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2b      	ldr	r2, [pc, #172]	@ (8003c40 <HAL_DMA_Start_IT+0x494>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <HAL_DMA_Start_IT+0x498>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01d      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <HAL_DMA_Start_IT+0x49c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a27      	ldr	r2, [pc, #156]	@ (8003c4c <HAL_DMA_Start_IT+0x4a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	@ (8003c50 <HAL_DMA_Start_IT+0x4a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_DMA_Start_IT+0x4a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_DMA_Start_IT+0x4ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	@ (8003c5c <HAL_DMA_Start_IT+0x4b0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <HAL_DMA_Start_IT+0x442>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e012      	b.n	8003c14 <HAL_DMA_Start_IT+0x468>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e009      	b.n	8003c14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
 8003c60:	58025408 	.word	0x58025408
 8003c64:	5802541c 	.word	0x5802541c
 8003c68:	58025430 	.word	0x58025430
 8003c6c:	58025444 	.word	0x58025444
 8003c70:	58025458 	.word	0x58025458
 8003c74:	5802546c 	.word	0x5802546c
 8003c78:	58025480 	.word	0x58025480
 8003c7c:	58025494 	.word	0x58025494

08003c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	@ 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c8c:	4b67      	ldr	r3, [pc, #412]	@ (8003e2c <HAL_DMA_IRQHandler+0x1ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a67      	ldr	r2, [pc, #412]	@ (8003e30 <HAL_DMA_IRQHandler+0x1b0>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e34 <HAL_DMA_IRQHandler+0x1b4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e38 <HAL_DMA_IRQHandler+0x1b8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5c      	ldr	r2, [pc, #368]	@ (8003e3c <HAL_DMA_IRQHandler+0x1bc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_DMA_IRQHandler+0x1c0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a59      	ldr	r2, [pc, #356]	@ (8003e44 <HAL_DMA_IRQHandler+0x1c4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a57      	ldr	r2, [pc, #348]	@ (8003e48 <HAL_DMA_IRQHandler+0x1c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a56      	ldr	r2, [pc, #344]	@ (8003e4c <HAL_DMA_IRQHandler+0x1cc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a54      	ldr	r2, [pc, #336]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a53      	ldr	r2, [pc, #332]	@ (8003e54 <HAL_DMA_IRQHandler+0x1d4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_DMA_IRQHandler+0x1d8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a50      	ldr	r2, [pc, #320]	@ (8003e5c <HAL_DMA_IRQHandler+0x1dc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a4e      	ldr	r2, [pc, #312]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e64 <HAL_DMA_IRQHandler+0x1e4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	@ (8003e68 <HAL_DMA_IRQHandler+0x1e8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <HAL_DMA_IRQHandler+0x1ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a48      	ldr	r2, [pc, #288]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_IRQHandler+0xd6>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 842b 	beq.w	80045b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2208      	movs	r2, #8
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a2 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <HAL_DMA_IRQHandler+0x1b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2d      	ldr	r2, [pc, #180]	@ (8003e38 <HAL_DMA_IRQHandler+0x1b8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <HAL_DMA_IRQHandler+0x1bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2a      	ldr	r2, [pc, #168]	@ (8003e40 <HAL_DMA_IRQHandler+0x1c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <HAL_DMA_IRQHandler+0x1c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a27      	ldr	r2, [pc, #156]	@ (8003e48 <HAL_DMA_IRQHandler+0x1c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a25      	ldr	r2, [pc, #148]	@ (8003e4c <HAL_DMA_IRQHandler+0x1cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <HAL_DMA_IRQHandler+0x1d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_DMA_IRQHandler+0x1d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_DMA_IRQHandler+0x1dc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <HAL_DMA_IRQHandler+0x1e4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_DMA_IRQHandler+0x1e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_DMA_IRQHandler+0x1ec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d12f      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x1f4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e02e      	b.n	8003e88 <HAL_DMA_IRQHandler+0x208>
 8003e2a:	bf00      	nop
 8003e2c:	24000000 	.word	0x24000000
 8003e30:	1b4e81b5 	.word	0x1b4e81b5
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06e      	beq.n	8003fac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a69      	ldr	r2, [pc, #420]	@ (8004078 <HAL_DMA_IRQHandler+0x3f8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a67      	ldr	r2, [pc, #412]	@ (800407c <HAL_DMA_IRQHandler+0x3fc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a66      	ldr	r2, [pc, #408]	@ (8004080 <HAL_DMA_IRQHandler+0x400>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a64      	ldr	r2, [pc, #400]	@ (8004084 <HAL_DMA_IRQHandler+0x404>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a63      	ldr	r2, [pc, #396]	@ (8004088 <HAL_DMA_IRQHandler+0x408>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a61      	ldr	r2, [pc, #388]	@ (800408c <HAL_DMA_IRQHandler+0x40c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a60      	ldr	r2, [pc, #384]	@ (8004090 <HAL_DMA_IRQHandler+0x410>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5e      	ldr	r2, [pc, #376]	@ (8004094 <HAL_DMA_IRQHandler+0x414>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5d      	ldr	r2, [pc, #372]	@ (8004098 <HAL_DMA_IRQHandler+0x418>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5b      	ldr	r2, [pc, #364]	@ (800409c <HAL_DMA_IRQHandler+0x41c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a5a      	ldr	r2, [pc, #360]	@ (80040a0 <HAL_DMA_IRQHandler+0x420>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a58      	ldr	r2, [pc, #352]	@ (80040a4 <HAL_DMA_IRQHandler+0x424>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a57      	ldr	r2, [pc, #348]	@ (80040a8 <HAL_DMA_IRQHandler+0x428>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a55      	ldr	r2, [pc, #340]	@ (80040ac <HAL_DMA_IRQHandler+0x42c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_DMA_IRQHandler+0x430>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a52      	ldr	r2, [pc, #328]	@ (80040b4 <HAL_DMA_IRQHandler+0x434>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10a      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x304>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e003      	b.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2201      	movs	r2, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0202 	orr.w	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808f 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004078 <HAL_DMA_IRQHandler+0x3f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_DMA_IRQHandler+0x3fc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <HAL_DMA_IRQHandler+0x400>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a27      	ldr	r2, [pc, #156]	@ (8004084 <HAL_DMA_IRQHandler+0x404>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a26      	ldr	r2, [pc, #152]	@ (8004088 <HAL_DMA_IRQHandler+0x408>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a24      	ldr	r2, [pc, #144]	@ (800408c <HAL_DMA_IRQHandler+0x40c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_DMA_IRQHandler+0x410>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a21      	ldr	r2, [pc, #132]	@ (8004094 <HAL_DMA_IRQHandler+0x414>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a20      	ldr	r2, [pc, #128]	@ (8004098 <HAL_DMA_IRQHandler+0x418>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1e      	ldr	r2, [pc, #120]	@ (800409c <HAL_DMA_IRQHandler+0x41c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <HAL_DMA_IRQHandler+0x420>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <HAL_DMA_IRQHandler+0x424>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <HAL_DMA_IRQHandler+0x428>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <HAL_DMA_IRQHandler+0x42c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_DMA_IRQHandler+0x430>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <HAL_DMA_IRQHandler+0x434>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d12a      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x438>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e023      	b.n	80040c0 <HAL_DMA_IRQHandler+0x440>
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2204      	movs	r2, #4
 80040ce:	409a      	lsls	r2, r3
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2210      	movs	r2, #16
 80040ea:	409a      	lsls	r2, r3
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a6 	beq.w	8004242 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a85      	ldr	r2, [pc, #532]	@ (8004310 <HAL_DMA_IRQHandler+0x690>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a83      	ldr	r2, [pc, #524]	@ (8004314 <HAL_DMA_IRQHandler+0x694>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a82      	ldr	r2, [pc, #520]	@ (8004318 <HAL_DMA_IRQHandler+0x698>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a80      	ldr	r2, [pc, #512]	@ (800431c <HAL_DMA_IRQHandler+0x69c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7f      	ldr	r2, [pc, #508]	@ (8004320 <HAL_DMA_IRQHandler+0x6a0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7d      	ldr	r2, [pc, #500]	@ (8004324 <HAL_DMA_IRQHandler+0x6a4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7c      	ldr	r2, [pc, #496]	@ (8004328 <HAL_DMA_IRQHandler+0x6a8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7a      	ldr	r2, [pc, #488]	@ (800432c <HAL_DMA_IRQHandler+0x6ac>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a79      	ldr	r2, [pc, #484]	@ (8004330 <HAL_DMA_IRQHandler+0x6b0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a77      	ldr	r2, [pc, #476]	@ (8004334 <HAL_DMA_IRQHandler+0x6b4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a76      	ldr	r2, [pc, #472]	@ (8004338 <HAL_DMA_IRQHandler+0x6b8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_DMA_IRQHandler+0x6bc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a73      	ldr	r2, [pc, #460]	@ (8004340 <HAL_DMA_IRQHandler+0x6c0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a71      	ldr	r2, [pc, #452]	@ (8004344 <HAL_DMA_IRQHandler+0x6c4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a70      	ldr	r2, [pc, #448]	@ (8004348 <HAL_DMA_IRQHandler+0x6c8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6e      	ldr	r2, [pc, #440]	@ (800434c <HAL_DMA_IRQHandler+0x6cc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10a      	bne.n	80041ac <HAL_DMA_IRQHandler+0x52c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e009      	b.n	80041c0 <HAL_DMA_IRQHandler+0x540>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03e      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2210      	movs	r2, #16
 80041ce:	409a      	lsls	r2, r3
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d024      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
 8004200:	e01f      	b.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
 8004212:	e016      	b.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2220      	movs	r2, #32
 800424c:	409a      	lsls	r2, r3
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8110 	beq.w	8004478 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <HAL_DMA_IRQHandler+0x690>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d04a      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <HAL_DMA_IRQHandler+0x694>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d045      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a29      	ldr	r2, [pc, #164]	@ (8004318 <HAL_DMA_IRQHandler+0x698>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d040      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_DMA_IRQHandler+0x69c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d03b      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a26      	ldr	r2, [pc, #152]	@ (8004320 <HAL_DMA_IRQHandler+0x6a0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d036      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a25      	ldr	r2, [pc, #148]	@ (8004324 <HAL_DMA_IRQHandler+0x6a4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d031      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <HAL_DMA_IRQHandler+0x6a8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02c      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_DMA_IRQHandler+0x6ac>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d027      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a20      	ldr	r2, [pc, #128]	@ (8004330 <HAL_DMA_IRQHandler+0x6b0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004334 <HAL_DMA_IRQHandler+0x6b4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01d      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <HAL_DMA_IRQHandler+0x6b8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <HAL_DMA_IRQHandler+0x6bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004340 <HAL_DMA_IRQHandler+0x6c0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_DMA_IRQHandler+0x6c4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <HAL_DMA_IRQHandler+0x6c8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a16      	ldr	r2, [pc, #88]	@ (800434c <HAL_DMA_IRQHandler+0x6cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d12b      	bne.n	8004350 <HAL_DMA_IRQHandler+0x6d0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e02a      	b.n	8004364 <HAL_DMA_IRQHandler+0x6e4>
 800430e:	bf00      	nop
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8087 	beq.w	8004478 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2220      	movs	r2, #32
 8004374:	409a      	lsls	r2, r3
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d139      	bne.n	80043fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0216 	bic.w	r2, r2, #22
 8004394:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x736>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0208 	bic.w	r2, r2, #8
 80043c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	223f      	movs	r2, #63	@ 0x3f
 80043d0:	409a      	lsls	r2, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8382 	beq.w	8004af4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
          }
          return;
 80043f8:	e37c      	b.n	8004af4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
 8004426:	e027      	b.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e01e      	b.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10f      	bne.n	8004468 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0210 	bic.w	r2, r2, #16
 8004456:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 833e 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8088 	beq.w	80045a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2204      	movs	r2, #4
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a89      	ldr	r2, [pc, #548]	@ (80046c4 <HAL_DMA_IRQHandler+0xa44>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a88      	ldr	r2, [pc, #544]	@ (80046c8 <HAL_DMA_IRQHandler+0xa48>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d045      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a86      	ldr	r2, [pc, #536]	@ (80046cc <HAL_DMA_IRQHandler+0xa4c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d040      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a85      	ldr	r2, [pc, #532]	@ (80046d0 <HAL_DMA_IRQHandler+0xa50>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a83      	ldr	r2, [pc, #524]	@ (80046d4 <HAL_DMA_IRQHandler+0xa54>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d036      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a82      	ldr	r2, [pc, #520]	@ (80046d8 <HAL_DMA_IRQHandler+0xa58>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d031      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a80      	ldr	r2, [pc, #512]	@ (80046dc <HAL_DMA_IRQHandler+0xa5c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7f      	ldr	r2, [pc, #508]	@ (80046e0 <HAL_DMA_IRQHandler+0xa60>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d027      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a7d      	ldr	r2, [pc, #500]	@ (80046e4 <HAL_DMA_IRQHandler+0xa64>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7c      	ldr	r2, [pc, #496]	@ (80046e8 <HAL_DMA_IRQHandler+0xa68>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01d      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7a      	ldr	r2, [pc, #488]	@ (80046ec <HAL_DMA_IRQHandler+0xa6c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a79      	ldr	r2, [pc, #484]	@ (80046f0 <HAL_DMA_IRQHandler+0xa70>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_DMA_IRQHandler+0xa74>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	@ (80046f8 <HAL_DMA_IRQHandler+0xa78>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_DMA_IRQHandler+0xa7c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	@ (8004700 <HAL_DMA_IRQHandler+0xa80>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_DMA_IRQHandler+0x8ca>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e007      	b.n	800455a <HAL_DMA_IRQHandler+0x8da>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	429a      	cmp	r2, r3
 8004564:	d307      	bcc.n	8004576 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f2      	bne.n	800455a <HAL_DMA_IRQHandler+0x8da>
 8004574:	e000      	b.n	8004578 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004576:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800458e:	e003      	b.n	8004598 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 82aa 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
 80045b2:	e2a4      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a52      	ldr	r2, [pc, #328]	@ (8004704 <HAL_DMA_IRQHandler+0xa84>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d04a      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a51      	ldr	r2, [pc, #324]	@ (8004708 <HAL_DMA_IRQHandler+0xa88>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d045      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a4f      	ldr	r2, [pc, #316]	@ (800470c <HAL_DMA_IRQHandler+0xa8c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d040      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004710 <HAL_DMA_IRQHandler+0xa90>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d03b      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004714 <HAL_DMA_IRQHandler+0xa94>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d036      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_DMA_IRQHandler+0xa98>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a49      	ldr	r2, [pc, #292]	@ (800471c <HAL_DMA_IRQHandler+0xa9c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a48      	ldr	r2, [pc, #288]	@ (8004720 <HAL_DMA_IRQHandler+0xaa0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d027      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a46      	ldr	r2, [pc, #280]	@ (8004724 <HAL_DMA_IRQHandler+0xaa4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a45      	ldr	r2, [pc, #276]	@ (8004728 <HAL_DMA_IRQHandler+0xaa8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01d      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a43      	ldr	r2, [pc, #268]	@ (800472c <HAL_DMA_IRQHandler+0xaac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_DMA_IRQHandler+0xab0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a40      	ldr	r2, [pc, #256]	@ (8004734 <HAL_DMA_IRQHandler+0xab4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3f      	ldr	r2, [pc, #252]	@ (8004738 <HAL_DMA_IRQHandler+0xab8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_DMA_IRQHandler+0xabc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <HAL_DMA_IRQHandler+0xac0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_DMA_IRQHandler+0x9d8>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_DMA_IRQHandler+0x9da>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 824f 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2204      	movs	r2, #4
 8004672:	409a      	lsls	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80dd 	beq.w	8004838 <HAL_DMA_IRQHandler+0xbb8>
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80d7 	beq.w	8004838 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2204      	movs	r2, #4
 8004694:	409a      	lsls	r2, r3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d059      	beq.n	8004758 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14a      	bne.n	8004744 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8220 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c0:	e21a      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
 80046c2:	bf00      	nop
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
 8004704:	48022c08 	.word	0x48022c08
 8004708:	48022c1c 	.word	0x48022c1c
 800470c:	48022c30 	.word	0x48022c30
 8004710:	48022c44 	.word	0x48022c44
 8004714:	48022c58 	.word	0x48022c58
 8004718:	48022c6c 	.word	0x48022c6c
 800471c:	48022c80 	.word	0x48022c80
 8004720:	48022c94 	.word	0x48022c94
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 81d5 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004756:	e1cf      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d160      	bne.n	8004824 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7f      	ldr	r2, [pc, #508]	@ (8004964 <HAL_DMA_IRQHandler+0xce4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d04a      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7d      	ldr	r2, [pc, #500]	@ (8004968 <HAL_DMA_IRQHandler+0xce8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d045      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7c      	ldr	r2, [pc, #496]	@ (800496c <HAL_DMA_IRQHandler+0xcec>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d040      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7a      	ldr	r2, [pc, #488]	@ (8004970 <HAL_DMA_IRQHandler+0xcf0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d03b      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a79      	ldr	r2, [pc, #484]	@ (8004974 <HAL_DMA_IRQHandler+0xcf4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d036      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a77      	ldr	r2, [pc, #476]	@ (8004978 <HAL_DMA_IRQHandler+0xcf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d031      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a76      	ldr	r2, [pc, #472]	@ (800497c <HAL_DMA_IRQHandler+0xcfc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d02c      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a74      	ldr	r2, [pc, #464]	@ (8004980 <HAL_DMA_IRQHandler+0xd00>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d027      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a73      	ldr	r2, [pc, #460]	@ (8004984 <HAL_DMA_IRQHandler+0xd04>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a71      	ldr	r2, [pc, #452]	@ (8004988 <HAL_DMA_IRQHandler+0xd08>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01d      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a70      	ldr	r2, [pc, #448]	@ (800498c <HAL_DMA_IRQHandler+0xd0c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004990 <HAL_DMA_IRQHandler+0xd10>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6d      	ldr	r2, [pc, #436]	@ (8004994 <HAL_DMA_IRQHandler+0xd14>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004998 <HAL_DMA_IRQHandler+0xd18>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a6a      	ldr	r2, [pc, #424]	@ (800499c <HAL_DMA_IRQHandler+0xd1c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a68      	ldr	r2, [pc, #416]	@ (80049a0 <HAL_DMA_IRQHandler+0xd20>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <HAL_DMA_IRQHandler+0xb94>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e007      	b.n	8004824 <HAL_DMA_IRQHandler+0xba4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8165 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004836:	e15f      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2202      	movs	r2, #2
 8004842:	409a      	lsls	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80c5 	beq.w	80049d8 <HAL_DMA_IRQHandler+0xd58>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80bf 	beq.w	80049d8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2202      	movs	r2, #2
 8004864:	409a      	lsls	r2, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d018      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 813a 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004890:	e134      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8130 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a4:	e12a      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8089 	bne.w	80049c4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004964 <HAL_DMA_IRQHandler+0xce4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a29      	ldr	r2, [pc, #164]	@ (8004968 <HAL_DMA_IRQHandler+0xce8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a28      	ldr	r2, [pc, #160]	@ (800496c <HAL_DMA_IRQHandler+0xcec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <HAL_DMA_IRQHandler+0xcf0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <HAL_DMA_IRQHandler+0xcf4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_DMA_IRQHandler+0xcf8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_DMA_IRQHandler+0xcfc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <HAL_DMA_IRQHandler+0xd00>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_DMA_IRQHandler+0xd04>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <HAL_DMA_IRQHandler+0xd08>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_DMA_IRQHandler+0xd0c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1a      	ldr	r2, [pc, #104]	@ (8004990 <HAL_DMA_IRQHandler+0xd10>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_DMA_IRQHandler+0xd14>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <HAL_DMA_IRQHandler+0xd18>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a16      	ldr	r2, [pc, #88]	@ (800499c <HAL_DMA_IRQHandler+0xd1c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a14      	ldr	r2, [pc, #80]	@ (80049a0 <HAL_DMA_IRQHandler+0xd20>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d128      	bne.n	80049a4 <HAL_DMA_IRQHandler+0xd24>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0214 	bic.w	r2, r2, #20
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e027      	b.n	80049b4 <HAL_DMA_IRQHandler+0xd34>
 8004964:	40020010 	.word	0x40020010
 8004968:	40020028 	.word	0x40020028
 800496c:	40020040 	.word	0x40020040
 8004970:	40020058 	.word	0x40020058
 8004974:	40020070 	.word	0x40020070
 8004978:	40020088 	.word	0x40020088
 800497c:	400200a0 	.word	0x400200a0
 8004980:	400200b8 	.word	0x400200b8
 8004984:	40020410 	.word	0x40020410
 8004988:	40020428 	.word	0x40020428
 800498c:	40020440 	.word	0x40020440
 8004990:	40020458 	.word	0x40020458
 8004994:	40020470 	.word	0x40020470
 8004998:	40020488 	.word	0x40020488
 800499c:	400204a0 	.word	0x400204a0
 80049a0:	400204b8 	.word	0x400204b8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 020a 	bic.w	r2, r2, #10
 80049b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8097 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d6:	e091      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2208      	movs	r2, #8
 80049e2:	409a      	lsls	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8088 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8082 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a41      	ldr	r2, [pc, #260]	@ (8004b04 <HAL_DMA_IRQHandler+0xe84>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d04a      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <HAL_DMA_IRQHandler+0xe88>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d045      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	@ (8004b0c <HAL_DMA_IRQHandler+0xe8c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d040      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b10 <HAL_DMA_IRQHandler+0xe90>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d03b      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3b      	ldr	r2, [pc, #236]	@ (8004b14 <HAL_DMA_IRQHandler+0xe94>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d036      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a39      	ldr	r2, [pc, #228]	@ (8004b18 <HAL_DMA_IRQHandler+0xe98>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d031      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a38      	ldr	r2, [pc, #224]	@ (8004b1c <HAL_DMA_IRQHandler+0xe9c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d02c      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a36      	ldr	r2, [pc, #216]	@ (8004b20 <HAL_DMA_IRQHandler+0xea0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d027      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a35      	ldr	r2, [pc, #212]	@ (8004b24 <HAL_DMA_IRQHandler+0xea4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <HAL_DMA_IRQHandler+0xea8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a32      	ldr	r2, [pc, #200]	@ (8004b2c <HAL_DMA_IRQHandler+0xeac>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a30      	ldr	r2, [pc, #192]	@ (8004b30 <HAL_DMA_IRQHandler+0xeb0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	@ (8004b34 <HAL_DMA_IRQHandler+0xeb4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <HAL_DMA_IRQHandler+0xeb8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <HAL_DMA_IRQHandler+0xebc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2a      	ldr	r2, [pc, #168]	@ (8004b40 <HAL_DMA_IRQHandler+0xec0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0xe2c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 021c 	bic.w	r2, r2, #28
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e007      	b.n	8004abc <HAL_DMA_IRQHandler+0xe3c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 020e 	bic.w	r2, r2, #14
 8004aba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
 8004af2:	e004      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004afe:	3728      	adds	r7, #40	@ 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40020010 	.word	0x40020010
 8004b08:	40020028 	.word	0x40020028
 8004b0c:	40020040 	.word	0x40020040
 8004b10:	40020058 	.word	0x40020058
 8004b14:	40020070 	.word	0x40020070
 8004b18:	40020088 	.word	0x40020088
 8004b1c:	400200a0 	.word	0x400200a0
 8004b20:	400200b8 	.word	0x400200b8
 8004b24:	40020410 	.word	0x40020410
 8004b28:	40020428 	.word	0x40020428
 8004b2c:	40020440 	.word	0x40020440
 8004b30:	40020458 	.word	0x40020458
 8004b34:	40020470 	.word	0x40020470
 8004b38:	40020488 	.word	0x40020488
 8004b3c:	400204a0 	.word	0x400204a0
 8004b40:	400204b8 	.word	0x400204b8

08004b44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	@ (8004d60 <DMA_SetConfig+0x21c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d072      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d64 <DMA_SetConfig+0x220>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d06d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7c      	ldr	r2, [pc, #496]	@ (8004d68 <DMA_SetConfig+0x224>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d068      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7a      	ldr	r2, [pc, #488]	@ (8004d6c <DMA_SetConfig+0x228>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d063      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a79      	ldr	r2, [pc, #484]	@ (8004d70 <DMA_SetConfig+0x22c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d05e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a77      	ldr	r2, [pc, #476]	@ (8004d74 <DMA_SetConfig+0x230>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d059      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a76      	ldr	r2, [pc, #472]	@ (8004d78 <DMA_SetConfig+0x234>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d054      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a74      	ldr	r2, [pc, #464]	@ (8004d7c <DMA_SetConfig+0x238>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d04f      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	@ (8004d80 <DMA_SetConfig+0x23c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a71      	ldr	r2, [pc, #452]	@ (8004d84 <DMA_SetConfig+0x240>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a70      	ldr	r2, [pc, #448]	@ (8004d88 <DMA_SetConfig+0x244>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <DMA_SetConfig+0x248>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6d      	ldr	r2, [pc, #436]	@ (8004d90 <DMA_SetConfig+0x24c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <DMA_SetConfig+0x250>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6a      	ldr	r2, [pc, #424]	@ (8004d98 <DMA_SetConfig+0x254>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a68      	ldr	r2, [pc, #416]	@ (8004d9c <DMA_SetConfig+0x258>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a67      	ldr	r2, [pc, #412]	@ (8004da0 <DMA_SetConfig+0x25c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a65      	ldr	r2, [pc, #404]	@ (8004da4 <DMA_SetConfig+0x260>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <DMA_SetConfig+0x264>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a62      	ldr	r2, [pc, #392]	@ (8004dac <DMA_SetConfig+0x268>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a61      	ldr	r2, [pc, #388]	@ (8004db0 <DMA_SetConfig+0x26c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a5f      	ldr	r2, [pc, #380]	@ (8004db4 <DMA_SetConfig+0x270>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004db8 <DMA_SetConfig+0x274>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5c      	ldr	r2, [pc, #368]	@ (8004dbc <DMA_SetConfig+0x278>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <DMA_SetConfig+0x10e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <DMA_SetConfig+0x110>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c60:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c72:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a39      	ldr	r2, [pc, #228]	@ (8004d60 <DMA_SetConfig+0x21c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04a      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a38      	ldr	r2, [pc, #224]	@ (8004d64 <DMA_SetConfig+0x220>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d045      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <DMA_SetConfig+0x224>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d040      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <DMA_SetConfig+0x228>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d03b      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <DMA_SetConfig+0x22c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d036      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <DMA_SetConfig+0x230>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d031      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <DMA_SetConfig+0x234>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02c      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <DMA_SetConfig+0x238>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d027      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <DMA_SetConfig+0x23c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <DMA_SetConfig+0x240>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d88 <DMA_SetConfig+0x244>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a29      	ldr	r2, [pc, #164]	@ (8004d8c <DMA_SetConfig+0x248>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a27      	ldr	r2, [pc, #156]	@ (8004d90 <DMA_SetConfig+0x24c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <DMA_SetConfig+0x250>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <DMA_SetConfig+0x254>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a23      	ldr	r2, [pc, #140]	@ (8004d9c <DMA_SetConfig+0x258>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <DMA_SetConfig+0x1d4>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <DMA_SetConfig+0x1d6>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d059      	beq.n	8004dd2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b40      	cmp	r3, #64	@ 0x40
 8004d4c:	d138      	bne.n	8004dc0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d5e:	e0ae      	b.n	8004ebe <DMA_SetConfig+0x37a>
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	e075      	b.n	8004ebe <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ecc <DMA_SetConfig+0x388>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed0 <DMA_SetConfig+0x38c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed4 <DMA_SetConfig+0x390>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a38      	ldr	r2, [pc, #224]	@ (8004ed8 <DMA_SetConfig+0x394>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a37      	ldr	r2, [pc, #220]	@ (8004edc <DMA_SetConfig+0x398>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	@ (8004ee0 <DMA_SetConfig+0x39c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a34      	ldr	r2, [pc, #208]	@ (8004ee4 <DMA_SetConfig+0x3a0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	@ (8004ee8 <DMA_SetConfig+0x3a4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a31      	ldr	r2, [pc, #196]	@ (8004eec <DMA_SetConfig+0x3a8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef0 <DMA_SetConfig+0x3ac>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef4 <DMA_SetConfig+0x3b0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <DMA_SetConfig+0x3b4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <DMA_SetConfig+0x3b8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a29      	ldr	r2, [pc, #164]	@ (8004f00 <DMA_SetConfig+0x3bc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <DMA_SetConfig+0x3c0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <DMA_SetConfig+0x3c4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <DMA_SetConfig+0x332>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <DMA_SetConfig+0x334>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d108      	bne.n	8004eae <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
}
 8004eac:	e007      	b.n	8004ebe <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	48022c08 	.word	0x48022c08
 8004ed0:	48022c1c 	.word	0x48022c1c
 8004ed4:	48022c30 	.word	0x48022c30
 8004ed8:	48022c44 	.word	0x48022c44
 8004edc:	48022c58 	.word	0x48022c58
 8004ee0:	48022c6c 	.word	0x48022c6c
 8004ee4:	48022c80 	.word	0x48022c80
 8004ee8:	48022c94 	.word	0x48022c94
 8004eec:	58025408 	.word	0x58025408
 8004ef0:	5802541c 	.word	0x5802541c
 8004ef4:	58025430 	.word	0x58025430
 8004ef8:	58025444 	.word	0x58025444
 8004efc:	58025458 	.word	0x58025458
 8004f00:	5802546c 	.word	0x5802546c
 8004f04:	58025480 	.word	0x58025480
 8004f08:	58025494 	.word	0x58025494

08004f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a42      	ldr	r2, [pc, #264]	@ (8005024 <DMA_CalcBaseAndBitshift+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a41      	ldr	r2, [pc, #260]	@ (8005028 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d045      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800502c <DMA_CalcBaseAndBitshift+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d040      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3e      	ldr	r2, [pc, #248]	@ (8005030 <DMA_CalcBaseAndBitshift+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d03b      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <DMA_CalcBaseAndBitshift+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d036      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005038 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d031      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a39      	ldr	r2, [pc, #228]	@ (800503c <DMA_CalcBaseAndBitshift+0x130>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02c      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a38      	ldr	r2, [pc, #224]	@ (8005040 <DMA_CalcBaseAndBitshift+0x134>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d027      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <DMA_CalcBaseAndBitshift+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a33      	ldr	r2, [pc, #204]	@ (800504c <DMA_CalcBaseAndBitshift+0x140>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a32      	ldr	r2, [pc, #200]	@ (8005050 <DMA_CalcBaseAndBitshift+0x144>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <DMA_CalcBaseAndBitshift+0x148>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800505c <DMA_CalcBaseAndBitshift+0x150>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <DMA_CalcBaseAndBitshift+0x154>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <DMA_CalcBaseAndBitshift+0xac>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <DMA_CalcBaseAndBitshift+0xae>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d024      	beq.n	8005008 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3b10      	subs	r3, #16
 8004fc6:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <DMA_CalcBaseAndBitshift+0x158>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	4a24      	ldr	r2, [pc, #144]	@ (8005068 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fd8:	5cd3      	ldrb	r3, [r2, r3]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d908      	bls.n	8004ff8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b1f      	ldr	r3, [pc, #124]	@ (800506c <DMA_CalcBaseAndBitshift+0x160>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ff6:	e00d      	b.n	8005014 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <DMA_CalcBaseAndBitshift+0x160>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6593      	str	r3, [r2, #88]	@ 0x58
 8005006:	e005      	b.n	8005014 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	aaaaaaab 	.word	0xaaaaaaab
 8005068:	0800af78 	.word	0x0800af78
 800506c:	fffffc00 	.word	0xfffffc00

08005070 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	2b03      	cmp	r3, #3
 800508a:	d858      	bhi.n	800513e <DMA_CheckFifoParam+0xce>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <DMA_CheckFifoParam+0x24>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b7 	.word	0x080050b7
 800509c:	080050a5 	.word	0x080050a5
 80050a0:	0800513f 	.word	0x0800513f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d048      	beq.n	8005142 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b4:	e045      	b.n	8005142 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050be:	d142      	bne.n	8005146 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c4:	e03f      	b.n	8005146 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ce:	d123      	bne.n	8005118 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d838      	bhi.n	800514a <DMA_CheckFifoParam+0xda>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <DMA_CheckFifoParam+0x70>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	080050f7 	.word	0x080050f7
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005109 	.word	0x08005109
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
        break;
 80050f4:	e030      	b.n	8005158 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d025      	beq.n	800514e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005106:	e022      	b.n	800514e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005110:	d11f      	bne.n	8005152 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005116:	e01c      	b.n	8005152 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	2b02      	cmp	r3, #2
 800511e:	d902      	bls.n	8005126 <DMA_CheckFifoParam+0xb6>
 8005120:	2b03      	cmp	r3, #3
 8005122:	d003      	beq.n	800512c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005124:	e018      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e015      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
    break;
 800513c:	e00b      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
        break;
 800513e:	bf00      	nop
 8005140:	e00a      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e008      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e006      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
    break;
 8005156:	bf00      	nop
    }
  }

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a38      	ldr	r2, [pc, #224]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d022      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a36      	ldr	r2, [pc, #216]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01d      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a35      	ldr	r2, [pc, #212]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d018      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a33      	ldr	r2, [pc, #204]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a32      	ldr	r2, [pc, #200]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a30      	ldr	r2, [pc, #192]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3b08      	subs	r3, #8
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4b26      	ldr	r3, [pc, #152]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005204:	e024      	b.n	8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3b10      	subs	r3, #16
 800520e:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d806      	bhi.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d902      	bls.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3308      	adds	r3, #8
 800522c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005240:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2201      	movs	r2, #1
 800524a:	409a      	lsls	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	58025408 	.word	0x58025408
 8005260:	5802541c 	.word	0x5802541c
 8005264:	58025430 	.word	0x58025430
 8005268:	58025444 	.word	0x58025444
 800526c:	58025458 	.word	0x58025458
 8005270:	5802546c 	.word	0x5802546c
 8005274:	58025480 	.word	0x58025480
 8005278:	58025494 	.word	0x58025494
 800527c:	cccccccd 	.word	0xcccccccd
 8005280:	16009600 	.word	0x16009600
 8005284:	58025880 	.word	0x58025880
 8005288:	aaaaaaab 	.word	0xaaaaaaab
 800528c:	400204b8 	.word	0x400204b8
 8005290:	4002040f 	.word	0x4002040f
 8005294:	10008200 	.word	0x10008200
 8005298:	40020880 	.word	0x40020880

0800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04a      	beq.n	8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d847      	bhi.n	8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a24      	ldr	r2, [pc, #144]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4b17      	ldr	r3, [pc, #92]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70
 8005326:	e009      	b.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4b14      	ldr	r3, [pc, #80]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a11      	ldr	r2, [pc, #68]	@ (8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800533a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	58025408 	.word	0x58025408
 8005358:	5802541c 	.word	0x5802541c
 800535c:	58025430 	.word	0x58025430
 8005360:	58025444 	.word	0x58025444
 8005364:	58025458 	.word	0x58025458
 8005368:	5802546c 	.word	0x5802546c
 800536c:	58025480 	.word	0x58025480
 8005370:	58025494 	.word	0x58025494
 8005374:	1600963f 	.word	0x1600963f
 8005378:	58025940 	.word	0x58025940
 800537c:	1000823f 	.word	0x1000823f
 8005380:	40020940 	.word	0x40020940

08005384 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b098      	sub	sp, #96	@ 0x60
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800538c:	4a84      	ldr	r2, [pc, #528]	@ (80055a0 <HAL_FDCAN_Init+0x21c>)
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	4611      	mov	r1, r2
 8005394:	224c      	movs	r2, #76	@ 0x4c
 8005396:	4618      	mov	r0, r3
 8005398:	f005 fd6e 	bl	800ae78 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e1c6      	b.n	8005734 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7e      	ldr	r2, [pc, #504]	@ (80055a4 <HAL_FDCAN_Init+0x220>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d106      	bne.n	80053be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fb ff78 	bl	80012c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0210 	bic.w	r2, r2, #16
 80053e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053e8:	f7fc fba2 	bl	8001b30 <HAL_GetTick>
 80053ec:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053ee:	e014      	b.n	800541a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053f0:	f7fc fb9e 	bl	8001b30 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b0a      	cmp	r3, #10
 80053fc:	d90d      	bls.n	800541a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2203      	movs	r2, #3
 8005412:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e18c      	b.n	8005734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d0e3      	beq.n	80053f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005438:	f7fc fb7a 	bl	8001b30 <HAL_GetTick>
 800543c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800543e:	e014      	b.n	800546a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005440:	f7fc fb76 	bl	8001b30 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b0a      	cmp	r3, #10
 800544c:	d90d      	bls.n	800546a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005454:	f043 0201 	orr.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e164      	b.n	8005734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0e3      	beq.n	8005440 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0202 	orr.w	r2, r2, #2
 8005486:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7c1b      	ldrb	r3, [r3, #16]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d108      	bne.n	80054a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800549e:	619a      	str	r2, [r3, #24]
 80054a0:	e007      	b.n	80054b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7c5b      	ldrb	r3, [r3, #17]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d108      	bne.n	80054cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054c8:	619a      	str	r2, [r3, #24]
 80054ca:	e007      	b.n	80054dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	7c9b      	ldrb	r3, [r3, #18]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054f2:	619a      	str	r2, [r3, #24]
 80054f4:	e007      	b.n	8005506 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005504:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800552a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0210 	bic.w	r2, r2, #16
 800553a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d108      	bne.n	8005556 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0204 	orr.w	r2, r2, #4
 8005552:	619a      	str	r2, [r3, #24]
 8005554:	e030      	b.n	80055b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02c      	beq.n	80055b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d020      	beq.n	80055a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005574:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0210 	orr.w	r2, r2, #16
 8005584:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d114      	bne.n	80055b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0220 	orr.w	r2, r2, #32
 800559c:	619a      	str	r2, [r3, #24]
 800559e:	e00b      	b.n	80055b8 <HAL_FDCAN_Init+0x234>
 80055a0:	0800af1c 	.word	0x0800af1c
 80055a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0220 	orr.w	r2, r2, #32
 80055b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	3b01      	subs	r3, #1
 80055be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	3b01      	subs	r3, #1
 80055da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ec:	d115      	bne.n	800561a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	3b01      	subs	r3, #1
 80055fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	3b01      	subs	r3, #1
 8005604:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005606:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	3b01      	subs	r3, #1
 8005610:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005616:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005618:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005640:	4413      	add	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800564e:	f023 0107 	bic.w	r1, r3, #7
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	3360      	adds	r3, #96	@ 0x60
 800565a:	443b      	add	r3, r7
 800565c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800567a:	f023 0107 	bic.w	r1, r3, #7
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	3360      	adds	r3, #96	@ 0x60
 8005686:	443b      	add	r3, r7
 8005688:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056a6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	3360      	adds	r3, #96	@ 0x60
 80056b2:	443b      	add	r3, r7
 80056b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056d4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	3360      	adds	r3, #96	@ 0x60
 80056e0:	443b      	add	r3, r7
 80056e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a11      	ldr	r2, [pc, #68]	@ (800573c <HAL_FDCAN_Init+0x3b8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d107      	bne.n	800570c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f022 0203 	bic.w	r2, r2, #3
 800570a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd81 	bl	800622c <FDCAN_CalcultateRamBlockAddresses>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005730:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005734:	4618      	mov	r0, r3
 8005736:	3760      	adds	r7, #96	@ 0x60
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	4000a000 	.word	0x4000a000

08005740 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d111      	bne.n	8005778 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e008      	b.n	800578a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800577e:	f043 0204 	orr.w	r2, r3, #4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d141      	bne.n	8005832 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80057b6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e038      	b.n	8005844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e026      	b.n	8005844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fe93 	bl	8006538 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2101      	movs	r1, #1
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	fa01 f202 	lsl.w	r2, r1, r2
 800581e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005822:	2201      	movs	r2, #1
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	409a      	lsls	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e008      	b.n	8005844 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005838:	f043 0208 	orr.w	r2, r3, #8
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
  }
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800584c:	b480      	push	{r7}
 800584e:	b08b      	sub	sp, #44	@ 0x2c
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005864:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005866:	7efb      	ldrb	r3, [r7, #27]
 8005868:	2b02      	cmp	r3, #2
 800586a:	f040 8149 	bne.w	8005b00 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b40      	cmp	r3, #64	@ 0x40
 8005872:	d14c      	bne.n	800590e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800587c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e13c      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e12a      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058c4:	0e1b      	lsrs	r3, r3, #24
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10a      	bne.n	80058e4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058d6:	0fdb      	lsrs	r3, r3, #31
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80058e0:	2301      	movs	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	e068      	b.n	80059e0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b41      	cmp	r3, #65	@ 0x41
 8005912:	d14c      	bne.n	80059ae <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800591c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0ec      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800594e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0da      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d10a      	bne.n	8005984 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005976:	0fdb      	lsrs	r3, r3, #31
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005980:	2301      	movs	r3, #1
 8005982:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ac:	e018      	b.n	80059e0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d309      	bcc.n	80059cc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0a2      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	0c9b      	lsrs	r3, r3, #18
 80059fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e005      	b.n	8005a10 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f003 020f 	and.w	r2, r3, #15
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0e1b      	lsrs	r3, r3, #24
 8005a64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	0fda      	lsrs	r2, r3, #31
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	3304      	adds	r3, #4
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	e00a      	b.n	8005a9c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	440b      	add	r3, r1
 8005a92:	7812      	ldrb	r2, [r2, #0]
 8005a94:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b20 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005aa2:	5cd3      	ldrb	r3, [r2, r3]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d3ec      	bcc.n	8005a86 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b40      	cmp	r3, #64	@ 0x40
 8005ab0:	d105      	bne.n	8005abe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005abc:	e01e      	b.n	8005afc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b41      	cmp	r3, #65	@ 0x41
 8005ac2:	d105      	bne.n	8005ad0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005ace:	e015      	b.n	8005afc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b1f      	cmp	r3, #31
 8005ad4:	d808      	bhi.n	8005ae8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005ae6:	e009      	b.n	8005afc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 021f 	and.w	r2, r3, #31
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2101      	movs	r1, #1
 8005af4:	fa01 f202 	lsl.w	r2, r1, r2
 8005af8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e008      	b.n	8005b12 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	372c      	adds	r7, #44	@ 0x2c
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	0800af80 	.word	0x0800af80

08005b24 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b5a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d002      	beq.n	8005b68 <HAL_FDCAN_ActivateNotification+0x20>
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d155      	bne.n	8005c14 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b86:	e014      	b.n	8005bb2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d108      	bne.n	8005baa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0202 	orr.w	r2, r2, #2
 8005ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ba8:	e003      	b.n	8005bb2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <HAL_FDCAN_ActivateNotification+0xec>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	0f9b      	lsrs	r3, r3, #30
 8005c0a:	490b      	ldr	r1, [pc, #44]	@ (8005c38 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e008      	b.n	8005c26 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c1a:	f043 0202 	orr.w	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	3fcfffff 	.word	0x3fcfffff
 8005c38:	4000a800 	.word	0x4000a800

08005c3c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b096      	sub	sp, #88	@ 0x58
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005c44:	4b95      	ldr	r3, [pc, #596]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	079b      	lsls	r3, r3, #30
 8005c4a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005c4c:	4b93      	ldr	r3, [pc, #588]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	079b      	lsls	r3, r3, #30
 8005c52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c54:	4013      	ands	r3, r2
 8005c56:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c5e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005c62:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c84:	4013      	ands	r3, r2
 8005c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005caa:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbe:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ccc:	4013      	ands	r3, r2
 8005cce:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00f      	beq.n	8005d0a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cfe:	4b67      	ldr	r3, [pc, #412]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa44 	bl	8006192 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01c      	beq.n	8005d4e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d017      	beq.n	8005d4e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d32:	4013      	ands	r3, r2
 8005d34:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d40:	4b56      	ldr	r3, [pc, #344]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005d46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9f9 	bl	8006140 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d5a:	4b51      	ldr	r3, [pc, #324]	@ (8005ea0 <HAL_FDCAN_IRQHandler+0x264>)
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d60:	4a4e      	ldr	r2, [pc, #312]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d64:	0f9b      	lsrs	r3, r3, #30
 8005d66:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9b2 	bl	80060d4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00d      	beq.n	8005d92 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_FDCAN_IRQHandler+0x264>)
 8005d7e:	400b      	ands	r3, r1
 8005d80:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d82:	4a46      	ldr	r2, [pc, #280]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d86:	0f9b      	lsrs	r3, r3, #30
 8005d88:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005d8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9ac 	bl	80060ea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d9e:	4b40      	ldr	r3, [pc, #256]	@ (8005ea0 <HAL_FDCAN_IRQHandler+0x264>)
 8005da0:	400b      	ands	r3, r1
 8005da2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005da4:	4a3d      	ldr	r2, [pc, #244]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da8:	0f9b      	lsrs	r3, r3, #30
 8005daa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005dac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fa fb80 	bl	80004b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005dc0:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <HAL_FDCAN_IRQHandler+0x264>)
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dc6:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dca:	0f9b      	lsrs	r3, r3, #30
 8005dcc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005dce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f995 	bl	8006100 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00f      	beq.n	8005e00 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005df2:	651a      	str	r2, [r3, #80]	@ 0x50
 8005df4:	4b29      	ldr	r3, [pc, #164]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f98b 	bl	8006116 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01c      	beq.n	8005e44 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e28:	4013      	ands	r3, r2
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e34:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e36:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005e3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f973 	bl	800612a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005e60:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e62:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f974 	bl	8006156 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d010      	beq.n	8005ea4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005e8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e8c:	4b03      	ldr	r3, [pc, #12]	@ (8005e9c <HAL_FDCAN_IRQHandler+0x260>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f969 	bl	800616a <HAL_FDCAN_TimestampWraparoundCallback>
 8005e98:	e004      	b.n	8005ea4 <HAL_FDCAN_IRQHandler+0x268>
 8005e9a:	bf00      	nop
 8005e9c:	4000a800 	.word	0x4000a800
 8005ea0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005ec0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ec2:	4b81      	ldr	r3, [pc, #516]	@ (80060c8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f958 	bl	800617e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d014      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eec:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80060cc <HAL_FDCAN_IRQHandler+0x490>)
 8005f10:	400b      	ands	r3, r1
 8005f12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f14:	4a6c      	ldr	r2, [pc, #432]	@ (80060c8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f18:	0f9b      	lsrs	r3, r3, #30
 8005f1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005f1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f94b 	bl	80061ba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d011      	beq.n	8005f4e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f30:	4b66      	ldr	r3, [pc, #408]	@ (80060cc <HAL_FDCAN_IRQHandler+0x490>)
 8005f32:	400b      	ands	r3, r1
 8005f34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f36:	4a64      	ldr	r2, [pc, #400]	@ (80060c8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3a:	0f9b      	lsrs	r3, r3, #30
 8005f3c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a5f      	ldr	r2, [pc, #380]	@ (80060d0 <HAL_FDCAN_IRQHandler+0x494>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	f040 80aa 	bne.w	80060ae <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a2 	beq.w	80060ae <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7e:	4013      	ands	r3, r2
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f96:	4013      	ands	r3, r2
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fae:	4013      	ands	r3, r2
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005fbc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005fd4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ffe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8e4 	bl	80061d0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006014:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f8e4 	bl	80061e6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d019      	beq.n	800605c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	b29b      	uxth	r3, r3
 800603c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006048:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2240      	movs	r2, #64	@ 0x40
 8006050:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6939      	ldr	r1, [r7, #16]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8d0 	bl	80061fc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006068:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800606a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8d1 	bl	8006214 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f874 	bl	80061a6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80060be:	bf00      	nop
 80060c0:	3758      	adds	r7, #88	@ 0x58
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	4000a800 	.word	0x4000a800
 80060cc:	3fcfffff 	.word	0x3fcfffff
 80060d0:	4000a000 	.word	0x4000a000

080060d4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006238:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006242:	4ba7      	ldr	r3, [pc, #668]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006244:	4013      	ands	r3, r2
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	0091      	lsls	r1, r2, #2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	430b      	orrs	r3, r1
 8006250:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800625c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	041a      	lsls	r2, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006282:	4b97      	ldr	r3, [pc, #604]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006284:	4013      	ands	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0091      	lsls	r1, r2, #2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	430b      	orrs	r3, r1
 8006290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a4:	041a      	lsls	r2, r3, #16
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80062c4:	4b86      	ldr	r3, [pc, #536]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	0091      	lsls	r1, r2, #2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	430b      	orrs	r3, r1
 80062d2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062de:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	041a      	lsls	r2, r3, #16
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800630c:	4b74      	ldr	r3, [pc, #464]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800630e:	4013      	ands	r3, r2
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	0091      	lsls	r1, r2, #2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	430b      	orrs	r3, r1
 800631a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006326:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632e:	041a      	lsls	r2, r3, #16
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	4413      	add	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006354:	4b62      	ldr	r3, [pc, #392]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006356:	4013      	ands	r3, r2
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	0091      	lsls	r1, r2, #2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006380:	4b57      	ldr	r3, [pc, #348]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	0091      	lsls	r1, r2, #2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	430b      	orrs	r3, r1
 800638e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800639a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	041a      	lsls	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4413      	add	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80063c2:	4b47      	ldr	r3, [pc, #284]	@ (80064e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	0091      	lsls	r1, r2, #2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	430b      	orrs	r3, r1
 80063d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063dc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e4:	041a      	lsls	r2, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063f8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006400:	061a      	lsls	r2, r3, #24
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006410:	4b34      	ldr	r3, [pc, #208]	@ (80064e4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006412:	4413      	add	r3, r2
 8006414:	009a      	lsls	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	441a      	add	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800644c:	441a      	add	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006464:	441a      	add	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	441a      	add	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d6:	4a04      	ldr	r2, [pc, #16]	@ (80064e8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d915      	bls.n	8006508 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80064dc:	e006      	b.n	80064ec <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80064de:	bf00      	nop
 80064e0:	ffff0003 	.word	0xffff0003
 80064e4:	10002b00 	.word	0x10002b00
 80064e8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2203      	movs	r2, #3
 8006500:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e010      	b.n	800652a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e005      	b.n	800651c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3304      	adds	r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3f3      	bcc.n	8006510 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop

08006538 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	@ 0x24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006556:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800655e:	4313      	orrs	r3, r2
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	e00a      	b.n	800657a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800656c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006572:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006578:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006584:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800658a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006590:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	3304      	adds	r3, #4
 80065bc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	3304      	adds	r3, #4
 80065c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e020      	b.n	8006612 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	3303      	adds	r3, #3
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4413      	add	r3, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3302      	adds	r3, #2
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	440b      	add	r3, r1
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80065e8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	440b      	add	r3, r1
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80065f6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	440a      	add	r2, r1
 80065fe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006600:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3304      	adds	r3, #4
 800660a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3304      	adds	r3, #4
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4a06      	ldr	r2, [pc, #24]	@ (8006630 <FDCAN_CopyMessageToRAM+0xf8>)
 8006618:	5cd3      	ldrb	r3, [r2, r3]
 800661a:	461a      	mov	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	4293      	cmp	r3, r2
 8006620:	d3d6      	bcc.n	80065d0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	3724      	adds	r7, #36	@ 0x24
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	0800af80 	.word	0x0800af80

08006634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	@ 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006642:	4b89      	ldr	r3, [pc, #548]	@ (8006868 <HAL_GPIO_Init+0x234>)
 8006644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006646:	e194      	b.n	8006972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	4013      	ands	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8186 	beq.w	800696c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d005      	beq.n	8006678 <HAL_GPIO_Init+0x44>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d130      	bne.n	80066da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2203      	movs	r2, #3
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4013      	ands	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ae:	2201      	movs	r2, #1
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	f003 0201 	and.w	r2, r3, #1
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d017      	beq.n	8006716 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	2203      	movs	r2, #3
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d123      	bne.n	800676a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	08da      	lsrs	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3208      	adds	r2, #8
 800672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	220f      	movs	r2, #15
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4313      	orrs	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	08da      	lsrs	r2, r3, #3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3208      	adds	r2, #8
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	2203      	movs	r2, #3
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 0203 	and.w	r2, r3, #3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4313      	orrs	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80e0 	beq.w	800696c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ac:	4b2f      	ldr	r3, [pc, #188]	@ (800686c <HAL_GPIO_Init+0x238>)
 80067ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80067b2:	4a2e      	ldr	r2, [pc, #184]	@ (800686c <HAL_GPIO_Init+0x238>)
 80067b4:	f043 0302 	orr.w	r3, r3, #2
 80067b8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80067bc:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_GPIO_Init+0x238>)
 80067be:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067ca:	4a29      	ldr	r2, [pc, #164]	@ (8006870 <HAL_GPIO_Init+0x23c>)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	089b      	lsrs	r3, r3, #2
 80067d0:	3302      	adds	r3, #2
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	220f      	movs	r2, #15
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a20      	ldr	r2, [pc, #128]	@ (8006874 <HAL_GPIO_Init+0x240>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d052      	beq.n	800689c <HAL_GPIO_Init+0x268>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <HAL_GPIO_Init+0x244>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d031      	beq.n	8006862 <HAL_GPIO_Init+0x22e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1e      	ldr	r2, [pc, #120]	@ (800687c <HAL_GPIO_Init+0x248>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <HAL_GPIO_Init+0x22a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <HAL_GPIO_Init+0x24c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d025      	beq.n	800685a <HAL_GPIO_Init+0x226>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1c      	ldr	r2, [pc, #112]	@ (8006884 <HAL_GPIO_Init+0x250>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <HAL_GPIO_Init+0x222>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1b      	ldr	r2, [pc, #108]	@ (8006888 <HAL_GPIO_Init+0x254>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d019      	beq.n	8006852 <HAL_GPIO_Init+0x21e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1a      	ldr	r2, [pc, #104]	@ (800688c <HAL_GPIO_Init+0x258>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_GPIO_Init+0x21a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a19      	ldr	r2, [pc, #100]	@ (8006890 <HAL_GPIO_Init+0x25c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00d      	beq.n	800684a <HAL_GPIO_Init+0x216>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a18      	ldr	r2, [pc, #96]	@ (8006894 <HAL_GPIO_Init+0x260>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <HAL_GPIO_Init+0x212>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a17      	ldr	r2, [pc, #92]	@ (8006898 <HAL_GPIO_Init+0x264>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <HAL_GPIO_Init+0x20e>
 800683e:	2309      	movs	r3, #9
 8006840:	e02d      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006842:	230a      	movs	r3, #10
 8006844:	e02b      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006846:	2308      	movs	r3, #8
 8006848:	e029      	b.n	800689e <HAL_GPIO_Init+0x26a>
 800684a:	2307      	movs	r3, #7
 800684c:	e027      	b.n	800689e <HAL_GPIO_Init+0x26a>
 800684e:	2306      	movs	r3, #6
 8006850:	e025      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006852:	2305      	movs	r3, #5
 8006854:	e023      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006856:	2304      	movs	r3, #4
 8006858:	e021      	b.n	800689e <HAL_GPIO_Init+0x26a>
 800685a:	2303      	movs	r3, #3
 800685c:	e01f      	b.n	800689e <HAL_GPIO_Init+0x26a>
 800685e:	2302      	movs	r3, #2
 8006860:	e01d      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006862:	2301      	movs	r3, #1
 8006864:	e01b      	b.n	800689e <HAL_GPIO_Init+0x26a>
 8006866:	bf00      	nop
 8006868:	58000080 	.word	0x58000080
 800686c:	58024400 	.word	0x58024400
 8006870:	58000400 	.word	0x58000400
 8006874:	58020000 	.word	0x58020000
 8006878:	58020400 	.word	0x58020400
 800687c:	58020800 	.word	0x58020800
 8006880:	58020c00 	.word	0x58020c00
 8006884:	58021000 	.word	0x58021000
 8006888:	58021400 	.word	0x58021400
 800688c:	58021800 	.word	0x58021800
 8006890:	58021c00 	.word	0x58021c00
 8006894:	58022000 	.word	0x58022000
 8006898:	58022400 	.word	0x58022400
 800689c:	2300      	movs	r3, #0
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ae:	4938      	ldr	r1, [pc, #224]	@ (8006990 <HAL_GPIO_Init+0x35c>)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4013      	ands	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	3301      	adds	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f ae63 	bne.w	8006648 <HAL_GPIO_Init+0x14>
  }
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	3724      	adds	r7, #36	@ 0x24
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58000400 	.word	0x58000400

08006994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	807b      	strh	r3, [r7, #2]
 80069a0:	4613      	mov	r3, r2
 80069a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069a4:	787b      	ldrb	r3, [r7, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069aa:	887a      	ldrh	r2, [r7, #2]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069b0:	e003      	b.n	80069ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	041a      	lsls	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	619a      	str	r2, [r3, #24]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069d8:	887a      	ldrh	r2, [r7, #2]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4013      	ands	r3, r2
 80069de:	041a      	lsls	r2, r3, #16
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	43d9      	mvns	r1, r3
 80069e4:	887b      	ldrh	r3, [r7, #2]
 80069e6:	400b      	ands	r3, r1
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	619a      	str	r2, [r3, #24]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e08b      	b.n	8006b26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fa fd26 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	@ 0x24
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	e006      	b.n	8006a84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d108      	bne.n	8006a9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	e007      	b.n	8006aae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b30 <HAL_I2C_Init+0x134>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006acc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69d9      	ldr	r1, [r3, #28]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	02008000 	.word	0x02008000

08006b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d138      	bne.n	8006bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e032      	b.n	8006bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2224      	movs	r2, #36	@ 0x24
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d139      	bne.n	8006c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e033      	b.n	8006c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2224      	movs	r2, #36	@ 0x24
 8006bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c6c:	4b19      	ldr	r3, [pc, #100]	@ (8006cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d00a      	beq.n	8006c8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c78:	4b16      	ldr	r3, [pc, #88]	@ (8006cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d001      	beq.n	8006c8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e01f      	b.n	8006cca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e01d      	b.n	8006cca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c8e:	4b11      	ldr	r3, [pc, #68]	@ (8006cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f023 0207 	bic.w	r2, r3, #7
 8006c96:	490f      	ldr	r1, [pc, #60]	@ (8006cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c9e:	f7fa ff47 	bl	8001b30 <HAL_GetTick>
 8006ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ca4:	e009      	b.n	8006cba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ca6:	f7fa ff43 	bl	8001b30 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cb4:	d901      	bls.n	8006cba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e007      	b.n	8006cca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cba:	4b06      	ldr	r3, [pc, #24]	@ (8006cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc6:	d1ee      	bne.n	8006ca6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58024800 	.word	0x58024800

08006cd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08c      	sub	sp, #48	@ 0x30
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f000 bc1f 	b.w	800752a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80b3 	beq.w	8006e60 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfa:	4b95      	ldr	r3, [pc, #596]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d04:	4b92      	ldr	r3, [pc, #584]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d007      	beq.n	8006d20 <HAL_RCC_OscConfig+0x48>
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	2b18      	cmp	r3, #24
 8006d14:	d112      	bne.n	8006d3c <HAL_RCC_OscConfig+0x64>
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d10d      	bne.n	8006d3c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d20:	4b8b      	ldr	r3, [pc, #556]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8098 	beq.w	8006e5e <HAL_RCC_OscConfig+0x186>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 8093 	bne.w	8006e5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e3f6      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x7c>
 8006d46:	4b82      	ldr	r3, [pc, #520]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a81      	ldr	r2, [pc, #516]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e058      	b.n	8006e06 <HAL_RCC_OscConfig+0x12e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d112      	bne.n	8006d82 <HAL_RCC_OscConfig+0xaa>
 8006d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7b      	ldr	r2, [pc, #492]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	4b79      	ldr	r3, [pc, #484]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a78      	ldr	r2, [pc, #480]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d6e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b76      	ldr	r3, [pc, #472]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a75      	ldr	r2, [pc, #468]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	e041      	b.n	8006e06 <HAL_RCC_OscConfig+0x12e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d8a:	d112      	bne.n	8006db2 <HAL_RCC_OscConfig+0xda>
 8006d8c:	4b70      	ldr	r3, [pc, #448]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6f      	ldr	r2, [pc, #444]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b6d      	ldr	r3, [pc, #436]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a6c      	ldr	r2, [pc, #432]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006d9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a69      	ldr	r2, [pc, #420]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e029      	b.n	8006e06 <HAL_RCC_OscConfig+0x12e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006dba:	d112      	bne.n	8006de2 <HAL_RCC_OscConfig+0x10a>
 8006dbc:	4b64      	ldr	r3, [pc, #400]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a63      	ldr	r2, [pc, #396]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	4b61      	ldr	r3, [pc, #388]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a60      	ldr	r2, [pc, #384]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	e011      	b.n	8006e06 <HAL_RCC_OscConfig+0x12e>
 8006de2:	4b5b      	ldr	r3, [pc, #364]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a5a      	ldr	r2, [pc, #360]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	4b58      	ldr	r3, [pc, #352]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a57      	ldr	r2, [pc, #348]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b55      	ldr	r3, [pc, #340]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a54      	ldr	r2, [pc, #336]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fa fe8f 	bl	8001b30 <HAL_GetTick>
 8006e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e16:	f7fa fe8b 	bl	8001b30 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b64      	cmp	r3, #100	@ 0x64
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e380      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e28:	4b49      	ldr	r3, [pc, #292]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCC_OscConfig+0x13e>
 8006e34:	e014      	b.n	8006e60 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fa fe7b 	bl	8001b30 <HAL_GetTick>
 8006e3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e3e:	f7fa fe77 	bl	8001b30 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b64      	cmp	r3, #100	@ 0x64
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e36c      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e50:	4b3f      	ldr	r3, [pc, #252]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x166>
 8006e5c:	e000      	b.n	8006e60 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 808c 	beq.w	8006f86 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e6e:	4b38      	ldr	r3, [pc, #224]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e76:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e78:	4b35      	ldr	r3, [pc, #212]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <HAL_RCC_OscConfig+0x1bc>
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b18      	cmp	r3, #24
 8006e88:	d137      	bne.n	8006efa <HAL_RCC_OscConfig+0x222>
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d132      	bne.n	8006efa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e94:	4b2e      	ldr	r3, [pc, #184]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCC_OscConfig+0x1d4>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e33e      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f023 0219 	bic.w	r2, r3, #25
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	4925      	ldr	r1, [pc, #148]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fa fe37 	bl	8001b30 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec6:	f7fa fe33 	bl	8001b30 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e328      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	061b      	lsls	r3, r3, #24
 8006ef2:	4917      	ldr	r1, [pc, #92]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef8:	e045      	b.n	8006f86 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d028      	beq.n	8006f54 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 0219 	bic.w	r2, r3, #25
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	4910      	ldr	r1, [pc, #64]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fa fe0c 	bl	8001b30 <HAL_GetTick>
 8006f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f1c:	f7fa fe08 	bl	8001b30 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e2fd      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f2e:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3a:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	061b      	lsls	r3, r3, #24
 8006f48:	4901      	ldr	r1, [pc, #4]	@ (8006f50 <HAL_RCC_OscConfig+0x278>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	604b      	str	r3, [r1, #4]
 8006f4e:	e01a      	b.n	8006f86 <HAL_RCC_OscConfig+0x2ae>
 8006f50:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f54:	4b97      	ldr	r3, [pc, #604]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a96      	ldr	r2, [pc, #600]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fa fde6 	bl	8001b30 <HAL_GetTick>
 8006f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f68:	f7fa fde2 	bl	8001b30 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e2d7      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f7a:	4b8e      	ldr	r3, [pc, #568]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d06a      	beq.n	8007068 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f92:	4b88      	ldr	r3, [pc, #544]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f9c:	4b85      	ldr	r3, [pc, #532]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d007      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x2e0>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b18      	cmp	r3, #24
 8006fac:	d11b      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x30e>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d116      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x2f8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	2b80      	cmp	r3, #128	@ 0x80
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e2ac      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fd0:	4b78      	ldr	r3, [pc, #480]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	4975      	ldr	r1, [pc, #468]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fe4:	e040      	b.n	8007068 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d023      	beq.n	8007036 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006fee:	4b71      	ldr	r3, [pc, #452]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a70      	ldr	r2, [pc, #448]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffa:	f7fa fd99 	bl	8001b30 <HAL_GetTick>
 8006ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007002:	f7fa fd95 	bl	8001b30 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e28a      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007014:	4b67      	ldr	r3, [pc, #412]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007020:	4b64      	ldr	r3, [pc, #400]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	4961      	ldr	r1, [pc, #388]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	60cb      	str	r3, [r1, #12]
 8007034:	e018      	b.n	8007068 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007036:	4b5f      	ldr	r3, [pc, #380]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a5e      	ldr	r2, [pc, #376]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 800703c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007042:	f7fa fd75 	bl	8001b30 <HAL_GetTick>
 8007046:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800704a:	f7fa fd71 	bl	8001b30 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e266      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800705c:	4b55      	ldr	r3, [pc, #340]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f0      	bne.n	800704a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d036      	beq.n	80070e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d019      	beq.n	80070b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800707c:	4b4d      	ldr	r3, [pc, #308]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 800707e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007080:	4a4c      	ldr	r2, [pc, #304]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fa fd52 	bl	8001b30 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007090:	f7fa fd4e 	bl	8001b30 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e243      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070a2:	4b44      	ldr	r3, [pc, #272]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0x3b8>
 80070ae:	e018      	b.n	80070e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070b0:	4b40      	ldr	r3, [pc, #256]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b4:	4a3f      	ldr	r2, [pc, #252]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fa fd38 	bl	8001b30 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070c4:	f7fa fd34 	bl	8001b30 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e229      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070d6:	4b37      	ldr	r3, [pc, #220]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d036      	beq.n	800715c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d019      	beq.n	800712a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070f6:	4b2f      	ldr	r3, [pc, #188]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2e      	ldr	r2, [pc, #184]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80070fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007102:	f7fa fd15 	bl	8001b30 <HAL_GetTick>
 8007106:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007108:	e008      	b.n	800711c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800710a:	f7fa fd11 	bl	8001b30 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e206      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800711c:	4b25      	ldr	r3, [pc, #148]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <HAL_RCC_OscConfig+0x432>
 8007128:	e018      	b.n	800715c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800712a:	4b22      	ldr	r3, [pc, #136]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a21      	ldr	r2, [pc, #132]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007134:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007136:	f7fa fcfb 	bl	8001b30 <HAL_GetTick>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800713e:	f7fa fcf7 	bl	8001b30 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1ec      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007150:	4b18      	ldr	r3, [pc, #96]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f0      	bne.n	800713e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80af 	beq.w	80072c8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800716a:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <HAL_RCC_OscConfig+0x4e0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a12      	ldr	r2, [pc, #72]	@ (80071b8 <HAL_RCC_OscConfig+0x4e0>)
 8007170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007176:	f7fa fcdb 	bl	8001b30 <HAL_GetTick>
 800717a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800717e:	f7fa fcd7 	bl	8001b30 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b64      	cmp	r3, #100	@ 0x64
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1cc      	b.n	800752a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007190:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <HAL_RCC_OscConfig+0x4e0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d10b      	bne.n	80071bc <HAL_RCC_OscConfig+0x4e4>
 80071a4:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a8:	4a02      	ldr	r2, [pc, #8]	@ (80071b4 <HAL_RCC_OscConfig+0x4dc>)
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80071b0:	e05b      	b.n	800726a <HAL_RCC_OscConfig+0x592>
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
 80071b8:	58024800 	.word	0x58024800
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d112      	bne.n	80071ea <HAL_RCC_OscConfig+0x512>
 80071c4:	4b9d      	ldr	r3, [pc, #628]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c8:	4a9c      	ldr	r2, [pc, #624]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80071d0:	4b9a      	ldr	r3, [pc, #616]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d4:	4a99      	ldr	r2, [pc, #612]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071da:	6713      	str	r3, [r2, #112]	@ 0x70
 80071dc:	4b97      	ldr	r3, [pc, #604]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e0:	4a96      	ldr	r2, [pc, #600]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071e2:	f023 0304 	bic.w	r3, r3, #4
 80071e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e8:	e03f      	b.n	800726a <HAL_RCC_OscConfig+0x592>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d112      	bne.n	8007218 <HAL_RCC_OscConfig+0x540>
 80071f2:	4b92      	ldr	r3, [pc, #584]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f6:	4a91      	ldr	r2, [pc, #580]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80071f8:	f043 0304 	orr.w	r3, r3, #4
 80071fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fe:	4b8f      	ldr	r3, [pc, #572]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	4a8e      	ldr	r2, [pc, #568]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007208:	6713      	str	r3, [r2, #112]	@ 0x70
 800720a:	4b8c      	ldr	r3, [pc, #560]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	4a8b      	ldr	r2, [pc, #556]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	6713      	str	r3, [r2, #112]	@ 0x70
 8007216:	e028      	b.n	800726a <HAL_RCC_OscConfig+0x592>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b85      	cmp	r3, #133	@ 0x85
 800721e:	d112      	bne.n	8007246 <HAL_RCC_OscConfig+0x56e>
 8007220:	4b86      	ldr	r3, [pc, #536]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007224:	4a85      	ldr	r2, [pc, #532]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007226:	f043 0304 	orr.w	r3, r3, #4
 800722a:	6713      	str	r3, [r2, #112]	@ 0x70
 800722c:	4b83      	ldr	r3, [pc, #524]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	4a82      	ldr	r2, [pc, #520]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007236:	6713      	str	r3, [r2, #112]	@ 0x70
 8007238:	4b80      	ldr	r3, [pc, #512]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723c:	4a7f      	ldr	r2, [pc, #508]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6713      	str	r3, [r2, #112]	@ 0x70
 8007244:	e011      	b.n	800726a <HAL_RCC_OscConfig+0x592>
 8007246:	4b7d      	ldr	r3, [pc, #500]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724a:	4a7c      	ldr	r2, [pc, #496]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	6713      	str	r3, [r2, #112]	@ 0x70
 8007252:	4b7a      	ldr	r3, [pc, #488]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007256:	4a79      	ldr	r2, [pc, #484]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007258:	f023 0304 	bic.w	r3, r3, #4
 800725c:	6713      	str	r3, [r2, #112]	@ 0x70
 800725e:	4b77      	ldr	r3, [pc, #476]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007262:	4a76      	ldr	r2, [pc, #472]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007268:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d015      	beq.n	800729e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007272:	f7fa fc5d 	bl	8001b30 <HAL_GetTick>
 8007276:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007278:	e00a      	b.n	8007290 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fa fc59 	bl	8001b30 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e14c      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007290:	4b6a      	ldr	r3, [pc, #424]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0ee      	beq.n	800727a <HAL_RCC_OscConfig+0x5a2>
 800729c:	e014      	b.n	80072c8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fa fc47 	bl	8001b30 <HAL_GetTick>
 80072a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fa fc43 	bl	8001b30 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e136      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072bc:	4b5f      	ldr	r3, [pc, #380]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1ee      	bne.n	80072a6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 812b 	beq.w	8007528 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80072d2:	4b5a      	ldr	r3, [pc, #360]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072da:	2b18      	cmp	r3, #24
 80072dc:	f000 80bb 	beq.w	8007456 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	f040 8095 	bne.w	8007414 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ea:	4b54      	ldr	r3, [pc, #336]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a53      	ldr	r2, [pc, #332]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80072f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fa fc1b 	bl	8001b30 <HAL_GetTick>
 80072fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072fe:	f7fa fc17 	bl	8001b30 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e10c      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007310:	4b4a      	ldr	r3, [pc, #296]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800731c:	4b47      	ldr	r3, [pc, #284]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800731e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007320:	4b47      	ldr	r3, [pc, #284]	@ (8007440 <HAL_RCC_OscConfig+0x768>)
 8007322:	4013      	ands	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	430a      	orrs	r2, r1
 8007330:	4942      	ldr	r1, [pc, #264]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007332:	4313      	orrs	r3, r2
 8007334:	628b      	str	r3, [r1, #40]	@ 0x28
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733a:	3b01      	subs	r3, #1
 800733c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007344:	3b01      	subs	r3, #1
 8007346:	025b      	lsls	r3, r3, #9
 8007348:	b29b      	uxth	r3, r3
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	3b01      	subs	r3, #1
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735e:	3b01      	subs	r3, #1
 8007360:	061b      	lsls	r3, r3, #24
 8007362:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007366:	4935      	ldr	r1, [pc, #212]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007368:	4313      	orrs	r3, r2
 800736a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800736c:	4b33      	ldr	r3, [pc, #204]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	4a32      	ldr	r2, [pc, #200]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007378:	4b30      	ldr	r3, [pc, #192]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800737a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800737c:	4b31      	ldr	r3, [pc, #196]	@ (8007444 <HAL_RCC_OscConfig+0x76c>)
 800737e:	4013      	ands	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007384:	00d2      	lsls	r2, r2, #3
 8007386:	492d      	ldr	r1, [pc, #180]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007388:	4313      	orrs	r3, r2
 800738a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800738c:	4b2b      	ldr	r3, [pc, #172]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	f023 020c 	bic.w	r2, r3, #12
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	4928      	ldr	r1, [pc, #160]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800739a:	4313      	orrs	r3, r2
 800739c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800739e:	4b27      	ldr	r3, [pc, #156]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	f023 0202 	bic.w	r2, r3, #2
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073aa:	4924      	ldr	r1, [pc, #144]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073b0:	4b22      	ldr	r3, [pc, #136]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	4a21      	ldr	r2, [pc, #132]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4b1f      	ldr	r3, [pc, #124]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	4a1e      	ldr	r2, [pc, #120]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073c8:	4b1c      	ldr	r3, [pc, #112]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	4a1b      	ldr	r2, [pc, #108]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80073d4:	4b19      	ldr	r3, [pc, #100]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	4a18      	ldr	r2, [pc, #96]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e0:	4b16      	ldr	r3, [pc, #88]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a15      	ldr	r2, [pc, #84]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 80073e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fa fba0 	bl	8001b30 <HAL_GetTick>
 80073f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fa fb9c 	bl	8001b30 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e091      	b.n	800752a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007406:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x71c>
 8007412:	e089      	b.n	8007528 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007414:	4b09      	ldr	r3, [pc, #36]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a08      	ldr	r2, [pc, #32]	@ (800743c <HAL_RCC_OscConfig+0x764>)
 800741a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fa fb86 	bl	8001b30 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007426:	e00f      	b.n	8007448 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007428:	f7fa fb82 	bl	8001b30 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d908      	bls.n	8007448 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e077      	b.n	800752a <HAL_RCC_OscConfig+0x852>
 800743a:	bf00      	nop
 800743c:	58024400 	.word	0x58024400
 8007440:	fffffc0c 	.word	0xfffffc0c
 8007444:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007448:	4b3a      	ldr	r3, [pc, #232]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e9      	bne.n	8007428 <HAL_RCC_OscConfig+0x750>
 8007454:	e068      	b.n	8007528 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007456:	4b37      	ldr	r3, [pc, #220]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 8007458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800745c:	4b35      	ldr	r3, [pc, #212]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 800745e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007460:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007466:	2b01      	cmp	r3, #1
 8007468:	d031      	beq.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f003 0203 	and.w	r2, r3, #3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d12a      	bne.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d122      	bne.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007494:	429a      	cmp	r2, r3
 8007496:	d11a      	bne.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0a5b      	lsrs	r3, r3, #9
 800749c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d111      	bne.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d108      	bne.n	80074ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d001      	beq.n	80074d2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e02b      	b.n	800752a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80074d2:	4b18      	ldr	r3, [pc, #96]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 80074d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d6:	08db      	lsrs	r3, r3, #3
 80074d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074dc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d01f      	beq.n	8007528 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80074e8:	4b12      	ldr	r3, [pc, #72]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4a11      	ldr	r2, [pc, #68]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80074f4:	f7fa fb1c 	bl	8001b30 <HAL_GetTick>
 80074f8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80074fa:	bf00      	nop
 80074fc:	f7fa fb18 	bl	8001b30 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	4293      	cmp	r3, r2
 8007506:	d0f9      	beq.n	80074fc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 800750a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <HAL_RCC_OscConfig+0x860>)
 800750e:	4013      	ands	r3, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007514:	00d2      	lsls	r2, r2, #3
 8007516:	4907      	ldr	r1, [pc, #28]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 8007518:	4313      	orrs	r3, r2
 800751a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800751c:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a04      	ldr	r2, [pc, #16]	@ (8007534 <HAL_RCC_OscConfig+0x85c>)
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3730      	adds	r7, #48	@ 0x30
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	58024400 	.word	0x58024400
 8007538:	ffff0007 	.word	0xffff0007

0800753c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e19c      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007550:	4b8a      	ldr	r3, [pc, #552]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d910      	bls.n	8007580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800755e:	4b87      	ldr	r3, [pc, #540]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f023 020f 	bic.w	r2, r3, #15
 8007566:	4985      	ldr	r1, [pc, #532]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	4313      	orrs	r3, r2
 800756c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800756e:	4b83      	ldr	r3, [pc, #524]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d001      	beq.n	8007580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e184      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d010      	beq.n	80075ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	4b7b      	ldr	r3, [pc, #492]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007598:	429a      	cmp	r2, r3
 800759a:	d908      	bls.n	80075ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800759c:	4b78      	ldr	r3, [pc, #480]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	4975      	ldr	r1, [pc, #468]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d010      	beq.n	80075dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	4b70      	ldr	r3, [pc, #448]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d908      	bls.n	80075dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	496a      	ldr	r1, [pc, #424]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d010      	beq.n	800760a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	4b64      	ldr	r3, [pc, #400]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d908      	bls.n	800760a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075f8:	4b61      	ldr	r3, [pc, #388]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	495e      	ldr	r1, [pc, #376]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007606:	4313      	orrs	r3, r2
 8007608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d010      	beq.n	8007638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	4b59      	ldr	r3, [pc, #356]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007622:	429a      	cmp	r2, r3
 8007624:	d908      	bls.n	8007638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007626:	4b56      	ldr	r3, [pc, #344]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	4953      	ldr	r1, [pc, #332]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007634:	4313      	orrs	r3, r2
 8007636:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d010      	beq.n	8007666 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	4b4d      	ldr	r3, [pc, #308]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	429a      	cmp	r2, r3
 8007652:	d908      	bls.n	8007666 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007654:	4b4a      	ldr	r3, [pc, #296]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f023 020f 	bic.w	r2, r3, #15
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4947      	ldr	r1, [pc, #284]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007662:	4313      	orrs	r3, r2
 8007664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d055      	beq.n	800771e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007672:	4b43      	ldr	r3, [pc, #268]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	4940      	ldr	r1, [pc, #256]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007680:	4313      	orrs	r3, r2
 8007682:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d107      	bne.n	800769c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800768c:	4b3c      	ldr	r3, [pc, #240]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d121      	bne.n	80076dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0f6      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d107      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076a4:	4b36      	ldr	r3, [pc, #216]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0ea      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d107      	bne.n	80076cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076bc:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0de      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0d6      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076dc:	4b28      	ldr	r3, [pc, #160]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f023 0207 	bic.w	r2, r3, #7
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4925      	ldr	r1, [pc, #148]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ee:	f7fa fa1f 	bl	8001b30 <HAL_GetTick>
 80076f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f4:	e00a      	b.n	800770c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f6:	f7fa fa1b 	bl	8001b30 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007704:	4293      	cmp	r3, r2
 8007706:	d901      	bls.n	800770c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e0be      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770c:	4b1c      	ldr	r3, [pc, #112]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	429a      	cmp	r2, r3
 800771c:	d1eb      	bne.n	80076f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d010      	beq.n	800774c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	4b14      	ldr	r3, [pc, #80]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	429a      	cmp	r2, r3
 8007738:	d208      	bcs.n	800774c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800773a:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f023 020f 	bic.w	r2, r3, #15
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	490e      	ldr	r1, [pc, #56]	@ (8007780 <HAL_RCC_ClockConfig+0x244>)
 8007748:	4313      	orrs	r3, r2
 800774a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800774c:	4b0b      	ldr	r3, [pc, #44]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d214      	bcs.n	8007784 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775a:	4b08      	ldr	r3, [pc, #32]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 020f 	bic.w	r2, r3, #15
 8007762:	4906      	ldr	r1, [pc, #24]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800776a:	4b04      	ldr	r3, [pc, #16]	@ (800777c <HAL_RCC_ClockConfig+0x240>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d005      	beq.n	8007784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e086      	b.n	800788a <HAL_RCC_ClockConfig+0x34e>
 800777c:	52002000 	.word	0x52002000
 8007780:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800779c:	429a      	cmp	r2, r3
 800779e:	d208      	bcs.n	80077b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	4939      	ldr	r1, [pc, #228]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	4b34      	ldr	r3, [pc, #208]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d208      	bcs.n	80077e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077ce:	4b31      	ldr	r3, [pc, #196]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	492e      	ldr	r1, [pc, #184]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d010      	beq.n	800780e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	4b28      	ldr	r3, [pc, #160]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d208      	bcs.n	800780e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077fc:	4b25      	ldr	r3, [pc, #148]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	4922      	ldr	r1, [pc, #136]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 800780a:	4313      	orrs	r3, r2
 800780c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d010      	beq.n	800783c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69da      	ldr	r2, [r3, #28]
 800781e:	4b1d      	ldr	r3, [pc, #116]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007826:	429a      	cmp	r2, r3
 8007828:	d208      	bcs.n	800783c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800782a:	4b1a      	ldr	r3, [pc, #104]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	4917      	ldr	r1, [pc, #92]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 8007838:	4313      	orrs	r3, r2
 800783a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800783c:	f000 f834 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b14      	ldr	r3, [pc, #80]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	4912      	ldr	r1, [pc, #72]	@ (8007898 <HAL_RCC_ClockConfig+0x35c>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800785a:	4b0e      	ldr	r3, [pc, #56]	@ (8007894 <HAL_RCC_ClockConfig+0x358>)
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	4a0d      	ldr	r2, [pc, #52]	@ (8007898 <HAL_RCC_ClockConfig+0x35c>)
 8007864:	5cd3      	ldrb	r3, [r2, r3]
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
 8007870:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <HAL_RCC_ClockConfig+0x360>)
 8007872:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007874:	4a0a      	ldr	r2, [pc, #40]	@ (80078a0 <HAL_RCC_ClockConfig+0x364>)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800787a:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <HAL_RCC_ClockConfig+0x368>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7fa f90c 	bl	8001a9c <HAL_InitTick>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
 8007898:	0800af68 	.word	0x0800af68
 800789c:	24000004 	.word	0x24000004
 80078a0:	24000000 	.word	0x24000000
 80078a4:	24000008 	.word	0x24000008

080078a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	@ 0x24
 80078ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078ae:	4bb3      	ldr	r3, [pc, #716]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b6:	2b18      	cmp	r3, #24
 80078b8:	f200 8155 	bhi.w	8007b66 <HAL_RCC_GetSysClockFreq+0x2be>
 80078bc:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007b67 	.word	0x08007b67
 80078cc:	08007b67 	.word	0x08007b67
 80078d0:	08007b67 	.word	0x08007b67
 80078d4:	08007b67 	.word	0x08007b67
 80078d8:	08007b67 	.word	0x08007b67
 80078dc:	08007b67 	.word	0x08007b67
 80078e0:	08007b67 	.word	0x08007b67
 80078e4:	0800794f 	.word	0x0800794f
 80078e8:	08007b67 	.word	0x08007b67
 80078ec:	08007b67 	.word	0x08007b67
 80078f0:	08007b67 	.word	0x08007b67
 80078f4:	08007b67 	.word	0x08007b67
 80078f8:	08007b67 	.word	0x08007b67
 80078fc:	08007b67 	.word	0x08007b67
 8007900:	08007b67 	.word	0x08007b67
 8007904:	08007955 	.word	0x08007955
 8007908:	08007b67 	.word	0x08007b67
 800790c:	08007b67 	.word	0x08007b67
 8007910:	08007b67 	.word	0x08007b67
 8007914:	08007b67 	.word	0x08007b67
 8007918:	08007b67 	.word	0x08007b67
 800791c:	08007b67 	.word	0x08007b67
 8007920:	08007b67 	.word	0x08007b67
 8007924:	0800795b 	.word	0x0800795b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007928:	4b94      	ldr	r3, [pc, #592]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d009      	beq.n	8007948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007934:	4b91      	ldr	r3, [pc, #580]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	08db      	lsrs	r3, r3, #3
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	4a90      	ldr	r2, [pc, #576]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007946:	e111      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007948:	4b8d      	ldr	r3, [pc, #564]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800794a:	61bb      	str	r3, [r7, #24]
      break;
 800794c:	e10e      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800794e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007950:	61bb      	str	r3, [r7, #24]
      break;
 8007952:	e10b      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007954:	4b8c      	ldr	r3, [pc, #560]	@ (8007b88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007956:	61bb      	str	r3, [r7, #24]
      break;
 8007958:	e108      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800795a:	4b88      	ldr	r3, [pc, #544]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007964:	4b85      	ldr	r3, [pc, #532]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	091b      	lsrs	r3, r3, #4
 800796a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800796e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007970:	4b82      	ldr	r3, [pc, #520]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800797a:	4b80      	ldr	r3, [pc, #512]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	08db      	lsrs	r3, r3, #3
 8007980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80e1 	beq.w	8007b60 <HAL_RCC_GetSysClockFreq+0x2b8>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f000 8083 	beq.w	8007aac <HAL_RCC_GetSysClockFreq+0x204>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	f200 80a1 	bhi.w	8007af0 <HAL_RCC_GetSysClockFreq+0x248>
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_RCC_GetSysClockFreq+0x114>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d056      	beq.n	8007a68 <HAL_RCC_GetSysClockFreq+0x1c0>
 80079ba:	e099      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079bc:	4b6f      	ldr	r3, [pc, #444]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d02d      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c8:	4b6c      	ldr	r3, [pc, #432]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	08db      	lsrs	r3, r3, #3
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	4a6b      	ldr	r2, [pc, #428]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
 80079d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b62      	ldr	r3, [pc, #392]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a22:	e087      	b.n	8007b34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007b90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b51      	ldr	r3, [pc, #324]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a66:	e065      	b.n	8007b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b40      	ldr	r3, [pc, #256]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aaa:	e043      	b.n	8007b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007b98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b2f      	ldr	r3, [pc, #188]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ad2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aee:	e021      	b.n	8007b34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b1e      	ldr	r3, [pc, #120]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007b34:	4b11      	ldr	r3, [pc, #68]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b38:	0a5b      	lsrs	r3, r3, #9
 8007b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b3e:	3301      	adds	r3, #1
 8007b40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	ee07 3a90 	vmov	s15, r3
 8007b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b58:	ee17 3a90 	vmov	r3, s15
 8007b5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007b5e:	e005      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
      break;
 8007b64:	e002      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007b66:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b68:	61bb      	str	r3, [r7, #24]
      break;
 8007b6a:	bf00      	nop
  }

  return sysclockfreq;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3724      	adds	r7, #36	@ 0x24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	03d09000 	.word	0x03d09000
 8007b84:	003d0900 	.word	0x003d0900
 8007b88:	017d7840 	.word	0x017d7840
 8007b8c:	46000000 	.word	0x46000000
 8007b90:	4c742400 	.word	0x4c742400
 8007b94:	4a742400 	.word	0x4a742400
 8007b98:	4bbebc20 	.word	0x4bbebc20

08007b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007ba2:	f7ff fe81 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	4b10      	ldr	r3, [pc, #64]	@ (8007bec <HAL_RCC_GetHCLKFreq+0x50>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	490f      	ldr	r1, [pc, #60]	@ (8007bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bb4:	5ccb      	ldrb	r3, [r1, r3]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bec <HAL_RCC_GetHCLKFreq+0x50>)
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	4a09      	ldr	r2, [pc, #36]	@ (8007bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bca:	5cd3      	ldrb	r3, [r2, r3]
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd6:	4a07      	ldr	r2, [pc, #28]	@ (8007bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007bd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bda:	4a07      	ldr	r2, [pc, #28]	@ (8007bf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007be2:	681b      	ldr	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	58024400 	.word	0x58024400
 8007bf0:	0800af68 	.word	0x0800af68
 8007bf4:	24000004 	.word	0x24000004
 8007bf8:	24000000 	.word	0x24000000

08007bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007c00:	f7ff ffcc 	bl	8007b9c <HAL_RCC_GetHCLKFreq>
 8007c04:	4602      	mov	r2, r0
 8007c06:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	4904      	ldr	r1, [pc, #16]	@ (8007c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c12:	5ccb      	ldrb	r3, [r1, r3]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	58024400 	.word	0x58024400
 8007c24:	0800af68 	.word	0x0800af68

08007c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b0c8      	sub	sp, #288	@ 0x120
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	ea54 0305 	orrs.w	r3, r4, r5
 8007c52:	d049      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c5e:	d02f      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c64:	d828      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c6a:	d01a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c70:	d822      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c7a:	d007      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c7c:	e01c      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c7e:	4ba7      	ldr	r3, [pc, #668]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	4aa6      	ldr	r2, [pc, #664]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c8a:	e01a      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c90:	3308      	adds	r3, #8
 8007c92:	2102      	movs	r1, #2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fa6d 	bl	800a174 <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ca0:	e00f      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca6:	3328      	adds	r3, #40	@ 0x28
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 fb14 	bl	800a2d8 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cb6:	e004      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cca:	4b94      	ldr	r3, [pc, #592]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cd8:	4a90      	ldr	r2, [pc, #576]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cde:	e003      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ce4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007cf4:	f04f 0900 	mov.w	r9, #0
 8007cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8007cfc:	d047      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d82a      	bhi.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d08:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d25 	.word	0x08007d25
 8007d14:	08007d33 	.word	0x08007d33
 8007d18:	08007d49 	.word	0x08007d49
 8007d1c:	08007d67 	.word	0x08007d67
 8007d20:	08007d67 	.word	0x08007d67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d24:	4b7d      	ldr	r3, [pc, #500]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	4a7c      	ldr	r2, [pc, #496]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d30:	e01a      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d36:	3308      	adds	r3, #8
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f002 fa1a 	bl	800a174 <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d46:	e00f      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4c:	3328      	adds	r3, #40	@ 0x28
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fac1 	bl	800a2d8 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e004      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d64:	e000      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d70:	4b6a      	ldr	r3, [pc, #424]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	f023 0107 	bic.w	r1, r3, #7
 8007d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7e:	4a67      	ldr	r2, [pc, #412]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d84:	e003      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007d9a:	f04f 0b00 	mov.w	fp, #0
 8007d9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007da2:	d054      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007dae:	d036      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007db0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007db4:	d82f      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dba:	d032      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc0:	d829      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dc4:	d02f      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dc8:	d825      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dca:	2b80      	cmp	r3, #128	@ 0x80
 8007dcc:	d018      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007dce:	2b80      	cmp	r3, #128	@ 0x80
 8007dd0:	d821      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007dd6:	2b40      	cmp	r3, #64	@ 0x40
 8007dd8:	d007      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007dda:	e01c      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	4a4e      	ldr	r2, [pc, #312]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007de8:	e01e      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dee:	3308      	adds	r3, #8
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f002 f9be 	bl	800a174 <RCCEx_PLL2_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007dfe:	e013      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e04:	3328      	adds	r3, #40	@ 0x28
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f002 fa65 	bl	800a2d8 <RCCEx_PLL3_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e14:	e008      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e1c:	e004      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007e30:	4b3a      	ldr	r3, [pc, #232]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3e:	4a37      	ldr	r2, [pc, #220]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007e5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	d05c      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e78:	d03b      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e7a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e7e:	d834      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e84:	d037      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e8a:	d82e      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007e8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e90:	d033      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007e92:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e96:	d828      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9c:	d01a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea2:	d822      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eac:	d007      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007eae:	e01c      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	4a19      	ldr	r2, [pc, #100]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007ebc:	e01e      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 f954 	bl	800a174 <RCCEx_PLL2_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007ed2:	e013      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed8:	3328      	adds	r3, #40	@ 0x28
 8007eda:	2100      	movs	r1, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 f9fb 	bl	800a2d8 <RCCEx_PLL3_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007ee8:	e008      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ef0:	e004      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007f04:	4b05      	ldr	r3, [pc, #20]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f08:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f12:	4a02      	ldr	r2, [pc, #8]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f18:	e006      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007f1a:	bf00      	nop
 8007f1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f42:	460b      	mov	r3, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	d03a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4e:	2b30      	cmp	r3, #48	@ 0x30
 8007f50:	d01f      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007f52:	2b30      	cmp	r3, #48	@ 0x30
 8007f54:	d819      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d00c      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d815      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d019      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d111      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f66:	4bae      	ldr	r3, [pc, #696]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	4aad      	ldr	r2, [pc, #692]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007f72:	e011      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f78:	3308      	adds	r3, #8
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 f8f9 	bl	800a174 <RCCEx_PLL2_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007f88:	e006      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f90:	e002      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007fa0:	4b9f      	ldr	r3, [pc, #636]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	4a9c      	ldr	r2, [pc, #624]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fb4:	e003      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007fca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d051      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe8:	d035      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fee:	d82e      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007ff0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ff4:	d031      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007ff6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ffa:	d828      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008000:	d01a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008006:	d822      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008010:	d007      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008012:	e01c      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b82      	ldr	r3, [pc, #520]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	4a81      	ldr	r2, [pc, #516]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008020:	e01c      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008026:	3308      	adds	r3, #8
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f002 f8a2 	bl	800a174 <RCCEx_PLL2_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008036:	e011      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803c:	3328      	adds	r3, #40	@ 0x28
 800803e:	2100      	movs	r1, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f002 f949 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008046:	4603      	mov	r3, r0
 8008048:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800804c:	e006      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008054:	e002      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800805a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008064:	4b6e      	ldr	r3, [pc, #440]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008068:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800806c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008072:	4a6b      	ldr	r2, [pc, #428]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6513      	str	r3, [r2, #80]	@ 0x50
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800807e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800808e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008092:	2300      	movs	r3, #0
 8008094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800809c:	460b      	mov	r3, r1
 800809e:	4313      	orrs	r3, r2
 80080a0:	d053      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80080a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080ac:	d033      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80080ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080b2:	d82c      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080b8:	d02f      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80080ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080be:	d826      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080c4:	d02b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80080c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080ca:	d820      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d0:	d012      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80080d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d6:	d81a      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d022      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80080dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e0:	d115      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e6:	3308      	adds	r3, #8
 80080e8:	2101      	movs	r1, #1
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 f842 	bl	800a174 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080f6:	e015      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fc:	3328      	adds	r3, #40	@ 0x28
 80080fe:	2101      	movs	r1, #1
 8008100:	4618      	mov	r0, r3
 8008102:	f002 f8e9 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800810c:	e00a      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008114:	e006      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008116:	bf00      	nop
 8008118:	e004      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800811a:	bf00      	nop
 800811c:	e002      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800812c:	4b3c      	ldr	r3, [pc, #240]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800812e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008130:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800813a:	4a39      	ldr	r2, [pc, #228]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800813c:	430b      	orrs	r3, r1
 800813e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008140:	e003      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008146:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800814a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008156:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008160:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008164:	460b      	mov	r3, r1
 8008166:	4313      	orrs	r3, r2
 8008168:	d060      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800816a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008172:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008176:	d039      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008178:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800817c:	d832      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800817e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008182:	d035      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008188:	d82c      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818e:	d031      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008194:	d826      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800819a:	d02d      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800819c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081a0:	d820      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a6:	d012      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80081a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081ac:	d81a      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d024      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80081b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081b6:	d115      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081bc:	3308      	adds	r3, #8
 80081be:	2101      	movs	r1, #1
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 ffd7 	bl	800a174 <RCCEx_PLL2_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081cc:	e017      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d2:	3328      	adds	r3, #40	@ 0x28
 80081d4:	2101      	movs	r1, #1
 80081d6:	4618      	mov	r0, r3
 80081d8:	f002 f87e 	bl	800a2d8 <RCCEx_PLL3_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081e2:	e00c      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081ea:	e008      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80081ec:	bf00      	nop
 80081ee:	e006      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80081f0:	bf00      	nop
 80081f2:	e004      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80081f4:	bf00      	nop
 80081f6:	e002      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80081f8:	bf00      	nop
 80081fa:	e000      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80081fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10e      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800820e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008216:	4a02      	ldr	r2, [pc, #8]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008218:	430b      	orrs	r3, r1
 800821a:	6593      	str	r3, [r2, #88]	@ 0x58
 800821c:	e006      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008224:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008228:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800822c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d037      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800824c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008256:	d00e      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800825c:	d816      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d018      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008266:	d111      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008268:	4bc4      	ldr	r3, [pc, #784]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	4ac3      	ldr	r2, [pc, #780]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800826e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008274:	e00f      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800827a:	3308      	adds	r3, #8
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f001 ff78 	bl	800a174 <RCCEx_PLL2_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800828a:	e004      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008292:	e000      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800829e:	4bb7      	ldr	r3, [pc, #732]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ac:	4ab3      	ldr	r2, [pc, #716]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082ae:	430b      	orrs	r3, r1
 80082b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80082b2:	e003      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80082c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4313      	orrs	r3, r2
 80082da:	d039      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d81c      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80082e6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008329 	.word	0x08008329
 80082f0:	080082fd 	.word	0x080082fd
 80082f4:	0800830b 	.word	0x0800830b
 80082f8:	08008329 	.word	0x08008329
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082fc:	4b9f      	ldr	r3, [pc, #636]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	4a9e      	ldr	r2, [pc, #632]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008308:	e00f      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800830a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830e:	3308      	adds	r3, #8
 8008310:	2102      	movs	r1, #2
 8008312:	4618      	mov	r0, r3
 8008314:	f001 ff2e 	bl	800a174 <RCCEx_PLL2_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800831e:	e004      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008332:	4b92      	ldr	r3, [pc, #584]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008336:	f023 0103 	bic.w	r1, r3, #3
 800833a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008340:	4a8e      	ldr	r2, [pc, #568]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008342:	430b      	orrs	r3, r1
 8008344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008346:	e003      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800834c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800835c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008366:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	f000 8099 	beq.w	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008372:	4b83      	ldr	r3, [pc, #524]	@ (8008580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a82      	ldr	r2, [pc, #520]	@ (8008580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800837c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800837e:	f7f9 fbd7 	bl	8001b30 <HAL_GetTick>
 8008382:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008386:	e00b      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008388:	f7f9 fbd2 	bl	8001b30 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b64      	cmp	r3, #100	@ 0x64
 8008396:	d903      	bls.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800839e:	e005      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a0:	4b77      	ldr	r3, [pc, #476]	@ (8008580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0ed      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80083ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d173      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083b4:	4b71      	ldr	r3, [pc, #452]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80083b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083c0:	4053      	eors	r3, r2
 80083c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d015      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ca:	4b6c      	ldr	r3, [pc, #432]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083d6:	4b69      	ldr	r3, [pc, #420]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083da:	4a68      	ldr	r2, [pc, #416]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083e2:	4b66      	ldr	r3, [pc, #408]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e6:	4a65      	ldr	r2, [pc, #404]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083ee:	4a63      	ldr	r2, [pc, #396]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008402:	d118      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7f9 fb94 	bl	8001b30 <HAL_GetTick>
 8008408:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800840c:	e00d      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800840e:	f7f9 fb8f 	bl	8001b30 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008418:	1ad2      	subs	r2, r2, r3
 800841a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800841e:	429a      	cmp	r2, r3
 8008420:	d903      	bls.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008428:	e005      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800842a:	4b54      	ldr	r3, [pc, #336]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0eb      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008436:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800843a:	2b00      	cmp	r3, #0
 800843c:	d129      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800843e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800844a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800844e:	d10e      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008450:	4b4a      	ldr	r3, [pc, #296]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008460:	091a      	lsrs	r2, r3, #4
 8008462:	4b48      	ldr	r3, [pc, #288]	@ (8008584 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008464:	4013      	ands	r3, r2
 8008466:	4a45      	ldr	r2, [pc, #276]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008468:	430b      	orrs	r3, r1
 800846a:	6113      	str	r3, [r2, #16]
 800846c:	e005      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800846e:	4b43      	ldr	r3, [pc, #268]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	4a42      	ldr	r2, [pc, #264]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008478:	6113      	str	r3, [r2, #16]
 800847a:	4b40      	ldr	r3, [pc, #256]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800847c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800847e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848a:	4a3c      	ldr	r2, [pc, #240]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848c:	430b      	orrs	r3, r1
 800848e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008490:	e008      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008496:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800849a:	e003      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f002 0301 	and.w	r3, r2, #1
 80084b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084be:	460b      	mov	r3, r1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f000 8090 	beq.w	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ce:	2b28      	cmp	r3, #40	@ 0x28
 80084d0:	d870      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80084d2:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080085bd 	.word	0x080085bd
 80084dc:	080085b5 	.word	0x080085b5
 80084e0:	080085b5 	.word	0x080085b5
 80084e4:	080085b5 	.word	0x080085b5
 80084e8:	080085b5 	.word	0x080085b5
 80084ec:	080085b5 	.word	0x080085b5
 80084f0:	080085b5 	.word	0x080085b5
 80084f4:	080085b5 	.word	0x080085b5
 80084f8:	08008589 	.word	0x08008589
 80084fc:	080085b5 	.word	0x080085b5
 8008500:	080085b5 	.word	0x080085b5
 8008504:	080085b5 	.word	0x080085b5
 8008508:	080085b5 	.word	0x080085b5
 800850c:	080085b5 	.word	0x080085b5
 8008510:	080085b5 	.word	0x080085b5
 8008514:	080085b5 	.word	0x080085b5
 8008518:	0800859f 	.word	0x0800859f
 800851c:	080085b5 	.word	0x080085b5
 8008520:	080085b5 	.word	0x080085b5
 8008524:	080085b5 	.word	0x080085b5
 8008528:	080085b5 	.word	0x080085b5
 800852c:	080085b5 	.word	0x080085b5
 8008530:	080085b5 	.word	0x080085b5
 8008534:	080085b5 	.word	0x080085b5
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085b5 	.word	0x080085b5
 8008540:	080085b5 	.word	0x080085b5
 8008544:	080085b5 	.word	0x080085b5
 8008548:	080085b5 	.word	0x080085b5
 800854c:	080085b5 	.word	0x080085b5
 8008550:	080085b5 	.word	0x080085b5
 8008554:	080085b5 	.word	0x080085b5
 8008558:	080085bd 	.word	0x080085bd
 800855c:	080085b5 	.word	0x080085b5
 8008560:	080085b5 	.word	0x080085b5
 8008564:	080085b5 	.word	0x080085b5
 8008568:	080085b5 	.word	0x080085b5
 800856c:	080085b5 	.word	0x080085b5
 8008570:	080085b5 	.word	0x080085b5
 8008574:	080085b5 	.word	0x080085b5
 8008578:	080085bd 	.word	0x080085bd
 800857c:	58024400 	.word	0x58024400
 8008580:	58024800 	.word	0x58024800
 8008584:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800858c:	3308      	adds	r3, #8
 800858e:	2101      	movs	r1, #1
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fdef 	bl	800a174 <RCCEx_PLL2_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800859c:	e00f      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800859e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a2:	3328      	adds	r3, #40	@ 0x28
 80085a4:	2101      	movs	r1, #1
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fe96 	bl	800a2d8 <RCCEx_PLL3_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80085b2:	e004      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80085bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085c6:	4bc0      	ldr	r3, [pc, #768]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80085ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d6:	4abc      	ldr	r2, [pc, #752]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80085d8:	430b      	orrs	r3, r1
 80085da:	6553      	str	r3, [r2, #84]	@ 0x54
 80085dc:	e003      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f002 0302 	and.w	r3, r2, #2
 80085f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085fc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d043      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860e:	2b05      	cmp	r3, #5
 8008610:	d824      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008665 	.word	0x08008665
 800861c:	08008631 	.word	0x08008631
 8008620:	08008647 	.word	0x08008647
 8008624:	08008665 	.word	0x08008665
 8008628:	08008665 	.word	0x08008665
 800862c:	08008665 	.word	0x08008665
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008634:	3308      	adds	r3, #8
 8008636:	2101      	movs	r1, #1
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fd9b 	bl	800a174 <RCCEx_PLL2_Config>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008644:	e00f      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864a:	3328      	adds	r3, #40	@ 0x28
 800864c:	2101      	movs	r1, #1
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fe42 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800865a:	e004      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008662:	e000      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800866e:	4b96      	ldr	r3, [pc, #600]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008672:	f023 0107 	bic.w	r1, r3, #7
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867e:	4a92      	ldr	r2, [pc, #584]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6553      	str	r3, [r2, #84]	@ 0x54
 8008684:	e003      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008686:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800868a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800868e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f002 0304 	and.w	r3, r2, #4
 800869a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d043      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80086ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	d824      	bhi.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	080086d9 	.word	0x080086d9
 80086c8:	080086ef 	.word	0x080086ef
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	0800870d 	.word	0x0800870d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086dc:	3308      	adds	r3, #8
 80086de:	2101      	movs	r1, #1
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fd47 	bl	800a174 <RCCEx_PLL2_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086ec:	e00f      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	3328      	adds	r3, #40	@ 0x28
 80086f4:	2101      	movs	r1, #1
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fdee 	bl	800a2d8 <RCCEx_PLL3_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008702:	e004      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800870a:	e000      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800870c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800870e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10b      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008716:	4b6c      	ldr	r3, [pc, #432]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871a:	f023 0107 	bic.w	r1, r3, #7
 800871e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008726:	4a68      	ldr	r2, [pc, #416]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008728:	430b      	orrs	r3, r1
 800872a:	6593      	str	r3, [r2, #88]	@ 0x58
 800872c:	e003      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008732:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f002 0320 	and.w	r3, r2, #32
 8008742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008746:	2300      	movs	r3, #0
 8008748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800874c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008750:	460b      	mov	r3, r1
 8008752:	4313      	orrs	r3, r2
 8008754:	d055      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800875e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008762:	d033      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008768:	d82c      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876e:	d02f      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008774:	d826      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800877a:	d02b      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800877c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008780:	d820      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008786:	d012      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878c:	d81a      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d022      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008796:	d115      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800879c:	3308      	adds	r3, #8
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fce7 	bl	800a174 <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80087ac:	e015      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b2:	3328      	adds	r3, #40	@ 0x28
 80087b4:	2102      	movs	r1, #2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fd8e 	bl	800a2d8 <RCCEx_PLL3_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80087c2:	e00a      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087ca:	e006      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80087cc:	bf00      	nop
 80087ce:	e004      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80087d0:	bf00      	nop
 80087d2:	e002      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80087d4:	bf00      	nop
 80087d6:	e000      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80087d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087e2:	4b39      	ldr	r3, [pc, #228]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087f2:	4a35      	ldr	r2, [pc, #212]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087f4:	430b      	orrs	r3, r1
 80087f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80087f8:	e003      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800880e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008812:	2300      	movs	r3, #0
 8008814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008818:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d058      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800882a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800882e:	d033      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008830:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008834:	d82c      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883a:	d02f      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008840:	d826      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008842:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008846:	d02b      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008848:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800884c:	d820      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008852:	d012      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008858:	d81a      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d022      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008862:	d115      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008868:	3308      	adds	r3, #8
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f001 fc81 	bl	800a174 <RCCEx_PLL2_Config>
 8008872:	4603      	mov	r3, r0
 8008874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008878:	e015      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887e:	3328      	adds	r3, #40	@ 0x28
 8008880:	2102      	movs	r1, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fd28 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800888e:	e00a      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008896:	e006      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008898:	bf00      	nop
 800889a:	e004      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800889c:	bf00      	nop
 800889e:	e002      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088a0:	bf00      	nop
 80088a2:	e000      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80088a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10e      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088ae:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80088b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088be:	4a02      	ldr	r2, [pc, #8]	@ (80088c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088c0:	430b      	orrs	r3, r1
 80088c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80088c4:	e006      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80088c6:	bf00      	nop
 80088c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80088e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80088ee:	460b      	mov	r3, r1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d055      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80088f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008900:	d033      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008902:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008906:	d82c      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800890c:	d02f      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800890e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008912:	d826      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008914:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008918:	d02b      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800891a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800891e:	d820      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008924:	d012      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800892a:	d81a      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d022      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008934:	d115      	bne.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893a:	3308      	adds	r3, #8
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fc18 	bl	800a174 <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800894a:	e015      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800894c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008950:	3328      	adds	r3, #40	@ 0x28
 8008952:	2102      	movs	r1, #2
 8008954:	4618      	mov	r0, r3
 8008956:	f001 fcbf 	bl	800a2d8 <RCCEx_PLL3_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008960:	e00a      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008968:	e006      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800896a:	bf00      	nop
 800896c:	e004      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800896e:	bf00      	nop
 8008970:	e002      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008980:	4ba1      	ldr	r3, [pc, #644]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008984:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800898c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008990:	4a9d      	ldr	r2, [pc, #628]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008992:	430b      	orrs	r3, r1
 8008994:	6593      	str	r3, [r2, #88]	@ 0x58
 8008996:	e003      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800899c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80089a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f002 0308 	and.w	r3, r2, #8
 80089ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80089ba:	460b      	mov	r3, r1
 80089bc:	4313      	orrs	r3, r2
 80089be:	d01e      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80089c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089cc:	d10c      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d2:	3328      	adds	r3, #40	@ 0x28
 80089d4:	2102      	movs	r1, #2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fc7e 	bl	800a2d8 <RCCEx_PLL3_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089e8:	4b87      	ldr	r3, [pc, #540]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f8:	4a83      	ldr	r2, [pc, #524]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f002 0310 	and.w	r3, r2, #16
 8008a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	d01e      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a2a:	d10c      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a30:	3328      	adds	r3, #40	@ 0x28
 8008a32:	2102      	movs	r1, #2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fc4f 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a46:	4b70      	ldr	r3, [pc, #448]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a56:	4a6c      	ldr	r2, [pc, #432]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d03e      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a88:	d022      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a8e:	d81b      	bhi.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a98:	d00b      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008a9a:	e015      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 fb65 	bl	800a174 <RCCEx_PLL2_Config>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ab0:	e00f      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab6:	3328      	adds	r3, #40	@ 0x28
 8008ab8:	2102      	movs	r1, #2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fc0c 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ac6:	e004      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ace:	e000      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ada:	4b4b      	ldr	r3, [pc, #300]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ade:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008aea:	4a47      	ldr	r2, [pc, #284]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8008af0:	e003      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b08:	2300      	movs	r3, #0
 8008b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b10:	460b      	mov	r3, r1
 8008b12:	4313      	orrs	r3, r2
 8008b14:	d03b      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b22:	d01f      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b28:	d818      	bhi.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b2e:	d003      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b34:	d007      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008b36:	e011      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b38:	4b33      	ldr	r3, [pc, #204]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3c:	4a32      	ldr	r2, [pc, #200]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b44:	e00f      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4a:	3328      	adds	r3, #40	@ 0x28
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fbc2 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b62:	e000      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b6e:	4b26      	ldr	r3, [pc, #152]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7e:	4a22      	ldr	r2, [pc, #136]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b80:	430b      	orrs	r3, r1
 8008b82:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b84:	e003      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ba0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	d034      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb8:	d007      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008bba:	e011      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bbc:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	4a11      	ldr	r2, [pc, #68]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008bc8:	e00e      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 face 	bl	800a174 <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008bde:	e003      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10d      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bf0:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfe:	4a02      	ldr	r2, [pc, #8]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c00:	430b      	orrs	r3, r1
 8008c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c04:	e006      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008c06:	bf00      	nop
 8008c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008c20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c22:	2300      	movs	r3, #0
 8008c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	d00c      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c34:	3328      	adds	r3, #40	@ 0x28
 8008c36:	2102      	movs	r1, #2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fb4d 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c58:	2300      	movs	r3, #0
 8008c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c60:	460b      	mov	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	d038      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c72:	d018      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c78:	d811      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c7e:	d014      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c84:	d80b      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d011      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8e:	d106      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c90:	4bc3      	ldr	r3, [pc, #780]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	4ac2      	ldr	r2, [pc, #776]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c9c:	e008      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ca4:	e004      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10b      	bne.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cb8:	4bb9      	ldr	r3, [pc, #740]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc8:	4ab5      	ldr	r2, [pc, #724]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cce:	e003      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	d009      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cf4:	4baa      	ldr	r3, [pc, #680]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d02:	4aa7      	ldr	r2, [pc, #668]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d14:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d16:	2300      	movs	r3, #0
 8008d18:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d009      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d24:	4b9e      	ldr	r3, [pc, #632]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d28:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d32:	4a9b      	ldr	r2, [pc, #620]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d46:	2300      	movs	r3, #0
 8008d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4313      	orrs	r3, r2
 8008d52:	d009      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008d54:	4b92      	ldr	r3, [pc, #584]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d58:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d62:	4a8f      	ldr	r2, [pc, #572]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d76:	2300      	movs	r3, #0
 8008d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d00e      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d84:	4b86      	ldr	r3, [pc, #536]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	4a85      	ldr	r2, [pc, #532]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d8e:	6113      	str	r3, [r2, #16]
 8008d90:	4b83      	ldr	r3, [pc, #524]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d92:	6919      	ldr	r1, [r3, #16]
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d9c:	4a80      	ldr	r2, [pc, #512]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d9e:	430b      	orrs	r3, r1
 8008da0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d009      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008dbe:	4b78      	ldr	r3, [pc, #480]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dcc:	4a74      	ldr	r2, [pc, #464]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008de8:	460b      	mov	r3, r1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d00a      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008dee:	4b6c      	ldr	r3, [pc, #432]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dfe:	4a68      	ldr	r2, [pc, #416]	@ (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e00:	430b      	orrs	r3, r1
 8008e02:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	d011      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e24:	3308      	adds	r3, #8
 8008e26:	2100      	movs	r1, #0
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 f9a3 	bl	800a174 <RCCEx_PLL2_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6239      	str	r1, [r7, #32]
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d011      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e64:	3308      	adds	r3, #8
 8008e66:	2101      	movs	r1, #1
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 f983 	bl	800a174 <RCCEx_PLL2_Config>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	61b9      	str	r1, [r7, #24]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	d011      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	2102      	movs	r1, #2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 f963 	bl	800a174 <RCCEx_PLL2_Config>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6139      	str	r1, [r7, #16]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008eda:	460b      	mov	r3, r1
 8008edc:	4313      	orrs	r3, r2
 8008ede:	d011      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee4:	3328      	adds	r3, #40	@ 0x28
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 f9f5 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	d011      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	3328      	adds	r3, #40	@ 0x28
 8008f26:	2101      	movs	r1, #1
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 f9d5 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	6039      	str	r1, [r7, #0]
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	d011      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f64:	3328      	adds	r3, #40	@ 0x28
 8008f66:	2102      	movs	r1, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 f9b5 	bl	800a2d8 <RCCEx_PLL3_Config>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008f84:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e000      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400

08008fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b090      	sub	sp, #64	@ 0x40
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	f040 8094 	bne.w	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008fbc:	4b97      	ldr	r3, [pc, #604]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	f200 8087 	bhi.w	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008fe9 	.word	0x08008fe9
 8008fd8:	08009011 	.word	0x08009011
 8008fdc:	08009039 	.word	0x08009039
 8008fe0:	080090d5 	.word	0x080090d5
 8008fe4:	08009061 	.word	0x08009061
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ff4:	d108      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 ff68 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009004:	f000 bc97 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	f000 bc93 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009010:	4b82      	ldr	r3, [pc, #520]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009018:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800901c:	d108      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800901e:	f107 0318 	add.w	r3, r7, #24
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fcac 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902c:	f000 bc83 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	f000 bc7f 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009038:	4b78      	ldr	r3, [pc, #480]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009044:	d108      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009046:	f107 030c 	add.w	r3, r7, #12
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fdec 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009054:	f000 bc6f 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905c:	f000 bc6b 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009060:	4b6e      	ldr	r3, [pc, #440]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009064:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800906a:	4b6c      	ldr	r3, [pc, #432]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b04      	cmp	r3, #4
 8009074:	d10c      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800907c:	4b67      	ldr	r3, [pc, #412]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	08db      	lsrs	r3, r3, #3
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	4a66      	ldr	r2, [pc, #408]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
 800908c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908e:	e01f      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009090:	4b62      	ldr	r3, [pc, #392]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800909c:	d106      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800909e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090a4:	d102      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090a6:	4b5f      	ldr	r3, [pc, #380]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80090a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090aa:	e011      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ac:	4b5b      	ldr	r3, [pc, #364]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b8:	d106      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c0:	d102      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090c2:	4b59      	ldr	r3, [pc, #356]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80090c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090cc:	f000 bc33 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80090d0:	f000 bc31 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090d4:	4b55      	ldr	r3, [pc, #340]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d8:	f000 bc2d 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e0:	f000 bc29 	b.w	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80090e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80090ec:	430b      	orrs	r3, r1
 80090ee:	f040 809f 	bne.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80090f2:	4b4a      	ldr	r3, [pc, #296]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80090fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009102:	d04d      	beq.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910a:	f200 8084 	bhi.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	2bc0      	cmp	r3, #192	@ 0xc0
 8009112:	d07d      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	2bc0      	cmp	r3, #192	@ 0xc0
 8009118:	d87d      	bhi.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	2b80      	cmp	r3, #128	@ 0x80
 800911e:	d02d      	beq.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009122:	2b80      	cmp	r3, #128	@ 0x80
 8009124:	d877      	bhi.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	2b40      	cmp	r3, #64	@ 0x40
 8009130:	d012      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009132:	e070      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009134:	4b39      	ldr	r3, [pc, #228]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009140:	d107      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fec2 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009150:	e3f1      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009156:	e3ee      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009158:	4b30      	ldr	r3, [pc, #192]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009164:	d107      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009166:	f107 0318 	add.w	r3, r7, #24
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fc08 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009174:	e3df      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917a:	e3dc      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800917c:	4b27      	ldr	r3, [pc, #156]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009188:	d107      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918a:	f107 030c 	add.w	r3, r7, #12
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fd4a 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009198:	e3cd      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800919e:	e3ca      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091a0:	4b1e      	ldr	r3, [pc, #120]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091aa:	4b1c      	ldr	r3, [pc, #112]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d10c      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80091b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091bc:	4b17      	ldr	r3, [pc, #92]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	08db      	lsrs	r3, r3, #3
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	4a16      	ldr	r2, [pc, #88]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ce:	e01e      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091d0:	4b12      	ldr	r3, [pc, #72]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091dc:	d106      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80091de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091e4:	d102      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80091e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ea:	e010      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091ec:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f8:	d106      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009200:	d102      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009202:	4b09      	ldr	r3, [pc, #36]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009206:	e002      	b.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800920c:	e393      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800920e:	e392      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009210:	4b06      	ldr	r3, [pc, #24]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009214:	e38f      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921a:	e38c      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800921c:	58024400 	.word	0x58024400
 8009220:	03d09000 	.word	0x03d09000
 8009224:	003d0900 	.word	0x003d0900
 8009228:	017d7840 	.word	0x017d7840
 800922c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009234:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009238:	430b      	orrs	r3, r1
 800923a:	f040 809c 	bne.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800923e:	4b9e      	ldr	r3, [pc, #632]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009242:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009246:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800924e:	d054      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009256:	f200 808b 	bhi.w	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009260:	f000 8083 	beq.w	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800926a:	f200 8081 	bhi.w	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009274:	d02f      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800927c:	d878      	bhi.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800928a:	d012      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800928c:	e070      	b.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800928e:	4b8a      	ldr	r3, [pc, #552]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929a:	d107      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800929c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fe15 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092aa:	e344      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b0:	e341      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b2:	4b81      	ldr	r3, [pc, #516]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092be:	d107      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c0:	f107 0318 	add.w	r3, r7, #24
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fb5b 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ce:	e332      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d4:	e32f      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092d6:	4b78      	ldr	r3, [pc, #480]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e2:	d107      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fc9d 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f2:	e320      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f8:	e31d      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092fa:	4b6f      	ldr	r3, [pc, #444]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009302:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009304:	4b6c      	ldr	r3, [pc, #432]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d10c      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009316:	4b68      	ldr	r3, [pc, #416]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	08db      	lsrs	r3, r3, #3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	4a66      	ldr	r2, [pc, #408]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009322:	fa22 f303 	lsr.w	r3, r2, r3
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009328:	e01e      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800932a:	4b63      	ldr	r3, [pc, #396]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009336:	d106      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800933e:	d102      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009340:	4b5f      	ldr	r3, [pc, #380]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009344:	e010      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009346:	4b5c      	ldr	r3, [pc, #368]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009352:	d106      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935a:	d102      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800935c:	4b59      	ldr	r3, [pc, #356]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8009366:	e2e6      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009368:	e2e5      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800936a:	4b57      	ldr	r3, [pc, #348]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936e:	e2e2      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	e2df      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800937a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800937e:	430b      	orrs	r3, r1
 8009380:	f040 80a7 	bne.w	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009384:	4b4c      	ldr	r3, [pc, #304]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009388:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009394:	d055      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800939c:	f200 8096 	bhi.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093a6:	f000 8084 	beq.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093b0:	f200 808c 	bhi.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ba:	d030      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80093bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093c2:	f200 8083 	bhi.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093d2:	d012      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80093d4:	e07a      	b.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093d6:	4b38      	ldr	r3, [pc, #224]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093e2:	d107      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fd71 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f2:	e2a0      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	e29d      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093fa:	4b2f      	ldr	r3, [pc, #188]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009406:	d107      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009408:	f107 0318 	add.w	r3, r7, #24
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fab7 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009416:	e28e      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	e28b      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800941e:	4b26      	ldr	r3, [pc, #152]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942a:	d107      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	4618      	mov	r0, r3
 8009432:	f000 fbf9 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800943a:	e27c      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009440:	e279      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009442:	4b1d      	ldr	r3, [pc, #116]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009446:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800944c:	4b1a      	ldr	r3, [pc, #104]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b04      	cmp	r3, #4
 8009456:	d10c      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800945e:	4b16      	ldr	r3, [pc, #88]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	08db      	lsrs	r3, r3, #3
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	4a14      	ldr	r2, [pc, #80]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800946a:	fa22 f303 	lsr.w	r3, r2, r3
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009470:	e01e      	b.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009472:	4b11      	ldr	r3, [pc, #68]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800947e:	d106      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009486:	d102      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009488:	4b0d      	ldr	r3, [pc, #52]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800948a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800948c:	e010      	b.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800948e:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800949a:	d106      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800949c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a2:	d102      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094a4:	4b07      	ldr	r3, [pc, #28]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a8:	e002      	b.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094ae:	e242      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094b0:	e241      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094b2:	4b05      	ldr	r3, [pc, #20]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b6:	e23e      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094b8:	58024400 	.word	0x58024400
 80094bc:	03d09000 	.word	0x03d09000
 80094c0:	003d0900 	.word	0x003d0900
 80094c4:	017d7840 	.word	0x017d7840
 80094c8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e231      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80094d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80094da:	430b      	orrs	r3, r1
 80094dc:	f040 8085 	bne.w	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80094e0:	4b9c      	ldr	r3, [pc, #624]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80094e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094f0:	d06b      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80094f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094f8:	d874      	bhi.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009500:	d056      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009508:	d86c      	bhi.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009510:	d03b      	beq.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009518:	d864      	bhi.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800951a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009520:	d021      	beq.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009528:	d85c      	bhi.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009536:	d004      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009538:	e054      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fe fb5f 	bl	8007bfc <HAL_RCC_GetPCLK1Freq>
 800953e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009540:	e1f9      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009542:	4b84      	ldr	r3, [pc, #528]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800954e:	d107      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009550:	f107 0318 	add.w	r3, r7, #24
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fa13 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800955e:	e1ea      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009564:	e1e7      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009566:	4b7b      	ldr	r3, [pc, #492]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800956e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009572:	d107      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fb55 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009582:	e1d8      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009588:	e1d5      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800958a:	4b72      	ldr	r3, [pc, #456]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b04      	cmp	r3, #4
 8009594:	d109      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009596:	4b6f      	ldr	r3, [pc, #444]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	08db      	lsrs	r3, r3, #3
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	4a6d      	ldr	r2, [pc, #436]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095a2:	fa22 f303 	lsr.w	r3, r2, r3
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a8:	e1c5      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ae:	e1c2      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095b0:	4b68      	ldr	r3, [pc, #416]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095bc:	d102      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80095be:	4b67      	ldr	r3, [pc, #412]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c2:	e1b8      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c8:	e1b5      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095ca:	4b62      	ldr	r3, [pc, #392]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d6:	d102      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80095d8:	4b61      	ldr	r3, [pc, #388]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095dc:	e1ab      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e1a8      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e8:	e1a5      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80095ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ee:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80095f2:	430b      	orrs	r3, r1
 80095f4:	d173      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80095f6:	4b57      	ldr	r3, [pc, #348]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80095fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009606:	d02f      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960e:	d863      	bhi.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800961c:	d012      	beq.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800961e:	e05b      	b.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009620:	4b4c      	ldr	r3, [pc, #304]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800962c:	d107      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800962e:	f107 0318 	add.w	r3, r7, #24
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f9a4 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963c:	e17b      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009642:	e178      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009644:	4b43      	ldr	r3, [pc, #268]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800964c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009650:	d107      	bne.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009652:	f107 030c 	add.w	r3, r7, #12
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fae6 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009660:	e169      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009666:	e166      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009668:	4b3a      	ldr	r3, [pc, #232]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800966a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009670:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009672:	4b38      	ldr	r3, [pc, #224]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0304 	and.w	r3, r3, #4
 800967a:	2b04      	cmp	r3, #4
 800967c:	d10c      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800967e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009680:	2b00      	cmp	r3, #0
 8009682:	d109      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009684:	4b33      	ldr	r3, [pc, #204]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	08db      	lsrs	r3, r3, #3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	4a32      	ldr	r2, [pc, #200]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009696:	e01e      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009698:	4b2e      	ldr	r3, [pc, #184]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a4:	d106      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80096a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ac:	d102      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096ae:	4b2b      	ldr	r3, [pc, #172]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80096b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b2:	e010      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b4:	4b27      	ldr	r3, [pc, #156]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096c0:	d106      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80096c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c8:	d102      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096ca:	4b25      	ldr	r3, [pc, #148]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80096cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ce:	e002      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096d4:	e12f      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80096d6:	e12e      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096dc:	e12b      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80096e6:	430b      	orrs	r3, r1
 80096e8:	d13c      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80096ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009700:	d012      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009702:	e023      	b.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009704:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800970c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009710:	d107      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fbda 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009720:	e109      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009726:	e106      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009728:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009734:	d107      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009736:	f107 0318 	add.w	r3, r7, #24
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f920 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009744:	e0f7      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e0f4      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e0f1      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009752:	bf00      	nop
 8009754:	58024400 	.word	0x58024400
 8009758:	03d09000 	.word	0x03d09000
 800975c:	003d0900 	.word	0x003d0900
 8009760:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009768:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800976c:	430b      	orrs	r3, r1
 800976e:	f040 8091 	bne.w	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009772:	4b73      	ldr	r3, [pc, #460]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800977a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009782:	f000 8081 	beq.w	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800978c:	d87f      	bhi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009794:	d06b      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800979c:	d877      	bhi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a4:	d056      	beq.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ac:	d86f      	bhi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097b4:	d03b      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097bc:	d867      	bhi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c4:	d021      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097cc:	d85f      	bhi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097da:	d004      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80097dc:	e057      	b.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097de:	f000 f8b9 	bl	8009954 <HAL_RCCEx_GetD3PCLK1Freq>
 80097e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097e4:	e0a7      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097e6:	4b56      	ldr	r3, [pc, #344]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097f2:	d107      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097f4:	f107 0318 	add.w	r3, r7, #24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f8c1 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009802:	e098      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009808:	e095      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800980a:	4b4d      	ldr	r3, [pc, #308]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009816:	d107      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009818:	f107 030c 	add.w	r3, r7, #12
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fa03 	bl	8009c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009826:	e086      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982c:	e083      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800982e:	4b44      	ldr	r3, [pc, #272]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b04      	cmp	r3, #4
 8009838:	d109      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800983a:	4b41      	ldr	r3, [pc, #260]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	08db      	lsrs	r3, r3, #3
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	4a3f      	ldr	r2, [pc, #252]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009846:	fa22 f303 	lsr.w	r3, r2, r3
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984c:	e073      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009852:	e070      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009854:	4b3a      	ldr	r3, [pc, #232]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009860:	d102      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009862:	4b39      	ldr	r3, [pc, #228]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009866:	e066      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986c:	e063      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800986e:	4b34      	ldr	r3, [pc, #208]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800987a:	d102      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800987c:	4b33      	ldr	r3, [pc, #204]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009880:	e059      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009886:	e056      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009888:	4b31      	ldr	r3, [pc, #196]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800988a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988c:	e053      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009892:	e050      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009898:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800989c:	430b      	orrs	r3, r1
 800989e:	d148      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098a0:	4b27      	ldr	r3, [pc, #156]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b0:	d02a      	beq.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b8:	d838      	bhi.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c6:	d00d      	beq.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80098c8:	e030      	b.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d6:	d102      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80098d8:	4b1c      	ldr	r3, [pc, #112]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098dc:	e02b      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e2:	e028      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098e4:	4b16      	ldr	r3, [pc, #88]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098f0:	d107      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 faea 	bl	8009ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009900:	e019      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009906:	e016      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009908:	4b0d      	ldr	r3, [pc, #52]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009914:	d107      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009916:	f107 0318 	add.w	r3, r7, #24
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f830 	bl	8009980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009924:	e007      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992a:	e004      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009930:	e001      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009938:	4618      	mov	r0, r3
 800993a:	3740      	adds	r7, #64	@ 0x40
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	58024400 	.word	0x58024400
 8009944:	03d09000 	.word	0x03d09000
 8009948:	003d0900 	.word	0x003d0900
 800994c:	017d7840 	.word	0x017d7840
 8009950:	00bb8000 	.word	0x00bb8000

08009954 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009958:	f7fe f920 	bl	8007b9c <HAL_RCC_GetHCLKFreq>
 800995c:	4602      	mov	r2, r0
 800995e:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	091b      	lsrs	r3, r3, #4
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	4904      	ldr	r1, [pc, #16]	@ (800997c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800996a:	5ccb      	ldrb	r3, [r1, r3]
 800996c:	f003 031f 	and.w	r3, r3, #31
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009974:	4618      	mov	r0, r3
 8009976:	bd80      	pop	{r7, pc}
 8009978:	58024400 	.word	0x58024400
 800997c:	0800af68 	.word	0x0800af68

08009980 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	@ 0x24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009988:	4ba1      	ldr	r3, [pc, #644]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009992:	4b9f      	ldr	r3, [pc, #636]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	0b1b      	lsrs	r3, r3, #12
 8009998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800999c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800999e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a2:	091b      	lsrs	r3, r3, #4
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099aa:	4b99      	ldr	r3, [pc, #612]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ae:	08db      	lsrs	r3, r3, #3
 80099b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8111 	beq.w	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	f000 8083 	beq.w	8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f200 80a1 	bhi.w	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d056      	beq.n	8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099ea:	e099      	b.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ec:	4b88      	ldr	r3, [pc, #544]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d02d      	beq.n	8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099f8:	4b85      	ldr	r3, [pc, #532]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	4a84      	ldr	r2, [pc, #528]	@ (8009c14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a22:	4b7b      	ldr	r3, [pc, #492]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a52:	e087      	b.n	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a66:	4b6a      	ldr	r3, [pc, #424]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a96:	e065      	b.n	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b59      	ldr	r3, [pc, #356]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009abe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ada:	e043      	b.n	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b48      	ldr	r3, [pc, #288]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b1e:	e021      	b.n	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b37      	ldr	r3, [pc, #220]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b64:	4b2a      	ldr	r3, [pc, #168]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b68:	0a5b      	lsrs	r3, r3, #9
 8009b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8a:	ee17 2a90 	vmov	r2, s15
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b92:	4b1f      	ldr	r3, [pc, #124]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb8:	ee17 2a90 	vmov	r2, s15
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bc0:	4b13      	ldr	r3, [pc, #76]	@ (8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc4:	0e1b      	lsrs	r3, r3, #24
 8009bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be6:	ee17 2a90 	vmov	r2, s15
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bee:	e008      	b.n	8009c02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	609a      	str	r2, [r3, #8]
}
 8009c02:	bf00      	nop
 8009c04:	3724      	adds	r7, #36	@ 0x24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	58024400 	.word	0x58024400
 8009c14:	03d09000 	.word	0x03d09000
 8009c18:	46000000 	.word	0x46000000
 8009c1c:	4c742400 	.word	0x4c742400
 8009c20:	4a742400 	.word	0x4a742400
 8009c24:	4bbebc20 	.word	0x4bbebc20

08009c28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b089      	sub	sp, #36	@ 0x24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c30:	4ba1      	ldr	r3, [pc, #644]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c3a:	4b9f      	ldr	r3, [pc, #636]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3e:	0d1b      	lsrs	r3, r3, #20
 8009c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c46:	4b9c      	ldr	r3, [pc, #624]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c52:	4b99      	ldr	r3, [pc, #612]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c56:	08db      	lsrs	r3, r3, #3
 8009c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 8111 	beq.w	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	f000 8083 	beq.w	8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f200 80a1 	bhi.w	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d056      	beq.n	8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c92:	e099      	b.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c94:	4b88      	ldr	r3, [pc, #544]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d02d      	beq.n	8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ca0:	4b85      	ldr	r3, [pc, #532]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	08db      	lsrs	r3, r3, #3
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	4a84      	ldr	r2, [pc, #528]	@ (8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009cac:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cca:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cfa:	e087      	b.n	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d3e:	e065      	b.n	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d52:	4b59      	ldr	r3, [pc, #356]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d82:	e043      	b.n	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b48      	ldr	r3, [pc, #288]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dc6:	e021      	b.n	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b37      	ldr	r3, [pc, #220]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e10:	0a5b      	lsrs	r3, r3, #9
 8009e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e32:	ee17 2a90 	vmov	r2, s15
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e44:	ee07 3a90 	vmov	s15, r3
 8009e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e60:	ee17 2a90 	vmov	r2, s15
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8e:	ee17 2a90 	vmov	r2, s15
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e96:	e008      	b.n	8009eaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	609a      	str	r2, [r3, #8]
}
 8009eaa:	bf00      	nop
 8009eac:	3724      	adds	r7, #36	@ 0x24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	58024400 	.word	0x58024400
 8009ebc:	03d09000 	.word	0x03d09000
 8009ec0:	46000000 	.word	0x46000000
 8009ec4:	4c742400 	.word	0x4c742400
 8009ec8:	4a742400 	.word	0x4a742400
 8009ecc:	4bbebc20 	.word	0x4bbebc20

08009ed0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b089      	sub	sp, #36	@ 0x24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ed8:	4ba0      	ldr	r3, [pc, #640]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009edc:	f003 0303 	and.w	r3, r3, #3
 8009ee0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	091b      	lsrs	r3, r3, #4
 8009ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009eec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009eee:	4b9b      	ldr	r3, [pc, #620]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ef8:	4b98      	ldr	r3, [pc, #608]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009efc:	08db      	lsrs	r3, r3, #3
 8009efe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 8111 	beq.w	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	f000 8083 	beq.w	800a02a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	f200 80a1 	bhi.w	800a06e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d056      	beq.n	8009fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f38:	e099      	b.n	800a06e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3a:	4b88      	ldr	r3, [pc, #544]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d02d      	beq.n	8009fa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f46:	4b85      	ldr	r3, [pc, #532]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	4a83      	ldr	r2, [pc, #524]	@ (800a160 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f52:	fa22 f303 	lsr.w	r3, r2, r3
 8009f56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	ee07 3a90 	vmov	s15, r3
 8009f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f70:	4b7a      	ldr	r3, [pc, #488]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f78:	ee07 3a90 	vmov	s15, r3
 8009f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fa0:	e087      	b.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a168 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb4:	4b69      	ldr	r3, [pc, #420]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbc:	ee07 3a90 	vmov	s15, r3
 8009fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe4:	e065      	b.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	ee07 3a90 	vmov	s15, r3
 8009fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a16c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff8:	4b58      	ldr	r3, [pc, #352]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a000:	ee07 3a90 	vmov	s15, r3
 800a004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a008:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a01c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a028:	e043      	b.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a034:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03c:	4b47      	ldr	r3, [pc, #284]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a050:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06c:	e021      	b.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a168 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a080:	4b36      	ldr	r3, [pc, #216]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	ed97 6a03 	vldr	s12, [r7, #12]
 800a094:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b6:	0a5b      	lsrs	r3, r3, #9
 800a0b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0d8:	ee17 2a90 	vmov	r2, s15
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e4:	0c1b      	lsrs	r3, r3, #16
 800a0e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a106:	ee17 2a90 	vmov	r2, s15
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a10e:	4b13      	ldr	r3, [pc, #76]	@ (800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a112:	0e1b      	lsrs	r3, r3, #24
 800a114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a124:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a128:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	ee17 2a90 	vmov	r2, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a13c:	e008      	b.n	800a150 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	609a      	str	r2, [r3, #8]
}
 800a150:	bf00      	nop
 800a152:	3724      	adds	r7, #36	@ 0x24
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	46000000 	.word	0x46000000
 800a168:	4c742400 	.word	0x4c742400
 800a16c:	4a742400 	.word	0x4a742400
 800a170:	4bbebc20 	.word	0x4bbebc20

0800a174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a182:	4b53      	ldr	r3, [pc, #332]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d101      	bne.n	800a192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e099      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a192:	4b4f      	ldr	r3, [pc, #316]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a4e      	ldr	r2, [pc, #312]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a198:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19e:	f7f7 fcc7 	bl	8001b30 <HAL_GetTick>
 800a1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1a4:	e008      	b.n	800a1b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1a6:	f7f7 fcc3 	bl	8001b30 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e086      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1b8:	4b45      	ldr	r3, [pc, #276]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f0      	bne.n	800a1a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1c4:	4b42      	ldr	r3, [pc, #264]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	031b      	lsls	r3, r3, #12
 800a1d2:	493f      	ldr	r1, [pc, #252]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	025b      	lsls	r3, r3, #9
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	3b01      	subs	r3, #1
 800a202:	061b      	lsls	r3, r3, #24
 800a204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a208:	4931      	ldr	r1, [pc, #196]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a20e:	4b30      	ldr	r3, [pc, #192]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	492d      	ldr	r1, [pc, #180]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a220:	4b2b      	ldr	r3, [pc, #172]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a224:	f023 0220 	bic.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	4928      	ldr	r1, [pc, #160]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a232:	4b27      	ldr	r3, [pc, #156]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a236:	4a26      	ldr	r2, [pc, #152]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a23e:	4b24      	ldr	r3, [pc, #144]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a242:	4b24      	ldr	r3, [pc, #144]	@ (800a2d4 <RCCEx_PLL2_Config+0x160>)
 800a244:	4013      	ands	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	69d2      	ldr	r2, [r2, #28]
 800a24a:	00d2      	lsls	r2, r2, #3
 800a24c:	4920      	ldr	r1, [pc, #128]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a252:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a256:	4a1e      	ldr	r2, [pc, #120]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a258:	f043 0310 	orr.w	r3, r3, #16
 800a25c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a264:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a268:	4a19      	ldr	r2, [pc, #100]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a26a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a26e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a270:	e00f      	b.n	800a292 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d106      	bne.n	800a286 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a278:	4b15      	ldr	r3, [pc, #84]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	4a14      	ldr	r2, [pc, #80]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a284:	e005      	b.n	800a292 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a286:	4b12      	ldr	r3, [pc, #72]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28a:	4a11      	ldr	r2, [pc, #68]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a290:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a292:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a0e      	ldr	r2, [pc, #56]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a298:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a29c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a29e:	f7f7 fc47 	bl	8001b30 <HAL_GetTick>
 800a2a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2a4:	e008      	b.n	800a2b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2a6:	f7f7 fc43 	bl	8001b30 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d901      	bls.n	800a2b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e006      	b.n	800a2c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2b8:	4b05      	ldr	r3, [pc, #20]	@ (800a2d0 <RCCEx_PLL2_Config+0x15c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0f0      	beq.n	800a2a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	ffff0007 	.word	0xffff0007

0800a2d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2e6:	4b53      	ldr	r3, [pc, #332]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d101      	bne.n	800a2f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e099      	b.n	800a42a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2f6:	4b4f      	ldr	r3, [pc, #316]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a4e      	ldr	r2, [pc, #312]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a2fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a302:	f7f7 fc15 	bl	8001b30 <HAL_GetTick>
 800a306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a308:	e008      	b.n	800a31c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a30a:	f7f7 fc11 	bl	8001b30 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	d901      	bls.n	800a31c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e086      	b.n	800a42a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a31c:	4b45      	ldr	r3, [pc, #276]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1f0      	bne.n	800a30a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a328:	4b42      	ldr	r3, [pc, #264]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	051b      	lsls	r3, r3, #20
 800a336:	493f      	ldr	r1, [pc, #252]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	3b01      	subs	r3, #1
 800a342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	025b      	lsls	r3, r3, #9
 800a34e:	b29b      	uxth	r3, r3
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a36c:	4931      	ldr	r1, [pc, #196]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a372:	4b30      	ldr	r3, [pc, #192]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a376:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	492d      	ldr	r1, [pc, #180]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a380:	4313      	orrs	r3, r2
 800a382:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a384:	4b2b      	ldr	r3, [pc, #172]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	4928      	ldr	r1, [pc, #160]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a396:	4b27      	ldr	r3, [pc, #156]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39a:	4a26      	ldr	r2, [pc, #152]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a39c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3a2:	4b24      	ldr	r3, [pc, #144]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3a6:	4b24      	ldr	r3, [pc, #144]	@ (800a438 <RCCEx_PLL3_Config+0x160>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	69d2      	ldr	r2, [r2, #28]
 800a3ae:	00d2      	lsls	r2, r2, #3
 800a3b0:	4920      	ldr	r1, [pc, #128]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	4a19      	ldr	r2, [pc, #100]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3d4:	e00f      	b.n	800a3f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d106      	bne.n	800a3ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3dc:	4b15      	ldr	r3, [pc, #84]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	4a14      	ldr	r2, [pc, #80]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3e8:	e005      	b.n	800a3f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3ea:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	4a11      	ldr	r2, [pc, #68]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a402:	f7f7 fb95 	bl	8001b30 <HAL_GetTick>
 800a406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a408:	e008      	b.n	800a41c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a40a:	f7f7 fb91 	bl	8001b30 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e006      	b.n	800a42a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <RCCEx_PLL3_Config+0x15c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0f0      	beq.n	800a40a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
 800a438:	ffff0007 	.word	0xffff0007

0800a43c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e049      	b.n	800a4e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7f7 f936 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3304      	adds	r3, #4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f000 fae0 	bl	800aa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d001      	beq.n	800a504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e054      	b.n	800a5ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a26      	ldr	r2, [pc, #152]	@ (800a5bc <HAL_TIM_Base_Start_IT+0xd0>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d022      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a52e:	d01d      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a22      	ldr	r2, [pc, #136]	@ (800a5c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d018      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a21      	ldr	r2, [pc, #132]	@ (800a5c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d013      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1f      	ldr	r2, [pc, #124]	@ (800a5c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00e      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a1e      	ldr	r2, [pc, #120]	@ (800a5cc <HAL_TIM_Base_Start_IT+0xe0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d009      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d004      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d115      	bne.n	800a598 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	4b19      	ldr	r3, [pc, #100]	@ (800a5d8 <HAL_TIM_Base_Start_IT+0xec>)
 800a574:	4013      	ands	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b06      	cmp	r3, #6
 800a57c:	d015      	beq.n	800a5aa <HAL_TIM_Base_Start_IT+0xbe>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a584:	d011      	beq.n	800a5aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0201 	orr.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a596:	e008      	b.n	800a5aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0201 	orr.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	e000      	b.n	800a5ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40000400 	.word	0x40000400
 800a5c4:	40000800 	.word	0x40000800
 800a5c8:	40000c00 	.word	0x40000c00
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	40001800 	.word	0x40001800
 800a5d4:	40014000 	.word	0x40014000
 800a5d8:	00010007 	.word	0x00010007

0800a5dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d020      	beq.n	800a640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01b      	beq.n	800a640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f06f 0202 	mvn.w	r2, #2
 800a610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f9ec 	bl	800aa04 <HAL_TIM_IC_CaptureCallback>
 800a62c:	e005      	b.n	800a63a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9de 	bl	800a9f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9ef 	bl	800aa18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d020      	beq.n	800a68c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f003 0304 	and.w	r3, r3, #4
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01b      	beq.n	800a68c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f06f 0204 	mvn.w	r2, #4
 800a65c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2202      	movs	r2, #2
 800a662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f9c6 	bl	800aa04 <HAL_TIM_IC_CaptureCallback>
 800a678:	e005      	b.n	800a686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f9b8 	bl	800a9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9c9 	bl	800aa18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d020      	beq.n	800a6d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01b      	beq.n	800a6d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f06f 0208 	mvn.w	r2, #8
 800a6a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f9a0 	bl	800aa04 <HAL_TIM_IC_CaptureCallback>
 800a6c4:	e005      	b.n	800a6d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f992 	bl	800a9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f9a3 	bl	800aa18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f003 0310 	and.w	r3, r3, #16
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d020      	beq.n	800a724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01b      	beq.n	800a724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0210 	mvn.w	r2, #16
 800a6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f97a 	bl	800aa04 <HAL_TIM_IC_CaptureCallback>
 800a710:	e005      	b.n	800a71e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f96c 	bl	800a9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f97d 	bl	800aa18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00c      	beq.n	800a748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0201 	mvn.w	r2, #1
 800a740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f94a 	bl	800a9dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00c      	beq.n	800a776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fb41 	bl	800adf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00c      	beq.n	800a79a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d007      	beq.n	800a79a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fb39 	bl	800ae0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00c      	beq.n	800a7be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f937 	bl	800aa2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00c      	beq.n	800a7e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f06f 0220 	mvn.w	r2, #32
 800a7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fb01 	bl	800ade4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d101      	bne.n	800a808 <HAL_TIM_ConfigClockSource+0x1c>
 800a804:	2302      	movs	r3, #2
 800a806:	e0dc      	b.n	800a9c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	4b6a      	ldr	r3, [pc, #424]	@ (800a9cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800a824:	4013      	ands	r3, r2
 800a826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a82e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a64      	ldr	r2, [pc, #400]	@ (800a9d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	f000 80a9 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a844:	4a62      	ldr	r2, [pc, #392]	@ (800a9d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	f200 80ae 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a84c:	4a61      	ldr	r2, [pc, #388]	@ (800a9d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	f000 80a1 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a854:	4a5f      	ldr	r2, [pc, #380]	@ (800a9d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	f200 80a6 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a85c:	4a5e      	ldr	r2, [pc, #376]	@ (800a9d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	f000 8099 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a864:	4a5c      	ldr	r2, [pc, #368]	@ (800a9d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a866:	4293      	cmp	r3, r2
 800a868:	f200 809e 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a86c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a870:	f000 8091 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a874:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a878:	f200 8096 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a87c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a880:	f000 8089 	beq.w	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a884:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a888:	f200 808e 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a88c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a890:	d03e      	beq.n	800a910 <HAL_TIM_ConfigClockSource+0x124>
 800a892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a896:	f200 8087 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a89e:	f000 8086 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x1c2>
 800a8a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a6:	d87f      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8a8:	2b70      	cmp	r3, #112	@ 0x70
 800a8aa:	d01a      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0xf6>
 800a8ac:	2b70      	cmp	r3, #112	@ 0x70
 800a8ae:	d87b      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8b0:	2b60      	cmp	r3, #96	@ 0x60
 800a8b2:	d050      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x16a>
 800a8b4:	2b60      	cmp	r3, #96	@ 0x60
 800a8b6:	d877      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8b8:	2b50      	cmp	r3, #80	@ 0x50
 800a8ba:	d03c      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x14a>
 800a8bc:	2b50      	cmp	r3, #80	@ 0x50
 800a8be:	d873      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8c0:	2b40      	cmp	r3, #64	@ 0x40
 800a8c2:	d058      	beq.n	800a976 <HAL_TIM_ConfigClockSource+0x18a>
 800a8c4:	2b40      	cmp	r3, #64	@ 0x40
 800a8c6:	d86f      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8c8:	2b30      	cmp	r3, #48	@ 0x30
 800a8ca:	d064      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8cc:	2b30      	cmp	r3, #48	@ 0x30
 800a8ce:	d86b      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	d060      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d867      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d05c      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d05a      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8e0:	e062      	b.n	800a9a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8f2:	f000 f9c9 	bl	800ac88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	609a      	str	r2, [r3, #8]
      break;
 800a90e:	e04f      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a920:	f000 f9b2 	bl	800ac88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a932:	609a      	str	r2, [r3, #8]
      break;
 800a934:	e03c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a942:	461a      	mov	r2, r3
 800a944:	f000 f922 	bl	800ab8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2150      	movs	r1, #80	@ 0x50
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 f97c 	bl	800ac4c <TIM_ITRx_SetConfig>
      break;
 800a954:	e02c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a962:	461a      	mov	r2, r3
 800a964:	f000 f941 	bl	800abea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2160      	movs	r1, #96	@ 0x60
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f96c 	bl	800ac4c <TIM_ITRx_SetConfig>
      break;
 800a974:	e01c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a982:	461a      	mov	r2, r3
 800a984:	f000 f902 	bl	800ab8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2140      	movs	r1, #64	@ 0x40
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f95c 	bl	800ac4c <TIM_ITRx_SetConfig>
      break;
 800a994:	e00c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f000 f953 	bl	800ac4c <TIM_ITRx_SetConfig>
      break;
 800a9a6:	e003      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ac:	e000      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a9ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	ffceff88 	.word	0xffceff88
 800a9d0:	00100040 	.word	0x00100040
 800a9d4:	00100030 	.word	0x00100030
 800a9d8:	00100020 	.word	0x00100020

0800a9dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a46      	ldr	r2, [pc, #280]	@ (800ab6c <TIM_Base_SetConfig+0x12c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d013      	beq.n	800aa80 <TIM_Base_SetConfig+0x40>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5e:	d00f      	beq.n	800aa80 <TIM_Base_SetConfig+0x40>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a43      	ldr	r2, [pc, #268]	@ (800ab70 <TIM_Base_SetConfig+0x130>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d00b      	beq.n	800aa80 <TIM_Base_SetConfig+0x40>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a42      	ldr	r2, [pc, #264]	@ (800ab74 <TIM_Base_SetConfig+0x134>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d007      	beq.n	800aa80 <TIM_Base_SetConfig+0x40>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a41      	ldr	r2, [pc, #260]	@ (800ab78 <TIM_Base_SetConfig+0x138>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_Base_SetConfig+0x40>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a40      	ldr	r2, [pc, #256]	@ (800ab7c <TIM_Base_SetConfig+0x13c>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d108      	bne.n	800aa92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a35      	ldr	r2, [pc, #212]	@ (800ab6c <TIM_Base_SetConfig+0x12c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d01f      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaa0:	d01b      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a32      	ldr	r2, [pc, #200]	@ (800ab70 <TIM_Base_SetConfig+0x130>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d017      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a31      	ldr	r2, [pc, #196]	@ (800ab74 <TIM_Base_SetConfig+0x134>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d013      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a30      	ldr	r2, [pc, #192]	@ (800ab78 <TIM_Base_SetConfig+0x138>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00f      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a2f      	ldr	r2, [pc, #188]	@ (800ab7c <TIM_Base_SetConfig+0x13c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00b      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a2e      	ldr	r2, [pc, #184]	@ (800ab80 <TIM_Base_SetConfig+0x140>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d007      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2d      	ldr	r2, [pc, #180]	@ (800ab84 <TIM_Base_SetConfig+0x144>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d003      	beq.n	800aada <TIM_Base_SetConfig+0x9a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a2c      	ldr	r2, [pc, #176]	@ (800ab88 <TIM_Base_SetConfig+0x148>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d108      	bne.n	800aaec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a16      	ldr	r2, [pc, #88]	@ (800ab6c <TIM_Base_SetConfig+0x12c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d00f      	beq.n	800ab38 <TIM_Base_SetConfig+0xf8>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a18      	ldr	r2, [pc, #96]	@ (800ab7c <TIM_Base_SetConfig+0x13c>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00b      	beq.n	800ab38 <TIM_Base_SetConfig+0xf8>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a17      	ldr	r2, [pc, #92]	@ (800ab80 <TIM_Base_SetConfig+0x140>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d007      	beq.n	800ab38 <TIM_Base_SetConfig+0xf8>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a16      	ldr	r2, [pc, #88]	@ (800ab84 <TIM_Base_SetConfig+0x144>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <TIM_Base_SetConfig+0xf8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a15      	ldr	r2, [pc, #84]	@ (800ab88 <TIM_Base_SetConfig+0x148>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d103      	bne.n	800ab40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d105      	bne.n	800ab5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f023 0201 	bic.w	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	611a      	str	r2, [r3, #16]
  }
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40000400 	.word	0x40000400
 800ab74:	40000800 	.word	0x40000800
 800ab78:	40000c00 	.word	0x40000c00
 800ab7c:	40010400 	.word	0x40010400
 800ab80:	40014000 	.word	0x40014000
 800ab84:	40014400 	.word	0x40014400
 800ab88:	40014800 	.word	0x40014800

0800ab8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a1b      	ldr	r3, [r3, #32]
 800ab9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	f023 0201 	bic.w	r2, r3, #1
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	011b      	lsls	r3, r3, #4
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f023 030a 	bic.w	r3, r3, #10
 800abc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	621a      	str	r2, [r3, #32]
}
 800abde:	bf00      	nop
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abea:	b480      	push	{r7}
 800abec:	b087      	sub	sp, #28
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	f023 0210 	bic.w	r2, r3, #16
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	031b      	lsls	r3, r3, #12
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4b09      	ldr	r3, [pc, #36]	@ (800ac84 <TIM_ITRx_SetConfig+0x38>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	f043 0307 	orr.w	r3, r3, #7
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	609a      	str	r2, [r3, #8]
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	ffcfff8f 	.word	0xffcfff8f

0800ac88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	021a      	lsls	r2, r3, #8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	431a      	orrs	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	4313      	orrs	r3, r2
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	609a      	str	r2, [r3, #8]
}
 800acbc:	bf00      	nop
 800acbe:	371c      	adds	r7, #28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d101      	bne.n	800ace0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acdc:	2302      	movs	r3, #2
 800acde:	e06d      	b.n	800adbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a30      	ldr	r2, [pc, #192]	@ (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d004      	beq.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a2f      	ldr	r2, [pc, #188]	@ (800adcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d108      	bne.n	800ad26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a20      	ldr	r2, [pc, #128]	@ (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d022      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad52:	d01d      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a1d      	ldr	r2, [pc, #116]	@ (800add0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d018      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a1c      	ldr	r2, [pc, #112]	@ (800add4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d013      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a1a      	ldr	r2, [pc, #104]	@ (800add8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00e      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a15      	ldr	r2, [pc, #84]	@ (800adcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d009      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a16      	ldr	r2, [pc, #88]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d004      	beq.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a15      	ldr	r2, [pc, #84]	@ (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d10c      	bne.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	40010000 	.word	0x40010000
 800adcc:	40010400 	.word	0x40010400
 800add0:	40000400 	.word	0x40000400
 800add4:	40000800 	.word	0x40000800
 800add8:	40000c00 	.word	0x40000c00
 800addc:	40001800 	.word	0x40001800
 800ade0:	40014000 	.word	0x40014000

0800ade4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <memset>:
 800ae20:	4402      	add	r2, r0
 800ae22:	4603      	mov	r3, r0
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d100      	bne.n	800ae2a <memset+0xa>
 800ae28:	4770      	bx	lr
 800ae2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2e:	e7f9      	b.n	800ae24 <memset+0x4>

0800ae30 <__libc_init_array>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	4d0d      	ldr	r5, [pc, #52]	@ (800ae68 <__libc_init_array+0x38>)
 800ae34:	4c0d      	ldr	r4, [pc, #52]	@ (800ae6c <__libc_init_array+0x3c>)
 800ae36:	1b64      	subs	r4, r4, r5
 800ae38:	10a4      	asrs	r4, r4, #2
 800ae3a:	2600      	movs	r6, #0
 800ae3c:	42a6      	cmp	r6, r4
 800ae3e:	d109      	bne.n	800ae54 <__libc_init_array+0x24>
 800ae40:	4d0b      	ldr	r5, [pc, #44]	@ (800ae70 <__libc_init_array+0x40>)
 800ae42:	4c0c      	ldr	r4, [pc, #48]	@ (800ae74 <__libc_init_array+0x44>)
 800ae44:	f000 f826 	bl	800ae94 <_init>
 800ae48:	1b64      	subs	r4, r4, r5
 800ae4a:	10a4      	asrs	r4, r4, #2
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	42a6      	cmp	r6, r4
 800ae50:	d105      	bne.n	800ae5e <__libc_init_array+0x2e>
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae58:	4798      	blx	r3
 800ae5a:	3601      	adds	r6, #1
 800ae5c:	e7ee      	b.n	800ae3c <__libc_init_array+0xc>
 800ae5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae62:	4798      	blx	r3
 800ae64:	3601      	adds	r6, #1
 800ae66:	e7f2      	b.n	800ae4e <__libc_init_array+0x1e>
 800ae68:	0800af90 	.word	0x0800af90
 800ae6c:	0800af90 	.word	0x0800af90
 800ae70:	0800af90 	.word	0x0800af90
 800ae74:	0800af94 	.word	0x0800af94

0800ae78 <memcpy>:
 800ae78:	440a      	add	r2, r1
 800ae7a:	4291      	cmp	r1, r2
 800ae7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae80:	d100      	bne.n	800ae84 <memcpy+0xc>
 800ae82:	4770      	bx	lr
 800ae84:	b510      	push	{r4, lr}
 800ae86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8e:	4291      	cmp	r1, r2
 800ae90:	d1f9      	bne.n	800ae86 <memcpy+0xe>
 800ae92:	bd10      	pop	{r4, pc}

0800ae94 <_init>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr

0800aea0 <_fini>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

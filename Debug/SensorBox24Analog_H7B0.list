
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000444  24000010  08009360  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000454  08009360  00020454  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001563c  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026be  00000000  00000000  000356bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001268  00000000  00000000  00037d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e39  00000000  00000000  00038fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f09  00000000  00000000  00039e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016f7c  00000000  00000000  0006bd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d5e2  00000000  00000000  00082ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005008  00000000  00000000  001d0288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  001d5290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080092cc 	.word	0x080092cc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080092cc 	.word	0x080092cc

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MX_DMA_Init();
 80002f0:	f000 fbdc 	bl	8000aac <MX_DMA_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f001 f8ae 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f836 	bl	8000368 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002fc:	f000 f8aa 	bl	8000454 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 fbfc 	bl	8000afc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000304:	f000 f9da 	bl	80006bc <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000308:	f000 fa48 	bl	800079c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800030c:	f000 faaa 	bl	8000864 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000310:	f000 fb0c 	bl	800092c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000314:	f000 fb4a 	bl	80009ac <MX_I2C3_Init>
  MX_ADC1_Init();
 8000318:	f000 f8ce 	bl	80004b8 <MX_ADC1_Init>
  MX_I2C4_Init();
 800031c:	f000 fb86 	bl	8000a2c <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <main+0x6c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	461a      	mov	r2, r3
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <main+0x70>)
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <main+0x6c>)
 800032a:	f001 fc8b 	bl	8001c44 <HAL_ADC_Start_DMA>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <main+0x4c>
 8000334:	f000 fc2a 	bl	8000b8c <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x74>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	461a      	mov	r2, r3
 800033e:	4909      	ldr	r1, [pc, #36]	; (8000364 <main+0x78>)
 8000340:	4807      	ldr	r0, [pc, #28]	; (8000360 <main+0x74>)
 8000342:	f001 fc7f 	bl	8001c44 <HAL_ADC_Start_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <main+0x64>
 800034c:	f000 fc1e 	bl	8000b8c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000350:	2064      	movs	r0, #100	; 0x64
 8000352:	f001 f911 	bl	8001578 <HAL_Delay>
 8000356:	e7fb      	b.n	8000350 <main+0x64>
 8000358:	2400002c 	.word	0x2400002c
 800035c:	24000420 	.word	0x24000420
 8000360:	24000090 	.word	0x24000090
 8000364:	24000438 	.word	0x24000438

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09c      	sub	sp, #112	; 0x70
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000372:	224c      	movs	r2, #76	; 0x4c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f008 ff6e 	bl	8009258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2220      	movs	r2, #32
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f008 ff68 	bl	8009258 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000388:	4b30      	ldr	r3, [pc, #192]	; (800044c <SystemClock_Config+0xe4>)
 800038a:	f04f 32ff 	mov.w	r2, #4294967295
 800038e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000392:	2002      	movs	r0, #2
 8000394:	f005 fb74 	bl	8005a80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000398:	2300      	movs	r3, #0
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <SystemClock_Config+0xe8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2b      	ldr	r2, [pc, #172]	; (8000450 <SystemClock_Config+0xe8>)
 80003a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <SystemClock_Config+0xe8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b4:	bf00      	nop
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <SystemClock_Config+0xe8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c2:	d1f8      	bne.n	80003b6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	2302      	movs	r3, #2
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003cc:	2340      	movs	r3, #64	; 0x40
 80003ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003d8:	2304      	movs	r3, #4
 80003da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003dc:	2308      	movs	r3, #8
 80003de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003e4:	2303      	movs	r3, #3
 80003e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ec:	230c      	movs	r3, #12
 80003ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fc:	4618      	mov	r0, r3
 80003fe:	f005 fb79 	bl	8005af4 <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000408:	f000 fbc0 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	233f      	movs	r3, #63	; 0x3f
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000420:	2340      	movs	r3, #64	; 0x40
 8000422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800042a:	2340      	movs	r3, #64	; 0x40
 800042c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f005 ff90 	bl	8006358 <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800043e:	f000 fba5 	bl	8000b8c <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3770      	adds	r7, #112	; 0x70
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024400 	.word	0x58024400
 8000450:	58024800 	.word	0x58024800

08000454 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b0b0      	sub	sp, #192	; 0xc0
 8000458:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800045a:	463b      	mov	r3, r7
 800045c:	22c0      	movs	r2, #192	; 0xc0
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f008 fef9 	bl	8009258 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800046a:	f04f 0300 	mov.w	r3, #0
 800046e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000472:	2304      	movs	r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000476:	2308      	movs	r3, #8
 8000478:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 32;
 800047a:	2320      	movs	r3, #32
 800047c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800047e:	2303      	movs	r3, #3
 8000480:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800048a:	23c0      	movs	r3, #192	; 0xc0
 800048c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000496:	2300      	movs	r3, #0
 8000498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	4618      	mov	r0, r3
 80004a0:	f006 fad0 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80004aa:	f000 fb6f 	bl	8000b8c <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	37c0      	adds	r7, #192	; 0xc0
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004dc:	4b73      	ldr	r3, [pc, #460]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004de:	4a74      	ldr	r2, [pc, #464]	; (80006b0 <MX_ADC1_Init+0x1f8>)
 80004e0:	601a      	str	r2, [r3, #0]

  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80004e2:	4b72      	ldr	r3, [pc, #456]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b70      	ldr	r3, [pc, #448]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004ec:	2208      	movs	r2, #8
 80004ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b6e      	ldr	r3, [pc, #440]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80004f6:	4b6d      	ldr	r3, [pc, #436]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004fc:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b6a      	ldr	r3, [pc, #424]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000504:	2204      	movs	r2, #4
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000508:	4b68      	ldr	r3, [pc, #416]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800050a:	2200      	movs	r2, #0
 800050c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050e:	4b67      	ldr	r3, [pc, #412]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000510:	2200      	movs	r2, #0
 8000512:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000514:	4b65      	ldr	r3, [pc, #404]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000516:	220b      	movs	r2, #11
 8000518:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051a:	4b64      	ldr	r3, [pc, #400]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b62      	ldr	r3, [pc, #392]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000526:	4b61      	ldr	r3, [pc, #388]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800052c:	4b5f      	ldr	r3, [pc, #380]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000532:	4b5e      	ldr	r3, [pc, #376]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000534:	2200      	movs	r2, #0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000538:	4b5c      	ldr	r3, [pc, #368]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053e:	4b5b      	ldr	r3, [pc, #364]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000546:	4859      	ldr	r0, [pc, #356]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000548:	f001 fa22 	bl	8001990 <HAL_ADC_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000552:	f000 fb1b 	bl	8000b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	4852      	ldr	r0, [pc, #328]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000562:	f002 f92b 	bl	80027bc <HAL_ADCEx_MultiModeConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800056c:	f000 fb0e 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000570:	4b50      	ldr	r3, [pc, #320]	; (80006b4 <MX_ADC1_Init+0x1fc>)
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2306      	movs	r3, #6
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000580:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000582:	2304      	movs	r3, #4
 8000584:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4846      	ldr	r0, [pc, #280]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000594:	f001 fc28 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800059e:	f000 faf5 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a2:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <MX_ADC1_Init+0x200>)
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a6:	230c      	movs	r3, #12
 80005a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	483f      	ldr	r0, [pc, #252]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80005b0:	f001 fc1a 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80005ba:	f000 fae7 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005be:	2312      	movs	r3, #18
 80005c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	4839      	ldr	r0, [pc, #228]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80005c8:	f001 fc0e 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80005d2:	f000 fadb 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005d6:	2318      	movs	r3, #24
 80005d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4833      	ldr	r0, [pc, #204]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80005e0:	f001 fc02 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80005ea:	f000 facf 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	482c      	ldr	r0, [pc, #176]	; (80006ac <MX_ADC1_Init+0x1f4>)
 80005fa:	f001 fbf5 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000604:	f000 fac2 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000608:	f44f 7383 	mov.w	r3, #262	; 0x106
 800060c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000614:	f001 fbe8 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800061e:	f000 fab5 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000622:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	481f      	ldr	r0, [pc, #124]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800062e:	f001 fbdb 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 8000638:	f000 faa8 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800063c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4819      	ldr	r0, [pc, #100]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000648:	f001 fbce 	bl	8001de8 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 8000652:	f000 fa9b 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000656:	f44f 738c 	mov.w	r3, #280	; 0x118
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000662:	f001 fbc1 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 800066c:	f000 fa8e 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000674:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_ADC1_Init+0x1f4>)
 800067c:	f001 fbb4 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000686:	f000 fa81 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800068a:	f240 2306 	movw	r3, #518	; 0x206
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_ADC1_Init+0x1f4>)
 8000696:	f001 fba7 	bl	8001de8 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 80006a0:	f000 fa74 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2400002c 	.word	0x2400002c
 80006b0:	40022000 	.word	0x40022000
 80006b4:	47520000 	.word	0x47520000
 80006b8:	10c00010 	.word	0x10c00010

080006bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <MX_ADC2_Init+0xd8>)
 80006d8:	601a      	str	r2, [r3, #0]

  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_ADC2_Init+0xd4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000702:	2204      	movs	r2, #4
 8000704:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000708:	2200      	movs	r2, #0
 800070a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_ADC2_Init+0xd4>)
 800070e:	2200      	movs	r2, #0
 8000710:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000714:	2201      	movs	r2, #1
 8000716:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ADC2_Init+0xd4>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_ADC2_Init+0xd4>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000738:	2200      	movs	r2, #0
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_ADC2_Init+0xd4>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000746:	f001 f923 	bl	8001990 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 8000750:	f000 fa1c 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_ADC2_Init+0xdc>)
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2306      	movs	r3, #6
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000760:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_ADC2_Init+0xd4>)
 8000778:	f001 fb36 	bl	8001de8 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000782:	f000 fa03 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	24000090 	.word	0x24000090
 8000794:	40022100 	.word	0x40022100
 8000798:	36902000 	.word	0x36902000

0800079c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <MX_FDCAN1_Init+0xc4>)
 80007a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007c6:	2210      	movs	r2, #16
 80007c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007d8:	2202      	movs	r2, #2
 80007da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007de:	2201      	movs	r2, #1
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_FDCAN1_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_FDCAN1_Init+0xc0>)
 800080e:	2204      	movs	r2, #4
 8000810:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_FDCAN1_Init+0xc0>)
 800081a:	2204      	movs	r2, #4
 800081c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000826:	2204      	movs	r2, #4
 8000828:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_FDCAN1_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_FDCAN1_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_FDCAN1_Init+0xc0>)
 8000844:	2204      	movs	r2, #4
 8000846:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_FDCAN1_Init+0xc0>)
 800084a:	f004 fadd 	bl	8004e08 <HAL_FDCAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000854:	f000 f99a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240001e4 	.word	0x240001e4
 8000860:	4000a000 	.word	0x4000a000

08000864 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <MX_FDCAN2_Init+0xc4>)
 800086c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 800088e:	2210      	movs	r2, #16
 8000890:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000894:	2201      	movs	r2, #1
 8000896:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 800089a:	2202      	movs	r2, #2
 800089c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 800090c:	2204      	movs	r2, #4
 800090e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_FDCAN2_Init+0xc0>)
 8000912:	f004 fa79 	bl	8004e08 <HAL_FDCAN_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800091c:	f000 f936 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000284 	.word	0x24000284
 8000928:	4000a400 	.word	0x4000a400

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <MX_I2C1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <MX_I2C1_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x74>)
 8000968:	f004 ff62 	bl	8005830 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f90b 	bl	8000b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <MX_I2C1_Init+0x74>)
 800097a:	f004 ffe9 	bl	8005950 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f902 	bl	8000b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_I2C1_Init+0x74>)
 800098c:	f005 f82b 	bl	80059e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f8f9 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	24000324 	.word	0x24000324
 80009a4:	40005400 	.word	0x40005400
 80009a8:	00707cbb 	.word	0x00707cbb

080009ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C3_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C3_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009e8:	f004 ff22 	bl	8005830 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 f8cb 	bl	8000b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C3_Init+0x74>)
 80009fa:	f004 ffa9 	bl	8005950 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 f8c2 	bl	8000b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C3_Init+0x74>)
 8000a0c:	f004 ffeb 	bl	80059e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f8b9 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	24000378 	.word	0x24000378
 8000a24:	40005c00 	.word	0x40005c00
 8000a28:	00707cbb 	.word	0x00707cbb

08000a2c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_I2C4_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_I2C4_Init+0x7c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a68:	f004 fee2 	bl	8005830 <HAL_I2C_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a72:	f000 f88b 	bl	8000b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a7a:	f004 ff69 	bl	8005950 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a84:	f000 f882 	bl	8000b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_I2C4_Init+0x74>)
 8000a8c:	f004 ffab 	bl	80059e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 f879 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	240003cc 	.word	0x240003cc
 8000aa4:	58001c00 	.word	0x58001c00
 8000aa8:	00707cbb 	.word	0x00707cbb

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_DMA_Init+0x4c>)
 8000ab4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <MX_DMA_Init+0x4c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_DMA_Init+0x4c>)
 8000ac4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	200b      	movs	r0, #11
 8000ad6:	f001 ffe8 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ada:	200b      	movs	r0, #11
 8000adc:	f001 ffff 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f001 ffe0 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aea:	200c      	movs	r0, #12
 8000aec:	f001 fff7 	bl	8002ade <HAL_NVIC_EnableIRQ>

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_GPIO_Init+0x8c>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	58024400 	.word	0x58024400

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x30>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x30>)
 8000bb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	58024400 	.word	0x58024400

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a9f      	ldr	r2, [pc, #636]	; (8000e68 <HAL_ADC_MspInit+0x29c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	f040 8099 	bne.w	8000d22 <HAL_ADC_MspInit+0x156>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bf0:	4b9e      	ldr	r3, [pc, #632]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a9d      	ldr	r2, [pc, #628]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000bf8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bfa:	4b9c      	ldr	r3, [pc, #624]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d10e      	bne.n	8000c20 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c02:	4b9b      	ldr	r3, [pc, #620]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c08:	4a99      	ldr	r2, [pc, #612]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c12:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c18:	f003 0320 	and.w	r3, r3, #32
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	4b93      	ldr	r3, [pc, #588]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c26:	4a92      	ldr	r2, [pc, #584]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c30:	4b8f      	ldr	r3, [pc, #572]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b8c      	ldr	r3, [pc, #560]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c44:	4a8a      	ldr	r2, [pc, #552]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c4e:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b84      	ldr	r3, [pc, #528]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c62:	4a83      	ldr	r2, [pc, #524]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c6c:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000c7a:	2317      	movs	r3, #23
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4879      	ldr	r0, [pc, #484]	; (8000e74 <HAL_ADC_MspInit+0x2a8>)
 8000c8e:	f004 fc1f 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c92:	233f      	movs	r3, #63	; 0x3f
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4874      	ldr	r0, [pc, #464]	; (8000e78 <HAL_ADC_MspInit+0x2ac>)
 8000ca6:	f004 fc13 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	486f      	ldr	r0, [pc, #444]	; (8000e7c <HAL_ADC_MspInit+0x2b0>)
 8000cbe:	f004 fc07 	bl	80054d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cc4:	4a6f      	ldr	r2, [pc, #444]	; (8000e84 <HAL_ADC_MspInit+0x2b8>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cc8:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cca:	2209      	movs	r2, #9
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b69      	ldr	r3, [pc, #420]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce2:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cea:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cf2:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf8:	4b61      	ldr	r3, [pc, #388]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfe:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d04:	485e      	ldr	r0, [pc, #376]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000d06:	f001 ff05 	bl	8002b14 <HAL_DMA_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 8000d10:	f7ff ff3c 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000d18:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d1a:	4a59      	ldr	r2, [pc, #356]	; (8000e80 <HAL_ADC_MspInit+0x2b4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d20:	e09d      	b.n	8000e5e <HAL_ADC_MspInit+0x292>
  else if(hadc->Instance==ADC2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <HAL_ADC_MspInit+0x2bc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	f040 8098 	bne.w	8000e5e <HAL_ADC_MspInit+0x292>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000d36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_ADC_MspInit+0x2a0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10e      	bne.n	8000d5e <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d42:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d46:	4a4a      	ldr	r2, [pc, #296]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d52:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d64:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d82:	4a3b      	ldr	r2, [pc, #236]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da0:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <HAL_ADC_MspInit+0x2a4>)
 8000dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000db8:	2329      	movs	r3, #41	; 0x29
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482a      	ldr	r0, [pc, #168]	; (8000e74 <HAL_ADC_MspInit+0x2a8>)
 8000dcc:	f004 fb80 	bl	80054d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd0:	23c0      	movs	r3, #192	; 0xc0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <HAL_ADC_MspInit+0x2ac>)
 8000de4:	f004 fb74 	bl	80054d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dec:	2303      	movs	r3, #3
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4820      	ldr	r0, [pc, #128]	; (8000e7c <HAL_ADC_MspInit+0x2b0>)
 8000dfc:	f004 fb68 	bl	80054d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <HAL_ADC_MspInit+0x2c4>)
 8000e04:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e08:	220a      	movs	r2, #10
 8000e0a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e26:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e42:	4812      	ldr	r0, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e44:	f001 fe66 	bl	8002b14 <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_ADC_MspInit+0x286>
      Error_Handler();
 8000e4e:	f7ff fe9d 	bl	8000b8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0x2c0>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e5e:	bf00      	nop
 8000e60:	3740      	adds	r7, #64	; 0x40
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	24000448 	.word	0x24000448
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020800 	.word	0x58020800
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	240000f4 	.word	0x240000f4
 8000e84:	40020010 	.word	0x40020010
 8000e88:	40022100 	.word	0x40022100
 8000e8c:	2400016c 	.word	0x2400016c
 8000e90:	40020028 	.word	0x40020028

08000e94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0bc      	sub	sp, #240	; 0xf0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	22c0      	movs	r2, #192	; 0xc0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f008 f9cf 	bl	8009258 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_FDCAN_MspInit+0x188>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d151      	bne.n	8000f68 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ec4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fdb1 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000ee8:	f7ff fe50 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a4b      	ldr	r2, [pc, #300]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000ef4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10e      	bne.n	8000f1c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f04:	4a47      	ldr	r2, [pc, #284]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000f0e:	4b45      	ldr	r3, [pc, #276]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f10:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f54:	2309      	movs	r3, #9
 8000f56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4831      	ldr	r0, [pc, #196]	; (8001028 <HAL_FDCAN_MspInit+0x194>)
 8000f62:	f004 fab5 	bl	80054d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000f66:	e055      	b.n	8001014 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_FDCAN_MspInit+0x198>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d150      	bne.n	8001014 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fd5a 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000f96:	f7ff fdf9 	bl	8000b8c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000fa2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10e      	bne.n	8000fca <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fbe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8000fdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fe8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001002:	2309      	movs	r3, #9
 8001004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100c:	4619      	mov	r1, r3
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <HAL_FDCAN_MspInit+0x19c>)
 8001010:	f004 fa5e 	bl	80054d0 <HAL_GPIO_Init>
}
 8001014:	bf00      	nop
 8001016:	37f0      	adds	r7, #240	; 0xf0
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	4000a000 	.word	0x4000a000
 8001020:	2400044c 	.word	0x2400044c
 8001024:	58024400 	.word	0x58024400
 8001028:	58020000 	.word	0x58020000
 800102c:	4000a400 	.word	0x4000a400
 8001030:	58020400 	.word	0x58020400

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0c0      	sub	sp, #256	; 0x100
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001050:	22c0      	movs	r2, #192	; 0xc0
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f008 f8ff 	bl	8009258 <memset>
  if(hi2c->Instance==I2C1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a86      	ldr	r2, [pc, #536]	; (8001278 <HAL_I2C_MspInit+0x244>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d146      	bne.n	80010f2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001064:	f04f 0208 	mov.w	r2, #8
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fce2 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001086:	f7ff fd81 	bl	8000b8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b7c      	ldr	r3, [pc, #496]	; (800127c <HAL_I2C_MspInit+0x248>)
 800108c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001090:	4a7a      	ldr	r2, [pc, #488]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800109a:	4b78      	ldr	r3, [pc, #480]	; (800127c <HAL_I2C_MspInit+0x248>)
 800109c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a8:	23c0      	movs	r3, #192	; 0xc0
 80010aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	2304      	movs	r3, #4
 80010c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80010ca:	4619      	mov	r1, r3
 80010cc:	486c      	ldr	r0, [pc, #432]	; (8001280 <HAL_I2C_MspInit+0x24c>)
 80010ce:	f004 f9ff 	bl	80054d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d2:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_I2C_MspInit+0x248>)
 80010d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010d8:	4a68      	ldr	r2, [pc, #416]	; (800127c <HAL_I2C_MspInit+0x248>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010de:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010e2:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_I2C_MspInit+0x248>)
 80010e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80010f0:	e0bd      	b.n	800126e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a63      	ldr	r2, [pc, #396]	; (8001284 <HAL_I2C_MspInit+0x250>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d16c      	bne.n	80011d6 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010fc:	f04f 0208 	mov.w	r2, #8
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	4618      	mov	r0, r3
 8001114:	f005 fc96 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800111e:	f7ff fd35 	bl	8000b8c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_I2C_MspInit+0x248>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001162:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001166:	2312      	movs	r3, #18
 8001168:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001178:	2304      	movs	r3, #4
 800117a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001182:	4619      	mov	r1, r3
 8001184:	4840      	ldr	r0, [pc, #256]	; (8001288 <HAL_I2C_MspInit+0x254>)
 8001186:	f004 f9a3 	bl	80054d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011a4:	2304      	movs	r3, #4
 80011a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ae:	4619      	mov	r1, r3
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <HAL_I2C_MspInit+0x258>)
 80011b2:	f004 f98d 	bl	80054d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_I2C_MspInit+0x248>)
 80011b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011bc:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_I2C_MspInit+0x248>)
 80011be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011c2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_I2C_MspInit+0x248>)
 80011c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
}
 80011d4:	e04b      	b.n	800126e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <HAL_I2C_MspInit+0x25c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d146      	bne.n	800126e <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80011e0:	f04f 0210 	mov.w	r2, #16
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fc24 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001202:	f7ff fcc3 	bl	8000b8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_I2C_MspInit+0x248>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001224:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001228:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800123e:	2306      	movs	r3, #6
 8001240:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <HAL_I2C_MspInit+0x24c>)
 800124c:	f004 f940 	bl	80054d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001252:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_I2C_MspInit+0x248>)
 8001262:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	bf00      	nop
 8001270:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	58024400 	.word	0x58024400
 8001280:	58020400 	.word	0x58020400
 8001284:	40005c00 	.word	0x40005c00
 8001288:	58020800 	.word	0x58020800
 800128c:	58020000 	.word	0x58020000
 8001290:	58001c00 	.word	0x58001c00

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f92a 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <DMA1_Stream0_IRQHandler+0x10>)
 80012ee:	f002 fa09 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	240000f4 	.word	0x240000f4

080012fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA1_Stream1_IRQHandler+0x10>)
 8001302:	f002 f9ff 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400016c 	.word	0x2400016c

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <SystemInit+0xd0>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <SystemInit+0xd0>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <SystemInit+0xd4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	2b02      	cmp	r3, #2
 800132e:	d807      	bhi.n	8001340 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <SystemInit+0xd4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 030f 	bic.w	r3, r3, #15
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <SystemInit+0xd4>)
 800133a:	f043 0303 	orr.w	r3, r3, #3
 800133e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <SystemInit+0xd8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <SystemInit+0xd8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <SystemInit+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <SystemInit+0xd8>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <SystemInit+0xd8>)
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <SystemInit+0xdc>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <SystemInit+0xd4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <SystemInit+0xd4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 030f 	bic.w	r3, r3, #15
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xd4>)
 8001374:	f043 0303 	orr.w	r3, r3, #3
 8001378:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <SystemInit+0xd8>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <SystemInit+0xd8>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <SystemInit+0xd8>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <SystemInit+0xd8>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <SystemInit+0xe0>)
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <SystemInit+0xd8>)
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <SystemInit+0xe4>)
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <SystemInit+0xd8>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <SystemInit+0xe8>)
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <SystemInit+0xd8>)
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <SystemInit+0xe8>)
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SystemInit+0xd8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <SystemInit+0xd8>)
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <SystemInit+0xe8>)
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <SystemInit+0xd8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <SystemInit+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <SystemInit+0xd8>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <SystemInit+0xd8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0xec>)
 80013d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	52002000 	.word	0x52002000
 80013e8:	58024400 	.word	0x58024400
 80013ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80013f0:	02020200 	.word	0x02020200
 80013f4:	01ff0000 	.word	0x01ff0000
 80013f8:	01010280 	.word	0x01010280
 80013fc:	52004000 	.word	0x52004000

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f7ff ff84 	bl	8001310 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142e:	f007 ff1b 	bl	8009268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7fe ff5b 	bl	80002ec <main>
  bx  lr
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800143c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001440:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001444:	08009350 	.word	0x08009350
  ldr r2, =_sbss
 8001448:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800144c:	24000454 	.word	0x24000454

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f001 fb1a 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001460:	f005 f930 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_Init+0x68>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	4913      	ldr	r1, [pc, #76]	; (80014c0 <HAL_Init+0x6c>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_Init+0x68>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_Init+0x6c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_Init+0x70>)
 8001496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_Init+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f814 	bl	80014cc <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e002      	b.n	80014b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff fb73 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58024400 	.word	0x58024400
 80014c0:	08009330 	.word	0x08009330
 80014c4:	24000004 	.word	0x24000004
 80014c8:	24000000 	.word	0x24000000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_InitTick+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e021      	b.n	8001524 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_InitTick+0x64>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 faff 	bl	8002afa <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f001 fac9 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_InitTick+0x68>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2400000c 	.word	0x2400000c
 8001530:	24000000 	.word	0x24000000
 8001534:	24000008 	.word	0x24000008

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2400000c 	.word	0x2400000c
 800155c:	24000450 	.word	0x24000450

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	24000450 	.word	0x24000450

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2400000c 	.word	0x2400000c

080015c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	609a      	str	r2, [r3, #8]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3360      	adds	r3, #96	; 0x60
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	611a      	str	r2, [r3, #16]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	431a      	orrs	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
  }
}
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b087      	sub	sp, #28
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3330      	adds	r3, #48	; 0x30
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	4413      	add	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	211f      	movs	r1, #31
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0e9b      	lsrs	r3, r3, #26
 800172e:	f003 011f 	and.w	r1, r3, #31
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f023 0203 	bic.w	r2, r3, #3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3314      	adds	r3, #20
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0e5b      	lsrs	r3, r3, #25
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	0d1b      	lsrs	r3, r3, #20
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	2107      	movs	r1, #7
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	401a      	ands	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	0d1b      	lsrs	r3, r3, #20
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0318 	and.w	r3, r3, #24
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017f0:	40d9      	lsrs	r1, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	400b      	ands	r3, r1
 80017f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	000fffff 	.word	0x000fffff

08001814 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 031f 	and.w	r3, r3, #31
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <LL_ADC_DisableDeepPowerDown+0x20>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6093      	str	r3, [r2, #8]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	5fffffc0 	.word	0x5fffffc0

08001854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800188a:	4013      	ands	r3, r2
 800188c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	6fffffc0 	.word	0x6fffffc0

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <LL_ADC_Enable+0x24>)
 80018da:	4013      	ands	r3, r2
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	7fffffc0 	.word	0x7fffffc0

080018f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <LL_ADC_IsEnabled+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_IsEnabled+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <LL_ADC_REG_StartConversion+0x24>)
 800192a:	4013      	ands	r3, r2
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	7fffffc0 	.word	0x7fffffc0

08001944 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d101      	bne.n	800195c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d101      	bne.n	8001982 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e138      	b.n	8001c1c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f907 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff3f 	bl	8001854 <LL_ADC_IsDeepPowerDownEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff25 	bl	8001830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff5a 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d114      	bne.n	8001a20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff3e 	bl	800187c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a00:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_ADC_Init+0x294>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	4a88      	ldr	r2, [pc, #544]	; (8001c28 <HAL_ADC_Init+0x298>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a12:	e002      	b.n	8001a1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f9      	bne.n	8001a14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff3d 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10d      	bne.n	8001a4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff77 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001a56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f040 80d2 	bne.w	8001c0a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 80ce 	bne.w	8001c0a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a76:	f043 0202 	orr.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff36 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d110      	bne.n	8001ab0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a8e:	4867      	ldr	r0, [pc, #412]	; (8001c2c <HAL_ADC_Init+0x29c>)
 8001a90:	f7ff ff30 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a94:	4604      	mov	r4, r0
 8001a96:	4866      	ldr	r0, [pc, #408]	; (8001c30 <HAL_ADC_Init+0x2a0>)
 8001a98:	f7ff ff2c 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4862      	ldr	r0, [pc, #392]	; (8001c34 <HAL_ADC_Init+0x2a4>)
 8001aac:	f7ff fd88 	bl	80015c0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7d5b      	ldrb	r3, [r3, #21]
 8001ab4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aba:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001ac0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7f1b      	ldrb	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	045b      	lsls	r3, r3, #17
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_ADC_Init+0x2a8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	69b9      	ldr	r1, [r7, #24]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff14 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001b1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff21 	bl	800196a <LL_ADC_INJ_IsConversionOngoing>
 8001b28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d14a      	bne.n	8001bc6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d147      	bne.n	8001bc6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7d1b      	ldrb	r3, [r3, #20]
 8001b3a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_ADC_Init+0x2ac>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d11b      	bne.n	8001b9a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_ADC_Init+0x2b0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0411      	lsls	r1, r2, #16
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	e007      	b.n	8001baa <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fd07 	bl	80025d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10c      	bne.n	8001be8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f023 010f 	bic.w	r1, r3, #15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
 8001be6:	e007      	b.n	8001bf8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020f 	bic.w	r2, r2, #15
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f023 0303 	bic.w	r3, r3, #3
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
 8001c08:	e007      	b.n	8001c1a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3724      	adds	r7, #36	; 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	24000000 	.word	0x24000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40022100 	.word	0x40022100
 8001c34:	40022300 	.word	0x40022300
 8001c38:	fff0c003 	.word	0xfff0c003
 8001c3c:	ffffbffc 	.word	0xffffbffc
 8001c40:	fc00f81e 	.word	0xfc00f81e

08001c44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c50:	484f      	ldr	r0, [pc, #316]	; (8001d90 <HAL_ADC_Start_DMA+0x14c>)
 8001c52:	f7ff fddf 	bl	8001814 <LL_ADC_GetMultimode>
 8001c56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe71 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 808c 	bne.w	8001d82 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x34>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e087      	b.n	8001d88 <HAL_ADC_Start_DMA+0x144>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d002      	beq.n	8001c92 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b09      	cmp	r3, #9
 8001c90:	d170      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fb8e 	bl	80023b4 <ADC_Enable>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d163      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_ADC_Start_DMA+0x150>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a38      	ldr	r2, [pc, #224]	; (8001d98 <HAL_ADC_Start_DMA+0x154>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d002      	beq.n	8001cc2 <HAL_ADC_Start_DMA+0x7e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e000      	b.n	8001cc4 <HAL_ADC_Start_DMA+0x80>
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_ADC_Start_DMA+0x158>)
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d002      	beq.n	8001cd2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f023 0206 	bic.w	r2, r3, #6
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf6:	e002      	b.n	8001cfe <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_ADC_Start_DMA+0x15c>)
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_ADC_Start_DMA+0x160>)
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_ADC_Start_DMA+0x164>)
 8001d14:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	221c      	movs	r2, #28
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0210 	orr.w	r2, r2, #16
 8001d34:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7ff fd04 	bl	800174e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3340      	adds	r3, #64	; 0x40
 8001d50:	4619      	mov	r1, r3
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f001 fa6b 	bl	8003230 <HAL_DMA_Start_IT>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fdda 	bl	800191c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d68:	e00d      	b.n	8001d86 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d72:	e008      	b.n	8001d86 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d80:	e001      	b.n	8001d86 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40022300 	.word	0x40022300
 8001d94:	fffff0fe 	.word	0xfffff0fe
 8001d98:	40022100 	.word	0x40022100
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	080024ad 	.word	0x080024ad
 8001da4:	08002585 	.word	0x08002585
 8001da8:	080025a1 	.word	0x080025a1

08001dac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b0a1      	sub	sp, #132	; 0x84
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a9a      	ldr	r2, [pc, #616]	; (800206c <HAL_ADC_ConfigChannel+0x284>)
 8001e02:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x2a>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e2bc      	b.n	800238c <HAL_ADC_ConfigChannel+0x5a4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fd90 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 82a1 	bne.w	800236e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d108      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x62>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	e016      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x90>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e62:	2320      	movs	r3, #32
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2201      	movs	r2, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	69d1      	ldr	r1, [r2, #28]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6859      	ldr	r1, [r3, #4]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f7ff fc2f 	bl	80016f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fd51 	bl	8001944 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fd5e 	bl	800196a <LL_ADC_INJ_IsConversionOngoing>
 8001eae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80a0 	bne.w	8001ff8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 809c 	bne.w	8001ff8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f7ff fc51 	bl	8001774 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x110>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	e00a      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x126>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d027      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f26:	f7ff fb7f 	bl	8001628 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6919      	ldr	r1, [r3, #16]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7e5b      	ldrb	r3, [r3, #25]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x158>
 8001f3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x15a>
 8001f40:	2300      	movs	r3, #0
 8001f42:	461a      	mov	r2, r3
 8001f44:	f7ff fba9 	bl	800169a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x176>
 8001f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x178>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fb81 	bl	8001668 <LL_ADC_SetDataRightShift>
 8001f66:	e047      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	069b      	lsls	r3, r3, #26
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d107      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d107      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fd2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	069b      	lsls	r3, r3, #26
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d107      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fc79 	bl	80018f4 <LL_ADC_IsEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 81bb 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	461a      	mov	r2, r3
 8002018:	f7ff fbd8 	bl	80017cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_ADC_ConfigChannel+0x284>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 8130 	bne.w	8002288 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10b      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x268>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b09      	cmp	r3, #9
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e01b      	b.n	8002088 <HAL_ADC_ConfigChannel+0x2a0>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e005      	b.n	8002078 <HAL_ADC_ConfigChannel+0x290>
 800206c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2b09      	cmp	r3, #9
 8002080:	bf94      	ite	ls
 8002082:	2301      	movls	r3, #1
 8002084:	2300      	movhi	r3, #0
 8002086:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002088:	2b00      	cmp	r3, #0
 800208a:	d079      	beq.n	8002180 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x2c0>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	069b      	lsls	r3, r3, #26
 80020a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a6:	e015      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x2ec>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80020ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x30c>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	3301      	adds	r3, #1
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	e017      	b.n	8002124 <HAL_ADC_ConfigChannel+0x33c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e003      	b.n	8002118 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	ea42 0103 	orr.w	r1, r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <HAL_ADC_ConfigChannel+0x362>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	051b      	lsls	r3, r3, #20
 8002148:	e018      	b.n	800217c <HAL_ADC_ConfigChannel+0x394>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217c:	430b      	orrs	r3, r1
 800217e:	e07e      	b.n	800227e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_ADC_ConfigChannel+0x3b4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	069b      	lsls	r3, r3, #26
 8002196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219a:	e015      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x3e0>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	069b      	lsls	r3, r3, #26
 80021c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x400>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	e017      	b.n	8002218 <HAL_ADC_ConfigChannel+0x430>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	61bb      	str	r3, [r7, #24]
  return result;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e003      	b.n	800220c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	ea42 0103 	orr.w	r1, r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x45c>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	3b1e      	subs	r3, #30
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002242:	e01b      	b.n	800227c <HAL_ADC_ConfigChannel+0x494>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	60fb      	str	r3, [r7, #12]
  return result;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	3b1e      	subs	r3, #30
 8002276:	051b      	lsls	r3, r3, #20
 8002278:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227c:	430b      	orrs	r3, r1
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff fa76 	bl	8001774 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da77      	bge.n	8002380 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002290:	4840      	ldr	r0, [pc, #256]	; (8002394 <HAL_ADC_ConfigChannel+0x5ac>)
 8002292:	f7ff f9bb 	bl	800160c <LL_ADC_GetCommonPathInternalCh>
 8002296:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002298:	483f      	ldr	r0, [pc, #252]	; (8002398 <HAL_ADC_ConfigChannel+0x5b0>)
 800229a:	f7ff fb2b 	bl	80018f4 <LL_ADC_IsEnabled>
 800229e:	4604      	mov	r4, r0
 80022a0:	483e      	ldr	r0, [pc, #248]	; (800239c <HAL_ADC_ConfigChannel+0x5b4>)
 80022a2:	f7ff fb27 	bl	80018f4 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4323      	orrs	r3, r4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d155      	bne.n	800235a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_ADC_ConfigChannel+0x5b8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d122      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x516>
 80022b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11d      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a35      	ldr	r2, [pc, #212]	; (800239c <HAL_ADC_ConfigChannel+0x5b4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d159      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022d2:	4619      	mov	r1, r3
 80022d4:	482f      	ldr	r0, [pc, #188]	; (8002394 <HAL_ADC_ConfigChannel+0x5ac>)
 80022d6:	f7ff f986 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022da:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_ADC_ConfigChannel+0x5bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_ADC_ConfigChannel+0x5c0>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	3301      	adds	r3, #1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022ee:	e002      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022fc:	e040      	b.n	8002380 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_ADC_ConfigChannel+0x544>
 8002308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <HAL_ADC_ConfigChannel+0x5b4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d131      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	4619      	mov	r1, r3
 8002324:	481b      	ldr	r0, [pc, #108]	; (8002394 <HAL_ADC_ConfigChannel+0x5ac>)
 8002326:	f7ff f95e 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800232a:	e029      	b.n	8002380 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d124      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x598>
 8002336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11f      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_ADC_ConfigChannel+0x5b4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002350:	4619      	mov	r1, r3
 8002352:	4810      	ldr	r0, [pc, #64]	; (8002394 <HAL_ADC_ConfigChannel+0x5ac>)
 8002354:	f7ff f947 	bl	80015e6 <LL_ADC_SetCommonPathInternalCh>
 8002358:	e012      	b.n	8002380 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800236c:	e008      	b.n	8002380 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002388:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800238c:	4618      	mov	r0, r3
 800238e:	3784      	adds	r7, #132	; 0x84
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	40022300 	.word	0x40022300
 8002398:	40022000 	.word	0x40022000
 800239c:	40022100 	.word	0x40022100
 80023a0:	cb840000 	.word	0xcb840000
 80023a4:	24000000 	.word	0x24000000
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	bac04000 	.word	0xbac04000
 80023b0:	cfb80000 	.word	0xcfb80000

080023b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fa97 	bl	80018f4 <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d161      	bne.n	8002490 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <ADC_Enable+0xe8>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e04d      	b.n	8002492 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fa66 	bl	80018cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002400:	f7ff f8ae 	bl	8001560 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002406:	4826      	ldr	r0, [pc, #152]	; (80024a0 <ADC_Enable+0xec>)
 8002408:	f7ff fa04 	bl	8001814 <LL_ADC_GetMultimode>
 800240c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <ADC_Enable+0xf0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d002      	beq.n	800241e <ADC_Enable+0x6a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e000      	b.n	8002420 <ADC_Enable+0x6c>
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <ADC_Enable+0xf4>)
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d130      	bne.n	8002490 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800242e:	e028      	b.n	8002482 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fa5d 	bl	80018f4 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa41 	bl	80018cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800244a:	f7ff f889 	bl	8001560 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d914      	bls.n	8002482 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d00d      	beq.n	8002482 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e007      	b.n	8002492 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d1cf      	bne.n	8002430 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	8000003f 	.word	0x8000003f
 80024a0:	40022300 	.word	0x40022300
 80024a4:	40022100 	.word	0x40022100
 80024a8:	40022000 	.word	0x40022000

080024ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d14b      	bne.n	800255e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d021      	beq.n	8002524 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f8f3 	bl	80016d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d032      	beq.n	8002556 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12b      	bne.n	8002556 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11f      	bne.n	8002556 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
 8002522:	e018      	b.n	8002556 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d111      	bne.n	8002556 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff fc28 	bl	8001dac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800255c:	e00e      	b.n	800257c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff fc32 	bl	8001dd4 <HAL_ADC_ErrorCallback>
}
 8002570:	e004      	b.n	800257c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff fc14 	bl	8001dc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff fc04 	bl	8001dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025dc:	4b60      	ldr	r3, [pc, #384]	; (8002760 <ADC_ConfigureBoostMode+0x18c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025e8:	f004 f9e6 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80025ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025f6:	d010      	beq.n	800261a <ADC_ConfigureBoostMode+0x46>
 80025f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025fc:	d873      	bhi.n	80026e6 <ADC_ConfigureBoostMode+0x112>
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d002      	beq.n	800260a <ADC_ConfigureBoostMode+0x36>
 8002604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002608:	d16d      	bne.n	80026e6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]
        break;
 8002618:	e068      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
        break;
 8002620:	e064      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002622:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f005 fbc9 	bl	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800262e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002638:	d051      	beq.n	80026de <ADC_ConfigureBoostMode+0x10a>
 800263a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800263e:	d854      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002640:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002644:	d047      	beq.n	80026d6 <ADC_ConfigureBoostMode+0x102>
 8002646:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800264a:	d84e      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 800264c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002650:	d03d      	beq.n	80026ce <ADC_ConfigureBoostMode+0xfa>
 8002652:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002656:	d848      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265c:	d033      	beq.n	80026c6 <ADC_ConfigureBoostMode+0xf2>
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002662:	d842      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002664:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002668:	d029      	beq.n	80026be <ADC_ConfigureBoostMode+0xea>
 800266a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800266e:	d83c      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002670:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002674:	d01a      	beq.n	80026ac <ADC_ConfigureBoostMode+0xd8>
 8002676:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800267a:	d836      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 800267c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002680:	d014      	beq.n	80026ac <ADC_ConfigureBoostMode+0xd8>
 8002682:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002686:	d830      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268c:	d00e      	beq.n	80026ac <ADC_ConfigureBoostMode+0xd8>
 800268e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002692:	d82a      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 8002694:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002698:	d008      	beq.n	80026ac <ADC_ConfigureBoostMode+0xd8>
 800269a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800269e:	d824      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x116>
 80026a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026a4:	d002      	beq.n	80026ac <ADC_ConfigureBoostMode+0xd8>
 80026a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026aa:	d11e      	bne.n	80026ea <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0c9b      	lsrs	r3, r3, #18
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	60fb      	str	r3, [r7, #12]
        break;
 80026bc:	e016      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
        break;
 80026c4:	e012      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	60fb      	str	r3, [r7, #12]
        break;
 80026cc:	e00e      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	60fb      	str	r3, [r7, #12]
        break;
 80026d4:	e00a      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	09db      	lsrs	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
        break;
 80026dc:	e006      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	60fb      	str	r3, [r7, #12]
        break;
 80026e4:	e002      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
        break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80026ea:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <ADC_ConfigureBoostMode+0x190>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d808      	bhi.n	800270c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002708:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800270a:	e025      	b.n	8002758 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a16      	ldr	r2, [pc, #88]	; (8002768 <ADC_ConfigureBoostMode+0x194>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d80a      	bhi.n	800272a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	e016      	b.n	8002758 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <ADC_ConfigureBoostMode+0x198>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d80a      	bhi.n	8002748 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	609a      	str	r2, [r3, #8]
}
 8002746:	e007      	b.n	8002758 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40022300 	.word	0x40022300
 8002764:	005f5e10 	.word	0x005f5e10
 8002768:	00bebc20 	.word	0x00bebc20
 800276c:	017d7840 	.word	0x017d7840

08002770 <LL_ADC_IsEnabled>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <LL_ADC_IsEnabled+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_ADC_IsEnabled+0x1a>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_REG_IsConversionOngoing>:
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d101      	bne.n	80027ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b09f      	sub	sp, #124	; 0x7c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e080      	b.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3d      	ldr	r2, [pc, #244]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027f4:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	e001      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e05f      	b.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ffb9 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 8002824:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ffb3 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d141      	bne.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002838:	2b00      	cmp	r3, #0
 800283a:	d13e      	bne.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800283e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800285a:	4822      	ldr	r0, [pc, #136]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800285c:	f7ff ff88 	bl	8002770 <LL_ADC_IsEnabled>
 8002860:	4604      	mov	r4, r0
 8002862:	4821      	ldr	r0, [pc, #132]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002864:	f7ff ff84 	bl	8002770 <LL_ADC_IsEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	4323      	orrs	r3, r4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12e      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	430a      	orrs	r2, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002888:	e021      	b.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002896:	4813      	ldr	r0, [pc, #76]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002898:	f7ff ff6a 	bl	8002770 <LL_ADC_IsEnabled>
 800289c:	4604      	mov	r4, r0
 800289e:	4812      	ldr	r0, [pc, #72]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80028a0:	f7ff ff66 	bl	8002770 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4323      	orrs	r3, r4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d110      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b8:	e009      	b.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028cc:	e000      	b.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028dc:	4618      	mov	r0, r3
 80028de:	377c      	adds	r7, #124	; 0x7c
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40022100 	.word	0x40022100
 80028ec:	40022300 	.word	0x40022300
 80028f0:	fffff0e0 	.word	0xfffff0e0

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <__NVIC_SetPriorityGrouping+0x40>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	4313      	orrs	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <__NVIC_SetPriorityGrouping+0x40>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00
 8002938:	05fa0000 	.word	0x05fa0000

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff29 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff40 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff90 	bl	80029e8 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5f 	bl	8002994 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff33 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa4 	bl	8002a50 <SysTick_Config>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7fe fd20 	bl	8001560 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e37d      	b.n	8003228 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_DMA_Init+0x1b8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04a      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_DMA_Init+0x1bc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d045      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_DMA_Init+0x1c0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d040      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_DMA_Init+0x1c4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d03b      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_DMA_Init+0x1c8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d036      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_DMA_Init+0x1cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ce4 <HAL_DMA_Init+0x1d0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02c      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_DMA_Init+0x1d4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d027      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_DMA_Init+0x1d8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_DMA_Init+0x1dc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d01d      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_DMA_Init+0x1e0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d018      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_DMA_Init+0x1e4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_DMA_Init+0x1e8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_DMA_Init+0x1ec>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a51      	ldr	r2, [pc, #324]	; (8002d04 <HAL_DMA_Init+0x1f0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_Init+0xb8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_DMA_Init+0x1f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_DMA_Init+0xbc>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_Init+0xbe>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 813c 	beq.w	8002e50 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a37      	ldr	r2, [pc, #220]	; (8002ccc <HAL_DMA_Init+0x1b8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_DMA_Init+0x1bc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_DMA_Init+0x1c0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <HAL_DMA_Init+0x1c4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <HAL_DMA_Init+0x1c8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_DMA_Init+0x1cc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2e      	ldr	r2, [pc, #184]	; (8002ce4 <HAL_DMA_Init+0x1d0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <HAL_DMA_Init+0x1d4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <HAL_DMA_Init+0x1d8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <HAL_DMA_Init+0x1dc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <HAL_DMA_Init+0x1e0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <HAL_DMA_Init+0x1e4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_DMA_Init+0x1e8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <HAL_DMA_Init+0x1ec>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_DMA_Init+0x1f0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Init+0x174>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_DMA_Init+0x1f4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_Init+0x186>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <HAL_DMA_Init+0x196>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002caa:	e02f      	b.n	8002d0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cac:	f7fe fc58 	bl	8001560 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d928      	bls.n	8002d0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e2ad      	b.n	8003228 <HAL_DMA_Init+0x714>
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1c8      	bne.n	8002cac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_DMA_Init+0x3e0>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b28      	cmp	r3, #40	; 0x28
 8002d76:	d903      	bls.n	8002d80 <HAL_DMA_Init+0x26c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d7e:	d91f      	bls.n	8002dc0 <HAL_DMA_Init+0x2ac>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b3e      	cmp	r3, #62	; 0x3e
 8002d86:	d903      	bls.n	8002d90 <HAL_DMA_Init+0x27c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b42      	cmp	r3, #66	; 0x42
 8002d8e:	d917      	bls.n	8002dc0 <HAL_DMA_Init+0x2ac>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b46      	cmp	r3, #70	; 0x46
 8002d96:	d903      	bls.n	8002da0 <HAL_DMA_Init+0x28c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b48      	cmp	r3, #72	; 0x48
 8002d9e:	d90f      	bls.n	8002dc0 <HAL_DMA_Init+0x2ac>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b4e      	cmp	r3, #78	; 0x4e
 8002da6:	d903      	bls.n	8002db0 <HAL_DMA_Init+0x29c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b52      	cmp	r3, #82	; 0x52
 8002dae:	d907      	bls.n	8002dc0 <HAL_DMA_Init+0x2ac>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b73      	cmp	r3, #115	; 0x73
 8002db6:	d905      	bls.n	8002dc4 <HAL_DMA_Init+0x2b0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b77      	cmp	r3, #119	; 0x77
 8002dbe:	d801      	bhi.n	8002dc4 <HAL_DMA_Init+0x2b0>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_DMA_Init+0x2b2>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d117      	bne.n	8002e2c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f001 fe70 	bl	8004af4 <DMA_CheckFifoParam>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e1fd      	b.n	8003228 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f001 fdab 	bl	8004990 <DMA_CalcBaseAndBitshift>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	223f      	movs	r2, #63	; 0x3f
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	e0fd      	b.n	800304c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_DMA_Init+0x3e4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_DMA_Init+0x3e8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <HAL_DMA_Init+0x3ec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_DMA_Init+0x3f0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_DMA_Init+0x3f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_DMA_Init+0x3f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_DMA_Init+0x3fc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_DMA_Init+0x400>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_DMA_Init+0x404>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_DMA_Init+0x408>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_DMA_Init+0x40c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_DMA_Init+0x410>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_DMA_Init+0x414>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <HAL_DMA_Init+0x418>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_DMA_Init+0x41c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Init+0x3dc>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_DMA_Init+0x420>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d123      	bne.n	8002f38 <HAL_DMA_Init+0x424>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e022      	b.n	8002f3a <HAL_DMA_Init+0x426>
 8002ef4:	fe10803f 	.word	0xfe10803f
 8002ef8:	48022c08 	.word	0x48022c08
 8002efc:	48022c1c 	.word	0x48022c1c
 8002f00:	48022c30 	.word	0x48022c30
 8002f04:	48022c44 	.word	0x48022c44
 8002f08:	48022c58 	.word	0x48022c58
 8002f0c:	48022c6c 	.word	0x48022c6c
 8002f10:	48022c80 	.word	0x48022c80
 8002f14:	48022c94 	.word	0x48022c94
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07d      	beq.n	800303a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <HAL_DMA_Init+0x62c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d021      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a7d      	ldr	r2, [pc, #500]	; (8003144 <HAL_DMA_Init+0x630>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01c      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7c      	ldr	r2, [pc, #496]	; (8003148 <HAL_DMA_Init+0x634>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d017      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7a      	ldr	r2, [pc, #488]	; (800314c <HAL_DMA_Init+0x638>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d012      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a79      	ldr	r2, [pc, #484]	; (8003150 <HAL_DMA_Init+0x63c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_DMA_Init+0x640>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d008      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a76      	ldr	r2, [pc, #472]	; (8003158 <HAL_DMA_Init+0x644>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_Init+0x478>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_DMA_Init+0x648>)
 8002f8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <HAL_DMA_Init+0x64c>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d008      	beq.n	8002fc6 <HAL_DMA_Init+0x4b2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d102      	bne.n	8002fc2 <HAL_DMA_Init+0x4ae>
 8002fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fc0:	e002      	b.n	8002fc8 <HAL_DMA_Init+0x4b4>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_DMA_Init+0x4b4>
 8002fc6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68d2      	ldr	r2, [r2, #12]
 8002fcc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fd6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fde:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fe6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fee:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ff6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b55      	ldr	r3, [pc, #340]	; (8003164 <HAL_DMA_Init+0x650>)
 800300e:	4413      	add	r3, r2
 8003010:	4a55      	ldr	r2, [pc, #340]	; (8003168 <HAL_DMA_Init+0x654>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 fcb6 	bl	8004990 <DMA_CalcBaseAndBitshift>
 8003024:	4603      	mov	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2201      	movs	r2, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e008      	b.n	800304c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ed      	b.n	8003228 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_DMA_Init+0x658>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d072      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a45      	ldr	r2, [pc, #276]	; (8003170 <HAL_DMA_Init+0x65c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d06d      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a43      	ldr	r2, [pc, #268]	; (8003174 <HAL_DMA_Init+0x660>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d068      	beq.n	800313c <HAL_DMA_Init+0x628>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a42      	ldr	r2, [pc, #264]	; (8003178 <HAL_DMA_Init+0x664>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d063      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a40      	ldr	r2, [pc, #256]	; (800317c <HAL_DMA_Init+0x668>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d05e      	beq.n	800313c <HAL_DMA_Init+0x628>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_DMA_Init+0x66c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d059      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3d      	ldr	r2, [pc, #244]	; (8003184 <HAL_DMA_Init+0x670>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d054      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <HAL_DMA_Init+0x674>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04f      	beq.n	800313c <HAL_DMA_Init+0x628>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_DMA_Init+0x678>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d04a      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a39      	ldr	r2, [pc, #228]	; (8003190 <HAL_DMA_Init+0x67c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d045      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a37      	ldr	r2, [pc, #220]	; (8003194 <HAL_DMA_Init+0x680>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d040      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a36      	ldr	r2, [pc, #216]	; (8003198 <HAL_DMA_Init+0x684>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d03b      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_DMA_Init+0x688>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d036      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <HAL_DMA_Init+0x68c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d031      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_DMA_Init+0x690>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02c      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_DMA_Init+0x694>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d027      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_DMA_Init+0x62c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d022      	beq.n	800313c <HAL_DMA_Init+0x628>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	; (8003144 <HAL_DMA_Init+0x630>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d01d      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_DMA_Init+0x634>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d018      	beq.n	800313c <HAL_DMA_Init+0x628>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a0f      	ldr	r2, [pc, #60]	; (800314c <HAL_DMA_Init+0x638>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d013      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <HAL_DMA_Init+0x63c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00e      	beq.n	800313c <HAL_DMA_Init+0x628>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <HAL_DMA_Init+0x640>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_DMA_Init+0x644>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_DMA_Init+0x628>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_DMA_Init+0x648>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d137      	bne.n	80031ac <HAL_DMA_Init+0x698>
 800313c:	2301      	movs	r3, #1
 800313e:	e036      	b.n	80031ae <HAL_DMA_Init+0x69a>
 8003140:	58025408 	.word	0x58025408
 8003144:	5802541c 	.word	0x5802541c
 8003148:	58025430 	.word	0x58025430
 800314c:	58025444 	.word	0x58025444
 8003150:	58025458 	.word	0x58025458
 8003154:	5802546c 	.word	0x5802546c
 8003158:	58025480 	.word	0x58025480
 800315c:	58025494 	.word	0x58025494
 8003160:	fffe000f 	.word	0xfffe000f
 8003164:	a7fdabf8 	.word	0xa7fdabf8
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	40020010 	.word	0x40020010
 8003170:	40020028 	.word	0x40020028
 8003174:	40020040 	.word	0x40020040
 8003178:	40020058 	.word	0x40020058
 800317c:	40020070 	.word	0x40020070
 8003180:	40020088 	.word	0x40020088
 8003184:	400200a0 	.word	0x400200a0
 8003188:	400200b8 	.word	0x400200b8
 800318c:	40020410 	.word	0x40020410
 8003190:	40020428 	.word	0x40020428
 8003194:	40020440 	.word	0x40020440
 8003198:	40020458 	.word	0x40020458
 800319c:	40020470 	.word	0x40020470
 80031a0:	40020488 	.word	0x40020488
 80031a4:	400204a0 	.word	0x400204a0
 80031a8:	400204b8 	.word	0x400204b8
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f001 fd1a 	bl	8004bec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d102      	bne.n	80031c6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031da:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_DMA_Init+0x6f2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d80c      	bhi.n	8003206 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f001 fd97 	bl	8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	e008      	b.n	8003218 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e226      	b.n	800369a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_DMA_Start_IT+0x2a>
 8003256:	2302      	movs	r3, #2
 8003258:	e21f      	b.n	800369a <HAL_DMA_Start_IT+0x46a>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	f040 820a 	bne.w	8003684 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a68      	ldr	r2, [pc, #416]	; (8003424 <HAL_DMA_Start_IT+0x1f4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a66      	ldr	r2, [pc, #408]	; (8003428 <HAL_DMA_Start_IT+0x1f8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a65      	ldr	r2, [pc, #404]	; (800342c <HAL_DMA_Start_IT+0x1fc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a63      	ldr	r2, [pc, #396]	; (8003430 <HAL_DMA_Start_IT+0x200>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a62      	ldr	r2, [pc, #392]	; (8003434 <HAL_DMA_Start_IT+0x204>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a60      	ldr	r2, [pc, #384]	; (8003438 <HAL_DMA_Start_IT+0x208>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5f      	ldr	r2, [pc, #380]	; (800343c <HAL_DMA_Start_IT+0x20c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5d      	ldr	r2, [pc, #372]	; (8003440 <HAL_DMA_Start_IT+0x210>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_DMA_Start_IT+0x214>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a5a      	ldr	r2, [pc, #360]	; (8003448 <HAL_DMA_Start_IT+0x218>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_DMA_Start_IT+0x21c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a57      	ldr	r2, [pc, #348]	; (8003450 <HAL_DMA_Start_IT+0x220>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a56      	ldr	r2, [pc, #344]	; (8003454 <HAL_DMA_Start_IT+0x224>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_DMA_Start_IT+0x228>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_DMA_Start_IT+0x22c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_Start_IT+0xee>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a51      	ldr	r2, [pc, #324]	; (8003460 <HAL_DMA_Start_IT+0x230>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <HAL_DMA_Start_IT+0x100>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e007      	b.n	8003340 <HAL_DMA_Start_IT+0x110>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f001 f93e 	bl	80045c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a34      	ldr	r2, [pc, #208]	; (8003424 <HAL_DMA_Start_IT+0x1f4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a33      	ldr	r2, [pc, #204]	; (8003428 <HAL_DMA_Start_IT+0x1f8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a31      	ldr	r2, [pc, #196]	; (800342c <HAL_DMA_Start_IT+0x1fc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a30      	ldr	r2, [pc, #192]	; (8003430 <HAL_DMA_Start_IT+0x200>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <HAL_DMA_Start_IT+0x204>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <HAL_DMA_Start_IT+0x208>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2b      	ldr	r2, [pc, #172]	; (800343c <HAL_DMA_Start_IT+0x20c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <HAL_DMA_Start_IT+0x210>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <HAL_DMA_Start_IT+0x214>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a27      	ldr	r2, [pc, #156]	; (8003448 <HAL_DMA_Start_IT+0x218>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a25      	ldr	r2, [pc, #148]	; (800344c <HAL_DMA_Start_IT+0x21c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a24      	ldr	r2, [pc, #144]	; (8003450 <HAL_DMA_Start_IT+0x220>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_DMA_Start_IT+0x224>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <HAL_DMA_Start_IT+0x228>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1f      	ldr	r2, [pc, #124]	; (800345c <HAL_DMA_Start_IT+0x22c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Start_IT+0x1bc>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_DMA_Start_IT+0x230>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Start_IT+0x1c0>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_DMA_Start_IT+0x1c2>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 021e 	bic.w	r2, r3, #30
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0216 	orr.w	r2, r2, #22
 8003408:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03e      	beq.n	8003490 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0208 	orr.w	r2, r2, #8
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e035      	b.n	8003490 <HAL_DMA_Start_IT+0x260>
 8003424:	40020010 	.word	0x40020010
 8003428:	40020028 	.word	0x40020028
 800342c:	40020040 	.word	0x40020040
 8003430:	40020058 	.word	0x40020058
 8003434:	40020070 	.word	0x40020070
 8003438:	40020088 	.word	0x40020088
 800343c:	400200a0 	.word	0x400200a0
 8003440:	400200b8 	.word	0x400200b8
 8003444:	40020410 	.word	0x40020410
 8003448:	40020428 	.word	0x40020428
 800344c:	40020440 	.word	0x40020440
 8003450:	40020458 	.word	0x40020458
 8003454:	40020470 	.word	0x40020470
 8003458:	40020488 	.word	0x40020488
 800345c:	400204a0 	.word	0x400204a0
 8003460:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 020e 	bic.w	r2, r3, #14
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 020a 	orr.w	r2, r2, #10
 8003476:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0204 	orr.w	r2, r2, #4
 800348e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a83      	ldr	r2, [pc, #524]	; (80036a4 <HAL_DMA_Start_IT+0x474>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d072      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a82      	ldr	r2, [pc, #520]	; (80036a8 <HAL_DMA_Start_IT+0x478>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d06d      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_DMA_Start_IT+0x47c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d068      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7f      	ldr	r2, [pc, #508]	; (80036b0 <HAL_DMA_Start_IT+0x480>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d063      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7d      	ldr	r2, [pc, #500]	; (80036b4 <HAL_DMA_Start_IT+0x484>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d05e      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7c      	ldr	r2, [pc, #496]	; (80036b8 <HAL_DMA_Start_IT+0x488>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d059      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a7a      	ldr	r2, [pc, #488]	; (80036bc <HAL_DMA_Start_IT+0x48c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d054      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a79      	ldr	r2, [pc, #484]	; (80036c0 <HAL_DMA_Start_IT+0x490>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04f      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_DMA_Start_IT+0x494>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04a      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a76      	ldr	r2, [pc, #472]	; (80036c8 <HAL_DMA_Start_IT+0x498>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d045      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a74      	ldr	r2, [pc, #464]	; (80036cc <HAL_DMA_Start_IT+0x49c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d040      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a73      	ldr	r2, [pc, #460]	; (80036d0 <HAL_DMA_Start_IT+0x4a0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d03b      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <HAL_DMA_Start_IT+0x4a4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d036      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a70      	ldr	r2, [pc, #448]	; (80036d8 <HAL_DMA_Start_IT+0x4a8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d031      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a6e      	ldr	r2, [pc, #440]	; (80036dc <HAL_DMA_Start_IT+0x4ac>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02c      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6d      	ldr	r2, [pc, #436]	; (80036e0 <HAL_DMA_Start_IT+0x4b0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d027      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6b      	ldr	r2, [pc, #428]	; (80036e4 <HAL_DMA_Start_IT+0x4b4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_DMA_Start_IT+0x4b8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01d      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a68      	ldr	r2, [pc, #416]	; (80036ec <HAL_DMA_Start_IT+0x4bc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <HAL_DMA_Start_IT+0x4c0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_DMA_Start_IT+0x4c4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a64      	ldr	r2, [pc, #400]	; (80036f8 <HAL_DMA_Start_IT+0x4c8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a62      	ldr	r2, [pc, #392]	; (80036fc <HAL_DMA_Start_IT+0x4cc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_DMA_Start_IT+0x350>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a61      	ldr	r2, [pc, #388]	; (8003700 <HAL_DMA_Start_IT+0x4d0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_DMA_Start_IT+0x354>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_DMA_Start_IT+0x356>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01a      	beq.n	80035c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a37      	ldr	r2, [pc, #220]	; (80036a4 <HAL_DMA_Start_IT+0x474>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d04a      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <HAL_DMA_Start_IT+0x478>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d045      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_DMA_Start_IT+0x47c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d040      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a33      	ldr	r2, [pc, #204]	; (80036b0 <HAL_DMA_Start_IT+0x480>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d03b      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_DMA_Start_IT+0x484>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d036      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <HAL_DMA_Start_IT+0x488>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d031      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <HAL_DMA_Start_IT+0x48c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02c      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_DMA_Start_IT+0x490>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d027      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <HAL_DMA_Start_IT+0x494>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_DMA_Start_IT+0x498>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01d      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_DMA_Start_IT+0x49c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_DMA_Start_IT+0x4a0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_DMA_Start_IT+0x4a4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <HAL_DMA_Start_IT+0x4a8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_DMA_Start_IT+0x4ac>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_DMA_Start_IT+0x430>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_DMA_Start_IT+0x4b0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <HAL_DMA_Start_IT+0x442>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e012      	b.n	8003698 <HAL_DMA_Start_IT+0x468>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e009      	b.n	8003698 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40020010 	.word	0x40020010
 80036a8:	40020028 	.word	0x40020028
 80036ac:	40020040 	.word	0x40020040
 80036b0:	40020058 	.word	0x40020058
 80036b4:	40020070 	.word	0x40020070
 80036b8:	40020088 	.word	0x40020088
 80036bc:	400200a0 	.word	0x400200a0
 80036c0:	400200b8 	.word	0x400200b8
 80036c4:	40020410 	.word	0x40020410
 80036c8:	40020428 	.word	0x40020428
 80036cc:	40020440 	.word	0x40020440
 80036d0:	40020458 	.word	0x40020458
 80036d4:	40020470 	.word	0x40020470
 80036d8:	40020488 	.word	0x40020488
 80036dc:	400204a0 	.word	0x400204a0
 80036e0:	400204b8 	.word	0x400204b8
 80036e4:	58025408 	.word	0x58025408
 80036e8:	5802541c 	.word	0x5802541c
 80036ec:	58025430 	.word	0x58025430
 80036f0:	58025444 	.word	0x58025444
 80036f4:	58025458 	.word	0x58025458
 80036f8:	5802546c 	.word	0x5802546c
 80036fc:	58025480 	.word	0x58025480
 8003700:	58025494 	.word	0x58025494

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003710:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <HAL_DMA_IRQHandler+0x1ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <HAL_DMA_IRQHandler+0x1b0>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5f      	ldr	r2, [pc, #380]	; (80038b8 <HAL_DMA_IRQHandler+0x1b4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5d      	ldr	r2, [pc, #372]	; (80038bc <HAL_DMA_IRQHandler+0x1b8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5c      	ldr	r2, [pc, #368]	; (80038c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5a      	ldr	r2, [pc, #360]	; (80038c4 <HAL_DMA_IRQHandler+0x1c0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a59      	ldr	r2, [pc, #356]	; (80038c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a57      	ldr	r2, [pc, #348]	; (80038cc <HAL_DMA_IRQHandler+0x1c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_DMA_IRQHandler+0x1cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a53      	ldr	r2, [pc, #332]	; (80038d8 <HAL_DMA_IRQHandler+0x1d4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a51      	ldr	r2, [pc, #324]	; (80038dc <HAL_DMA_IRQHandler+0x1d8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a50      	ldr	r2, [pc, #320]	; (80038e0 <HAL_DMA_IRQHandler+0x1dc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4e      	ldr	r2, [pc, #312]	; (80038e4 <HAL_DMA_IRQHandler+0x1e0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4d      	ldr	r2, [pc, #308]	; (80038e8 <HAL_DMA_IRQHandler+0x1e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4b      	ldr	r2, [pc, #300]	; (80038ec <HAL_DMA_IRQHandler+0x1e8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4a      	ldr	r2, [pc, #296]	; (80038f0 <HAL_DMA_IRQHandler+0x1ec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xd2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a48      	ldr	r2, [pc, #288]	; (80038f4 <HAL_DMA_IRQHandler+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_DMA_IRQHandler+0xd6>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_DMA_IRQHandler+0xd8>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 842b 	beq.w	8004038 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2208      	movs	r2, #8
 80037ec:	409a      	lsls	r2, r3
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80a2 	beq.w	800393c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2e      	ldr	r2, [pc, #184]	; (80038b8 <HAL_DMA_IRQHandler+0x1b4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04a      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <HAL_DMA_IRQHandler+0x1b8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <HAL_DMA_IRQHandler+0x1c0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d03b      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d036      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_DMA_IRQHandler+0x1c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d031      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <HAL_DMA_IRQHandler+0x1cc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02c      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d027      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_DMA_IRQHandler+0x1d4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a21      	ldr	r2, [pc, #132]	; (80038dc <HAL_DMA_IRQHandler+0x1d8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01d      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_DMA_IRQHandler+0x1dc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_DMA_IRQHandler+0x1e0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_DMA_IRQHandler+0x1e4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_DMA_IRQHandler+0x1e8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_DMA_IRQHandler+0x1ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_DMA_IRQHandler+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_DMA_IRQHandler+0x1f0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d12f      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x1f4>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e02e      	b.n	800390c <HAL_DMA_IRQHandler+0x208>
 80038ae:	bf00      	nop
 80038b0:	24000000 	.word	0x24000000
 80038b4:	1b4e81b5 	.word	0x1b4e81b5
 80038b8:	40020010 	.word	0x40020010
 80038bc:	40020028 	.word	0x40020028
 80038c0:	40020040 	.word	0x40020040
 80038c4:	40020058 	.word	0x40020058
 80038c8:	40020070 	.word	0x40020070
 80038cc:	40020088 	.word	0x40020088
 80038d0:	400200a0 	.word	0x400200a0
 80038d4:	400200b8 	.word	0x400200b8
 80038d8:	40020410 	.word	0x40020410
 80038dc:	40020428 	.word	0x40020428
 80038e0:	40020440 	.word	0x40020440
 80038e4:	40020458 	.word	0x40020458
 80038e8:	40020470 	.word	0x40020470
 80038ec:	40020488 	.word	0x40020488
 80038f0:	400204a0 	.word	0x400204a0
 80038f4:	400204b8 	.word	0x400204b8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2208      	movs	r2, #8
 800392a:	409a      	lsls	r2, r3
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d06e      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a69      	ldr	r2, [pc, #420]	; (8003afc <HAL_DMA_IRQHandler+0x3f8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d04a      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <HAL_DMA_IRQHandler+0x3fc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d045      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a66      	ldr	r2, [pc, #408]	; (8003b04 <HAL_DMA_IRQHandler+0x400>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d040      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_DMA_IRQHandler+0x404>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03b      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a63      	ldr	r2, [pc, #396]	; (8003b0c <HAL_DMA_IRQHandler+0x408>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d036      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a61      	ldr	r2, [pc, #388]	; (8003b10 <HAL_DMA_IRQHandler+0x40c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a60      	ldr	r2, [pc, #384]	; (8003b14 <HAL_DMA_IRQHandler+0x410>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02c      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5e      	ldr	r2, [pc, #376]	; (8003b18 <HAL_DMA_IRQHandler+0x414>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5d      	ldr	r2, [pc, #372]	; (8003b1c <HAL_DMA_IRQHandler+0x418>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5b      	ldr	r2, [pc, #364]	; (8003b20 <HAL_DMA_IRQHandler+0x41c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5a      	ldr	r2, [pc, #360]	; (8003b24 <HAL_DMA_IRQHandler+0x420>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_DMA_IRQHandler+0x424>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a57      	ldr	r2, [pc, #348]	; (8003b2c <HAL_DMA_IRQHandler+0x428>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a55      	ldr	r2, [pc, #340]	; (8003b30 <HAL_DMA_IRQHandler+0x42c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_DMA_IRQHandler+0x430>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x2ee>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a52      	ldr	r2, [pc, #328]	; (8003b38 <HAL_DMA_IRQHandler+0x434>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10a      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x304>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e003      	b.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0202 	orr.w	r2, r3, #2
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 808f 	beq.w	8003b64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <HAL_DMA_IRQHandler+0x3f8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <HAL_DMA_IRQHandler+0x3fc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <HAL_DMA_IRQHandler+0x400>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_DMA_IRQHandler+0x404>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <HAL_DMA_IRQHandler+0x408>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <HAL_DMA_IRQHandler+0x40c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <HAL_DMA_IRQHandler+0x410>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <HAL_DMA_IRQHandler+0x414>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_DMA_IRQHandler+0x418>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_DMA_IRQHandler+0x41c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_DMA_IRQHandler+0x420>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <HAL_DMA_IRQHandler+0x424>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_DMA_IRQHandler+0x428>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_DMA_IRQHandler+0x42c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_DMA_IRQHandler+0x430>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x3e2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_DMA_IRQHandler+0x434>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d12a      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x438>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e023      	b.n	8003b44 <HAL_DMA_IRQHandler+0x440>
 8003afc:	40020010 	.word	0x40020010
 8003b00:	40020028 	.word	0x40020028
 8003b04:	40020040 	.word	0x40020040
 8003b08:	40020058 	.word	0x40020058
 8003b0c:	40020070 	.word	0x40020070
 8003b10:	40020088 	.word	0x40020088
 8003b14:	400200a0 	.word	0x400200a0
 8003b18:	400200b8 	.word	0x400200b8
 8003b1c:	40020410 	.word	0x40020410
 8003b20:	40020428 	.word	0x40020428
 8003b24:	40020440 	.word	0x40020440
 8003b28:	40020458 	.word	0x40020458
 8003b2c:	40020470 	.word	0x40020470
 8003b30:	40020488 	.word	0x40020488
 8003b34:	400204a0 	.word	0x400204a0
 8003b38:	400204b8 	.word	0x400204b8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2204      	movs	r2, #4
 8003b52:	409a      	lsls	r2, r3
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a6 	beq.w	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a85      	ldr	r2, [pc, #532]	; (8003d94 <HAL_DMA_IRQHandler+0x690>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04a      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a83      	ldr	r2, [pc, #524]	; (8003d98 <HAL_DMA_IRQHandler+0x694>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d045      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a82      	ldr	r2, [pc, #520]	; (8003d9c <HAL_DMA_IRQHandler+0x698>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a80      	ldr	r2, [pc, #512]	; (8003da0 <HAL_DMA_IRQHandler+0x69c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7f      	ldr	r2, [pc, #508]	; (8003da4 <HAL_DMA_IRQHandler+0x6a0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d036      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a7d      	ldr	r2, [pc, #500]	; (8003da8 <HAL_DMA_IRQHandler+0x6a4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_DMA_IRQHandler+0x6a8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02c      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7a      	ldr	r2, [pc, #488]	; (8003db0 <HAL_DMA_IRQHandler+0x6ac>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d027      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a79      	ldr	r2, [pc, #484]	; (8003db4 <HAL_DMA_IRQHandler+0x6b0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a77      	ldr	r2, [pc, #476]	; (8003db8 <HAL_DMA_IRQHandler+0x6b4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a76      	ldr	r2, [pc, #472]	; (8003dbc <HAL_DMA_IRQHandler+0x6b8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a74      	ldr	r2, [pc, #464]	; (8003dc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a73      	ldr	r2, [pc, #460]	; (8003dc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a71      	ldr	r2, [pc, #452]	; (8003dc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a70      	ldr	r2, [pc, #448]	; (8003dcc <HAL_DMA_IRQHandler+0x6c8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x516>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10a      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x52c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e009      	b.n	8003c44 <HAL_DMA_IRQHandler+0x540>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d03e      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2210      	movs	r2, #16
 8003c52:	409a      	lsls	r2, r3
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d024      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
 8003c84:	e01f      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01b      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
 8003c96:	e016      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0208 	bic.w	r2, r2, #8
 8003cb4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	2220      	movs	r2, #32
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8110 	beq.w	8003efc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <HAL_DMA_IRQHandler+0x690>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04a      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <HAL_DMA_IRQHandler+0x694>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d045      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <HAL_DMA_IRQHandler+0x698>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d040      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <HAL_DMA_IRQHandler+0x69c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_DMA_IRQHandler+0x6a0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d036      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_DMA_IRQHandler+0x6a4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a23      	ldr	r2, [pc, #140]	; (8003dac <HAL_DMA_IRQHandler+0x6a8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02c      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <HAL_DMA_IRQHandler+0x6ac>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d027      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_DMA_IRQHandler+0x6b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_DMA_IRQHandler+0x6b4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_DMA_IRQHandler+0x6b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_DMA_IRQHandler+0x6c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x678>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d12b      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x6d0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e02a      	b.n	8003de8 <HAL_DMA_IRQHandler+0x6e4>
 8003d92:	bf00      	nop
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8087 	beq.w	8003efc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2220      	movs	r2, #32
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d139      	bne.n	8003e7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0216 	bic.w	r2, r2, #22
 8003e18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_DMA_IRQHandler+0x736>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0208 	bic.w	r2, r2, #8
 8003e48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	223f      	movs	r2, #63	; 0x3f
 8003e54:	409a      	lsls	r2, r3
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8382 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
          }
          return;
 8003e7c:	e37c      	b.n	8004578 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02c      	beq.n	8003efc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e027      	b.n	8003efc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e01e      	b.n	8003efc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0210 	bic.w	r2, r2, #16
 8003eda:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 833e 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8088 	beq.w	8004024 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2204      	movs	r2, #4
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a89      	ldr	r2, [pc, #548]	; (8004148 <HAL_DMA_IRQHandler+0xa44>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d04a      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a88      	ldr	r2, [pc, #544]	; (800414c <HAL_DMA_IRQHandler+0xa48>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d045      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a86      	ldr	r2, [pc, #536]	; (8004150 <HAL_DMA_IRQHandler+0xa4c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d040      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a85      	ldr	r2, [pc, #532]	; (8004154 <HAL_DMA_IRQHandler+0xa50>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d03b      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a83      	ldr	r2, [pc, #524]	; (8004158 <HAL_DMA_IRQHandler+0xa54>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d036      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a82      	ldr	r2, [pc, #520]	; (800415c <HAL_DMA_IRQHandler+0xa58>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d031      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_DMA_IRQHandler+0xa5c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d02c      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7f      	ldr	r2, [pc, #508]	; (8004164 <HAL_DMA_IRQHandler+0xa60>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d027      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a7d      	ldr	r2, [pc, #500]	; (8004168 <HAL_DMA_IRQHandler+0xa64>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_DMA_IRQHandler+0xa68>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d01d      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7a      	ldr	r2, [pc, #488]	; (8004170 <HAL_DMA_IRQHandler+0xa6c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a79      	ldr	r2, [pc, #484]	; (8004174 <HAL_DMA_IRQHandler+0xa70>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_DMA_IRQHandler+0xa74>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a76      	ldr	r2, [pc, #472]	; (800417c <HAL_DMA_IRQHandler+0xa78>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a74      	ldr	r2, [pc, #464]	; (8004180 <HAL_DMA_IRQHandler+0xa7c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x8b8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a73      	ldr	r2, [pc, #460]	; (8004184 <HAL_DMA_IRQHandler+0xa80>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <HAL_DMA_IRQHandler+0x8ca>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e007      	b.n	8003fde <HAL_DMA_IRQHandler+0x8da>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d307      	bcc.n	8003ffa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f2      	bne.n	8003fde <HAL_DMA_IRQHandler+0x8da>
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ffa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2203      	movs	r2, #3
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004012:	e003      	b.n	800401c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 82aa 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
 8004036:	e2a4      	b.n	8004582 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_DMA_IRQHandler+0xa84>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a51      	ldr	r2, [pc, #324]	; (800418c <HAL_DMA_IRQHandler+0xa88>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_DMA_IRQHandler+0xa8c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <HAL_DMA_IRQHandler+0xa90>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4c      	ldr	r2, [pc, #304]	; (8004198 <HAL_DMA_IRQHandler+0xa94>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4b      	ldr	r2, [pc, #300]	; (800419c <HAL_DMA_IRQHandler+0xa98>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <HAL_DMA_IRQHandler+0xa9c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a48      	ldr	r2, [pc, #288]	; (80041a4 <HAL_DMA_IRQHandler+0xaa0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a46      	ldr	r2, [pc, #280]	; (80041a8 <HAL_DMA_IRQHandler+0xaa4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a45      	ldr	r2, [pc, #276]	; (80041ac <HAL_DMA_IRQHandler+0xaa8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a43      	ldr	r2, [pc, #268]	; (80041b0 <HAL_DMA_IRQHandler+0xaac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <HAL_DMA_IRQHandler+0xab0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a40      	ldr	r2, [pc, #256]	; (80041b8 <HAL_DMA_IRQHandler+0xab4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <HAL_DMA_IRQHandler+0xab8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <HAL_DMA_IRQHandler+0xabc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x9d4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3c      	ldr	r2, [pc, #240]	; (80041c4 <HAL_DMA_IRQHandler+0xac0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_IRQHandler+0x9d8>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_DMA_IRQHandler+0x9da>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 824f 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2204      	movs	r2, #4
 80040f6:	409a      	lsls	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80dd 	beq.w	80042bc <HAL_DMA_IRQHandler+0xbb8>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80d7 	beq.w	80042bc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2204      	movs	r2, #4
 8004118:	409a      	lsls	r2, r3
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d059      	beq.n	80041dc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d14a      	bne.n	80041c8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8220 	beq.w	800457c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004144:	e21a      	b.n	800457c <HAL_DMA_IRQHandler+0xe78>
 8004146:	bf00      	nop
 8004148:	40020010 	.word	0x40020010
 800414c:	40020028 	.word	0x40020028
 8004150:	40020040 	.word	0x40020040
 8004154:	40020058 	.word	0x40020058
 8004158:	40020070 	.word	0x40020070
 800415c:	40020088 	.word	0x40020088
 8004160:	400200a0 	.word	0x400200a0
 8004164:	400200b8 	.word	0x400200b8
 8004168:	40020410 	.word	0x40020410
 800416c:	40020428 	.word	0x40020428
 8004170:	40020440 	.word	0x40020440
 8004174:	40020458 	.word	0x40020458
 8004178:	40020470 	.word	0x40020470
 800417c:	40020488 	.word	0x40020488
 8004180:	400204a0 	.word	0x400204a0
 8004184:	400204b8 	.word	0x400204b8
 8004188:	48022c08 	.word	0x48022c08
 800418c:	48022c1c 	.word	0x48022c1c
 8004190:	48022c30 	.word	0x48022c30
 8004194:	48022c44 	.word	0x48022c44
 8004198:	48022c58 	.word	0x48022c58
 800419c:	48022c6c 	.word	0x48022c6c
 80041a0:	48022c80 	.word	0x48022c80
 80041a4:	48022c94 	.word	0x48022c94
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 81d5 	beq.w	800457c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041da:	e1cf      	b.n	800457c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7f      	ldr	r2, [pc, #508]	; (80043e8 <HAL_DMA_IRQHandler+0xce4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a7d      	ldr	r2, [pc, #500]	; (80043ec <HAL_DMA_IRQHandler+0xce8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7c      	ldr	r2, [pc, #496]	; (80043f0 <HAL_DMA_IRQHandler+0xcec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_DMA_IRQHandler+0xcf0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a79      	ldr	r2, [pc, #484]	; (80043f8 <HAL_DMA_IRQHandler+0xcf4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a77      	ldr	r2, [pc, #476]	; (80043fc <HAL_DMA_IRQHandler+0xcf8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a76      	ldr	r2, [pc, #472]	; (8004400 <HAL_DMA_IRQHandler+0xcfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a74      	ldr	r2, [pc, #464]	; (8004404 <HAL_DMA_IRQHandler+0xd00>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a73      	ldr	r2, [pc, #460]	; (8004408 <HAL_DMA_IRQHandler+0xd04>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a71      	ldr	r2, [pc, #452]	; (800440c <HAL_DMA_IRQHandler+0xd08>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a70      	ldr	r2, [pc, #448]	; (8004410 <HAL_DMA_IRQHandler+0xd0c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_DMA_IRQHandler+0xd10>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6d      	ldr	r2, [pc, #436]	; (8004418 <HAL_DMA_IRQHandler+0xd14>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6b      	ldr	r2, [pc, #428]	; (800441c <HAL_DMA_IRQHandler+0xd18>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6a      	ldr	r2, [pc, #424]	; (8004420 <HAL_DMA_IRQHandler+0xd1c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb82>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a68      	ldr	r2, [pc, #416]	; (8004424 <HAL_DMA_IRQHandler+0xd20>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb94>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e007      	b.n	80042a8 <HAL_DMA_IRQHandler+0xba4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8165 	beq.w	800457c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ba:	e15f      	b.n	800457c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c5 	beq.w	800445c <HAL_DMA_IRQHandler+0xd58>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80bf 	beq.w	800445c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2202      	movs	r2, #2
 80042e8:	409a      	lsls	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813a 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	e134      	b.n	8004580 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8130 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	e12a      	b.n	8004580 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8089 	bne.w	8004448 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <HAL_DMA_IRQHandler+0xce4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d04a      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a29      	ldr	r2, [pc, #164]	; (80043ec <HAL_DMA_IRQHandler+0xce8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d045      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <HAL_DMA_IRQHandler+0xcec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d040      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_DMA_IRQHandler+0xcf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d03b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_DMA_IRQHandler+0xcf4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d036      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <HAL_DMA_IRQHandler+0xcf8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d031      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_DMA_IRQHandler+0xcfc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d02c      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_DMA_IRQHandler+0xd00>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d027      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_DMA_IRQHandler+0xd04>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_DMA_IRQHandler+0xd08>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01d      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_DMA_IRQHandler+0xd0c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_DMA_IRQHandler+0xd10>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_DMA_IRQHandler+0xd14>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_DMA_IRQHandler+0xd18>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_DMA_IRQHandler+0xd1c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xcd2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <HAL_DMA_IRQHandler+0xd20>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d128      	bne.n	8004428 <HAL_DMA_IRQHandler+0xd24>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0214 	bic.w	r2, r2, #20
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e027      	b.n	8004438 <HAL_DMA_IRQHandler+0xd34>
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 020a 	bic.w	r2, r2, #10
 8004436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8097 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445a:	e091      	b.n	8004580 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2208      	movs	r2, #8
 8004466:	409a      	lsls	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8088 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe7e>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8082 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	; (8004588 <HAL_DMA_IRQHandler+0xe84>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_DMA_IRQHandler+0xe88>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <HAL_DMA_IRQHandler+0xe8c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_DMA_IRQHandler+0xe90>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_DMA_IRQHandler+0xe94>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_DMA_IRQHandler+0xe98>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <HAL_DMA_IRQHandler+0xe9c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_DMA_IRQHandler+0xea0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <HAL_DMA_IRQHandler+0xea4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <HAL_DMA_IRQHandler+0xea8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_DMA_IRQHandler+0xeac>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_DMA_IRQHandler+0xeb0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <HAL_DMA_IRQHandler+0xeb4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <HAL_DMA_IRQHandler+0xeb8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0xebc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0xe1a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_DMA_IRQHandler+0xec0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0xe2c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 021c 	bic.w	r2, r2, #28
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DMA_IRQHandler+0xe3c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
 8004576:	e004      	b.n	8004582 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8

080045c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7f      	ldr	r2, [pc, #508]	; (80047e4 <DMA_SetConfig+0x21c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d072      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7d      	ldr	r2, [pc, #500]	; (80047e8 <DMA_SetConfig+0x220>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d06d      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <DMA_SetConfig+0x224>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d068      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7a      	ldr	r2, [pc, #488]	; (80047f0 <DMA_SetConfig+0x228>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d063      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a79      	ldr	r2, [pc, #484]	; (80047f4 <DMA_SetConfig+0x22c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d05e      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a77      	ldr	r2, [pc, #476]	; (80047f8 <DMA_SetConfig+0x230>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d059      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a76      	ldr	r2, [pc, #472]	; (80047fc <DMA_SetConfig+0x234>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d054      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a74      	ldr	r2, [pc, #464]	; (8004800 <DMA_SetConfig+0x238>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04f      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a73      	ldr	r2, [pc, #460]	; (8004804 <DMA_SetConfig+0x23c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a71      	ldr	r2, [pc, #452]	; (8004808 <DMA_SetConfig+0x240>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a70      	ldr	r2, [pc, #448]	; (800480c <DMA_SetConfig+0x244>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6e      	ldr	r2, [pc, #440]	; (8004810 <DMA_SetConfig+0x248>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6d      	ldr	r2, [pc, #436]	; (8004814 <DMA_SetConfig+0x24c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <DMA_SetConfig+0x250>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6a      	ldr	r2, [pc, #424]	; (800481c <DMA_SetConfig+0x254>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a68      	ldr	r2, [pc, #416]	; (8004820 <DMA_SetConfig+0x258>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a67      	ldr	r2, [pc, #412]	; (8004824 <DMA_SetConfig+0x25c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a65      	ldr	r2, [pc, #404]	; (8004828 <DMA_SetConfig+0x260>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a64      	ldr	r2, [pc, #400]	; (800482c <DMA_SetConfig+0x264>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a62      	ldr	r2, [pc, #392]	; (8004830 <DMA_SetConfig+0x268>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a61      	ldr	r2, [pc, #388]	; (8004834 <DMA_SetConfig+0x26c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5f      	ldr	r2, [pc, #380]	; (8004838 <DMA_SetConfig+0x270>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5e      	ldr	r2, [pc, #376]	; (800483c <DMA_SetConfig+0x274>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <DMA_SetConfig+0x10a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a5c      	ldr	r2, [pc, #368]	; (8004840 <DMA_SetConfig+0x278>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <DMA_SetConfig+0x10e>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <DMA_SetConfig+0x110>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a39      	ldr	r2, [pc, #228]	; (80047e4 <DMA_SetConfig+0x21c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a38      	ldr	r2, [pc, #224]	; (80047e8 <DMA_SetConfig+0x220>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a36      	ldr	r2, [pc, #216]	; (80047ec <DMA_SetConfig+0x224>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <DMA_SetConfig+0x228>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a33      	ldr	r2, [pc, #204]	; (80047f4 <DMA_SetConfig+0x22c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a32      	ldr	r2, [pc, #200]	; (80047f8 <DMA_SetConfig+0x230>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a30      	ldr	r2, [pc, #192]	; (80047fc <DMA_SetConfig+0x234>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <DMA_SetConfig+0x238>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <DMA_SetConfig+0x23c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <DMA_SetConfig+0x240>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2a      	ldr	r2, [pc, #168]	; (800480c <DMA_SetConfig+0x244>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a29      	ldr	r2, [pc, #164]	; (8004810 <DMA_SetConfig+0x248>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <DMA_SetConfig+0x24c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a26      	ldr	r2, [pc, #152]	; (8004818 <DMA_SetConfig+0x250>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <DMA_SetConfig+0x254>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <DMA_SetConfig+0x1d0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a23      	ldr	r2, [pc, #140]	; (8004820 <DMA_SetConfig+0x258>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <DMA_SetConfig+0x1d4>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <DMA_SetConfig+0x1d6>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d059      	beq.n	8004856 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	223f      	movs	r2, #63	; 0x3f
 80047ac:	409a      	lsls	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d138      	bne.n	8004844 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047e2:	e0ae      	b.n	8004942 <DMA_SetConfig+0x37a>
 80047e4:	40020010 	.word	0x40020010
 80047e8:	40020028 	.word	0x40020028
 80047ec:	40020040 	.word	0x40020040
 80047f0:	40020058 	.word	0x40020058
 80047f4:	40020070 	.word	0x40020070
 80047f8:	40020088 	.word	0x40020088
 80047fc:	400200a0 	.word	0x400200a0
 8004800:	400200b8 	.word	0x400200b8
 8004804:	40020410 	.word	0x40020410
 8004808:	40020428 	.word	0x40020428
 800480c:	40020440 	.word	0x40020440
 8004810:	40020458 	.word	0x40020458
 8004814:	40020470 	.word	0x40020470
 8004818:	40020488 	.word	0x40020488
 800481c:	400204a0 	.word	0x400204a0
 8004820:	400204b8 	.word	0x400204b8
 8004824:	58025408 	.word	0x58025408
 8004828:	5802541c 	.word	0x5802541c
 800482c:	58025430 	.word	0x58025430
 8004830:	58025444 	.word	0x58025444
 8004834:	58025458 	.word	0x58025458
 8004838:	5802546c 	.word	0x5802546c
 800483c:	58025480 	.word	0x58025480
 8004840:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
}
 8004854:	e075      	b.n	8004942 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <DMA_SetConfig+0x388>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d04a      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <DMA_SetConfig+0x38c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d045      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3a      	ldr	r2, [pc, #232]	; (8004958 <DMA_SetConfig+0x390>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a38      	ldr	r2, [pc, #224]	; (800495c <DMA_SetConfig+0x394>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03b      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a37      	ldr	r2, [pc, #220]	; (8004960 <DMA_SetConfig+0x398>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d036      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a35      	ldr	r2, [pc, #212]	; (8004964 <DMA_SetConfig+0x39c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d031      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a34      	ldr	r2, [pc, #208]	; (8004968 <DMA_SetConfig+0x3a0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d02c      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a32      	ldr	r2, [pc, #200]	; (800496c <DMA_SetConfig+0x3a4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d027      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a31      	ldr	r2, [pc, #196]	; (8004970 <DMA_SetConfig+0x3a8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <DMA_SetConfig+0x3ac>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <DMA_SetConfig+0x3b0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	; (800497c <DMA_SetConfig+0x3b4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <DMA_SetConfig+0x3b8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <DMA_SetConfig+0x3bc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a28      	ldr	r2, [pc, #160]	; (8004988 <DMA_SetConfig+0x3c0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <DMA_SetConfig+0x32e>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a26      	ldr	r2, [pc, #152]	; (800498c <DMA_SetConfig+0x3c4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <DMA_SetConfig+0x332>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <DMA_SetConfig+0x334>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d108      	bne.n	8004932 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	60da      	str	r2, [r3, #12]
}
 8004930:	e007      	b.n	8004942 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	48022c08 	.word	0x48022c08
 8004954:	48022c1c 	.word	0x48022c1c
 8004958:	48022c30 	.word	0x48022c30
 800495c:	48022c44 	.word	0x48022c44
 8004960:	48022c58 	.word	0x48022c58
 8004964:	48022c6c 	.word	0x48022c6c
 8004968:	48022c80 	.word	0x48022c80
 800496c:	48022c94 	.word	0x48022c94
 8004970:	58025408 	.word	0x58025408
 8004974:	5802541c 	.word	0x5802541c
 8004978:	58025430 	.word	0x58025430
 800497c:	58025444 	.word	0x58025444
 8004980:	58025458 	.word	0x58025458
 8004984:	5802546c 	.word	0x5802546c
 8004988:	58025480 	.word	0x58025480
 800498c:	58025494 	.word	0x58025494

08004990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x118>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04a      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a41      	ldr	r2, [pc, #260]	; (8004aac <DMA_CalcBaseAndBitshift+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d045      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3f      	ldr	r2, [pc, #252]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x120>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d040      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3e      	ldr	r2, [pc, #248]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d03b      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a3c      	ldr	r2, [pc, #240]	; (8004ab8 <DMA_CalcBaseAndBitshift+0x128>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d036      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <DMA_CalcBaseAndBitshift+0x12c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d031      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a39      	ldr	r2, [pc, #228]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x130>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02c      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x134>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a36      	ldr	r2, [pc, #216]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a35      	ldr	r2, [pc, #212]	; (8004acc <DMA_CalcBaseAndBitshift+0x13c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a33      	ldr	r2, [pc, #204]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x140>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a32      	ldr	r2, [pc, #200]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x144>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a30      	ldr	r2, [pc, #192]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x148>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <DMA_CalcBaseAndBitshift+0x14c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x150>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x154>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <DMA_CalcBaseAndBitshift+0xac>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <DMA_CalcBaseAndBitshift+0xae>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d024      	beq.n	8004a8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	3b10      	subs	r3, #16
 8004a4a:	4a27      	ldr	r2, [pc, #156]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x158>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	4a24      	ldr	r2, [pc, #144]	; (8004aec <DMA_CalcBaseAndBitshift+0x15c>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d908      	bls.n	8004a7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	659a      	str	r2, [r3, #88]	; 0x58
 8004a7a:	e00d      	b.n	8004a98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8a:	e005      	b.n	8004a98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40020010 	.word	0x40020010
 8004aac:	40020028 	.word	0x40020028
 8004ab0:	40020040 	.word	0x40020040
 8004ab4:	40020058 	.word	0x40020058
 8004ab8:	40020070 	.word	0x40020070
 8004abc:	40020088 	.word	0x40020088
 8004ac0:	400200a0 	.word	0x400200a0
 8004ac4:	400200b8 	.word	0x400200b8
 8004ac8:	40020410 	.word	0x40020410
 8004acc:	40020428 	.word	0x40020428
 8004ad0:	40020440 	.word	0x40020440
 8004ad4:	40020458 	.word	0x40020458
 8004ad8:	40020470 	.word	0x40020470
 8004adc:	40020488 	.word	0x40020488
 8004ae0:	400204a0 	.word	0x400204a0
 8004ae4:	400204b8 	.word	0x400204b8
 8004ae8:	aaaaaaab 	.word	0xaaaaaaab
 8004aec:	08009340 	.word	0x08009340
 8004af0:	fffffc00 	.word	0xfffffc00

08004af4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d120      	bne.n	8004b4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d858      	bhi.n	8004bc2 <DMA_CheckFifoParam+0xce>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <DMA_CheckFifoParam+0x24>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b3b 	.word	0x08004b3b
 8004b20:	08004b29 	.word	0x08004b29
 8004b24:	08004bc3 	.word	0x08004bc3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d048      	beq.n	8004bc6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b38:	e045      	b.n	8004bc6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b42:	d142      	bne.n	8004bca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b48:	e03f      	b.n	8004bca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b52:	d123      	bne.n	8004b9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d838      	bhi.n	8004bce <DMA_CheckFifoParam+0xda>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <DMA_CheckFifoParam+0x70>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b7b 	.word	0x08004b7b
 8004b6c:	08004b75 	.word	0x08004b75
 8004b70:	08004b8d 	.word	0x08004b8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
        break;
 8004b78:	e030      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d025      	beq.n	8004bd2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b8a:	e022      	b.n	8004bd2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b94:	d11f      	bne.n	8004bd6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b9a:	e01c      	b.n	8004bd6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <DMA_CheckFifoParam+0xb6>
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d003      	beq.n	8004bb0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ba8:	e018      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
        break;
 8004bae:	e015      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8004bc0:	e00b      	b.n	8004bda <DMA_CheckFifoParam+0xe6>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e00a      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e008      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        break;
 8004bca:	bf00      	nop
 8004bcc:	e006      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        break;
 8004bce:	bf00      	nop
 8004bd0:	e004      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        break;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
        break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
    break;
 8004bda:	bf00      	nop
    }
  }

  return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a36      	ldr	r2, [pc, #216]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d018      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a33      	ldr	r2, [pc, #204]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01a      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3b08      	subs	r3, #8
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c88:	e024      	b.n	8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3b10      	subs	r3, #16
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d806      	bhi.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d902      	bls.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2201      	movs	r2, #1
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	58025408 	.word	0x58025408
 8004ce4:	5802541c 	.word	0x5802541c
 8004ce8:	58025430 	.word	0x58025430
 8004cec:	58025444 	.word	0x58025444
 8004cf0:	58025458 	.word	0x58025458
 8004cf4:	5802546c 	.word	0x5802546c
 8004cf8:	58025480 	.word	0x58025480
 8004cfc:	58025494 	.word	0x58025494
 8004d00:	cccccccd 	.word	0xcccccccd
 8004d04:	16009600 	.word	0x16009600
 8004d08:	58025880 	.word	0x58025880
 8004d0c:	aaaaaaab 	.word	0xaaaaaaab
 8004d10:	400204b8 	.word	0x400204b8
 8004d14:	4002040f 	.word	0x4002040f
 8004d18:	10008200 	.word	0x10008200
 8004d1c:	40020880 	.word	0x40020880

08004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04a      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d847      	bhi.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004da8:	671a      	str	r2, [r3, #112]	; 0x70
 8004daa:	e009      	b.n	8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dbe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494
 8004df8:	1600963f 	.word	0x1600963f
 8004dfc:	58025940 	.word	0x58025940
 8004e00:	1000823f 	.word	0x1000823f
 8004e04:	40020940 	.word	0x40020940

08004e08 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b098      	sub	sp, #96	; 0x60
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004e10:	4a84      	ldr	r2, [pc, #528]	; (8005024 <HAL_FDCAN_Init+0x21c>)
 8004e12:	f107 030c 	add.w	r3, r7, #12
 8004e16:	4611      	mov	r1, r2
 8004e18:	224c      	movs	r2, #76	; 0x4c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f004 fa48 	bl	80092b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e1c6      	b.n	80051b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7e      	ldr	r2, [pc, #504]	; (8005028 <HAL_FDCAN_Init+0x220>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d106      	bne.n	8004e42 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc f81c 	bl	8000e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0210 	bic.w	r2, r2, #16
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e6c:	f7fc fb78 	bl	8001560 <HAL_GetTick>
 8004e70:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e72:	e014      	b.n	8004e9e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e74:	f7fc fb74 	bl	8001560 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b0a      	cmp	r3, #10
 8004e80:	d90d      	bls.n	8004e9e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e18c      	b.n	80051b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d0e3      	beq.n	8004e74 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ebc:	f7fc fb50 	bl	8001560 <HAL_GetTick>
 8004ec0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ec2:	e014      	b.n	8004eee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ec4:	f7fc fb4c 	bl	8001560 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b0a      	cmp	r3, #10
 8004ed0:	d90d      	bls.n	8004eee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e164      	b.n	80051b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0e3      	beq.n	8004ec4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0202 	orr.w	r2, r2, #2
 8004f0a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7c1b      	ldrb	r3, [r3, #16]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d108      	bne.n	8004f26 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f22:	619a      	str	r2, [r3, #24]
 8004f24:	e007      	b.n	8004f36 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7c5b      	ldrb	r3, [r3, #17]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d108      	bne.n	8004f50 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4c:	619a      	str	r2, [r3, #24]
 8004f4e:	e007      	b.n	8004f60 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7c9b      	ldrb	r3, [r3, #18]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d108      	bne.n	8004f7a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f76:	619a      	str	r2, [r3, #24]
 8004f78:	e007      	b.n	8004f8a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f88:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004fae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0210 	bic.w	r2, r2, #16
 8004fbe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d108      	bne.n	8004fda <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0204 	orr.w	r2, r2, #4
 8004fd6:	619a      	str	r2, [r3, #24]
 8004fd8:	e030      	b.n	800503c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02c      	beq.n	800503c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d020      	beq.n	800502c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ff8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0210 	orr.w	r2, r2, #16
 8005008:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d114      	bne.n	800503c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0220 	orr.w	r2, r2, #32
 8005020:	619a      	str	r2, [r3, #24]
 8005022:	e00b      	b.n	800503c <HAL_FDCAN_Init+0x234>
 8005024:	080092e4 	.word	0x080092e4
 8005028:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	3b01      	subs	r3, #1
 8005042:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	3b01      	subs	r3, #1
 800504a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800504c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005054:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	3b01      	subs	r3, #1
 800505e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005064:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005066:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005070:	d115      	bne.n	800509e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	3b01      	subs	r3, #1
 800507e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005080:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	3b01      	subs	r3, #1
 8005088:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800508a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	3b01      	subs	r3, #1
 8005094:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800509a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800509c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c4:	4413      	add	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80050d2:	f023 0107 	bic.w	r1, r3, #7
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	3360      	adds	r3, #96	; 0x60
 80050de:	443b      	add	r3, r7
 80050e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d011      	beq.n	800511a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050fe:	f023 0107 	bic.w	r1, r3, #7
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3360      	adds	r3, #96	; 0x60
 800510a:	443b      	add	r3, r7
 800510c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800512a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	3360      	adds	r3, #96	; 0x60
 8005136:	443b      	add	r3, r7
 8005138:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800513c:	011a      	lsls	r2, r3, #4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005158:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3360      	adds	r3, #96	; 0x60
 8005164:	443b      	add	r3, r7
 8005166:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HAL_FDCAN_Init+0x3b8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d107      	bne.n	8005190 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f022 0203 	bic.w	r2, r2, #3
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f80b 	bl	80051c4 <FDCAN_CalcultateRamBlockAddresses>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80051b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3760      	adds	r7, #96	; 0x60
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	4000a000 	.word	0x4000a000

080051c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051da:	4ba7      	ldr	r3, [pc, #668]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051dc:	4013      	ands	r3, r2
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	0091      	lsls	r1, r2, #2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	041a      	lsls	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	4413      	add	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800521a:	4b97      	ldr	r3, [pc, #604]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800521c:	4013      	ands	r3, r2
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0091      	lsls	r1, r2, #2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	430b      	orrs	r3, r1
 8005228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	041a      	lsls	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800525c:	4b86      	ldr	r3, [pc, #536]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	0091      	lsls	r1, r2, #2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005276:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	041a      	lsls	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80052a4:	4b74      	ldr	r3, [pc, #464]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	0091      	lsls	r1, r2, #2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c6:	041a      	lsls	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80052ec:	4b62      	ldr	r3, [pc, #392]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	0091      	lsls	r1, r2, #2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005318:	4b57      	ldr	r3, [pc, #348]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0091      	lsls	r1, r2, #2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005332:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	041a      	lsls	r2, r3, #16
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4413      	add	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800535c:	4013      	ands	r3, r2
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	0091      	lsls	r1, r2, #2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	430b      	orrs	r3, r1
 8005368:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005374:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	041a      	lsls	r2, r3, #16
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005390:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005398:	061a      	lsls	r2, r3, #24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	4b34      	ldr	r3, [pc, #208]	; (800547c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80053aa:	4413      	add	r3, r2
 80053ac:	009a      	lsls	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d915      	bls.n	80054a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005474:	e006      	b.n	8005484 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005476:	bf00      	nop
 8005478:	ffff0003 	.word	0xffff0003
 800547c:	10002b00 	.word	0x10002b00
 8005480:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2203      	movs	r2, #3
 8005498:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e010      	b.n	80054c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e005      	b.n	80054b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3f3      	bcc.n	80054a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054de:	4b89      	ldr	r3, [pc, #548]	; (8005704 <HAL_GPIO_Init+0x234>)
 80054e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054e2:	e194      	b.n	800580e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2101      	movs	r1, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8186 	beq.w	8005808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d005      	beq.n	8005514 <HAL_GPIO_Init+0x44>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d123      	bne.n	8005606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3208      	adds	r2, #8
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	220f      	movs	r2, #15
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	08da      	lsrs	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3208      	adds	r2, #8
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80e0 	beq.w	8005808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005648:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_GPIO_Init+0x238>)
 800564a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800564e:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_GPIO_Init+0x238>)
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005658:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <HAL_GPIO_Init+0x238>)
 800565a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005666:	4a29      	ldr	r2, [pc, #164]	; (800570c <HAL_GPIO_Init+0x23c>)
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	3302      	adds	r3, #2
 800566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	220f      	movs	r2, #15
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <HAL_GPIO_Init+0x240>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d052      	beq.n	8005738 <HAL_GPIO_Init+0x268>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_GPIO_Init+0x244>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d031      	beq.n	80056fe <HAL_GPIO_Init+0x22e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_GPIO_Init+0x248>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <HAL_GPIO_Init+0x22a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_GPIO_Init+0x24c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d025      	beq.n	80056f6 <HAL_GPIO_Init+0x226>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_GPIO_Init+0x250>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01f      	beq.n	80056f2 <HAL_GPIO_Init+0x222>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_GPIO_Init+0x254>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d019      	beq.n	80056ee <HAL_GPIO_Init+0x21e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_GPIO_Init+0x258>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_GPIO_Init+0x21a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_GPIO_Init+0x25c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00d      	beq.n	80056e6 <HAL_GPIO_Init+0x216>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_GPIO_Init+0x260>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <HAL_GPIO_Init+0x212>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_GPIO_Init+0x264>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_GPIO_Init+0x20e>
 80056da:	2309      	movs	r3, #9
 80056dc:	e02d      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056de:	230a      	movs	r3, #10
 80056e0:	e02b      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056e2:	2308      	movs	r3, #8
 80056e4:	e029      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056e6:	2307      	movs	r3, #7
 80056e8:	e027      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056ea:	2306      	movs	r3, #6
 80056ec:	e025      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056ee:	2305      	movs	r3, #5
 80056f0:	e023      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056f2:	2304      	movs	r3, #4
 80056f4:	e021      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056f6:	2303      	movs	r3, #3
 80056f8:	e01f      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e01d      	b.n	800573a <HAL_GPIO_Init+0x26a>
 80056fe:	2301      	movs	r3, #1
 8005700:	e01b      	b.n	800573a <HAL_GPIO_Init+0x26a>
 8005702:	bf00      	nop
 8005704:	58000080 	.word	0x58000080
 8005708:	58024400 	.word	0x58024400
 800570c:	58000400 	.word	0x58000400
 8005710:	58020000 	.word	0x58020000
 8005714:	58020400 	.word	0x58020400
 8005718:	58020800 	.word	0x58020800
 800571c:	58020c00 	.word	0x58020c00
 8005720:	58021000 	.word	0x58021000
 8005724:	58021400 	.word	0x58021400
 8005728:	58021800 	.word	0x58021800
 800572c:	58021c00 	.word	0x58021c00
 8005730:	58022000 	.word	0x58022000
 8005734:	58022400 	.word	0x58022400
 8005738:	2300      	movs	r3, #0
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	f002 0203 	and.w	r2, r2, #3
 8005740:	0092      	lsls	r2, r2, #2
 8005742:	4093      	lsls	r3, r2
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800574a:	4938      	ldr	r1, [pc, #224]	; (800582c <HAL_GPIO_Init+0x35c>)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	3302      	adds	r3, #2
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800577e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f ae63 	bne.w	80054e4 <HAL_GPIO_Init+0x14>
  }
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	58000400 	.word	0x58000400

08005830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e07f      	b.n	8005942 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fbec 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	; 0x24
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	e006      	b.n	80058b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d104      	bne.n	80058ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <HAL_I2C_Init+0x11c>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69d9      	ldr	r1, [r3, #28]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	02008000 	.word	0x02008000

08005950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b20      	cmp	r3, #32
 8005964:	d138      	bne.n	80059d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005970:	2302      	movs	r3, #2
 8005972:	e032      	b.n	80059da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2224      	movs	r2, #36	; 0x24
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d139      	bne.n	8005a70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e033      	b.n	8005a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2224      	movs	r2, #36	; 0x24
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_PWREx_ConfigSupply+0x70>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d00a      	beq.n	8005aaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a94:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <HAL_PWREx_ConfigSupply+0x70>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d001      	beq.n	8005aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e01f      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e01d      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_PWREx_ConfigSupply+0x70>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	490f      	ldr	r1, [pc, #60]	; (8005af0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aba:	f7fb fd51 	bl	8001560 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ac0:	e009      	b.n	8005ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ac2:	f7fb fd4d 	bl	8001560 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad0:	d901      	bls.n	8005ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e007      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	58024800 	.word	0x58024800

08005af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08c      	sub	sp, #48	; 0x30
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f000 bc1f 	b.w	8006346 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80b3 	beq.w	8005c7c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b16:	4b95      	ldr	r3, [pc, #596]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b20:	4b92      	ldr	r3, [pc, #584]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d007      	beq.n	8005b3c <HAL_RCC_OscConfig+0x48>
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	2b18      	cmp	r3, #24
 8005b30:	d112      	bne.n	8005b58 <HAL_RCC_OscConfig+0x64>
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d10d      	bne.n	8005b58 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8098 	beq.w	8005c7a <HAL_RCC_OscConfig+0x186>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 8093 	bne.w	8005c7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e3f6      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d106      	bne.n	8005b70 <HAL_RCC_OscConfig+0x7c>
 8005b62:	4b82      	ldr	r3, [pc, #520]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a81      	ldr	r2, [pc, #516]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e058      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d112      	bne.n	8005b9e <HAL_RCC_OscConfig+0xaa>
 8005b78:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a7b      	ldr	r2, [pc, #492]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a78      	ldr	r2, [pc, #480]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e041      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba6:	d112      	bne.n	8005bce <HAL_RCC_OscConfig+0xda>
 8005ba8:	4b70      	ldr	r3, [pc, #448]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6f      	ldr	r2, [pc, #444]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	4b6d      	ldr	r3, [pc, #436]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a6c      	ldr	r2, [pc, #432]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a69      	ldr	r2, [pc, #420]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e029      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005bd6:	d112      	bne.n	8005bfe <HAL_RCC_OscConfig+0x10a>
 8005bd8:	4b64      	ldr	r3, [pc, #400]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a63      	ldr	r2, [pc, #396]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a60      	ldr	r2, [pc, #384]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	4b5e      	ldr	r3, [pc, #376]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5d      	ldr	r2, [pc, #372]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	e011      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
 8005bfe:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a5a      	ldr	r2, [pc, #360]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	4b58      	ldr	r3, [pc, #352]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a57      	ldr	r2, [pc, #348]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a54      	ldr	r2, [pc, #336]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d013      	beq.n	8005c52 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fb fc99 	bl	8001560 <HAL_GetTick>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c32:	f7fb fc95 	bl	8001560 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b64      	cmp	r3, #100	; 0x64
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e380      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c44:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x13e>
 8005c50:	e014      	b.n	8005c7c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fb fc85 	bl	8001560 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c5a:	f7fb fc81 	bl	8001560 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b64      	cmp	r3, #100	; 0x64
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e36c      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c6c:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCC_OscConfig+0x166>
 8005c78:	e000      	b.n	8005c7c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 808c 	beq.w	8005da2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8a:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c92:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x1bc>
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b18      	cmp	r3, #24
 8005ca4:	d137      	bne.n	8005d16 <HAL_RCC_OscConfig+0x222>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d132      	bne.n	8005d16 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cb0:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x1d4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e33e      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 0219 	bic.w	r2, r3, #25
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4925      	ldr	r1, [pc, #148]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fb fc41 	bl	8001560 <HAL_GetTick>
 8005cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce2:	f7fb fc3d 	bl	8001560 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e328      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	061b      	lsls	r3, r3, #24
 8005d0e:	4917      	ldr	r1, [pc, #92]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d14:	e045      	b.n	8005da2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f023 0219 	bic.w	r2, r3, #25
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4910      	ldr	r1, [pc, #64]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fb fc16 	bl	8001560 <HAL_GetTick>
 8005d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d38:	f7fb fc12 	bl	8001560 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e2fd      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d56:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	4901      	ldr	r1, [pc, #4]	; (8005d6c <HAL_RCC_OscConfig+0x278>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	604b      	str	r3, [r1, #4]
 8005d6a:	e01a      	b.n	8005da2 <HAL_RCC_OscConfig+0x2ae>
 8005d6c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d70:	4b97      	ldr	r3, [pc, #604]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a96      	ldr	r2, [pc, #600]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fb fbf0 	bl	8001560 <HAL_GetTick>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d84:	f7fb fbec 	bl	8001560 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e2d7      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d96:	4b8e      	ldr	r3, [pc, #568]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d06a      	beq.n	8005e84 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dae:	4b88      	ldr	r3, [pc, #544]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005db8:	4b85      	ldr	r3, [pc, #532]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d007      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x2e0>
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b18      	cmp	r3, #24
 8005dc8:	d11b      	bne.n	8005e02 <HAL_RCC_OscConfig+0x30e>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d116      	bne.n	8005e02 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dd4:	4b7e      	ldr	r3, [pc, #504]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_RCC_OscConfig+0x2f8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e2ac      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dec:	4b78      	ldr	r3, [pc, #480]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	4975      	ldr	r1, [pc, #468]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e00:	e040      	b.n	8005e84 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d023      	beq.n	8005e52 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e0a:	4b71      	ldr	r3, [pc, #452]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a70      	ldr	r2, [pc, #448]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e16:	f7fb fba3 	bl	8001560 <HAL_GetTick>
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e1e:	f7fb fb9f 	bl	8001560 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e28a      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e30:	4b67      	ldr	r3, [pc, #412]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e3c:	4b64      	ldr	r3, [pc, #400]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	4961      	ldr	r1, [pc, #388]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60cb      	str	r3, [r1, #12]
 8005e50:	e018      	b.n	8005e84 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e52:	4b5f      	ldr	r3, [pc, #380]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5e      	ldr	r2, [pc, #376]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb fb7f 	bl	8001560 <HAL_GetTick>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e66:	f7fb fb7b 	bl	8001560 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e266      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e78:	4b55      	ldr	r3, [pc, #340]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f0      	bne.n	8005e66 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d036      	beq.n	8005efe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e98:	4b4d      	ldr	r3, [pc, #308]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9c:	4a4c      	ldr	r2, [pc, #304]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fb fb5c 	bl	8001560 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fb fb58 	bl	8001560 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e243      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ebe:	4b44      	ldr	r3, [pc, #272]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x3b8>
 8005eca:	e018      	b.n	8005efe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ecc:	4b40      	ldr	r3, [pc, #256]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed0:	4a3f      	ldr	r2, [pc, #252]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fb fb42 	bl	8001560 <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee0:	f7fb fb3e 	bl	8001560 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e229      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef2:	4b37      	ldr	r3, [pc, #220]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d036      	beq.n	8005f78 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d019      	beq.n	8005f46 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f12:	4b2f      	ldr	r3, [pc, #188]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f1e:	f7fb fb1f 	bl	8001560 <HAL_GetTick>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f26:	f7fb fb1b 	bl	8001560 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e206      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x432>
 8005f44:	e018      	b.n	8005f78 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f52:	f7fb fb05 	bl	8001560 <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5a:	f7fb fb01 	bl	8001560 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1ec      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80af 	beq.w	80060e4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <HAL_RCC_OscConfig+0x4e0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a12      	ldr	r2, [pc, #72]	; (8005fd4 <HAL_RCC_OscConfig+0x4e0>)
 8005f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f92:	f7fb fae5 	bl	8001560 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9a:	f7fb fae1 	bl	8001560 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b64      	cmp	r3, #100	; 0x64
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e1cc      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_OscConfig+0x4e0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x4e4>
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <HAL_RCC_OscConfig+0x4dc>)
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
 8005fcc:	e05b      	b.n	8006086 <HAL_RCC_OscConfig+0x592>
 8005fce:	bf00      	nop
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	58024800 	.word	0x58024800
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d112      	bne.n	8006006 <HAL_RCC_OscConfig+0x512>
 8005fe0:	4b9d      	ldr	r3, [pc, #628]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	4a9c      	ldr	r2, [pc, #624]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
 8005fec:	4b9a      	ldr	r3, [pc, #616]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a99      	ldr	r2, [pc, #612]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff8:	4b97      	ldr	r3, [pc, #604]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a96      	ldr	r2, [pc, #600]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8005ffe:	f023 0304 	bic.w	r3, r3, #4
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e03f      	b.n	8006086 <HAL_RCC_OscConfig+0x592>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d112      	bne.n	8006034 <HAL_RCC_OscConfig+0x540>
 800600e:	4b92      	ldr	r3, [pc, #584]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	4a91      	ldr	r2, [pc, #580]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	6713      	str	r3, [r2, #112]	; 0x70
 800601a:	4b8f      	ldr	r3, [pc, #572]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a8e      	ldr	r2, [pc, #568]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	4b8c      	ldr	r3, [pc, #560]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a8b      	ldr	r2, [pc, #556]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	e028      	b.n	8006086 <HAL_RCC_OscConfig+0x592>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b85      	cmp	r3, #133	; 0x85
 800603a:	d112      	bne.n	8006062 <HAL_RCC_OscConfig+0x56e>
 800603c:	4b86      	ldr	r3, [pc, #536]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a85      	ldr	r2, [pc, #532]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	4b83      	ldr	r3, [pc, #524]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a82      	ldr	r2, [pc, #520]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	4b80      	ldr	r3, [pc, #512]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	4a7f      	ldr	r2, [pc, #508]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
 8006060:	e011      	b.n	8006086 <HAL_RCC_OscConfig+0x592>
 8006062:	4b7d      	ldr	r3, [pc, #500]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	4a7c      	ldr	r2, [pc, #496]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	6713      	str	r3, [r2, #112]	; 0x70
 800606e:	4b7a      	ldr	r3, [pc, #488]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	4a79      	ldr	r2, [pc, #484]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	6713      	str	r3, [r2, #112]	; 0x70
 800607a:	4b77      	ldr	r3, [pc, #476]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a76      	ldr	r2, [pc, #472]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d015      	beq.n	80060ba <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608e:	f7fb fa67 	bl	8001560 <HAL_GetTick>
 8006092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006094:	e00a      	b.n	80060ac <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006096:	f7fb fa63 	bl	8001560 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e14c      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ac:	4b6a      	ldr	r3, [pc, #424]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ee      	beq.n	8006096 <HAL_RCC_OscConfig+0x5a2>
 80060b8:	e014      	b.n	80060e4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fb fa51 	bl	8001560 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fb fa4d 	bl	8001560 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e136      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d8:	4b5f      	ldr	r3, [pc, #380]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ee      	bne.n	80060c2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 812b 	beq.w	8006344 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060ee:	4b5a      	ldr	r3, [pc, #360]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f6:	2b18      	cmp	r3, #24
 80060f8:	f000 80bb 	beq.w	8006272 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b02      	cmp	r3, #2
 8006102:	f040 8095 	bne.w	8006230 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b54      	ldr	r3, [pc, #336]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a53      	ldr	r2, [pc, #332]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800610c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb fa25 	bl	8001560 <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611a:	f7fb fa21 	bl	8001560 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e10c      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800612c:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006138:	4b47      	ldr	r3, [pc, #284]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800613a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613c:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCC_OscConfig+0x768>)
 800613e:	4013      	ands	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006148:	0112      	lsls	r2, r2, #4
 800614a:	430a      	orrs	r2, r1
 800614c:	4942      	ldr	r1, [pc, #264]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800614e:	4313      	orrs	r3, r2
 8006150:	628b      	str	r3, [r1, #40]	; 0x28
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	3b01      	subs	r3, #1
 8006158:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	3b01      	subs	r3, #1
 8006162:	025b      	lsls	r3, r3, #9
 8006164:	b29b      	uxth	r3, r3
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	3b01      	subs	r3, #1
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	3b01      	subs	r3, #1
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006182:	4935      	ldr	r1, [pc, #212]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006184:	4313      	orrs	r3, r2
 8006186:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006188:	4b33      	ldr	r3, [pc, #204]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	4a32      	ldr	r2, [pc, #200]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006198:	4b31      	ldr	r3, [pc, #196]	; (8006260 <HAL_RCC_OscConfig+0x76c>)
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061a0:	00d2      	lsls	r2, r2, #3
 80061a2:	492d      	ldr	r1, [pc, #180]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061a8:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f023 020c 	bic.w	r2, r3, #12
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	4928      	ldr	r1, [pc, #160]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f023 0202 	bic.w	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4924      	ldr	r1, [pc, #144]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	4a21      	ldr	r2, [pc, #132]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fb f9aa 	bl	8001560 <HAL_GetTick>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006210:	f7fb f9a6 	bl	8001560 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e091      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006222:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0x71c>
 800622e:	e089      	b.n	8006344 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <HAL_RCC_OscConfig+0x764>)
 8006236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800623a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fb f990 	bl	8001560 <HAL_GetTick>
 8006240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006242:	e00f      	b.n	8006264 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006244:	f7fb f98c 	bl	8001560 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d908      	bls.n	8006264 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e077      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
 8006256:	bf00      	nop
 8006258:	58024400 	.word	0x58024400
 800625c:	fffffc0c 	.word	0xfffffc0c
 8006260:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e9      	bne.n	8006244 <HAL_RCC_OscConfig+0x750>
 8006270:	e068      	b.n	8006344 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006278:	4b35      	ldr	r3, [pc, #212]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b01      	cmp	r3, #1
 8006284:	d031      	beq.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0203 	and.w	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006290:	429a      	cmp	r2, r3
 8006292:	d12a      	bne.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d122      	bne.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d11a      	bne.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	0a5b      	lsrs	r3, r3, #9
 80062b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d111      	bne.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d108      	bne.n	80062ea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	0e1b      	lsrs	r3, r3, #24
 80062dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d001      	beq.n	80062ee <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e02b      	b.n	8006346 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d01f      	beq.n	8006344 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006310:	f7fb f926 	bl	8001560 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006316:	bf00      	nop
 8006318:	f7fb f922 	bl	8001560 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	4293      	cmp	r3, r2
 8006322:	d0f9      	beq.n	8006318 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 8006326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006328:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <HAL_RCC_OscConfig+0x860>)
 800632a:	4013      	ands	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006330:	00d2      	lsls	r2, r2, #3
 8006332:	4907      	ldr	r1, [pc, #28]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <HAL_RCC_OscConfig+0x85c>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3730      	adds	r7, #48	; 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	58024400 	.word	0x58024400
 8006354:	ffff0007 	.word	0xffff0007

08006358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e19c      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800636c:	4b8a      	ldr	r3, [pc, #552]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d910      	bls.n	800639c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637a:	4b87      	ldr	r3, [pc, #540]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 020f 	bic.w	r2, r3, #15
 8006382:	4985      	ldr	r1, [pc, #532]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	4313      	orrs	r3, r2
 8006388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b83      	ldr	r3, [pc, #524]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d001      	beq.n	800639c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e184      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	4b7b      	ldr	r3, [pc, #492]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d908      	bls.n	80063ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063b8:	4b78      	ldr	r3, [pc, #480]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4975      	ldr	r1, [pc, #468]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	4b70      	ldr	r3, [pc, #448]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d908      	bls.n	80063f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063e6:	4b6d      	ldr	r3, [pc, #436]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	496a      	ldr	r1, [pc, #424]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	4b64      	ldr	r3, [pc, #400]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006410:	429a      	cmp	r2, r3
 8006412:	d908      	bls.n	8006426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006414:	4b61      	ldr	r3, [pc, #388]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	495e      	ldr	r1, [pc, #376]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006422:	4313      	orrs	r3, r2
 8006424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	4b59      	ldr	r3, [pc, #356]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800643e:	429a      	cmp	r2, r3
 8006440:	d908      	bls.n	8006454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006442:	4b56      	ldr	r3, [pc, #344]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	4953      	ldr	r1, [pc, #332]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006450:	4313      	orrs	r3, r2
 8006452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	4b4d      	ldr	r3, [pc, #308]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	429a      	cmp	r2, r3
 800646e:	d908      	bls.n	8006482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006470:	4b4a      	ldr	r3, [pc, #296]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f023 020f 	bic.w	r2, r3, #15
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4947      	ldr	r1, [pc, #284]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 800647e:	4313      	orrs	r3, r2
 8006480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d055      	beq.n	800653a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800648e:	4b43      	ldr	r3, [pc, #268]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	4940      	ldr	r1, [pc, #256]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 800649c:	4313      	orrs	r3, r2
 800649e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064a8:	4b3c      	ldr	r3, [pc, #240]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d121      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0f6      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064c0:	4b36      	ldr	r3, [pc, #216]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d115      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0ea      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064d8:	4b30      	ldr	r3, [pc, #192]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0de      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0d6      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064f8:	4b28      	ldr	r3, [pc, #160]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f023 0207 	bic.w	r2, r3, #7
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4925      	ldr	r1, [pc, #148]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006506:	4313      	orrs	r3, r2
 8006508:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650a:	f7fb f829 	bl	8001560 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006510:	e00a      	b.n	8006528 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006512:	f7fb f825 	bl	8001560 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006520:	4293      	cmp	r3, r2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e0be      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006528:	4b1c      	ldr	r3, [pc, #112]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	429a      	cmp	r2, r3
 8006538:	d1eb      	bne.n	8006512 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	4b14      	ldr	r3, [pc, #80]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	429a      	cmp	r2, r3
 8006554:	d208      	bcs.n	8006568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f023 020f 	bic.w	r2, r3, #15
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	490e      	ldr	r1, [pc, #56]	; (800659c <HAL_RCC_ClockConfig+0x244>)
 8006564:	4313      	orrs	r3, r2
 8006566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d214      	bcs.n	80065a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	4906      	ldr	r1, [pc, #24]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b04      	ldr	r3, [pc, #16]	; (8006598 <HAL_RCC_ClockConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d005      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e086      	b.n	80066a6 <HAL_RCC_ClockConfig+0x34e>
 8006598:	52002000 	.word	0x52002000
 800659c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	4b3f      	ldr	r3, [pc, #252]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d208      	bcs.n	80065ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065bc:	4b3c      	ldr	r3, [pc, #240]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	4939      	ldr	r1, [pc, #228]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d208      	bcs.n	80065fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	492e      	ldr	r1, [pc, #184]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	4b28      	ldr	r3, [pc, #160]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006614:	429a      	cmp	r2, r3
 8006616:	d208      	bcs.n	800662a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006618:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	4922      	ldr	r1, [pc, #136]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 8006626:	4313      	orrs	r3, r2
 8006628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d010      	beq.n	8006658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006642:	429a      	cmp	r2, r3
 8006644:	d208      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006646:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4917      	ldr	r1, [pc, #92]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 8006654:	4313      	orrs	r3, r2
 8006656:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006658:	f000 f834 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	4912      	ldr	r1, [pc, #72]	; (80066b4 <HAL_RCC_ClockConfig+0x35c>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
 8006674:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <HAL_RCC_ClockConfig+0x358>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	4a0d      	ldr	r2, [pc, #52]	; (80066b4 <HAL_RCC_ClockConfig+0x35c>)
 8006680:	5cd3      	ldrb	r3, [r2, r3]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <HAL_RCC_ClockConfig+0x360>)
 800668e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <HAL_RCC_ClockConfig+0x364>)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <HAL_RCC_ClockConfig+0x368>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fa ff16 	bl	80014cc <HAL_InitTick>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	58024400 	.word	0x58024400
 80066b4:	08009330 	.word	0x08009330
 80066b8:	24000004 	.word	0x24000004
 80066bc:	24000000 	.word	0x24000000
 80066c0:	24000008 	.word	0x24000008

080066c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b089      	sub	sp, #36	; 0x24
 80066c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ca:	4bb3      	ldr	r3, [pc, #716]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d2:	2b18      	cmp	r3, #24
 80066d4:	f200 8155 	bhi.w	8006982 <HAL_RCC_GetSysClockFreq+0x2be>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006745 	.word	0x08006745
 80066e4:	08006983 	.word	0x08006983
 80066e8:	08006983 	.word	0x08006983
 80066ec:	08006983 	.word	0x08006983
 80066f0:	08006983 	.word	0x08006983
 80066f4:	08006983 	.word	0x08006983
 80066f8:	08006983 	.word	0x08006983
 80066fc:	08006983 	.word	0x08006983
 8006700:	0800676b 	.word	0x0800676b
 8006704:	08006983 	.word	0x08006983
 8006708:	08006983 	.word	0x08006983
 800670c:	08006983 	.word	0x08006983
 8006710:	08006983 	.word	0x08006983
 8006714:	08006983 	.word	0x08006983
 8006718:	08006983 	.word	0x08006983
 800671c:	08006983 	.word	0x08006983
 8006720:	08006771 	.word	0x08006771
 8006724:	08006983 	.word	0x08006983
 8006728:	08006983 	.word	0x08006983
 800672c:	08006983 	.word	0x08006983
 8006730:	08006983 	.word	0x08006983
 8006734:	08006983 	.word	0x08006983
 8006738:	08006983 	.word	0x08006983
 800673c:	08006983 	.word	0x08006983
 8006740:	08006777 	.word	0x08006777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006744:	4b94      	ldr	r3, [pc, #592]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006750:	4b91      	ldr	r3, [pc, #580]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	08db      	lsrs	r3, r3, #3
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	4a90      	ldr	r2, [pc, #576]	; (800699c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
 8006760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006762:	e111      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006764:	4b8d      	ldr	r3, [pc, #564]	; (800699c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006766:	61bb      	str	r3, [r7, #24]
      break;
 8006768:	e10e      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800676a:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800676c:	61bb      	str	r3, [r7, #24]
      break;
 800676e:	e10b      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006770:	4b8c      	ldr	r3, [pc, #560]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006772:	61bb      	str	r3, [r7, #24]
      break;
 8006774:	e108      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006776:	4b88      	ldr	r3, [pc, #544]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006780:	4b85      	ldr	r3, [pc, #532]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800678c:	4b82      	ldr	r3, [pc, #520]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006796:	4b80      	ldr	r3, [pc, #512]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	08db      	lsrs	r3, r3, #3
 800679c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80e1 	beq.w	800697c <HAL_RCC_GetSysClockFreq+0x2b8>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	f000 8083 	beq.w	80068c8 <HAL_RCC_GetSysClockFreq+0x204>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	f200 80a1 	bhi.w	800690c <HAL_RCC_GetSysClockFreq+0x248>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x114>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d056      	beq.n	8006884 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067d6:	e099      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d8:	4b6f      	ldr	r3, [pc, #444]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02d      	beq.n	8006840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067e4:	4b6c      	ldr	r3, [pc, #432]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	4a6b      	ldr	r2, [pc, #428]	; (800699c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
 80067f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680e:	4b62      	ldr	r3, [pc, #392]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006822:	eddf 5a61 	vldr	s11, [pc, #388]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800683e:	e087      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80069ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006852:	4b51      	ldr	r3, [pc, #324]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006862:	ed97 6a02 	vldr	s12, [r7, #8]
 8006866:	eddf 5a50 	vldr	s11, [pc, #320]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006882:	e065      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006896:	4b40      	ldr	r3, [pc, #256]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068c6:	e043      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80069b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800690a:	e021      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eddf 6a26 	vldr	s13, [pc, #152]	; 80069b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800694e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006950:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	0a5b      	lsrs	r3, r3, #9
 8006956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695a:	3301      	adds	r3, #1
 800695c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006968:	edd7 6a07 	vldr	s13, [r7, #28]
 800696c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006974:	ee17 3a90 	vmov	r3, s15
 8006978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800697a:	e005      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
      break;
 8006980:	e002      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006984:	61bb      	str	r3, [r7, #24]
      break;
 8006986:	bf00      	nop
  }

  return sysclockfreq;
 8006988:	69bb      	ldr	r3, [r7, #24]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3724      	adds	r7, #36	; 0x24
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	03d09000 	.word	0x03d09000
 80069a0:	003d0900 	.word	0x003d0900
 80069a4:	016e3600 	.word	0x016e3600
 80069a8:	46000000 	.word	0x46000000
 80069ac:	4c742400 	.word	0x4c742400
 80069b0:	4a742400 	.word	0x4a742400
 80069b4:	4bb71b00 	.word	0x4bb71b00

080069b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069be:	f7ff fe81 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	0a1b      	lsrs	r3, r3, #8
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	490f      	ldr	r1, [pc, #60]	; (8006a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80069d0:	5ccb      	ldrb	r3, [r1, r3]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80069e6:	5cd3      	ldrb	r3, [r2, r3]
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	fa22 f303 	lsr.w	r3, r2, r3
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80069f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069f6:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80069fe:	681b      	ldr	r3, [r3, #0]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	58024400 	.word	0x58024400
 8006a0c:	08009330 	.word	0x08009330
 8006a10:	24000004 	.word	0x24000004
 8006a14:	24000000 	.word	0x24000000

08006a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006a1c:	f7ff ffcc 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	4904      	ldr	r1, [pc, #16]	; (8006a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a2e:	5ccb      	ldrb	r3, [r1, r3]
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	08009330 	.word	0x08009330

08006a44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a48:	b0c8      	sub	sp, #288	; 0x120
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a68:	2500      	movs	r5, #0
 8006a6a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a6e:	d049      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a7a:	d02f      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a80:	d828      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a86:	d01a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a8c:	d822      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d007      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a98:	e01c      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9a:	4ba7      	ldr	r3, [pc, #668]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4aa6      	ldr	r2, [pc, #664]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aa6:	e01a      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aac:	3308      	adds	r3, #8
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 fa6d 	bl	8008f90 <RCCEx_PLL2_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006abc:	e00f      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac2:	3328      	adds	r3, #40	; 0x28
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f002 fb14 	bl	80090f4 <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ade:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ae6:	4b94      	ldr	r3, [pc, #592]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af4:	4a90      	ldr	r2, [pc, #576]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6513      	str	r3, [r2, #80]	; 0x50
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006b10:	f04f 0900 	mov.w	r9, #0
 8006b14:	ea58 0309 	orrs.w	r3, r8, r9
 8006b18:	d047      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d82a      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b41 	.word	0x08006b41
 8006b30:	08006b4f 	.word	0x08006b4f
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b83 	.word	0x08006b83
 8006b3c:	08006b83 	.word	0x08006b83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b40:	4b7d      	ldr	r3, [pc, #500]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	4a7c      	ldr	r2, [pc, #496]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b4c:	e01a      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b52:	3308      	adds	r3, #8
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 fa1a 	bl	8008f90 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b62:	e00f      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b68:	3328      	adds	r3, #40	; 0x28
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f002 fac1 	bl	80090f4 <RCCEx_PLL3_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b78:	e004      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b80:	e000      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b8c:	4b6a      	ldr	r3, [pc, #424]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	f023 0107 	bic.w	r1, r3, #7
 8006b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	4a67      	ldr	r2, [pc, #412]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8006ba0:	e003      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ba6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006bb6:	f04f 0b00 	mov.w	fp, #0
 8006bba:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bbe:	d054      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006bca:	d036      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006bcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006bd0:	d82f      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd6:	d032      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bdc:	d829      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d02f      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006be2:	2bc0      	cmp	r3, #192	; 0xc0
 8006be4:	d825      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d018      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d821      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d007      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006bf6:	e01c      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf8:	4b4f      	ldr	r3, [pc, #316]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	4a4e      	ldr	r2, [pc, #312]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c04:	e01e      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f002 f9be 	bl	8008f90 <RCCEx_PLL2_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c1a:	e013      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c20:	3328      	adds	r3, #40	; 0x28
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fa65 	bl	80090f4 <RCCEx_PLL3_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c30:	e008      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c38:	e004      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006c4c:	4b3a      	ldr	r3, [pc, #232]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	4a37      	ldr	r2, [pc, #220]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6513      	str	r3, [r2, #80]	; 0x50
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006c76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d05c      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c90:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006c94:	d03b      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006c96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006c9a:	d834      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca0:	d037      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca6:	d82e      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ca8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cac:	d033      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cb2:	d828      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d01a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d822      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc8:	d007      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006cca:	e01c      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006cd8:	e01e      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cde:	3308      	adds	r3, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f002 f954 	bl	8008f90 <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006cee:	e013      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf4:	3328      	adds	r3, #40	; 0x28
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 f9fb 	bl	80090f4 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006d04:	e008      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d0c:	e004      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	4a02      	ldr	r2, [pc, #8]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d30:	430b      	orrs	r3, r1
 8006d32:	6513      	str	r3, [r2, #80]	; 0x50
 8006d34:	e006      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006d36:	bf00      	nop
 8006d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d03a      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6a:	2b30      	cmp	r3, #48	; 0x30
 8006d6c:	d01f      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006d6e:	2b30      	cmp	r3, #48	; 0x30
 8006d70:	d819      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d00c      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d815      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d019      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d111      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d82:	4bae      	ldr	r3, [pc, #696]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	4aad      	ldr	r2, [pc, #692]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d8e:	e011      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d94:	3308      	adds	r3, #8
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 f8f9 	bl	8008f90 <RCCEx_PLL2_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006dbc:	4b9f      	ldr	r3, [pc, #636]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	4a9c      	ldr	r2, [pc, #624]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006de6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	d051      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e04:	d035      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e0a:	d82e      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e10:	d031      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e16:	d828      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1c:	d01a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e22:	d822      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d007      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006e2e:	e01c      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b82      	ldr	r3, [pc, #520]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a81      	ldr	r2, [pc, #516]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e42:	3308      	adds	r3, #8
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 f8a2 	bl	8008f90 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e52:	e011      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	3328      	adds	r3, #40	; 0x28
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 f949 	bl	80090f4 <RCCEx_PLL3_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e68:	e006      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e70:	e002      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e80:	4b6e      	ldr	r3, [pc, #440]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8e:	4a6b      	ldr	r2, [pc, #428]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6513      	str	r3, [r2, #80]	; 0x50
 8006e94:	e003      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d053      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec8:	d033      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ece:	d82c      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed4:	d02f      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eda:	d826      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee0:	d02b      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee6:	d820      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d012      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef2:	d81a      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d022      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efc:	d115      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f02:	3308      	adds	r3, #8
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 f842 	bl	8008f90 <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f12:	e015      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f8e9 	bl	80090f4 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f28:	e00a      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f30:	e006      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f32:	bf00      	nop
 8006f34:	e004      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f48:	4b3c      	ldr	r3, [pc, #240]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f56:	4a39      	ldr	r2, [pc, #228]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f76:	2300      	movs	r3, #0
 8006f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f7c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d060      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f8e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f92:	d039      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006f94:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f98:	d832      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f9e:	d035      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fa4:	d82c      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d031      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb0:	d826      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fb6:	d02d      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fbc:	d820      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc2:	d012      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc8:	d81a      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d024      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd2:	d115      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd8:	3308      	adds	r3, #8
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 ffd7 	bl	8008f90 <RCCEx_PLL2_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e017      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fee:	3328      	adds	r3, #40	; 0x28
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f002 f87e 	bl	80090f4 <RCCEx_PLL3_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ffe:	e00c      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007006:	e008      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007008:	bf00      	nop
 800700a:	e006      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800700c:	bf00      	nop
 800700e:	e004      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007010:	bf00      	nop
 8007012:	e002      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10e      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007026:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800702a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007032:	4a02      	ldr	r2, [pc, #8]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007034:	430b      	orrs	r3, r1
 8007036:	6593      	str	r3, [r2, #88]	; 0x58
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007044:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800705e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d037      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800706c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800706e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007072:	d00e      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007078:	d816      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d018      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800707e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007082:	d111      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007084:	4bc4      	ldr	r3, [pc, #784]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	4ac3      	ldr	r2, [pc, #780]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800708a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800708e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007090:	e00f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007096:	3308      	adds	r3, #8
 8007098:	2101      	movs	r1, #1
 800709a:	4618      	mov	r0, r3
 800709c:	f001 ff78 	bl	8008f90 <RCCEx_PLL2_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070ba:	4bb7      	ldr	r3, [pc, #732]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c8:	4ab3      	ldr	r2, [pc, #716]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ca:	430b      	orrs	r3, r1
 80070cc:	6513      	str	r3, [r2, #80]	; 0x50
 80070ce:	e003      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80070e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d039      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d81c      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007145 	.word	0x08007145
 800710c:	08007119 	.word	0x08007119
 8007110:	08007127 	.word	0x08007127
 8007114:	08007145 	.word	0x08007145
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007118:	4b9f      	ldr	r3, [pc, #636]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	4a9e      	ldr	r2, [pc, #632]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800711e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007124:	e00f      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800712a:	3308      	adds	r3, #8
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f001 ff2e 	bl	8008f90 <RCCEx_PLL2_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800713a:	e004      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007146:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800714e:	4b92      	ldr	r3, [pc, #584]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	f023 0103 	bic.w	r1, r3, #3
 8007156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715c:	4a8e      	ldr	r2, [pc, #568]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800715e:	430b      	orrs	r3, r1
 8007160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007162:	e003      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007168:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800716c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007182:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	f000 8099 	beq.w	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800718e:	4b83      	ldr	r3, [pc, #524]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a82      	ldr	r2, [pc, #520]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800719a:	f7fa f9e1 	bl	8001560 <HAL_GetTick>
 800719e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071a2:	e00b      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a4:	f7fa f9dc 	bl	8001560 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b64      	cmp	r3, #100	; 0x64
 80071b2:	d903      	bls.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071ba:	e005      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071bc:	4b77      	ldr	r3, [pc, #476]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0ed      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d173      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071d0:	4b71      	ldr	r3, [pc, #452]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071dc:	4053      	eors	r3, r2
 80071de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d015      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e6:	4b6c      	ldr	r3, [pc, #432]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071f2:	4b69      	ldr	r3, [pc, #420]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a68      	ldr	r2, [pc, #416]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071fe:	4b66      	ldr	r3, [pc, #408]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a65      	ldr	r2, [pc, #404]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800720a:	4a63      	ldr	r2, [pc, #396]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007210:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800721a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800721e:	d118      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fa f99e 	bl	8001560 <HAL_GetTick>
 8007224:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007228:	e00d      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fa f999 	bl	8001560 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	f241 3388 	movw	r3, #5000	; 0x1388
 800723a:	429a      	cmp	r2, r3
 800723c:	d903      	bls.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007244:	e005      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007246:	4b54      	ldr	r3, [pc, #336]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0eb      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d129      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800725e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726a:	d10e      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800726c:	4b4a      	ldr	r3, [pc, #296]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800727c:	091a      	lsrs	r2, r3, #4
 800727e:	4b48      	ldr	r3, [pc, #288]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007280:	4013      	ands	r3, r2
 8007282:	4a45      	ldr	r2, [pc, #276]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007284:	430b      	orrs	r3, r1
 8007286:	6113      	str	r3, [r2, #16]
 8007288:	e005      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800728a:	4b43      	ldr	r3, [pc, #268]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	4a42      	ldr	r2, [pc, #264]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007294:	6113      	str	r3, [r2, #16]
 8007296:	4b40      	ldr	r3, [pc, #256]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007298:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800729e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a6:	4a3c      	ldr	r2, [pc, #240]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6713      	str	r3, [r2, #112]	; 0x70
 80072ac:	e008      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80072b6:	e003      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f002 0301 	and.w	r3, r2, #1
 80072cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072da:	460b      	mov	r3, r1
 80072dc:	4313      	orrs	r3, r2
 80072de:	f000 8090 	beq.w	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ea:	2b28      	cmp	r3, #40	; 0x28
 80072ec:	d870      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	080073d9 	.word	0x080073d9
 80072f8:	080073d1 	.word	0x080073d1
 80072fc:	080073d1 	.word	0x080073d1
 8007300:	080073d1 	.word	0x080073d1
 8007304:	080073d1 	.word	0x080073d1
 8007308:	080073d1 	.word	0x080073d1
 800730c:	080073d1 	.word	0x080073d1
 8007310:	080073d1 	.word	0x080073d1
 8007314:	080073a5 	.word	0x080073a5
 8007318:	080073d1 	.word	0x080073d1
 800731c:	080073d1 	.word	0x080073d1
 8007320:	080073d1 	.word	0x080073d1
 8007324:	080073d1 	.word	0x080073d1
 8007328:	080073d1 	.word	0x080073d1
 800732c:	080073d1 	.word	0x080073d1
 8007330:	080073d1 	.word	0x080073d1
 8007334:	080073bb 	.word	0x080073bb
 8007338:	080073d1 	.word	0x080073d1
 800733c:	080073d1 	.word	0x080073d1
 8007340:	080073d1 	.word	0x080073d1
 8007344:	080073d1 	.word	0x080073d1
 8007348:	080073d1 	.word	0x080073d1
 800734c:	080073d1 	.word	0x080073d1
 8007350:	080073d1 	.word	0x080073d1
 8007354:	080073d9 	.word	0x080073d9
 8007358:	080073d1 	.word	0x080073d1
 800735c:	080073d1 	.word	0x080073d1
 8007360:	080073d1 	.word	0x080073d1
 8007364:	080073d1 	.word	0x080073d1
 8007368:	080073d1 	.word	0x080073d1
 800736c:	080073d1 	.word	0x080073d1
 8007370:	080073d1 	.word	0x080073d1
 8007374:	080073d9 	.word	0x080073d9
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073d1 	.word	0x080073d1
 8007380:	080073d1 	.word	0x080073d1
 8007384:	080073d1 	.word	0x080073d1
 8007388:	080073d1 	.word	0x080073d1
 800738c:	080073d1 	.word	0x080073d1
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d9 	.word	0x080073d9
 8007398:	58024400 	.word	0x58024400
 800739c:	58024800 	.word	0x58024800
 80073a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a8:	3308      	adds	r3, #8
 80073aa:	2101      	movs	r1, #1
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fdef 	bl	8008f90 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073b8:	e00f      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073be:	3328      	adds	r3, #40	; 0x28
 80073c0:	2101      	movs	r1, #1
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fe96 	bl	80090f4 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ce:	e004      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073e2:	4bc0      	ldr	r3, [pc, #768]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80073ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f2:	4abc      	ldr	r2, [pc, #752]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6553      	str	r3, [r2, #84]	; 0x54
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f002 0302 	and.w	r3, r2, #2
 800740e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007412:	2300      	movs	r3, #0
 8007414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007418:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800741c:	460b      	mov	r3, r1
 800741e:	4313      	orrs	r3, r2
 8007420:	d043      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800742a:	2b05      	cmp	r3, #5
 800742c:	d824      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007481 	.word	0x08007481
 8007438:	0800744d 	.word	0x0800744d
 800743c:	08007463 	.word	0x08007463
 8007440:	08007481 	.word	0x08007481
 8007444:	08007481 	.word	0x08007481
 8007448:	08007481 	.word	0x08007481
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800744c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007450:	3308      	adds	r3, #8
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fd9b 	bl	8008f90 <RCCEx_PLL2_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007466:	3328      	adds	r3, #40	; 0x28
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fe42 	bl	80090f4 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800748a:	4b96      	ldr	r3, [pc, #600]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f023 0107 	bic.w	r1, r3, #7
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749a:	4a92      	ldr	r2, [pc, #584]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800749c:	430b      	orrs	r3, r1
 800749e:	6553      	str	r3, [r2, #84]	; 0x54
 80074a0:	e003      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f002 0304 	and.w	r3, r2, #4
 80074b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ba:	2300      	movs	r3, #0
 80074bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4313      	orrs	r3, r2
 80074c8:	d043      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d824      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007529 	.word	0x08007529
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	0800750b 	.word	0x0800750b
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007529 	.word	0x08007529
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f8:	3308      	adds	r3, #8
 80074fa:	2101      	movs	r1, #1
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fd47 	bl	8008f90 <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007508:	e00f      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800750a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800750e:	3328      	adds	r3, #40	; 0x28
 8007510:	2101      	movs	r1, #1
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fdee 	bl	80090f4 <RCCEx_PLL3_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800751e:	e004      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007526:	e000      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007532:	4b6c      	ldr	r3, [pc, #432]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	f023 0107 	bic.w	r1, r3, #7
 800753a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007542:	4a68      	ldr	r2, [pc, #416]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007544:	430b      	orrs	r3, r1
 8007546:	6593      	str	r3, [r2, #88]	; 0x58
 8007548:	e003      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800754e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f002 0320 	and.w	r3, r2, #32
 800755e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007562:	2300      	movs	r3, #0
 8007564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800756c:	460b      	mov	r3, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	d055      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800757a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800757e:	d033      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007584:	d82c      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758a:	d02f      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800758c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007590:	d826      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007596:	d02b      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800759c:	d820      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800759e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a2:	d012      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80075a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a8:	d81a      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d022      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80075ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075b2:	d115      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b8:	3308      	adds	r3, #8
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fce7 	bl	8008f90 <RCCEx_PLL2_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075c8:	e015      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ce:	3328      	adds	r3, #40	; 0x28
 80075d0:	2102      	movs	r1, #2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fd8e 	bl	80090f4 <RCCEx_PLL3_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075de:	e00a      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075e6:	e006      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075e8:	bf00      	nop
 80075ea:	e004      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075ec:	bf00      	nop
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fe:	4b39      	ldr	r3, [pc, #228]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800760a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800760e:	4a35      	ldr	r2, [pc, #212]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007610:	430b      	orrs	r3, r1
 8007612:	6553      	str	r3, [r2, #84]	; 0x54
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800761a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800761e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800762a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007634:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007638:	460b      	mov	r3, r1
 800763a:	4313      	orrs	r3, r2
 800763c:	d058      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007646:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800764a:	d033      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800764c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007650:	d82c      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d02f      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765c:	d826      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800765e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007662:	d02b      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007668:	d820      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800766a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766e:	d012      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d81a      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d022      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800767a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767e:	d115      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007684:	3308      	adds	r3, #8
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f001 fc81 	bl	8008f90 <RCCEx_PLL2_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007694:	e015      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769a:	3328      	adds	r3, #40	; 0x28
 800769c:	2102      	movs	r1, #2
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fd28 	bl	80090f4 <RCCEx_PLL3_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076aa:	e00a      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076b2:	e006      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10e      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076ca:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076da:	4a02      	ldr	r2, [pc, #8]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6593      	str	r3, [r2, #88]	; 0x58
 80076e0:	e006      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80076fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007706:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d055      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007714:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007718:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800771c:	d033      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800771e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007722:	d82c      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007728:	d02f      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800772a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772e:	d826      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007730:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007734:	d02b      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007736:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800773a:	d820      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800773c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007740:	d012      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007746:	d81a      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d022      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007750:	d115      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007756:	3308      	adds	r3, #8
 8007758:	2100      	movs	r1, #0
 800775a:	4618      	mov	r0, r3
 800775c:	f001 fc18 	bl	8008f90 <RCCEx_PLL2_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007766:	e015      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776c:	3328      	adds	r3, #40	; 0x28
 800776e:	2102      	movs	r1, #2
 8007770:	4618      	mov	r0, r3
 8007772:	f001 fcbf 	bl	80090f4 <RCCEx_PLL3_Config>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800777c:	e00a      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007786:	bf00      	nop
 8007788:	e004      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800779c:	4ba1      	ldr	r3, [pc, #644]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80077a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077ac:	4a9d      	ldr	r2, [pc, #628]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077ae:	430b      	orrs	r3, r1
 80077b0:	6593      	str	r3, [r2, #88]	; 0x58
 80077b2:	e003      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f002 0308 	and.w	r3, r2, #8
 80077c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077cc:	2300      	movs	r3, #0
 80077ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80077d6:	460b      	mov	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	d01e      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e8:	d10c      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ee:	3328      	adds	r3, #40	; 0x28
 80077f0:	2102      	movs	r1, #2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 fc7e 	bl	80090f4 <RCCEx_PLL3_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007804:	4b87      	ldr	r3, [pc, #540]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800780c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007814:	4a83      	ldr	r2, [pc, #524]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007816:	430b      	orrs	r3, r1
 8007818:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800781a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f002 0310 	and.w	r3, r2, #16
 8007826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800782a:	2300      	movs	r3, #0
 800782c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007830:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007834:	460b      	mov	r3, r1
 8007836:	4313      	orrs	r3, r2
 8007838:	d01e      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800783a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800783e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	d10c      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784c:	3328      	adds	r3, #40	; 0x28
 800784e:	2102      	movs	r1, #2
 8007850:	4618      	mov	r0, r3
 8007852:	f001 fc4f 	bl	80090f4 <RCCEx_PLL3_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007862:	4b70      	ldr	r3, [pc, #448]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800786a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800786e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007872:	4a6c      	ldr	r2, [pc, #432]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007874:	430b      	orrs	r3, r1
 8007876:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007888:	2300      	movs	r3, #0
 800788a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800788e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007892:	460b      	mov	r3, r1
 8007894:	4313      	orrs	r3, r2
 8007896:	d03e      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800789c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a4:	d022      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80078a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078aa:	d81b      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b4:	d00b      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80078b6:	e015      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078bc:	3308      	adds	r3, #8
 80078be:	2100      	movs	r1, #0
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fb65 	bl	8008f90 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078cc:	e00f      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d2:	3328      	adds	r3, #40	; 0x28
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fc0c 	bl	80090f4 <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078e2:	e004      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078ea:	e000      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80078ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078f6:	4b4b      	ldr	r3, [pc, #300]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80078fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007902:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007906:	4a47      	ldr	r2, [pc, #284]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007908:	430b      	orrs	r3, r1
 800790a:	6593      	str	r3, [r2, #88]	; 0x58
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007912:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007922:	67bb      	str	r3, [r7, #120]	; 0x78
 8007924:	2300      	movs	r3, #0
 8007926:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007928:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800792c:	460b      	mov	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	d03b      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800793e:	d01f      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007944:	d818      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d003      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800794c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007950:	d007      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007952:	e011      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a32      	ldr	r2, [pc, #200]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007960:	e00f      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007966:	3328      	adds	r3, #40	; 0x28
 8007968:	2101      	movs	r1, #1
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fbc2 	bl	80090f4 <RCCEx_PLL3_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007976:	e004      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800797e:	e000      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007982:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800798a:	4b26      	ldr	r3, [pc, #152]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800799c:	430b      	orrs	r3, r1
 800799e:	6553      	str	r3, [r2, #84]	; 0x54
 80079a0:	e003      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80079b6:	673b      	str	r3, [r7, #112]	; 0x70
 80079b8:	2300      	movs	r3, #0
 80079ba:	677b      	str	r3, [r7, #116]	; 0x74
 80079bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d034      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d4:	d007      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80079d6:	e011      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	4a11      	ldr	r2, [pc, #68]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079e4:	e00e      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ea:	3308      	adds	r3, #8
 80079ec:	2102      	movs	r1, #2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 face 	bl	8008f90 <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079fa:	e003      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10d      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1a:	4a02      	ldr	r2, [pc, #8]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007a22:	bf00      	nop
 8007a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a3e:	2300      	movs	r3, #0
 8007a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d00c      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a50:	3328      	adds	r3, #40	; 0x28
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fb4d 	bl	80090f4 <RCCEx_PLL3_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007a72:	663b      	str	r3, [r7, #96]	; 0x60
 8007a74:	2300      	movs	r3, #0
 8007a76:	667b      	str	r3, [r7, #100]	; 0x64
 8007a78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d038      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a8e:	d018      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a94:	d811      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a9a:	d014      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa0:	d80b      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d011      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aaa:	d106      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aac:	4bc3      	ldr	r3, [pc, #780]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4ac2      	ldr	r2, [pc, #776]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ab8:	e008      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007ac0:	e004      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007acc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ad4:	4bb9      	ldr	r3, [pc, #740]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae4:	4ab5      	ldr	r2, [pc, #724]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8007aea:	e003      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007af0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b02:	2300      	movs	r3, #0
 8007b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b10:	4baa      	ldr	r3, [pc, #680]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b1e:	4aa7      	ldr	r2, [pc, #668]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b30:	653b      	str	r3, [r7, #80]	; 0x50
 8007b32:	2300      	movs	r3, #0
 8007b34:	657b      	str	r3, [r7, #84]	; 0x54
 8007b36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b40:	4b9e      	ldr	r3, [pc, #632]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	4a9b      	ldr	r2, [pc, #620]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b62:	2300      	movs	r3, #0
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007b70:	4b92      	ldr	r3, [pc, #584]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b74:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7e:	4a8f      	ldr	r2, [pc, #572]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
 8007b92:	2300      	movs	r3, #0
 8007b94:	647b      	str	r3, [r7, #68]	; 0x44
 8007b96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ba0:	4b86      	ldr	r3, [pc, #536]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	4a85      	ldr	r2, [pc, #532]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007baa:	6113      	str	r3, [r2, #16]
 8007bac:	4b83      	ldr	r3, [pc, #524]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bae:	6919      	ldr	r1, [r3, #16]
 8007bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bb8:	4a80      	ldr	r2, [pc, #512]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bda:	4b78      	ldr	r3, [pc, #480]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	4a74      	ldr	r2, [pc, #464]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c04:	460b      	mov	r3, r1
 8007c06:	4313      	orrs	r3, r2
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c0a:	4b6c      	ldr	r3, [pc, #432]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c1a:	4a68      	ldr	r2, [pc, #416]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007c36:	460b      	mov	r3, r1
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	d011      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c40:	3308      	adds	r3, #8
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 f9a3 	bl	8008f90 <RCCEx_PLL2_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6239      	str	r1, [r7, #32]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
 8007c72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	d011      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c80:	3308      	adds	r3, #8
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 f983 	bl	8008f90 <RCCEx_PLL2_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	61b9      	str	r1, [r7, #24]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	d011      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	2102      	movs	r1, #2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f963 	bl	8008f90 <RCCEx_PLL2_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	6139      	str	r1, [r7, #16]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	d011      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d00:	3328      	adds	r3, #40	; 0x28
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f9f5 	bl	80090f4 <RCCEx_PLL3_Config>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d36:	460b      	mov	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	d011      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d40:	3328      	adds	r3, #40	; 0x28
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f9d5 	bl	80090f4 <RCCEx_PLL3_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6039      	str	r1, [r7, #0]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d76:	460b      	mov	r3, r1
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	d011      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d80:	3328      	adds	r3, #40	; 0x28
 8007d82:	2102      	movs	r1, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 f9b5 	bl	80090f4 <RCCEx_PLL3_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007da0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007db4:	46bd      	mov	sp, r7
 8007db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400

08007dc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b090      	sub	sp, #64	; 0x40
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	f040 8094 	bne.w	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dd8:	4b97      	ldr	r3, [pc, #604]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	f200 8087 	bhi.w	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e05 	.word	0x08007e05
 8007df4:	08007e2d 	.word	0x08007e2d
 8007df8:	08007e55 	.word	0x08007e55
 8007dfc:	08007ef1 	.word	0x08007ef1
 8007e00:	08007e7d 	.word	0x08007e7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e04:	4b8c      	ldr	r3, [pc, #560]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e10:	d108      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 ff68 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e20:	f000 bc97 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e28:	f000 bc93 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e2c:	4b82      	ldr	r3, [pc, #520]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e38:	d108      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e3a:	f107 0318 	add.w	r3, r7, #24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fcac 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e48:	f000 bc83 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e50:	f000 bc7f 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e54:	4b78      	ldr	r3, [pc, #480]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e60:	d108      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fdec 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e70:	f000 bc6f 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e78:	f000 bc6b 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e7c:	4b6e      	ldr	r3, [pc, #440]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e86:	4b6c      	ldr	r3, [pc, #432]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d10c      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e98:	4b67      	ldr	r3, [pc, #412]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	08db      	lsrs	r3, r3, #3
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	4a66      	ldr	r2, [pc, #408]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eaa:	e01f      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eac:	4b62      	ldr	r3, [pc, #392]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ec0:	d102      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec6:	e011      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec8:	4b5b      	ldr	r3, [pc, #364]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed4:	d106      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ede:	4b59      	ldr	r3, [pc, #356]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee2:	e003      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ee8:	f000 bc33 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007eec:	f000 bc31 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ef0:	4b55      	ldr	r3, [pc, #340]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef4:	f000 bc2d 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007efc:	f000 bc29 	b.w	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	f040 809f 	bne.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007f0e:	4b4a      	ldr	r3, [pc, #296]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1e:	d04d      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f26:	f200 8084 	bhi.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007f2e:	d07d      	beq.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	2bc0      	cmp	r3, #192	; 0xc0
 8007f34:	d87d      	bhi.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d02d      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d877      	bhi.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d012      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007f4e:	e070      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f50:	4b39      	ldr	r3, [pc, #228]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fec2 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f6c:	e3f1      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f72:	e3ee      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f74:	4b30      	ldr	r3, [pc, #192]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d107      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f82:	f107 0318 	add.w	r3, r7, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fc08 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f90:	e3df      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f96:	e3dc      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f98:	4b27      	ldr	r3, [pc, #156]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fd4a 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb4:	e3cd      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fba:	e3ca      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fbc:	4b1e      	ldr	r3, [pc, #120]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	4a16      	ldr	r2, [pc, #88]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e01e      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff8:	d106      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d102      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008002:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008006:	e010      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008008:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008014:	d106      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801c:	d102      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008022:	e002      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008028:	e393      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800802a:	e392      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008030:	e38f      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008036:	e38c      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008038:	58024400 	.word	0x58024400
 800803c:	03d09000 	.word	0x03d09000
 8008040:	003d0900 	.word	0x003d0900
 8008044:	016e3600 	.word	0x016e3600
 8008048:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008050:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008054:	430b      	orrs	r3, r1
 8008056:	f040 809c 	bne.w	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800805a:	4b9e      	ldr	r3, [pc, #632]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008062:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800806a:	d054      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008072:	f200 808b 	bhi.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800807c:	f000 8083 	beq.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008086:	f200 8081 	bhi.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d02f      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008098:	d878      	bhi.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a6:	d012      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80080a8:	e070      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080aa:	4b8a      	ldr	r3, [pc, #552]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b6:	d107      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fe15 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c6:	e344      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080cc:	e341      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ce:	4b81      	ldr	r3, [pc, #516]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080da:	d107      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080dc:	f107 0318 	add.w	r3, r7, #24
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fb5b 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ea:	e332      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f0:	e32f      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080f2:	4b78      	ldr	r3, [pc, #480]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080fe:	d107      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fc9d 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810e:	e320      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008114:	e31d      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008116:	4b6f      	ldr	r3, [pc, #444]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800811e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008120:	4b6c      	ldr	r3, [pc, #432]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d10c      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008132:	4b68      	ldr	r3, [pc, #416]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	08db      	lsrs	r3, r3, #3
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	4a66      	ldr	r2, [pc, #408]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800813e:	fa22 f303 	lsr.w	r3, r2, r3
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008144:	e01e      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008146:	4b63      	ldr	r3, [pc, #396]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008152:	d106      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800815a:	d102      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800815c:	4b5f      	ldr	r3, [pc, #380]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008160:	e010      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008162:	4b5c      	ldr	r3, [pc, #368]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800816e:	d106      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008176:	d102      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008178:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817c:	e002      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008182:	e2e6      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008184:	e2e5      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008186:	4b57      	ldr	r3, [pc, #348]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800818a:	e2e2      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e2df      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800819a:	430b      	orrs	r3, r1
 800819c:	f040 80a7 	bne.w	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80081a0:	4b4c      	ldr	r3, [pc, #304]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b0:	d055      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b8:	f200 8096 	bhi.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081c2:	f000 8084 	beq.w	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081cc:	f200 808c 	bhi.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	d030      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081de:	f200 8083 	bhi.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ee:	d012      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80081f0:	e07a      	b.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081f2:	4b38      	ldr	r3, [pc, #224]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081fe:	d107      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fd71 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820e:	e2a0      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008214:	e29d      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008216:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800821e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008222:	d107      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008224:	f107 0318 	add.w	r3, r7, #24
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fab7 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008232:	e28e      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e28b      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800823a:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008248:	f107 030c 	add.w	r3, r7, #12
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fbf9 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008256:	e27c      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800825c:	e279      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800825e:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008266:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008268:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d10c      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	08db      	lsrs	r3, r3, #3
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008286:	fa22 f303 	lsr.w	r3, r2, r3
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800828c:	e01e      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	d106      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082a2:	d102      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082a4:	4b0d      	ldr	r3, [pc, #52]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a8:	e010      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082aa:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082b6:	d106      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082be:	d102      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082ca:	e242      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082cc:	e241      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d2:	e23e      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082d4:	58024400 	.word	0x58024400
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	003d0900 	.word	0x003d0900
 80082e0:	016e3600 	.word	0x016e3600
 80082e4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ec:	e231      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80082f6:	430b      	orrs	r3, r1
 80082f8:	f040 8085 	bne.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082fc:	4b9c      	ldr	r3, [pc, #624]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008304:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800830c:	d06b      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008314:	d874      	bhi.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800831c:	d056      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008324:	d86c      	bhi.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800832c:	d03b      	beq.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008334:	d864      	bhi.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800833c:	d021      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008344:	d85c      	bhi.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008352:	d004      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008354:	e054      	b.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008356:	f7fe fb5f 	bl	8006a18 <HAL_RCC_GetPCLK1Freq>
 800835a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800835c:	e1f9      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800835e:	4b84      	ldr	r3, [pc, #528]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836a:	d107      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800836c:	f107 0318 	add.w	r3, r7, #24
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fa13 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800837a:	e1ea      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008380:	e1e7      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008382:	4b7b      	ldr	r3, [pc, #492]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838e:	d107      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008390:	f107 030c 	add.w	r3, r7, #12
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb55 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839e:	e1d8      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a4:	e1d5      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083a6:	4b72      	ldr	r3, [pc, #456]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d109      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b2:	4b6f      	ldr	r3, [pc, #444]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	4a6d      	ldr	r2, [pc, #436]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c4:	e1c5      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ca:	e1c2      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083cc:	4b68      	ldr	r3, [pc, #416]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d8:	d102      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80083da:	4b67      	ldr	r3, [pc, #412]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e1b8      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e4:	e1b5      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083e6:	4b62      	ldr	r3, [pc, #392]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f2:	d102      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80083f4:	4b61      	ldr	r3, [pc, #388]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f8:	e1ab      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fe:	e1a8      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e1a5      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800840e:	430b      	orrs	r3, r1
 8008410:	d173      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008412:	4b57      	ldr	r3, [pc, #348]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800841a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008422:	d02f      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800842a:	d863      	bhi.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008438:	d012      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800843a:	e05b      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800843c:	4b4c      	ldr	r3, [pc, #304]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008448:	d107      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 f9a4 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008458:	e17b      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845e:	e178      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008460:	4b43      	ldr	r3, [pc, #268]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846c:	d107      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800846e:	f107 030c 	add.w	r3, r7, #12
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fae6 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847c:	e169      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008482:	e166      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008484:	4b3a      	ldr	r3, [pc, #232]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800848c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800848e:	4b38      	ldr	r3, [pc, #224]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b04      	cmp	r3, #4
 8008498:	d10c      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	2b00      	cmp	r3, #0
 800849e:	d109      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a0:	4b33      	ldr	r3, [pc, #204]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	08db      	lsrs	r3, r3, #3
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	4a32      	ldr	r2, [pc, #200]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b2:	e01e      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084b4:	4b2e      	ldr	r3, [pc, #184]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c0:	d106      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c8:	d102      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084ca:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ce:	e010      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084dc:	d106      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e4:	d102      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084e6:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ea:	e002      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084f0:	e12f      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80084f2:	e12e      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e12b      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fe:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008502:	430b      	orrs	r3, r1
 8008504:	d13c      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008506:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800850e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851c:	d012      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800851e:	e023      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800852e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fbda 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853c:	e109      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008542:	e106      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008544:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008552:	f107 0318 	add.w	r3, r7, #24
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f920 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008560:	e0f7      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008566:	e0f4      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856c:	e0f1      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800856e:	bf00      	nop
 8008570:	58024400 	.word	0x58024400
 8008574:	03d09000 	.word	0x03d09000
 8008578:	003d0900 	.word	0x003d0900
 800857c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008584:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008588:	430b      	orrs	r3, r1
 800858a:	f040 8091 	bne.w	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800858e:	4b73      	ldr	r3, [pc, #460]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008596:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800859e:	f000 8081 	beq.w	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80085a8:	d87f      	bhi.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b0:	d06b      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b8:	d877      	bhi.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c0:	d056      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d86f      	bhi.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085d0:	d03b      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085d8:	d867      	bhi.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e0:	d021      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d85f      	bhi.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085f6:	d004      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80085f8:	e057      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085fa:	f000 f8b9 	bl	8008770 <HAL_RCCEx_GetD3PCLK1Freq>
 80085fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008600:	e0a7      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008602:	4b56      	ldr	r3, [pc, #344]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800860a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860e:	d107      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008610:	f107 0318 	add.w	r3, r7, #24
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f8c1 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861e:	e098      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008624:	e095      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008626:	4b4d      	ldr	r3, [pc, #308]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fa03 	bl	8008a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008642:	e086      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008648:	e083      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800864a:	4b44      	ldr	r3, [pc, #272]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b04      	cmp	r3, #4
 8008654:	d109      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008656:	4b41      	ldr	r3, [pc, #260]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	4a3f      	ldr	r2, [pc, #252]	; (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008662:	fa22 f303 	lsr.w	r3, r2, r3
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008668:	e073      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866e:	e070      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008670:	4b3a      	ldr	r3, [pc, #232]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867c:	d102      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800867e:	4b39      	ldr	r3, [pc, #228]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008682:	e066      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e063      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800868a:	4b34      	ldr	r3, [pc, #208]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008696:	d102      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008698:	4b33      	ldr	r3, [pc, #204]	; (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869c:	e059      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a2:	e056      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086a4:	4b31      	ldr	r3, [pc, #196]	; (800876c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a8:	e053      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ae:	e050      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086b8:	430b      	orrs	r3, r1
 80086ba:	d148      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086bc:	4b27      	ldr	r3, [pc, #156]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086cc:	d02a      	beq.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d4:	d838      	bhi.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e2:	d00d      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80086e4:	e030      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086e6:	4b1d      	ldr	r3, [pc, #116]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f2:	d102      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f8:	e02b      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fe:	e028      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008700:	4b16      	ldr	r3, [pc, #88]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800870c:	d107      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800870e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f000 faea 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871c:	e019      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008722:	e016      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008730:	d107      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f830 	bl	800879c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008740:	e007      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008746:	e004      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800874c:	e001      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008754:	4618      	mov	r0, r3
 8008756:	3740      	adds	r7, #64	; 0x40
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	58024400 	.word	0x58024400
 8008760:	03d09000 	.word	0x03d09000
 8008764:	003d0900 	.word	0x003d0900
 8008768:	016e3600 	.word	0x016e3600
 800876c:	00bb8000 	.word	0x00bb8000

08008770 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008774:	f7fe f920 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8008778:	4602      	mov	r2, r0
 800877a:	4b06      	ldr	r3, [pc, #24]	; (8008794 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	091b      	lsrs	r3, r3, #4
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	4904      	ldr	r1, [pc, #16]	; (8008798 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008786:	5ccb      	ldrb	r3, [r1, r3]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008790:	4618      	mov	r0, r3
 8008792:	bd80      	pop	{r7, pc}
 8008794:	58024400 	.word	0x58024400
 8008798:	08009330 	.word	0x08009330

0800879c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	; 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a4:	4ba1      	ldr	r3, [pc, #644]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087ae:	4b9f      	ldr	r3, [pc, #636]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	0b1b      	lsrs	r3, r3, #12
 80087b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087ba:	4b9c      	ldr	r3, [pc, #624]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087c6:	4b99      	ldr	r3, [pc, #612]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8111 	beq.w	8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	f000 8083 	beq.w	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	f200 80a1 	bhi.w	800893c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d056      	beq.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008806:	e099      	b.n	800893c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008808:	4b88      	ldr	r3, [pc, #544]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d02d      	beq.n	8008870 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008814:	4b85      	ldr	r3, [pc, #532]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	4a84      	ldr	r2, [pc, #528]	; (8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b7b      	ldr	r3, [pc, #492]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800886e:	e087      	b.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b6a      	ldr	r3, [pc, #424]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	e065      	b.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b59      	ldr	r3, [pc, #356]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f6:	e043      	b.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b48      	ldr	r3, [pc, #288]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893a:	e021      	b.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008980:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800899a:	edd7 6a07 	vldr	s13, [r7, #28]
 800899e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a6:	ee17 2a90 	vmov	r2, s15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089ae:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b8:	ee07 3a90 	vmov	s15, r3
 80089bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d4:	ee17 2a90 	vmov	r2, s15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089dc:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	0e1b      	lsrs	r3, r3, #24
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 2a90 	vmov	r2, s15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a0a:	e008      	b.n	8008a1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	609a      	str	r2, [r3, #8]
}
 8008a1e:	bf00      	nop
 8008a20:	3724      	adds	r7, #36	; 0x24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	03d09000 	.word	0x03d09000
 8008a34:	46000000 	.word	0x46000000
 8008a38:	4c742400 	.word	0x4c742400
 8008a3c:	4a742400 	.word	0x4a742400
 8008a40:	4bb71b00 	.word	0x4bb71b00

08008a44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b089      	sub	sp, #36	; 0x24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a4c:	4ba1      	ldr	r3, [pc, #644]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a56:	4b9f      	ldr	r3, [pc, #636]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	0d1b      	lsrs	r3, r3, #20
 8008a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a62:	4b9c      	ldr	r3, [pc, #624]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a6e:	4b99      	ldr	r3, [pc, #612]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	08db      	lsrs	r3, r3, #3
 8008a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8111 	beq.w	8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	f000 8083 	beq.w	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	f200 80a1 	bhi.w	8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d056      	beq.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008aae:	e099      	b.n	8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab0:	4b88      	ldr	r3, [pc, #544]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d02d      	beq.n	8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008abc:	4b85      	ldr	r3, [pc, #532]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	08db      	lsrs	r3, r3, #3
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	4a84      	ldr	r2, [pc, #528]	; (8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8008acc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	ee07 3a90 	vmov	s15, r3
 8008ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b7b      	ldr	r3, [pc, #492]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b16:	e087      	b.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b6a      	ldr	r3, [pc, #424]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5a:	e065      	b.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9e:	e043      	b.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b48      	ldr	r3, [pc, #288]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008be2:	e021      	b.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c28:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	0a5b      	lsrs	r3, r3, #9
 8008c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4e:	ee17 2a90 	vmov	r2, s15
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c56:	4b1f      	ldr	r3, [pc, #124]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c7c:	ee17 2a90 	vmov	r2, s15
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c84:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	0e1b      	lsrs	r3, r3, #24
 8008c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008caa:	ee17 2a90 	vmov	r2, s15
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
}
 8008cc6:	bf00      	nop
 8008cc8:	3724      	adds	r7, #36	; 0x24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	58024400 	.word	0x58024400
 8008cd8:	03d09000 	.word	0x03d09000
 8008cdc:	46000000 	.word	0x46000000
 8008ce0:	4c742400 	.word	0x4c742400
 8008ce4:	4a742400 	.word	0x4a742400
 8008ce8:	4bb71b00 	.word	0x4bb71b00

08008cec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b089      	sub	sp, #36	; 0x24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cf4:	4ba0      	ldr	r3, [pc, #640]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	f003 0303 	and.w	r3, r3, #3
 8008cfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cfe:	4b9e      	ldr	r3, [pc, #632]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d02:	091b      	lsrs	r3, r3, #4
 8008d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d0a:	4b9b      	ldr	r3, [pc, #620]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d14:	4b98      	ldr	r3, [pc, #608]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	ee07 3a90 	vmov	s15, r3
 8008d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 8111 	beq.w	8008f5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	f000 8083 	beq.w	8008e46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	f200 80a1 	bhi.w	8008e8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d056      	beq.n	8008e02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d54:	e099      	b.n	8008e8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d56:	4b88      	ldr	r3, [pc, #544]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d02d      	beq.n	8008dbe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d62:	4b85      	ldr	r3, [pc, #532]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	08db      	lsrs	r3, r3, #3
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	4a83      	ldr	r2, [pc, #524]	; (8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8c:	4b7a      	ldr	r3, [pc, #488]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dbc:	e087      	b.n	8008ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd0:	4b69      	ldr	r3, [pc, #420]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd8:	ee07 3a90 	vmov	s15, r3
 8008ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e00:	e065      	b.n	8008ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008f88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e14:	4b58      	ldr	r3, [pc, #352]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e28:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e44:	e043      	b.n	8008ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e58:	4b47      	ldr	r3, [pc, #284]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e60:	ee07 3a90 	vmov	s15, r3
 8008e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e88:	e021      	b.n	8008ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	ee07 3a90 	vmov	s15, r3
 8008e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e94:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ecc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008ece:	4b2a      	ldr	r3, [pc, #168]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	0a5b      	lsrs	r3, r3, #9
 8008ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef4:	ee17 2a90 	vmov	r2, s15
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008efc:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	0c1b      	lsrs	r3, r3, #16
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f22:	ee17 2a90 	vmov	r2, s15
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f2a:	4b13      	ldr	r3, [pc, #76]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	0e1b      	lsrs	r3, r3, #24
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f50:	ee17 2a90 	vmov	r2, s15
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f58:	e008      	b.n	8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	609a      	str	r2, [r3, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	3724      	adds	r7, #36	; 0x24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	03d09000 	.word	0x03d09000
 8008f80:	46000000 	.word	0x46000000
 8008f84:	4c742400 	.word	0x4c742400
 8008f88:	4a742400 	.word	0x4a742400
 8008f8c:	4bb71b00 	.word	0x4bb71b00

08008f90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f9e:	4b53      	ldr	r3, [pc, #332]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d101      	bne.n	8008fae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e099      	b.n	80090e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008fae:	4b4f      	ldr	r3, [pc, #316]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a4e      	ldr	r2, [pc, #312]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fba:	f7f8 fad1 	bl	8001560 <HAL_GetTick>
 8008fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fc0:	e008      	b.n	8008fd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fc2:	f7f8 facd 	bl	8001560 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e086      	b.n	80090e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fd4:	4b45      	ldr	r3, [pc, #276]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f0      	bne.n	8008fc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fe0:	4b42      	ldr	r3, [pc, #264]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	031b      	lsls	r3, r3, #12
 8008fee:	493f      	ldr	r1, [pc, #252]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	3b01      	subs	r3, #1
 8009004:	025b      	lsls	r3, r3, #9
 8009006:	b29b      	uxth	r3, r3
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	3b01      	subs	r3, #1
 8009010:	041b      	lsls	r3, r3, #16
 8009012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	3b01      	subs	r3, #1
 800901e:	061b      	lsls	r3, r3, #24
 8009020:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009024:	4931      	ldr	r1, [pc, #196]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800902a:	4b30      	ldr	r3, [pc, #192]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	492d      	ldr	r1, [pc, #180]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009038:	4313      	orrs	r3, r2
 800903a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800903c:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	f023 0220 	bic.w	r2, r3, #32
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	4928      	ldr	r1, [pc, #160]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800904a:	4313      	orrs	r3, r2
 800904c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800904e:	4b27      	ldr	r3, [pc, #156]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	4a26      	ldr	r2, [pc, #152]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009054:	f023 0310 	bic.w	r3, r3, #16
 8009058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800905c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905e:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <RCCEx_PLL2_Config+0x160>)
 8009060:	4013      	ands	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	69d2      	ldr	r2, [r2, #28]
 8009066:	00d2      	lsls	r2, r2, #3
 8009068:	4920      	ldr	r1, [pc, #128]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800906e:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009074:	f043 0310 	orr.w	r3, r3, #16
 8009078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	4a19      	ldr	r2, [pc, #100]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800908a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800908c:	e00f      	b.n	80090ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d106      	bne.n	80090a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	4a14      	ldr	r2, [pc, #80]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 800909a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800909e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090a0:	e005      	b.n	80090ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	4a11      	ldr	r2, [pc, #68]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 80090a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a0e      	ldr	r2, [pc, #56]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 80090b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ba:	f7f8 fa51 	bl	8001560 <HAL_GetTick>
 80090be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090c0:	e008      	b.n	80090d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090c2:	f7f8 fa4d 	bl	8001560 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d901      	bls.n	80090d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e006      	b.n	80090e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <RCCEx_PLL2_Config+0x15c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	58024400 	.word	0x58024400
 80090f0:	ffff0007 	.word	0xffff0007

080090f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009102:	4b53      	ldr	r3, [pc, #332]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	2b03      	cmp	r3, #3
 800910c:	d101      	bne.n	8009112 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e099      	b.n	8009246 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009112:	4b4f      	ldr	r3, [pc, #316]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a4e      	ldr	r2, [pc, #312]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800911c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911e:	f7f8 fa1f 	bl	8001560 <HAL_GetTick>
 8009122:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009124:	e008      	b.n	8009138 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009126:	f7f8 fa1b 	bl	8001560 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e086      	b.n	8009246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009138:	4b45      	ldr	r3, [pc, #276]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f0      	bne.n	8009126 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009144:	4b42      	ldr	r3, [pc, #264]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	051b      	lsls	r3, r3, #20
 8009152:	493f      	ldr	r1, [pc, #252]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009154:	4313      	orrs	r3, r2
 8009156:	628b      	str	r3, [r1, #40]	; 0x28
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	3b01      	subs	r3, #1
 800915e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	3b01      	subs	r3, #1
 8009168:	025b      	lsls	r3, r3, #9
 800916a:	b29b      	uxth	r3, r3
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	3b01      	subs	r3, #1
 8009174:	041b      	lsls	r3, r3, #16
 8009176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	3b01      	subs	r3, #1
 8009182:	061b      	lsls	r3, r3, #24
 8009184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009188:	4931      	ldr	r1, [pc, #196]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 800918a:	4313      	orrs	r3, r2
 800918c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800918e:	4b30      	ldr	r3, [pc, #192]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	492d      	ldr	r1, [pc, #180]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 800919c:	4313      	orrs	r3, r2
 800919e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091a0:	4b2b      	ldr	r3, [pc, #172]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	4928      	ldr	r1, [pc, #160]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091b2:	4b27      	ldr	r3, [pc, #156]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	4a26      	ldr	r2, [pc, #152]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091be:	4b24      	ldr	r3, [pc, #144]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091c2:	4b24      	ldr	r3, [pc, #144]	; (8009254 <RCCEx_PLL3_Config+0x160>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	69d2      	ldr	r2, [r2, #28]
 80091ca:	00d2      	lsls	r2, r2, #3
 80091cc:	4920      	ldr	r1, [pc, #128]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091d2:	4b1f      	ldr	r3, [pc, #124]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091e4:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a19      	ldr	r2, [pc, #100]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80091ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091f0:	e00f      	b.n	8009212 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d106      	bne.n	8009206 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091f8:	4b15      	ldr	r3, [pc, #84]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a14      	ldr	r2, [pc, #80]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 80091fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009204:	e005      	b.n	8009212 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009206:	4b12      	ldr	r3, [pc, #72]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	4a11      	ldr	r2, [pc, #68]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 800920c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009210:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009212:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a0e      	ldr	r2, [pc, #56]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 8009218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800921c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800921e:	f7f8 f99f 	bl	8001560 <HAL_GetTick>
 8009222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009224:	e008      	b.n	8009238 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009226:	f7f8 f99b 	bl	8001560 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d901      	bls.n	8009238 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e006      	b.n	8009246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <RCCEx_PLL3_Config+0x15c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0f0      	beq.n	8009226 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	58024400 	.word	0x58024400
 8009254:	ffff0007 	.word	0xffff0007

08009258 <memset>:
 8009258:	4402      	add	r2, r0
 800925a:	4603      	mov	r3, r0
 800925c:	4293      	cmp	r3, r2
 800925e:	d100      	bne.n	8009262 <memset+0xa>
 8009260:	4770      	bx	lr
 8009262:	f803 1b01 	strb.w	r1, [r3], #1
 8009266:	e7f9      	b.n	800925c <memset+0x4>

08009268 <__libc_init_array>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	4d0d      	ldr	r5, [pc, #52]	; (80092a0 <__libc_init_array+0x38>)
 800926c:	4c0d      	ldr	r4, [pc, #52]	; (80092a4 <__libc_init_array+0x3c>)
 800926e:	1b64      	subs	r4, r4, r5
 8009270:	10a4      	asrs	r4, r4, #2
 8009272:	2600      	movs	r6, #0
 8009274:	42a6      	cmp	r6, r4
 8009276:	d109      	bne.n	800928c <__libc_init_array+0x24>
 8009278:	4d0b      	ldr	r5, [pc, #44]	; (80092a8 <__libc_init_array+0x40>)
 800927a:	4c0c      	ldr	r4, [pc, #48]	; (80092ac <__libc_init_array+0x44>)
 800927c:	f000 f826 	bl	80092cc <_init>
 8009280:	1b64      	subs	r4, r4, r5
 8009282:	10a4      	asrs	r4, r4, #2
 8009284:	2600      	movs	r6, #0
 8009286:	42a6      	cmp	r6, r4
 8009288:	d105      	bne.n	8009296 <__libc_init_array+0x2e>
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009290:	4798      	blx	r3
 8009292:	3601      	adds	r6, #1
 8009294:	e7ee      	b.n	8009274 <__libc_init_array+0xc>
 8009296:	f855 3b04 	ldr.w	r3, [r5], #4
 800929a:	4798      	blx	r3
 800929c:	3601      	adds	r6, #1
 800929e:	e7f2      	b.n	8009286 <__libc_init_array+0x1e>
 80092a0:	08009348 	.word	0x08009348
 80092a4:	08009348 	.word	0x08009348
 80092a8:	08009348 	.word	0x08009348
 80092ac:	0800934c 	.word	0x0800934c

080092b0 <memcpy>:
 80092b0:	440a      	add	r2, r1
 80092b2:	4291      	cmp	r1, r2
 80092b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092b8:	d100      	bne.n	80092bc <memcpy+0xc>
 80092ba:	4770      	bx	lr
 80092bc:	b510      	push	{r4, lr}
 80092be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c6:	4291      	cmp	r1, r2
 80092c8:	d1f9      	bne.n	80092be <memcpy+0xe>
 80092ca:	bd10      	pop	{r4, pc}

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr

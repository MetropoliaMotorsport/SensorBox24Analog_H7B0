
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800945c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000468  24000010  0800946c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000478  0800946c  00020478  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001569f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026e4  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001270  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e40  00000000  00000000  00039078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f09  00000000  00000000  00039eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017045  00000000  00000000  0006bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d5ec  00000000  00000000  00082e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005030  00000000  00000000  001d03f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  001d5424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080093d8 	.word	0x080093d8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080093d8 	.word	0x080093d8

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MX_DMA_Init();
 80002f0:	f000 fc1e 	bl	8000b30 <MX_DMA_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f001 f93e 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f836 	bl	8000368 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002fc:	f000 f8aa 	bl	8000454 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 fc3e 	bl	8000b80 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000304:	f000 f9d2 	bl	80006ac <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000308:	f000 fa8a 	bl	8000820 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800030c:	f000 faec 	bl	80008e8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000310:	f000 fb4e 	bl	80009b0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000314:	f000 fb8c 	bl	8000a30 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000318:	f000 f8cc 	bl	80004b4 <MX_ADC1_Init>
  MX_I2C4_Init();
 800031c:	f000 fbc8 	bl	8000ab0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  //if(HAL_ADC_Start_IT(&hadc1) != HAL_OK){ Error_Handler(); }
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <main+0x6c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	461a      	mov	r2, r3
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <main+0x70>)
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <main+0x6c>)
 800032a:	f001 fd1b 	bl	8001d64 <HAL_ADC_Start_DMA>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <main+0x4c>
 8000334:	f000 fcb8 	bl	8000ca8 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x74>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	461a      	mov	r2, r3
 800033e:	4909      	ldr	r1, [pc, #36]	; (8000364 <main+0x78>)
 8000340:	4807      	ldr	r0, [pc, #28]	; (8000360 <main+0x74>)
 8000342:	f001 fd0f 	bl	8001d64 <HAL_ADC_Start_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <main+0x64>
 800034c:	f000 fcac 	bl	8000ca8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000350:	2064      	movs	r0, #100	; 0x64
 8000352:	f001 f9a1 	bl	8001698 <HAL_Delay>
 8000356:	e7fb      	b.n	8000350 <main+0x64>
 8000358:	2400002c 	.word	0x2400002c
 800035c:	24000420 	.word	0x24000420
 8000360:	24000090 	.word	0x24000090
 8000364:	24000438 	.word	0x24000438

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09c      	sub	sp, #112	; 0x70
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000372:	224c      	movs	r2, #76	; 0x4c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f008 fff4 	bl	8009364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2220      	movs	r2, #32
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f008 ffee 	bl	8009364 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000388:	4b30      	ldr	r3, [pc, #192]	; (800044c <SystemClock_Config+0xe4>)
 800038a:	f04f 32ff 	mov.w	r2, #4294967295
 800038e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000392:	2002      	movs	r0, #2
 8000394:	f005 fbfa 	bl	8005b8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000398:	2300      	movs	r3, #0
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <SystemClock_Config+0xe8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2b      	ldr	r2, [pc, #172]	; (8000450 <SystemClock_Config+0xe8>)
 80003a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <SystemClock_Config+0xe8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b4:	bf00      	nop
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <SystemClock_Config+0xe8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c2:	d1f8      	bne.n	80003b6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	2302      	movs	r3, #2
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003cc:	2340      	movs	r3, #64	; 0x40
 80003ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003d8:	2304      	movs	r3, #4
 80003da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003dc:	2308      	movs	r3, #8
 80003de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003e4:	2303      	movs	r3, #3
 80003e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ec:	230c      	movs	r3, #12
 80003ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fc:	4618      	mov	r0, r3
 80003fe:	f005 fbff 	bl	8005c00 <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000408:	f000 fc4e 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	233f      	movs	r3, #63	; 0x3f
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000420:	2340      	movs	r3, #64	; 0x40
 8000422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800042a:	2340      	movs	r3, #64	; 0x40
 800042c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f006 f816 	bl	8006464 <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800043e:	f000 fc33 	bl	8000ca8 <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3770      	adds	r7, #112	; 0x70
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024400 	.word	0x58024400
 8000450:	58024800 	.word	0x58024800

08000454 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b0b0      	sub	sp, #192	; 0xc0
 8000458:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800045a:	463b      	mov	r3, r7
 800045c:	22c0      	movs	r2, #192	; 0xc0
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f008 ff7f 	bl	8009364 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800046a:	f04f 0300 	mov.w	r3, #0
 800046e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000472:	2304      	movs	r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000476:	2308      	movs	r3, #8
 8000478:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 32;
 800047a:	2320      	movs	r3, #32
 800047c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800047e:	2302      	movs	r3, #2
 8000480:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000486:	23c0      	movs	r3, #192	; 0xc0
 8000488:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800048a:	2300      	movs	r3, #0
 800048c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000492:	2300      	movs	r3, #0
 8000494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4618      	mov	r0, r3
 800049c:	f006 fb58 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80004a6:	f000 fbff 	bl	8000ca8 <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	37c0      	adds	r7, #192	; 0xc0
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]
 80004d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d8:	4b70      	ldr	r3, [pc, #448]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004da:	4a71      	ldr	r2, [pc, #452]	; (80006a0 <MX_ADC1_Init+0x1ec>)
 80004dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80004de:	4b6f      	ldr	r3, [pc, #444]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b6d      	ldr	r3, [pc, #436]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004e8:	2208      	movs	r2, #8
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ec:	4b6b      	ldr	r3, [pc, #428]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f2:	4b6a      	ldr	r3, [pc, #424]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f8:	4b68      	ldr	r3, [pc, #416]	; (800069c <MX_ADC1_Init+0x1e8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fe:	4b67      	ldr	r3, [pc, #412]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000500:	2201      	movs	r2, #1
 8000502:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000504:	4b65      	ldr	r3, [pc, #404]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000506:	220b      	movs	r2, #11
 8000508:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b64      	ldr	r3, [pc, #400]	; (800069c <MX_ADC1_Init+0x1e8>)
 800050c:	2200      	movs	r2, #0
 800050e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b62      	ldr	r3, [pc, #392]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b61      	ldr	r3, [pc, #388]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800051c:	4b5f      	ldr	r3, [pc, #380]	; (800069c <MX_ADC1_Init+0x1e8>)
 800051e:	2203      	movs	r2, #3
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000522:	4b5e      	ldr	r3, [pc, #376]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000524:	2200      	movs	r2, #0
 8000526:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000528:	4b5c      	ldr	r3, [pc, #368]	; (800069c <MX_ADC1_Init+0x1e8>)
 800052a:	2200      	movs	r2, #0
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052e:	4b5b      	ldr	r3, [pc, #364]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000536:	4859      	ldr	r0, [pc, #356]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000538:	f001 faba 	bl	8001ab0 <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000542:	f000 fbb1 	bl	8000ca8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	4619      	mov	r1, r3
 8000550:	4852      	ldr	r0, [pc, #328]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000552:	f002 f9b9 	bl	80028c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800055c:	f000 fba4 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000560:	4b50      	ldr	r3, [pc, #320]	; (80006a4 <MX_ADC1_Init+0x1f0>)
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000564:	2306      	movs	r3, #6
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000568:	2306      	movs	r3, #6
 800056a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800056c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000570:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000572:	2304      	movs	r3, #4
 8000574:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4846      	ldr	r0, [pc, #280]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000584:	f001 fcb6 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800058e:	f000 fb8b 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000592:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <MX_ADC1_Init+0x1f4>)
 8000594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000596:	230c      	movs	r3, #12
 8000598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	483f      	ldr	r0, [pc, #252]	; (800069c <MX_ADC1_Init+0x1e8>)
 80005a0:	f001 fca8 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80005aa:	f000 fb7d 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005ae:	2312      	movs	r3, #18
 80005b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	4839      	ldr	r0, [pc, #228]	; (800069c <MX_ADC1_Init+0x1e8>)
 80005b8:	f001 fc9c 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80005c2:	f000 fb71 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005c6:	2318      	movs	r3, #24
 80005c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4833      	ldr	r0, [pc, #204]	; (800069c <MX_ADC1_Init+0x1e8>)
 80005d0:	f001 fc90 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80005da:	f000 fb65 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <MX_ADC1_Init+0x1e8>)
 80005ea:	f001 fc83 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80005f4:	f000 fb58 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005f8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80005fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000604:	f001 fc76 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800060e:	f000 fb4b 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000612:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <MX_ADC1_Init+0x1e8>)
 800061e:	f001 fc69 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000628:	f000 fb3e 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800062c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000630:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000638:	f001 fc5c 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000642:	f000 fb31 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000646:	f44f 738c 	mov.w	r3, #280	; 0x118
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000652:	f001 fc4f 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800065c:	f000 fb24 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_ADC1_Init+0x1e8>)
 800066c:	f001 fc42 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8000676:	f000 fb17 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800067a:	f240 2306 	movw	r3, #518	; 0x206
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0x1e8>)
 8000686:	f001 fc35 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8000690:	f000 fb0a 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2400002c 	.word	0x2400002c
 80006a0:	40022000 	.word	0x40022000
 80006a4:	47520000 	.word	0x47520000
 80006a8:	10c00010 	.word	0x10c00010

080006ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <MX_ADC2_Init+0x160>)
 80006c6:	4a52      	ldr	r2, [pc, #328]	; (8000810 <MX_ADC2_Init+0x164>)
 80006c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006ca:	4b50      	ldr	r3, [pc, #320]	; (800080c <MX_ADC2_Init+0x160>)
 80006cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_ADC2_Init+0x160>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d8:	4b4c      	ldr	r3, [pc, #304]	; (800080c <MX_ADC2_Init+0x160>)
 80006da:	2201      	movs	r2, #1
 80006dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_ADC2_Init+0x160>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006e4:	4b49      	ldr	r3, [pc, #292]	; (800080c <MX_ADC2_Init+0x160>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006ea:	4b48      	ldr	r3, [pc, #288]	; (800080c <MX_ADC2_Init+0x160>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 7;
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <MX_ADC2_Init+0x160>)
 80006f2:	2207      	movs	r2, #7
 80006f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b45      	ldr	r3, [pc, #276]	; (800080c <MX_ADC2_Init+0x160>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <MX_ADC2_Init+0x160>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <MX_ADC2_Init+0x160>)
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000708:	4b40      	ldr	r3, [pc, #256]	; (800080c <MX_ADC2_Init+0x160>)
 800070a:	2203      	movs	r2, #3
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <MX_ADC2_Init+0x160>)
 8000710:	2200      	movs	r2, #0
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000714:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_ADC2_Init+0x160>)
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800071a:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC2_Init+0x160>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000722:	483a      	ldr	r0, [pc, #232]	; (800080c <MX_ADC2_Init+0x160>)
 8000724:	f001 f9c4 	bl	8001ab0 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800072e:	f000 fabb 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_ADC2_Init+0x168>)
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800073a:	2306      	movs	r3, #6
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000742:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000744:	2304      	movs	r3, #4
 8000746:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	482d      	ldr	r0, [pc, #180]	; (800080c <MX_ADC2_Init+0x160>)
 8000756:	f001 fbcd 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000760:	f000 faa2 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_ADC2_Init+0x16c>)
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000768:	230c      	movs	r3, #12
 800076a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4826      	ldr	r0, [pc, #152]	; (800080c <MX_ADC2_Init+0x160>)
 8000772:	f001 fbbf 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800077c:	f000 fa94 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000780:	2312      	movs	r3, #18
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_ADC2_Init+0x160>)
 800078a:	f001 fbb3 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 8000794:	f000 fa88 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000798:	2318      	movs	r3, #24
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_ADC2_Init+0x160>)
 80007a2:	f001 fba7 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80007ac:	f000 fa7c 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_ADC2_Init+0x160>)
 80007bc:	f001 fb9a 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80007c6:	f000 fa6f 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_ADC2_Init+0x160>)
 80007d6:	f001 fb8d 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80007e0:	f000 fa62 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_ADC2_Init+0x170>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007e8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC2_Init+0x160>)
 80007f4:	f001 fb7e 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 80007fe:	f000 fa53 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000090 	.word	0x24000090
 8000810:	40022100 	.word	0x40022100
 8000814:	36902000 	.word	0x36902000
 8000818:	0c900008 	.word	0x0c900008
 800081c:	cb840000 	.word	0xcb840000

08000820 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000826:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <MX_FDCAN1_Init+0xc4>)
 8000828:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800084a:	2210      	movs	r2, #16
 800084c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000856:	2202      	movs	r2, #2
 8000858:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800085c:	2202      	movs	r2, #2
 800085e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000862:	2201      	movs	r2, #1
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000868:	2201      	movs	r2, #1
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800086e:	2201      	movs	r2, #1
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000874:	2201      	movs	r2, #1
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000892:	2204      	movs	r2, #4
 8000894:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 800089e:	2204      	movs	r2, #4
 80008a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_FDCAN1_Init+0xc0>)
 80008ce:	f004 fb21 	bl	8004f14 <HAL_FDCAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008d8:	f000 f9e6 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	240001e4 	.word	0x240001e4
 80008e4:	4000a000 	.word	0x4000a000

080008e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 80008ee:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <MX_FDCAN2_Init+0xc4>)
 80008f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000912:	2210      	movs	r2, #16
 8000914:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000918:	2201      	movs	r2, #1
 800091a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800091e:	2202      	movs	r2, #2
 8000920:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000924:	2202      	movs	r2, #2
 8000926:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800092a:	2201      	movs	r2, #1
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000930:	2201      	movs	r2, #1
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000936:	2201      	movs	r2, #1
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800093c:	2201      	movs	r2, #1
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000942:	2200      	movs	r2, #0
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800094e:	2200      	movs	r2, #0
 8000950:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800095a:	2204      	movs	r2, #4
 800095c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000966:	2204      	movs	r2, #4
 8000968:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000972:	2204      	movs	r2, #4
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000990:	2204      	movs	r2, #4
 8000992:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_FDCAN2_Init+0xc0>)
 8000996:	f004 fabd 	bl	8004f14 <HAL_FDCAN_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80009a0:	f000 f982 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	24000284 	.word	0x24000284
 80009ac:	4000a400 	.word	0x4000a400

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	f004 ffa6 	bl	800593c <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f957 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009fe:	f005 f82d 	bl	8005a5c <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f94e 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C1_Init+0x74>)
 8000a10:	f005 f86f 	bl	8005af2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f945 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000324 	.word	0x24000324
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	00707cbb 	.word	0x00707cbb

08000a30 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_I2C3_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_I2C3_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a6c:	f004 ff66 	bl	800593c <HAL_I2C_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a76:	f000 f917 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a7e:	f004 ffed 	bl	8005a5c <HAL_I2CEx_ConfigAnalogFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 f90e 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a90:	f005 f82f 	bl	8005af2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 f905 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24000378 	.word	0x24000378
 8000aa8:	40005c00 	.word	0x40005c00
 8000aac:	00707cbb 	.word	0x00707cbb

08000ab0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C4_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C4_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000aec:	f004 ff26 	bl	800593c <HAL_I2C_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 f8d7 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000afe:	f004 ffad 	bl	8005a5c <HAL_I2CEx_ConfigAnalogFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f8ce 	bl	8000ca8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_I2C4_Init+0x74>)
 8000b10:	f004 ffef 	bl	8005af2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f8c5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	240003cc 	.word	0x240003cc
 8000b28:	58001c00 	.word	0x58001c00
 8000b2c:	00707cbb 	.word	0x00707cbb

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_DMA_Init+0x4c>)
 8000b38:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <MX_DMA_Init+0x4c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_DMA_Init+0x4c>)
 8000b48:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	200b      	movs	r0, #11
 8000b5a:	f002 f82c 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b5e:	200b      	movs	r0, #11
 8000b60:	f002 f843 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f002 f824 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f002 f83b 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000ba6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000be2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be6:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x8c>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	58024400 	.word	0x58024400

08000c10 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	uint8_t ADC1_size = sizeof(ADC1Data)/sizeof(ADC1Data[0]);
 8000c18:	230b      	movs	r3, #11
 8000c1a:	73fb      	strb	r3, [r7, #15]
	if(hadc->Instance == ADC1){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <HAL_ADC_ConvCpltCallback+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d114      	bne.n	8000c50 <HAL_ADC_ConvCpltCallback+0x40>
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e00b      	b.n	8000c44 <HAL_ADC_ConvCpltCallback+0x34>
			all_raw_data[j] = ADC1Data[j];
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c34:	b299      	uxth	r1, r3
 8000c36:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8ed      	bhi.n	8000c2c <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	if(hadc->Instance == ADC2){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d116      	bne.n	8000c88 <HAL_ADC_ConvCpltCallback+0x78>
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e00d      	b.n	8000c7c <HAL_ADC_ConvCpltCallback+0x6c>
			all_raw_data[j+ ADC1_size] = ADC2Data[j];
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	490f      	ldr	r1, [pc, #60]	; (8000ca4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c6e:	b291      	uxth	r1, r2
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8eb      	bhi.n	8000c60 <HAL_ADC_ConvCpltCallback+0x50>
		}
	}

}
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40022000 	.word	0x40022000
 8000c98:	24000420 	.word	0x24000420
 8000c9c:	24000448 	.word	0x24000448
 8000ca0:	40022100 	.word	0x40022100
 8000ca4:	24000438 	.word	0x24000438

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_MspInit+0x30>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_MspInit+0x30>)
 8000ccc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4aa0      	ldr	r2, [pc, #640]	; (8000f88 <HAL_ADC_MspInit+0x2a0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	f040 809a 	bne.w	8000e40 <HAL_ADC_MspInit+0x158>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d0c:	4b9f      	ldr	r3, [pc, #636]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a9e      	ldr	r2, [pc, #632]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000d14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d16:	4b9d      	ldr	r3, [pc, #628]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10e      	bne.n	8000d3c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d1e:	4b9c      	ldr	r3, [pc, #624]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d24:	4a9a      	ldr	r2, [pc, #616]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d2e:	4b98      	ldr	r3, [pc, #608]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b94      	ldr	r3, [pc, #592]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d42:	4a93      	ldr	r2, [pc, #588]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d4c:	4b90      	ldr	r3, [pc, #576]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b8d      	ldr	r3, [pc, #564]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d60:	4a8b      	ldr	r2, [pc, #556]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b85      	ldr	r3, [pc, #532]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7e:	4a84      	ldr	r2, [pc, #528]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d88:	4b81      	ldr	r3, [pc, #516]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000d96:	2316      	movs	r3, #22
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	487a      	ldr	r0, [pc, #488]	; (8000f94 <HAL_ADC_MspInit+0x2ac>)
 8000daa:	f004 fc17 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dae:	233f      	movs	r3, #63	; 0x3f
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4875      	ldr	r0, [pc, #468]	; (8000f98 <HAL_ADC_MspInit+0x2b0>)
 8000dc2:	f004 fc0b 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4870      	ldr	r0, [pc, #448]	; (8000f9c <HAL_ADC_MspInit+0x2b4>)
 8000dda:	f004 fbff 	bl	80055dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000dde:	4b70      	ldr	r3, [pc, #448]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000de0:	4a70      	ldr	r2, [pc, #448]	; (8000fa4 <HAL_ADC_MspInit+0x2bc>)
 8000de2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000de4:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000de6:	2209      	movs	r2, #9
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfe:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e06:	4b66      	ldr	r3, [pc, #408]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0e:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e22:	485f      	ldr	r0, [pc, #380]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e24:	f001 fefc 	bl	8002c20 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x14a>
    {
      Error_Handler();
 8000e2e:	f7ff ff3b 	bl	8000ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a5a      	ldr	r2, [pc, #360]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e36:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e38:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_ADC_MspInit+0x2b8>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e3e:	e09e      	b.n	8000f7e <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_ADC_MspInit+0x2c0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	f040 8099 	bne.w	8000f7e <HAL_ADC_MspInit+0x296>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_ADC_MspInit+0x2a4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10e      	bne.n	8000e7c <HAL_ADC_MspInit+0x194>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e60:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e64:	4a4a      	ldr	r2, [pc, #296]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e70:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e82:	4a43      	ldr	r2, [pc, #268]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea0:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000eba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebe:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_ADC_MspInit+0x2a8>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000ed6:	2329      	movs	r3, #41	; 0x29
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	482a      	ldr	r0, [pc, #168]	; (8000f94 <HAL_ADC_MspInit+0x2ac>)
 8000eea:	f004 fb77 	bl	80055dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	4825      	ldr	r0, [pc, #148]	; (8000f98 <HAL_ADC_MspInit+0x2b0>)
 8000f02:	f004 fb6b 	bl	80055dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4820      	ldr	r0, [pc, #128]	; (8000f9c <HAL_ADC_MspInit+0x2b4>)
 8000f1a:	f004 fb5f 	bl	80055dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_ADC_MspInit+0x2c8>)
 8000f22:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f26:	220a      	movs	r2, #10
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f54:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f64:	f001 fe5c 	bl	8002c20 <HAL_DMA_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_ADC_MspInit+0x28a>
      Error_Handler();
 8000f6e:	f7ff fe9b 	bl	8000ca8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f76:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0x2c4>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f7e:	bf00      	nop
 8000f80:	3740      	adds	r7, #64	; 0x40
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	2400046c 	.word	0x2400046c
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	58020400 	.word	0x58020400
 8000fa0:	240000f4 	.word	0x240000f4
 8000fa4:	40020010 	.word	0x40020010
 8000fa8:	40022100 	.word	0x40022100
 8000fac:	2400016c 	.word	0x2400016c
 8000fb0:	40020028 	.word	0x40020028

08000fb4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0bc      	sub	sp, #240	; 0xf0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	22c0      	movs	r2, #192	; 0xc0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 f9c5 	bl	8009364 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a57      	ldr	r2, [pc, #348]	; (800113c <HAL_FDCAN_MspInit+0x188>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d151      	bne.n	8001088 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fda7 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001008:	f7ff fe4e 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800100c:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 8001014:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001016:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10e      	bne.n	800103c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 8001020:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001024:	4a47      	ldr	r2, [pc, #284]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 8001030:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 800103e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800105a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800105e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001074:	2309      	movs	r3, #9
 8001076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800107e:	4619      	mov	r1, r3
 8001080:	4831      	ldr	r0, [pc, #196]	; (8001148 <HAL_FDCAN_MspInit+0x194>)
 8001082:	f004 faab 	bl	80055dc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001086:	e055      	b.n	8001134 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <HAL_FDCAN_MspInit+0x198>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d150      	bne.n	8001134 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001092:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800109e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fd50 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80010b6:	f7ff fdf7 	bl	8000ca8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 80010c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_FDCAN_MspInit+0x18c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10e      	bne.n	80010ea <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010de:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_FDCAN_MspInit+0x190>)
 80010fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001108:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800110c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001122:	2309      	movs	r3, #9
 8001124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800112c:	4619      	mov	r1, r3
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <HAL_FDCAN_MspInit+0x19c>)
 8001130:	f004 fa54 	bl	80055dc <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	37f0      	adds	r7, #240	; 0xf0
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	4000a000 	.word	0x4000a000
 8001140:	24000470 	.word	0x24000470
 8001144:	58024400 	.word	0x58024400
 8001148:	58020000 	.word	0x58020000
 800114c:	4000a400 	.word	0x4000a400
 8001150:	58020400 	.word	0x58020400

08001154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0c0      	sub	sp, #256	; 0x100
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	22c0      	movs	r2, #192	; 0xc0
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f008 f8f5 	bl	8009364 <memset>
  if(hi2c->Instance==I2C1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a86      	ldr	r2, [pc, #536]	; (8001398 <HAL_I2C_MspInit+0x244>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d146      	bne.n	8001212 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001184:	f04f 0208 	mov.w	r2, #8
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	4618      	mov	r0, r3
 800119c:	f005 fcd8 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011a6:	f7ff fd7f 	bl	8000ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b7c      	ldr	r3, [pc, #496]	; (800139c <HAL_I2C_MspInit+0x248>)
 80011ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b0:	4a7a      	ldr	r2, [pc, #488]	; (800139c <HAL_I2C_MspInit+0x248>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ba:	4b78      	ldr	r3, [pc, #480]	; (800139c <HAL_I2C_MspInit+0x248>)
 80011bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c8:	23c0      	movs	r3, #192	; 0xc0
 80011ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ea:	4619      	mov	r1, r3
 80011ec:	486c      	ldr	r0, [pc, #432]	; (80013a0 <HAL_I2C_MspInit+0x24c>)
 80011ee:	f004 f9f5 	bl	80055dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f2:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_I2C_MspInit+0x248>)
 80011f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f8:	4a68      	ldr	r2, [pc, #416]	; (800139c <HAL_I2C_MspInit+0x248>)
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001204:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001210:	e0bd      	b.n	800138e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a63      	ldr	r2, [pc, #396]	; (80013a4 <HAL_I2C_MspInit+0x250>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d16c      	bne.n	80012f6 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800121c:	f04f 0208 	mov.w	r2, #8
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fc8c 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800123e:	f7ff fd33 	bl	8000ca8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001244:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001248:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_I2C_MspInit+0x248>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001254:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001262:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001266:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001272:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001298:	2304      	movs	r3, #4
 800129a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012a2:	4619      	mov	r1, r3
 80012a4:	4840      	ldr	r0, [pc, #256]	; (80013a8 <HAL_I2C_MspInit+0x254>)
 80012a6:	f004 f999 	bl	80055dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c4:	2304      	movs	r3, #4
 80012c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ce:	4619      	mov	r1, r3
 80012d0:	4836      	ldr	r0, [pc, #216]	; (80013ac <HAL_I2C_MspInit+0x258>)
 80012d2:	f004 f983 	bl	80055dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_I2C_MspInit+0x248>)
 80012d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012dc:	4a2f      	ldr	r2, [pc, #188]	; (800139c <HAL_I2C_MspInit+0x248>)
 80012de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_I2C_MspInit+0x248>)
 80012e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
}
 80012f4:	e04b      	b.n	800138e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <HAL_I2C_MspInit+0x25c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d146      	bne.n	800138e <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001300:	f04f 0210 	mov.w	r2, #16
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fc1a 	bl	8006b50 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8001322:	f7ff fcc1 	bl	8000ca8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_I2C_MspInit+0x248>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001338:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001348:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	2312      	movs	r3, #18
 800134e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800135e:	2306      	movs	r3, #6
 8001360:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_I2C_MspInit+0x24c>)
 800136c:	f004 f936 	bl	80055dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001372:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_I2C_MspInit+0x248>)
 8001382:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005400 	.word	0x40005400
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020400 	.word	0x58020400
 80013a4:	40005c00 	.word	0x40005c00
 80013a8:	58020800 	.word	0x58020800
 80013ac:	58020000 	.word	0x58020000
 80013b0:	58001c00 	.word	0x58001c00

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f92a 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <DMA1_Stream0_IRQHandler+0x10>)
 800140e:	f002 f9ff 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240000f4 	.word	0x240000f4

0800141c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA1_Stream1_IRQHandler+0x10>)
 8001422:	f002 f9f5 	bl	8003810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2400016c 	.word	0x2400016c

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <SystemInit+0xd0>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a31      	ldr	r2, [pc, #196]	; (8001500 <SystemInit+0xd0>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <SystemInit+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	2b02      	cmp	r3, #2
 800144e:	d807      	bhi.n	8001460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <SystemInit+0xd4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 030f 	bic.w	r3, r3, #15
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <SystemInit+0xd4>)
 800145a:	f043 0303 	orr.w	r3, r3, #3
 800145e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <SystemInit+0xd8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a28      	ldr	r2, [pc, #160]	; (8001508 <SystemInit+0xd8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <SystemInit+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <SystemInit+0xd8>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4924      	ldr	r1, [pc, #144]	; (8001508 <SystemInit+0xd8>)
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <SystemInit+0xdc>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <SystemInit+0xd4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <SystemInit+0xd4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 030f 	bic.w	r3, r3, #15
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <SystemInit+0xd4>)
 8001494:	f043 0303 	orr.w	r3, r3, #3
 8001498:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <SystemInit+0xd8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <SystemInit+0xd8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <SystemInit+0xd8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <SystemInit+0xd8>)
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <SystemInit+0xe0>)
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <SystemInit+0xd8>)
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <SystemInit+0xe4>)
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <SystemInit+0xd8>)
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <SystemInit+0xe8>)
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <SystemInit+0xd8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <SystemInit+0xd8>)
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <SystemInit+0xe8>)
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <SystemInit+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <SystemInit+0xd8>)
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <SystemInit+0xe8>)
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <SystemInit+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <SystemInit+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <SystemInit+0xd8>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <SystemInit+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <SystemInit+0xec>)
 80014f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	52002000 	.word	0x52002000
 8001508:	58024400 	.word	0x58024400
 800150c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001510:	02020200 	.word	0x02020200
 8001514:	01ff0000 	.word	0x01ff0000
 8001518:	01010280 	.word	0x01010280
 800151c:	52004000 	.word	0x52004000

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001524:	f7ff ff84 	bl	8001430 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	; (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800154e:	f007 ff11 	bl	8009374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7fe fecb 	bl	80002ec <main>
  bx  lr
 8001556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001558:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800155c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001560:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001564:	0800945c 	.word	0x0800945c
  ldr r2, =_sbss
 8001568:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800156c:	24000478 	.word	0x24000478

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157a:	2003      	movs	r0, #3
 800157c:	f001 fb10 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001580:	f005 f926 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_Init+0x68>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4913      	ldr	r1, [pc, #76]	; (80015e0 <HAL_Init+0x6c>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_Init+0x68>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_Init+0x6c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_Init+0x70>)
 80015b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_Init+0x74>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f814 	bl	80015ec <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e002      	b.n	80015d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ce:	f7ff fb71 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	58024400 	.word	0x58024400
 80015e0:	0800943c 	.word	0x0800943c
 80015e4:	24000004 	.word	0x24000004
 80015e8:	24000000 	.word	0x24000000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_InitTick+0x60>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e021      	b.n	8001644 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_InitTick+0x64>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_InitTick+0x60>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 faf5 	bl	8002c06 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f001 fabf 	bl	8002bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x68>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2400000c 	.word	0x2400000c
 8001650:	24000000 	.word	0x24000000
 8001654:	24000008 	.word	0x24000008

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2400000c 	.word	0x2400000c
 800167c:	24000474 	.word	0x24000474

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	24000474 	.word	0x24000474

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2400000c 	.word	0x2400000c

080016e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3360      	adds	r3, #96	; 0x60
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	431a      	orrs	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	611a      	str	r2, [r3, #16]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b087      	sub	sp, #28
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	431a      	orrs	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
  }
}
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3330      	adds	r3, #48	; 0x30
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	211f      	movs	r1, #31
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0e9b      	lsrs	r3, r3, #26
 800184e:	f003 011f 	and.w	r1, r3, #31
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f023 0203 	bic.w	r2, r3, #3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3314      	adds	r3, #20
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	0e5b      	lsrs	r3, r3, #25
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	0d1b      	lsrs	r3, r3, #20
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2107      	movs	r1, #7
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	401a      	ands	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0d1b      	lsrs	r3, r3, #20
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0318 	and.w	r3, r3, #24
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001910:	40d9      	lsrs	r1, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	400b      	ands	r3, r1
 8001916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	000fffff 	.word	0x000fffff

08001934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <LL_ADC_DisableDeepPowerDown+0x20>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6093      	str	r3, [r2, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	5fffffc0 	.word	0x5fffffc0

08001974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	6fffffc0 	.word	0x6fffffc0

080019c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <LL_ADC_Enable+0x24>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	7fffffc0 	.word	0x7fffffc0

08001a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <LL_ADC_IsEnabled+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_ADC_IsEnabled+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_ADC_REG_StartConversion+0x24>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	7fffffc0 	.word	0x7fffffc0

08001a64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e138      	b.n	8001d3c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff f905 	bl	8000ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff3f 	bl	8001974 <LL_ADC_IsDeepPowerDownEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff25 	bl	8001950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff5a 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d114      	bne.n	8001b40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff3e 	bl	800199c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b20:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_ADC_Init+0x294>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	4a88      	ldr	r2, [pc, #544]	; (8001d48 <HAL_ADC_Init+0x298>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b32:	e002      	b.n	8001b3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff3d 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f043 0210 	orr.w	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff77 	bl	8001a64 <LL_ADC_REG_IsConversionOngoing>
 8001b76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 80d2 	bne.w	8001d2a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 80ce 	bne.w	8001d2a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff36 	bl	8001a14 <LL_ADC_IsEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d110      	bne.n	8001bd0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bae:	4867      	ldr	r0, [pc, #412]	; (8001d4c <HAL_ADC_Init+0x29c>)
 8001bb0:	f7ff ff30 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4866      	ldr	r0, [pc, #408]	; (8001d50 <HAL_ADC_Init+0x2a0>)
 8001bb8:	f7ff ff2c 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4323      	orrs	r3, r4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4862      	ldr	r0, [pc, #392]	; (8001d54 <HAL_ADC_Init+0x2a4>)
 8001bcc:	f7ff fd88 	bl	80016e0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7d5b      	ldrb	r3, [r3, #21]
 8001bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bda:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001be0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7f1b      	ldrb	r3, [r3, #28]
 8001be6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7f1b      	ldrb	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	045b      	lsls	r3, r3, #17
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_ADC_Init+0x2a8>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	69b9      	ldr	r1, [r7, #24]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff14 	bl	8001a64 <LL_ADC_REG_IsConversionOngoing>
 8001c3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff21 	bl	8001a8a <LL_ADC_INJ_IsConversionOngoing>
 8001c48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d14a      	bne.n	8001ce6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d147      	bne.n	8001ce6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7d1b      	ldrb	r3, [r3, #20]
 8001c5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	; (8001d5c <HAL_ADC_Init+0x2ac>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d11b      	bne.n	8001cba <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_ADC_Init+0x2b0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0411      	lsls	r1, r2, #16
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001caa:	430a      	orrs	r2, r1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	e007      	b.n	8001cca <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fcfd 	bl	80026e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10c      	bne.n	8001d08 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f023 010f 	bic.w	r1, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	e007      	b.n	8001d18 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020f 	bic.w	r2, r2, #15
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f023 0303 	bic.w	r3, r3, #3
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
 8001d28:	e007      	b.n	8001d3a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	24000000 	.word	0x24000000
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40022100 	.word	0x40022100
 8001d54:	40022300 	.word	0x40022300
 8001d58:	fff0c003 	.word	0xfff0c003
 8001d5c:	ffffbffc 	.word	0xffffbffc
 8001d60:	fc00f81e 	.word	0xfc00f81e

08001d64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d70:	484f      	ldr	r0, [pc, #316]	; (8001eb0 <HAL_ADC_Start_DMA+0x14c>)
 8001d72:	f7ff fddf 	bl	8001934 <LL_ADC_GetMultimode>
 8001d76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe71 	bl	8001a64 <LL_ADC_REG_IsConversionOngoing>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 808c 	bne.w	8001ea2 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_Start_DMA+0x34>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e087      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x144>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d002      	beq.n	8001db2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	d170      	bne.n	8001e94 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fb84 	bl	80024c0 <ADC_Enable>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d163      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_ADC_Start_DMA+0x150>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <HAL_ADC_Start_DMA+0x154>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Start_DMA+0x7e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	e000      	b.n	8001de4 <HAL_ADC_Start_DMA+0x80>
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_ADC_Start_DMA+0x158>)
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	659a      	str	r2, [r3, #88]	; 0x58
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_ADC_Start_DMA+0x15c>)
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <HAL_ADC_Start_DMA+0x160>)
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_ADC_Start_DMA+0x164>)
 8001e34:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	221c      	movs	r2, #28
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0210 	orr.w	r2, r2, #16
 8001e54:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7ff fd04 	bl	800186e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3340      	adds	r3, #64	; 0x40
 8001e70:	4619      	mov	r1, r3
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f001 fa61 	bl	800333c <HAL_DMA_Start_IT>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fdda 	bl	8001a3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e88:	e00d      	b.n	8001ea6 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e92:	e008      	b.n	8001ea6 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ea0:	e001      	b.n	8001ea6 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022300 	.word	0x40022300
 8001eb4:	fffff0fe 	.word	0xfffff0fe
 8001eb8:	40022100 	.word	0x40022100
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	080025b9 	.word	0x080025b9
 8001ec4:	08002691 	.word	0x08002691
 8001ec8:	080026ad 	.word	0x080026ad

08001ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b0a1      	sub	sp, #132	; 0x84
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a9a      	ldr	r2, [pc, #616]	; (8002178 <HAL_ADC_ConfigChannel+0x284>)
 8001f0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x2a>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e2bc      	b.n	8002498 <HAL_ADC_ConfigChannel+0x5a4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fd9a 	bl	8001a64 <LL_ADC_REG_IsConversionOngoing>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 82a1 	bne.w	800247a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x62>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	e016      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x90>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	69d1      	ldr	r1, [r2, #28]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f7ff fc39 	bl	8001816 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd5b 	bl	8001a64 <LL_ADC_REG_IsConversionOngoing>
 8001fae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd68 	bl	8001a8a <LL_ADC_INJ_IsConversionOngoing>
 8001fba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80a0 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 809c 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff fc5b 	bl	8001894 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x110>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	e00a      	b.n	800201a <HAL_ADC_ConfigChannel+0x126>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d027      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6919      	ldr	r1, [r3, #16]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002032:	f7ff fb89 	bl	8001748 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	7e5b      	ldrb	r3, [r3, #25]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_ADC_ConfigChannel+0x158>
 8002046:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800204a:	e000      	b.n	800204e <HAL_ADC_ConfigChannel+0x15a>
 800204c:	2300      	movs	r3, #0
 800204e:	461a      	mov	r2, r3
 8002050:	f7ff fbb3 	bl	80017ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_ADC_ConfigChannel+0x176>
 8002064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002068:	e000      	b.n	800206c <HAL_ADC_ConfigChannel+0x178>
 800206a:	2300      	movs	r3, #0
 800206c:	461a      	mov	r2, r3
 800206e:	f7ff fb8b 	bl	8001788 <LL_ADC_SetDataRightShift>
 8002072:	e047      	b.n	8002104 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	429a      	cmp	r2, r3
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002096:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ba:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020de:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	069b      	lsls	r3, r3, #26
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002102:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc83 	bl	8001a14 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 81bb 	bne.w	800248c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff fbe2 	bl	80018ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_ADC_ConfigChannel+0x284>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 8130 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_ADC_ConfigChannel+0x268>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b09      	cmp	r3, #9
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e01b      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2a0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800216a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800216e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e005      	b.n	8002184 <HAL_ADC_ConfigChannel+0x290>
 8002178:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800217c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b09      	cmp	r3, #9
 800218c:	bf94      	ite	ls
 800218e:	2301      	movls	r3, #1
 8002190:	2300      	movhi	r3, #0
 8002192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002194:	2b00      	cmp	r3, #0
 8002196:	d079      	beq.n	800228c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x2c0>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	069b      	lsls	r3, r3, #26
 80021ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b2:	e015      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x2ec>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80021d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	069b      	lsls	r3, r3, #26
 80021dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x30c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	e017      	b.n	8002230 <HAL_ADC_ConfigChannel+0x33c>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800220e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	ea42 0103 	orr.w	r1, r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x362>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	051b      	lsls	r3, r3, #20
 8002254:	e018      	b.n	8002288 <HAL_ADC_ConfigChannel+0x394>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	430b      	orrs	r3, r1
 800228a:	e07e      	b.n	800238a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x3b4>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	069b      	lsls	r3, r3, #26
 80022a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a6:	e015      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x3e0>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x400>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	e017      	b.n	8002324 <HAL_ADC_ConfigChannel+0x430>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	61bb      	str	r3, [r7, #24]
  return result;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	ea42 0103 	orr.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x45c>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	3b1e      	subs	r3, #30
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234e:	e01b      	b.n	8002388 <HAL_ADC_ConfigChannel+0x494>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	60fb      	str	r3, [r7, #12]
  return result;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f003 021f 	and.w	r2, r3, #31
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	051b      	lsls	r3, r3, #20
 8002384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002388:	430b      	orrs	r3, r1
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6892      	ldr	r2, [r2, #8]
 800238e:	4619      	mov	r1, r3
 8002390:	f7ff fa80 	bl	8001894 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da77      	bge.n	800248c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239c:	4840      	ldr	r0, [pc, #256]	; (80024a0 <HAL_ADC_ConfigChannel+0x5ac>)
 800239e:	f7ff f9c5 	bl	800172c <LL_ADC_GetCommonPathInternalCh>
 80023a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a4:	483f      	ldr	r0, [pc, #252]	; (80024a4 <HAL_ADC_ConfigChannel+0x5b0>)
 80023a6:	f7ff fb35 	bl	8001a14 <LL_ADC_IsEnabled>
 80023aa:	4604      	mov	r4, r0
 80023ac:	483e      	ldr	r0, [pc, #248]	; (80024a8 <HAL_ADC_ConfigChannel+0x5b4>)
 80023ae:	f7ff fb31 	bl	8001a14 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4323      	orrs	r3, r4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d155      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <HAL_ADC_ConfigChannel+0x5b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d122      	bne.n	800240a <HAL_ADC_ConfigChannel+0x516>
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11d      	bne.n	800240a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <HAL_ADC_ConfigChannel+0x5b4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d159      	bne.n	800248c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023de:	4619      	mov	r1, r3
 80023e0:	482f      	ldr	r0, [pc, #188]	; (80024a0 <HAL_ADC_ConfigChannel+0x5ac>)
 80023e2:	f7ff f990 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_ADC_ConfigChannel+0x5bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <HAL_ADC_ConfigChannel+0x5c0>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023fa:	e002      	b.n	8002402 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3b01      	subs	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f9      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002408:	e040      	b.n	800248c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x544>
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d131      	bne.n	800248c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	4619      	mov	r1, r3
 8002430:	481b      	ldr	r0, [pc, #108]	; (80024a0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002432:	f7ff f968 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002436:	e029      	b.n	800248c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_ADC_ConfigChannel+0x5c8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d124      	bne.n	800248c <HAL_ADC_ConfigChannel+0x598>
 8002442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245c:	4619      	mov	r1, r3
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002460:	f7ff f951 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
 8002464:	e012      	b.n	800248c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002478:	e008      	b.n	800248c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002494:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002498:	4618      	mov	r0, r3
 800249a:	3784      	adds	r7, #132	; 0x84
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	40022300 	.word	0x40022300
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40022100 	.word	0x40022100
 80024ac:	cb840000 	.word	0xcb840000
 80024b0:	24000000 	.word	0x24000000
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	bac04000 	.word	0xbac04000
 80024bc:	cfb80000 	.word	0xcfb80000

080024c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff faa1 	bl	8001a14 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d161      	bne.n	800259c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <ADC_Enable+0xe8>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04d      	b.n	800259e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fa70 	bl	80019ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800250c:	f7ff f8b8 	bl	8001680 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002512:	4826      	ldr	r0, [pc, #152]	; (80025ac <ADC_Enable+0xec>)
 8002514:	f7ff fa0e 	bl	8001934 <LL_ADC_GetMultimode>
 8002518:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <ADC_Enable+0xf0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d002      	beq.n	800252a <ADC_Enable+0x6a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e000      	b.n	800252c <ADC_Enable+0x6c>
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <ADC_Enable+0xf4>)
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4293      	cmp	r3, r2
 8002532:	d02c      	beq.n	800258e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d130      	bne.n	800259c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253a:	e028      	b.n	800258e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa67 	bl	8001a14 <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fa4b 	bl	80019ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002556:	f7ff f893 	bl	8001680 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d914      	bls.n	800258e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00d      	beq.n	800258e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d1cf      	bne.n	800253c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	8000003f 	.word	0x8000003f
 80025ac:	40022300 	.word	0x40022300
 80025b0:	40022100 	.word	0x40022100
 80025b4:	40022000 	.word	0x40022000

080025b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d14b      	bne.n	800266a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d021      	beq.n	8002630 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff f8fd 	bl	80017f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12b      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11f      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
 800262e:	e018      	b.n	8002662 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7fe fad4 	bl	8000c10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002668:	e00e      	b.n	8002688 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fc32 	bl	8001ee0 <HAL_ADC_ErrorCallback>
}
 800267c:	e004      	b.n	8002688 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fc14 	bl	8001ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fc04 	bl	8001ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026e8:	4b60      	ldr	r3, [pc, #384]	; (800286c <ADC_ConfigureBoostMode+0x18c>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026f4:	f004 f9e6 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 80026f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002702:	d010      	beq.n	8002726 <ADC_ConfigureBoostMode+0x46>
 8002704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002708:	d873      	bhi.n	80027f2 <ADC_ConfigureBoostMode+0x112>
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270e:	d002      	beq.n	8002716 <ADC_ConfigureBoostMode+0x36>
 8002710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002714:	d16d      	bne.n	80027f2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	60fb      	str	r3, [r7, #12]
        break;
 8002724:	e068      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	60fb      	str	r3, [r7, #12]
        break;
 800272c:	e064      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800272e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f005 fbc9 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 800273a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002744:	d051      	beq.n	80027ea <ADC_ConfigureBoostMode+0x10a>
 8002746:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800274a:	d854      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 800274c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002750:	d047      	beq.n	80027e2 <ADC_ConfigureBoostMode+0x102>
 8002752:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002756:	d84e      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 8002758:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800275c:	d03d      	beq.n	80027da <ADC_ConfigureBoostMode+0xfa>
 800275e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002762:	d848      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002768:	d033      	beq.n	80027d2 <ADC_ConfigureBoostMode+0xf2>
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276e:	d842      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 8002770:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002774:	d029      	beq.n	80027ca <ADC_ConfigureBoostMode+0xea>
 8002776:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800277a:	d83c      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 800277c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002780:	d01a      	beq.n	80027b8 <ADC_ConfigureBoostMode+0xd8>
 8002782:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002786:	d836      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 8002788:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800278c:	d014      	beq.n	80027b8 <ADC_ConfigureBoostMode+0xd8>
 800278e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002792:	d830      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 8002794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002798:	d00e      	beq.n	80027b8 <ADC_ConfigureBoostMode+0xd8>
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d82a      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 80027a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027a4:	d008      	beq.n	80027b8 <ADC_ConfigureBoostMode+0xd8>
 80027a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027aa:	d824      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x116>
 80027ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027b0:	d002      	beq.n	80027b8 <ADC_ConfigureBoostMode+0xd8>
 80027b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027b6:	d11e      	bne.n	80027f6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
        break;
 80027c8:	e016      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
        break;
 80027d0:	e012      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	60fb      	str	r3, [r7, #12]
        break;
 80027d8:	e00e      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	60fb      	str	r3, [r7, #12]
        break;
 80027e0:	e00a      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	09db      	lsrs	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
        break;
 80027e8:	e006      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	60fb      	str	r3, [r7, #12]
        break;
 80027f0:	e002      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
        break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80027f6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <ADC_ConfigureBoostMode+0x190>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d808      	bhi.n	8002818 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002814:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002816:	e025      	b.n	8002864 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a16      	ldr	r2, [pc, #88]	; (8002874 <ADC_ConfigureBoostMode+0x194>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d80a      	bhi.n	8002836 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	e016      	b.n	8002864 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <ADC_ConfigureBoostMode+0x198>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d80a      	bhi.n	8002854 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	e007      	b.n	8002864 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40022300 	.word	0x40022300
 8002870:	005f5e10 	.word	0x005f5e10
 8002874:	00bebc20 	.word	0x00bebc20
 8002878:	017d7840 	.word	0x017d7840

0800287c <LL_ADC_IsEnabled>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <LL_ADC_IsEnabled+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_ADC_IsEnabled+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d101      	bne.n	80028ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b09f      	sub	sp, #124	; 0x7c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e080      	b.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3d      	ldr	r2, [pc, #244]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002900:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	e001      	b.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e05f      	b.n	80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffb9 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 8002930:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffb3 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d141      	bne.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13e      	bne.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800294a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	431a      	orrs	r2, r3
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002966:	4822      	ldr	r0, [pc, #136]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002968:	f7ff ff88 	bl	800287c <LL_ADC_IsEnabled>
 800296c:	4604      	mov	r4, r0
 800296e:	4821      	ldr	r0, [pc, #132]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002970:	f7ff ff84 	bl	800287c <LL_ADC_IsEnabled>
 8002974:	4603      	mov	r3, r0
 8002976:	4323      	orrs	r3, r4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12e      	bne.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800297c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	430a      	orrs	r2, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002992:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002994:	e021      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a2:	4813      	ldr	r0, [pc, #76]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029a4:	f7ff ff6a 	bl	800287c <LL_ADC_IsEnabled>
 80029a8:	4604      	mov	r4, r0
 80029aa:	4812      	ldr	r0, [pc, #72]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029ac:	f7ff ff66 	bl	800287c <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4323      	orrs	r3, r4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d110      	bne.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80029be:	4013      	ands	r3, r2
 80029c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c4:	e009      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029d8:	e000      	b.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	377c      	adds	r7, #124	; 0x7c
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022100 	.word	0x40022100
 80029f8:	40022300 	.word	0x40022300
 80029fc:	fffff0e0 	.word	0xfffff0e0

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x40>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	05fa0000 	.word	0x05fa0000

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc4:	f7ff ff40 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff90 	bl	8002af4 <NVIC_EncodePriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff5f 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff33 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffa4 	bl	8002b5c <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7fe fd2a 	bl	8001680 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e37d      	b.n	8003334 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_DMA_Init+0x1b8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04a      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <HAL_DMA_Init+0x1bc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d045      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <HAL_DMA_Init+0x1c0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d040      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a62      	ldr	r2, [pc, #392]	; (8002de4 <HAL_DMA_Init+0x1c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d03b      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a60      	ldr	r2, [pc, #384]	; (8002de8 <HAL_DMA_Init+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d036      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5f      	ldr	r2, [pc, #380]	; (8002dec <HAL_DMA_Init+0x1cc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d031      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_DMA_Init+0x1d0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02c      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_DMA_Init+0x1d4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d027      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	; (8002df8 <HAL_DMA_Init+0x1d8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d022      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a59      	ldr	r2, [pc, #356]	; (8002dfc <HAL_DMA_Init+0x1dc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d01d      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_DMA_Init+0x1e0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d018      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_DMA_Init+0x1e4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <HAL_DMA_Init+0x1e8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_DMA_Init+0x1ec>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_DMA_Init+0x1f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_DMA_Init+0xb8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_DMA_Init+0x1f4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Init+0xbc>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_DMA_Init+0xbe>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 813c 	beq.w	8002f5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <HAL_DMA_Init+0x1b8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <HAL_DMA_Init+0x1bc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <HAL_DMA_Init+0x1c0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_DMA_Init+0x1c4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_DMA_Init+0x1c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <HAL_DMA_Init+0x1cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <HAL_DMA_Init+0x1d0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <HAL_DMA_Init+0x1d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_DMA_Init+0x1d8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_DMA_Init+0x1dc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <HAL_DMA_Init+0x1e0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_DMA_Init+0x1e4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_DMA_Init+0x1e8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <HAL_DMA_Init+0x1ec>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_DMA_Init+0x1f0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Init+0x174>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_DMA_Init+0x1f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <HAL_DMA_Init+0x186>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e007      	b.n	8002db6 <HAL_DMA_Init+0x196>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002db6:	e02f      	b.n	8002e18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db8:	f7fe fc62 	bl	8001680 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d928      	bls.n	8002e18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e2ad      	b.n	8003334 <HAL_DMA_Init+0x714>
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	40020040 	.word	0x40020040
 8002de4:	40020058 	.word	0x40020058
 8002de8:	40020070 	.word	0x40020070
 8002dec:	40020088 	.word	0x40020088
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	400200b8 	.word	0x400200b8
 8002df8:	40020410 	.word	0x40020410
 8002dfc:	40020428 	.word	0x40020428
 8002e00:	40020440 	.word	0x40020440
 8002e04:	40020458 	.word	0x40020458
 8002e08:	40020470 	.word	0x40020470
 8002e0c:	40020488 	.word	0x40020488
 8002e10:	400204a0 	.word	0x400204a0
 8002e14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1c8      	bne.n	8002db8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_DMA_Init+0x3e0>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d107      	bne.n	8002e7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4313      	orrs	r3, r2
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b28      	cmp	r3, #40	; 0x28
 8002e82:	d903      	bls.n	8002e8c <HAL_DMA_Init+0x26c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b2e      	cmp	r3, #46	; 0x2e
 8002e8a:	d91f      	bls.n	8002ecc <HAL_DMA_Init+0x2ac>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b3e      	cmp	r3, #62	; 0x3e
 8002e92:	d903      	bls.n	8002e9c <HAL_DMA_Init+0x27c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b42      	cmp	r3, #66	; 0x42
 8002e9a:	d917      	bls.n	8002ecc <HAL_DMA_Init+0x2ac>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b46      	cmp	r3, #70	; 0x46
 8002ea2:	d903      	bls.n	8002eac <HAL_DMA_Init+0x28c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b48      	cmp	r3, #72	; 0x48
 8002eaa:	d90f      	bls.n	8002ecc <HAL_DMA_Init+0x2ac>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b4e      	cmp	r3, #78	; 0x4e
 8002eb2:	d903      	bls.n	8002ebc <HAL_DMA_Init+0x29c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b52      	cmp	r3, #82	; 0x52
 8002eba:	d907      	bls.n	8002ecc <HAL_DMA_Init+0x2ac>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b73      	cmp	r3, #115	; 0x73
 8002ec2:	d905      	bls.n	8002ed0 <HAL_DMA_Init+0x2b0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b77      	cmp	r3, #119	; 0x77
 8002eca:	d801      	bhi.n	8002ed0 <HAL_DMA_Init+0x2b0>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_Init+0x2b2>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002edc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 0307 	bic.w	r3, r3, #7
 8002ef4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d117      	bne.n	8002f38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 fe70 	bl	8004c00 <DMA_CheckFifoParam>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e1fd      	b.n	8003334 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fdab 	bl	8004a9c <DMA_CalcBaseAndBitshift>
 8002f46:	4603      	mov	r3, r0
 8002f48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	223f      	movs	r2, #63	; 0x3f
 8002f54:	409a      	lsls	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	e0fd      	b.n	8003158 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <HAL_DMA_Init+0x3e4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04a      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a27      	ldr	r2, [pc, #156]	; (8003008 <HAL_DMA_Init+0x3e8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d045      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a25      	ldr	r2, [pc, #148]	; (800300c <HAL_DMA_Init+0x3ec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d040      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_DMA_Init+0x3f0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03b      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_DMA_Init+0x3f4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d036      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a21      	ldr	r2, [pc, #132]	; (8003018 <HAL_DMA_Init+0x3f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d031      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	; (800301c <HAL_DMA_Init+0x3fc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02c      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <HAL_DMA_Init+0x400>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d027      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <HAL_DMA_Init+0x404>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_DMA_Init+0x408>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_DMA_Init+0x40c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_DMA_Init+0x410>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_DMA_Init+0x414>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_DMA_Init+0x418>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_DMA_Init+0x41c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_Init+0x3dc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_DMA_Init+0x420>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d123      	bne.n	8003044 <HAL_DMA_Init+0x424>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e022      	b.n	8003046 <HAL_DMA_Init+0x426>
 8003000:	fe10803f 	.word	0xfe10803f
 8003004:	48022c08 	.word	0x48022c08
 8003008:	48022c1c 	.word	0x48022c1c
 800300c:	48022c30 	.word	0x48022c30
 8003010:	48022c44 	.word	0x48022c44
 8003014:	48022c58 	.word	0x48022c58
 8003018:	48022c6c 	.word	0x48022c6c
 800301c:	48022c80 	.word	0x48022c80
 8003020:	48022c94 	.word	0x48022c94
 8003024:	58025408 	.word	0x58025408
 8003028:	5802541c 	.word	0x5802541c
 800302c:	58025430 	.word	0x58025430
 8003030:	58025444 	.word	0x58025444
 8003034:	58025458 	.word	0x58025458
 8003038:	5802546c 	.word	0x5802546c
 800303c:	58025480 	.word	0x58025480
 8003040:	58025494 	.word	0x58025494
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d07d      	beq.n	8003146 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7f      	ldr	r2, [pc, #508]	; (800324c <HAL_DMA_Init+0x62c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d021      	beq.n	8003098 <HAL_DMA_Init+0x478>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a7d      	ldr	r2, [pc, #500]	; (8003250 <HAL_DMA_Init+0x630>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01c      	beq.n	8003098 <HAL_DMA_Init+0x478>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7c      	ldr	r2, [pc, #496]	; (8003254 <HAL_DMA_Init+0x634>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d017      	beq.n	8003098 <HAL_DMA_Init+0x478>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7a      	ldr	r2, [pc, #488]	; (8003258 <HAL_DMA_Init+0x638>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d012      	beq.n	8003098 <HAL_DMA_Init+0x478>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a79      	ldr	r2, [pc, #484]	; (800325c <HAL_DMA_Init+0x63c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_DMA_Init+0x478>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a77      	ldr	r2, [pc, #476]	; (8003260 <HAL_DMA_Init+0x640>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Init+0x478>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a76      	ldr	r2, [pc, #472]	; (8003264 <HAL_DMA_Init+0x644>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <HAL_DMA_Init+0x478>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a74      	ldr	r2, [pc, #464]	; (8003268 <HAL_DMA_Init+0x648>)
 8003096:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4b6e      	ldr	r3, [pc, #440]	; (800326c <HAL_DMA_Init+0x64c>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Init+0x4b2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d102      	bne.n	80030ce <HAL_DMA_Init+0x4ae>
 80030c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030cc:	e002      	b.n	80030d4 <HAL_DMA_Init+0x4b4>
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_Init+0x4b4>
 80030d2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030ea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003102:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b55      	ldr	r3, [pc, #340]	; (8003270 <HAL_DMA_Init+0x650>)
 800311a:	4413      	add	r3, r2
 800311c:	4a55      	ldr	r2, [pc, #340]	; (8003274 <HAL_DMA_Init+0x654>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f001 fcb6 	bl	8004a9c <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	e008      	b.n	8003158 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0ed      	b.n	8003334 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a46      	ldr	r2, [pc, #280]	; (8003278 <HAL_DMA_Init+0x658>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d072      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a45      	ldr	r2, [pc, #276]	; (800327c <HAL_DMA_Init+0x65c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d06d      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_DMA_Init+0x660>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d068      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_DMA_Init+0x664>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d063      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_DMA_Init+0x668>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d05e      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_DMA_Init+0x66c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d059      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_DMA_Init+0x670>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d054      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_DMA_Init+0x674>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04f      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <HAL_DMA_Init+0x678>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a39      	ldr	r2, [pc, #228]	; (800329c <HAL_DMA_Init+0x67c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_DMA_Init+0x680>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <HAL_DMA_Init+0x684>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_DMA_Init+0x688>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <HAL_DMA_Init+0x68c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_DMA_Init+0x690>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_DMA_Init+0x694>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_Init+0x628>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_DMA_Init+0x62c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_DMA_Init+0x630>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a10      	ldr	r2, [pc, #64]	; (8003254 <HAL_DMA_Init+0x634>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_DMA_Init+0x638>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_DMA_Init+0x63c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_DMA_Init+0x640>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_Init+0x628>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_DMA_Init+0x644>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Init+0x628>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_DMA_Init+0x648>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d137      	bne.n	80032b8 <HAL_DMA_Init+0x698>
 8003248:	2301      	movs	r3, #1
 800324a:	e036      	b.n	80032ba <HAL_DMA_Init+0x69a>
 800324c:	58025408 	.word	0x58025408
 8003250:	5802541c 	.word	0x5802541c
 8003254:	58025430 	.word	0x58025430
 8003258:	58025444 	.word	0x58025444
 800325c:	58025458 	.word	0x58025458
 8003260:	5802546c 	.word	0x5802546c
 8003264:	58025480 	.word	0x58025480
 8003268:	58025494 	.word	0x58025494
 800326c:	fffe000f 	.word	0xfffe000f
 8003270:	a7fdabf8 	.word	0xa7fdabf8
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	40020010 	.word	0x40020010
 800327c:	40020028 	.word	0x40020028
 8003280:	40020040 	.word	0x40020040
 8003284:	40020058 	.word	0x40020058
 8003288:	40020070 	.word	0x40020070
 800328c:	40020088 	.word	0x40020088
 8003290:	400200a0 	.word	0x400200a0
 8003294:	400200b8 	.word	0x400200b8
 8003298:	40020410 	.word	0x40020410
 800329c:	40020428 	.word	0x40020428
 80032a0:	40020440 	.word	0x40020440
 80032a4:	40020458 	.word	0x40020458
 80032a8:	40020470 	.word	0x40020470
 80032ac:	40020488 	.word	0x40020488
 80032b0:	400204a0 	.word	0x400204a0
 80032b4:	400204b8 	.word	0x400204b8
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d032      	beq.n	8003324 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f001 fd1a 	bl	8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d102      	bne.n	80032d2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032e6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_DMA_Init+0x6f2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d80c      	bhi.n	8003312 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 fd97 	bl	8004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	e008      	b.n	8003324 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e226      	b.n	80037a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_DMA_Start_IT+0x2a>
 8003362:	2302      	movs	r3, #2
 8003364:	e21f      	b.n	80037a6 <HAL_DMA_Start_IT+0x46a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 820a 	bne.w	8003790 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a68      	ldr	r2, [pc, #416]	; (8003530 <HAL_DMA_Start_IT+0x1f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a66      	ldr	r2, [pc, #408]	; (8003534 <HAL_DMA_Start_IT+0x1f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_DMA_Start_IT+0x1fc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a63      	ldr	r2, [pc, #396]	; (800353c <HAL_DMA_Start_IT+0x200>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a62      	ldr	r2, [pc, #392]	; (8003540 <HAL_DMA_Start_IT+0x204>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_DMA_Start_IT+0x208>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5f      	ldr	r2, [pc, #380]	; (8003548 <HAL_DMA_Start_IT+0x20c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5d      	ldr	r2, [pc, #372]	; (800354c <HAL_DMA_Start_IT+0x210>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_DMA_Start_IT+0x214>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_DMA_Start_IT+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a59      	ldr	r2, [pc, #356]	; (8003558 <HAL_DMA_Start_IT+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_DMA_Start_IT+0x220>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_DMA_Start_IT+0x224>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a54      	ldr	r2, [pc, #336]	; (8003564 <HAL_DMA_Start_IT+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a53      	ldr	r2, [pc, #332]	; (8003568 <HAL_DMA_Start_IT+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a51      	ldr	r2, [pc, #324]	; (800356c <HAL_DMA_Start_IT+0x230>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_DMA_Start_IT+0x100>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e007      	b.n	800344c <HAL_DMA_Start_IT+0x110>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f001 f93e 	bl	80046d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_DMA_Start_IT+0x1f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_DMA_Start_IT+0x1f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a31      	ldr	r2, [pc, #196]	; (8003538 <HAL_DMA_Start_IT+0x1fc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <HAL_DMA_Start_IT+0x200>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <HAL_DMA_Start_IT+0x204>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <HAL_DMA_Start_IT+0x208>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_DMA_Start_IT+0x20c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_DMA_Start_IT+0x210>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_DMA_Start_IT+0x214>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_DMA_Start_IT+0x218>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <HAL_DMA_Start_IT+0x21c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <HAL_DMA_Start_IT+0x220>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_DMA_Start_IT+0x224>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_DMA_Start_IT+0x228>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_DMA_Start_IT+0x22c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_DMA_Start_IT+0x230>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Start_IT+0x1c0>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_DMA_Start_IT+0x1c2>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d036      	beq.n	8003570 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 021e 	bic.w	r2, r3, #30
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0216 	orr.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03e      	beq.n	800359c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0208 	orr.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e035      	b.n	800359c <HAL_DMA_Start_IT+0x260>
 8003530:	40020010 	.word	0x40020010
 8003534:	40020028 	.word	0x40020028
 8003538:	40020040 	.word	0x40020040
 800353c:	40020058 	.word	0x40020058
 8003540:	40020070 	.word	0x40020070
 8003544:	40020088 	.word	0x40020088
 8003548:	400200a0 	.word	0x400200a0
 800354c:	400200b8 	.word	0x400200b8
 8003550:	40020410 	.word	0x40020410
 8003554:	40020428 	.word	0x40020428
 8003558:	40020440 	.word	0x40020440
 800355c:	40020458 	.word	0x40020458
 8003560:	40020470 	.word	0x40020470
 8003564:	40020488 	.word	0x40020488
 8003568:	400204a0 	.word	0x400204a0
 800356c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 020e 	bic.w	r2, r3, #14
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 020a 	orr.w	r2, r2, #10
 8003582:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0204 	orr.w	r2, r2, #4
 800359a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a83      	ldr	r2, [pc, #524]	; (80037b0 <HAL_DMA_Start_IT+0x474>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d072      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a82      	ldr	r2, [pc, #520]	; (80037b4 <HAL_DMA_Start_IT+0x478>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d06d      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_DMA_Start_IT+0x47c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d068      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7f      	ldr	r2, [pc, #508]	; (80037bc <HAL_DMA_Start_IT+0x480>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d063      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7d      	ldr	r2, [pc, #500]	; (80037c0 <HAL_DMA_Start_IT+0x484>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d05e      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7c      	ldr	r2, [pc, #496]	; (80037c4 <HAL_DMA_Start_IT+0x488>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d059      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7a      	ldr	r2, [pc, #488]	; (80037c8 <HAL_DMA_Start_IT+0x48c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d054      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a79      	ldr	r2, [pc, #484]	; (80037cc <HAL_DMA_Start_IT+0x490>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04f      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_DMA_Start_IT+0x494>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a76      	ldr	r2, [pc, #472]	; (80037d4 <HAL_DMA_Start_IT+0x498>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a74      	ldr	r2, [pc, #464]	; (80037d8 <HAL_DMA_Start_IT+0x49c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	; (80037dc <HAL_DMA_Start_IT+0x4a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <HAL_DMA_Start_IT+0x4a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <HAL_DMA_Start_IT+0x4a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_DMA_Start_IT+0x4ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6d      	ldr	r2, [pc, #436]	; (80037ec <HAL_DMA_Start_IT+0x4b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6b      	ldr	r2, [pc, #428]	; (80037f0 <HAL_DMA_Start_IT+0x4b4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6a      	ldr	r2, [pc, #424]	; (80037f4 <HAL_DMA_Start_IT+0x4b8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_DMA_Start_IT+0x4bc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_DMA_Start_IT+0x4c0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_DMA_Start_IT+0x4c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a64      	ldr	r2, [pc, #400]	; (8003804 <HAL_DMA_Start_IT+0x4c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a62      	ldr	r2, [pc, #392]	; (8003808 <HAL_DMA_Start_IT+0x4cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a61      	ldr	r2, [pc, #388]	; (800380c <HAL_DMA_Start_IT+0x4d0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Start_IT+0x354>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_Start_IT+0x356>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01a      	beq.n	80036cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <HAL_DMA_Start_IT+0x474>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04a      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <HAL_DMA_Start_IT+0x478>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d045      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a34      	ldr	r2, [pc, #208]	; (80037b8 <HAL_DMA_Start_IT+0x47c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d040      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_DMA_Start_IT+0x480>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03b      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <HAL_DMA_Start_IT+0x484>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <HAL_DMA_Start_IT+0x488>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d031      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2e      	ldr	r2, [pc, #184]	; (80037c8 <HAL_DMA_Start_IT+0x48c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02c      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_DMA_Start_IT+0x490>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d027      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <HAL_DMA_Start_IT+0x494>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <HAL_DMA_Start_IT+0x498>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01d      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_DMA_Start_IT+0x49c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_DMA_Start_IT+0x4a0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a25      	ldr	r2, [pc, #148]	; (80037e0 <HAL_DMA_Start_IT+0x4a4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_DMA_Start_IT+0x4a8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_DMA_Start_IT+0x4ac>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_DMA_Start_IT+0x4b0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <HAL_DMA_Start_IT+0x442>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e012      	b.n	80037a4 <HAL_DMA_Start_IT+0x468>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e009      	b.n	80037a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40020010 	.word	0x40020010
 80037b4:	40020028 	.word	0x40020028
 80037b8:	40020040 	.word	0x40020040
 80037bc:	40020058 	.word	0x40020058
 80037c0:	40020070 	.word	0x40020070
 80037c4:	40020088 	.word	0x40020088
 80037c8:	400200a0 	.word	0x400200a0
 80037cc:	400200b8 	.word	0x400200b8
 80037d0:	40020410 	.word	0x40020410
 80037d4:	40020428 	.word	0x40020428
 80037d8:	40020440 	.word	0x40020440
 80037dc:	40020458 	.word	0x40020458
 80037e0:	40020470 	.word	0x40020470
 80037e4:	40020488 	.word	0x40020488
 80037e8:	400204a0 	.word	0x400204a0
 80037ec:	400204b8 	.word	0x400204b8
 80037f0:	58025408 	.word	0x58025408
 80037f4:	5802541c 	.word	0x5802541c
 80037f8:	58025430 	.word	0x58025430
 80037fc:	58025444 	.word	0x58025444
 8003800:	58025458 	.word	0x58025458
 8003804:	5802546c 	.word	0x5802546c
 8003808:	58025480 	.word	0x58025480
 800380c:	58025494 	.word	0x58025494

08003810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800381c:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_DMA_IRQHandler+0x1ac>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <HAL_DMA_IRQHandler+0x1b0>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_DMA_IRQHandler+0x1b4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5d      	ldr	r2, [pc, #372]	; (80039c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5c      	ldr	r2, [pc, #368]	; (80039cc <HAL_DMA_IRQHandler+0x1bc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5a      	ldr	r2, [pc, #360]	; (80039d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a59      	ldr	r2, [pc, #356]	; (80039d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_DMA_IRQHandler+0x1c8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a56      	ldr	r2, [pc, #344]	; (80039dc <HAL_DMA_IRQHandler+0x1cc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <HAL_DMA_IRQHandler+0x1d0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a53      	ldr	r2, [pc, #332]	; (80039e4 <HAL_DMA_IRQHandler+0x1d4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_DMA_IRQHandler+0x1d8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_DMA_IRQHandler+0x1dc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4e      	ldr	r2, [pc, #312]	; (80039f0 <HAL_DMA_IRQHandler+0x1e0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4d      	ldr	r2, [pc, #308]	; (80039f4 <HAL_DMA_IRQHandler+0x1e4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_DMA_IRQHandler+0x1e8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <HAL_DMA_IRQHandler+0x1ec>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <HAL_DMA_IRQHandler+0x1f0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_IRQHandler+0xd6>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_DMA_IRQHandler+0xd8>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 842b 	beq.w	8004144 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2208      	movs	r2, #8
 80038f8:	409a      	lsls	r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a2 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <HAL_DMA_IRQHandler+0x1b4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d04a      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d045      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_IRQHandler+0x1bc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d040      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d03b      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d036      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <HAL_DMA_IRQHandler+0x1c8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d031      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_DMA_IRQHandler+0x1cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02c      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_DMA_IRQHandler+0x1d0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d027      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_DMA_IRQHandler+0x1d4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d022      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_DMA_IRQHandler+0x1d8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d01d      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_DMA_IRQHandler+0x1dc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_DMA_IRQHandler+0x1e4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_DMA_IRQHandler+0x1e8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_DMA_IRQHandler+0x1ec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <HAL_DMA_IRQHandler+0x1f0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d12f      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x1f4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e02e      	b.n	8003a18 <HAL_DMA_IRQHandler+0x208>
 80039ba:	bf00      	nop
 80039bc:	24000000 	.word	0x24000000
 80039c0:	1b4e81b5 	.word	0x1b4e81b5
 80039c4:	40020010 	.word	0x40020010
 80039c8:	40020028 	.word	0x40020028
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40020058 	.word	0x40020058
 80039d4:	40020070 	.word	0x40020070
 80039d8:	40020088 	.word	0x40020088
 80039dc:	400200a0 	.word	0x400200a0
 80039e0:	400200b8 	.word	0x400200b8
 80039e4:	40020410 	.word	0x40020410
 80039e8:	40020428 	.word	0x40020428
 80039ec:	40020440 	.word	0x40020440
 80039f0:	40020458 	.word	0x40020458
 80039f4:	40020470 	.word	0x40020470
 80039f8:	40020488 	.word	0x40020488
 80039fc:	400204a0 	.word	0x400204a0
 8003a00:	400204b8 	.word	0x400204b8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2208      	movs	r2, #8
 8003a36:	409a      	lsls	r2, r3
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06e      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <HAL_DMA_IRQHandler+0x3f8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a67      	ldr	r2, [pc, #412]	; (8003c0c <HAL_DMA_IRQHandler+0x3fc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_DMA_IRQHandler+0x400>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a64      	ldr	r2, [pc, #400]	; (8003c14 <HAL_DMA_IRQHandler+0x404>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_DMA_IRQHandler+0x408>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_DMA_IRQHandler+0x40c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <HAL_DMA_IRQHandler+0x410>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5e      	ldr	r2, [pc, #376]	; (8003c24 <HAL_DMA_IRQHandler+0x414>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_DMA_IRQHandler+0x418>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <HAL_DMA_IRQHandler+0x41c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5a      	ldr	r2, [pc, #360]	; (8003c30 <HAL_DMA_IRQHandler+0x420>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_DMA_IRQHandler+0x424>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_DMA_IRQHandler+0x428>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_DMA_IRQHandler+0x42c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_DMA_IRQHandler+0x430>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_DMA_IRQHandler+0x434>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10a      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x304>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e003      	b.n	8003b1c <HAL_DMA_IRQHandler+0x30c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 808f 	beq.w	8003c70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <HAL_DMA_IRQHandler+0x3f8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d04a      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <HAL_DMA_IRQHandler+0x3fc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d045      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_DMA_IRQHandler+0x400>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d040      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <HAL_DMA_IRQHandler+0x404>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d03b      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_DMA_IRQHandler+0x408>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_DMA_IRQHandler+0x40c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d031      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_DMA_IRQHandler+0x410>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d02c      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <HAL_DMA_IRQHandler+0x414>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <HAL_DMA_IRQHandler+0x418>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_DMA_IRQHandler+0x41c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_DMA_IRQHandler+0x420>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_DMA_IRQHandler+0x424>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_DMA_IRQHandler+0x428>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_DMA_IRQHandler+0x42c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_DMA_IRQHandler+0x430>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_DMA_IRQHandler+0x434>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d12a      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x438>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e023      	b.n	8003c50 <HAL_DMA_IRQHandler+0x440>
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2210      	movs	r2, #16
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a6 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a85      	ldr	r2, [pc, #532]	; (8003ea0 <HAL_DMA_IRQHandler+0x690>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a83      	ldr	r2, [pc, #524]	; (8003ea4 <HAL_DMA_IRQHandler+0x694>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a82      	ldr	r2, [pc, #520]	; (8003ea8 <HAL_DMA_IRQHandler+0x698>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a80      	ldr	r2, [pc, #512]	; (8003eac <HAL_DMA_IRQHandler+0x69c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7f      	ldr	r2, [pc, #508]	; (8003eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7d      	ldr	r2, [pc, #500]	; (8003eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7c      	ldr	r2, [pc, #496]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7a      	ldr	r2, [pc, #488]	; (8003ebc <HAL_DMA_IRQHandler+0x6ac>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a79      	ldr	r2, [pc, #484]	; (8003ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a77      	ldr	r2, [pc, #476]	; (8003ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a76      	ldr	r2, [pc, #472]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <HAL_DMA_IRQHandler+0x6bc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a70      	ldr	r2, [pc, #448]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	; (8003edc <HAL_DMA_IRQHandler+0x6cc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10a      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x52c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e009      	b.n	8003d50 <HAL_DMA_IRQHandler+0x540>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03e      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d018      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d024      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e01f      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	e016      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0208 	bic.w	r2, r2, #8
 8003dc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2220      	movs	r2, #32
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8110 	beq.w	8004008 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_DMA_IRQHandler+0x690>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_DMA_IRQHandler+0x694>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_DMA_IRQHandler+0x698>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_DMA_IRQHandler+0x69c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <HAL_DMA_IRQHandler+0x6ac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_DMA_IRQHandler+0x6bc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_DMA_IRQHandler+0x6cc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12b      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x6d0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e02a      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x6e4>
 8003e9e:	bf00      	nop
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8087 	beq.w	8004008 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d139      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x736>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	223f      	movs	r2, #63	; 0x3f
 8003f60:	409a      	lsls	r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8382 	beq.w	8004684 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
          }
          return;
 8003f88:	e37c      	b.n	8004684 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	e027      	b.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e01e      	b.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0210 	bic.w	r2, r2, #16
 8003fe6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 833e 	beq.w	800468e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8088 	beq.w	8004130 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a89      	ldr	r2, [pc, #548]	; (8004254 <HAL_DMA_IRQHandler+0xa44>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04a      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a88      	ldr	r2, [pc, #544]	; (8004258 <HAL_DMA_IRQHandler+0xa48>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d045      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a86      	ldr	r2, [pc, #536]	; (800425c <HAL_DMA_IRQHandler+0xa4c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a85      	ldr	r2, [pc, #532]	; (8004260 <HAL_DMA_IRQHandler+0xa50>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03b      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a83      	ldr	r2, [pc, #524]	; (8004264 <HAL_DMA_IRQHandler+0xa54>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d036      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a82      	ldr	r2, [pc, #520]	; (8004268 <HAL_DMA_IRQHandler+0xa58>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_DMA_IRQHandler+0xa5c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7f      	ldr	r2, [pc, #508]	; (8004270 <HAL_DMA_IRQHandler+0xa60>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d027      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <HAL_DMA_IRQHandler+0xa64>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_DMA_IRQHandler+0xa68>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7a      	ldr	r2, [pc, #488]	; (800427c <HAL_DMA_IRQHandler+0xa6c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a79      	ldr	r2, [pc, #484]	; (8004280 <HAL_DMA_IRQHandler+0xa70>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a77      	ldr	r2, [pc, #476]	; (8004284 <HAL_DMA_IRQHandler+0xa74>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a76      	ldr	r2, [pc, #472]	; (8004288 <HAL_DMA_IRQHandler+0xa78>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a74      	ldr	r2, [pc, #464]	; (800428c <HAL_DMA_IRQHandler+0xa7c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a73      	ldr	r2, [pc, #460]	; (8004290 <HAL_DMA_IRQHandler+0xa80>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <HAL_DMA_IRQHandler+0x8ca>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e007      	b.n	80040ea <HAL_DMA_IRQHandler+0x8da>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d307      	bcc.n	8004106 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f2      	bne.n	80040ea <HAL_DMA_IRQHandler+0x8da>
 8004104:	e000      	b.n	8004108 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004106:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800411e:	e003      	b.n	8004128 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 82aa 	beq.w	800468e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e2a4      	b.n	800468e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_DMA_IRQHandler+0xa84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d04a      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a51      	ldr	r2, [pc, #324]	; (8004298 <HAL_DMA_IRQHandler+0xa88>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d045      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a4f      	ldr	r2, [pc, #316]	; (800429c <HAL_DMA_IRQHandler+0xa8c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d040      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <HAL_DMA_IRQHandler+0xa90>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d03b      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a4c      	ldr	r2, [pc, #304]	; (80042a4 <HAL_DMA_IRQHandler+0xa94>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d036      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a4b      	ldr	r2, [pc, #300]	; (80042a8 <HAL_DMA_IRQHandler+0xa98>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d031      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a49      	ldr	r2, [pc, #292]	; (80042ac <HAL_DMA_IRQHandler+0xa9c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02c      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a48      	ldr	r2, [pc, #288]	; (80042b0 <HAL_DMA_IRQHandler+0xaa0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d027      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <HAL_DMA_IRQHandler+0xaa4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d022      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a45      	ldr	r2, [pc, #276]	; (80042b8 <HAL_DMA_IRQHandler+0xaa8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d01d      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a43      	ldr	r2, [pc, #268]	; (80042bc <HAL_DMA_IRQHandler+0xaac>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a42      	ldr	r2, [pc, #264]	; (80042c0 <HAL_DMA_IRQHandler+0xab0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_DMA_IRQHandler+0xab4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <HAL_DMA_IRQHandler+0xab8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <HAL_DMA_IRQHandler+0xabc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x9d4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_DMA_IRQHandler+0xac0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x9d8>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_DMA_IRQHandler+0x9da>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 824f 	beq.w	800468e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2204      	movs	r2, #4
 8004202:	409a      	lsls	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80dd 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xbb8>
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80d7 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2204      	movs	r2, #4
 8004224:	409a      	lsls	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d059      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d14a      	bne.n	80042d4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8220 	beq.w	8004688 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004250:	e21a      	b.n	8004688 <HAL_DMA_IRQHandler+0xe78>
 8004252:	bf00      	nop
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	48022c08 	.word	0x48022c08
 8004298:	48022c1c 	.word	0x48022c1c
 800429c:	48022c30 	.word	0x48022c30
 80042a0:	48022c44 	.word	0x48022c44
 80042a4:	48022c58 	.word	0x48022c58
 80042a8:	48022c6c 	.word	0x48022c6c
 80042ac:	48022c80 	.word	0x48022c80
 80042b0:	48022c94 	.word	0x48022c94
 80042b4:	58025408 	.word	0x58025408
 80042b8:	5802541c 	.word	0x5802541c
 80042bc:	58025430 	.word	0x58025430
 80042c0:	58025444 	.word	0x58025444
 80042c4:	58025458 	.word	0x58025458
 80042c8:	5802546c 	.word	0x5802546c
 80042cc:	58025480 	.word	0x58025480
 80042d0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 81d5 	beq.w	8004688 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e6:	e1cf      	b.n	8004688 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d160      	bne.n	80043b4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7f      	ldr	r2, [pc, #508]	; (80044f4 <HAL_DMA_IRQHandler+0xce4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04a      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7d      	ldr	r2, [pc, #500]	; (80044f8 <HAL_DMA_IRQHandler+0xce8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d045      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7c      	ldr	r2, [pc, #496]	; (80044fc <HAL_DMA_IRQHandler+0xcec>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d040      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7a      	ldr	r2, [pc, #488]	; (8004500 <HAL_DMA_IRQHandler+0xcf0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a79      	ldr	r2, [pc, #484]	; (8004504 <HAL_DMA_IRQHandler+0xcf4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d036      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a77      	ldr	r2, [pc, #476]	; (8004508 <HAL_DMA_IRQHandler+0xcf8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a76      	ldr	r2, [pc, #472]	; (800450c <HAL_DMA_IRQHandler+0xcfc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d02c      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_DMA_IRQHandler+0xd00>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	; (8004514 <HAL_DMA_IRQHandler+0xd04>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a71      	ldr	r2, [pc, #452]	; (8004518 <HAL_DMA_IRQHandler+0xd08>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a70      	ldr	r2, [pc, #448]	; (800451c <HAL_DMA_IRQHandler+0xd0c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_DMA_IRQHandler+0xd10>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_DMA_IRQHandler+0xd14>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <HAL_DMA_IRQHandler+0xd18>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_DMA_IRQHandler+0xd1c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_IRQHandler+0xb82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_DMA_IRQHandler+0xd20>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d108      	bne.n	80043a4 <HAL_DMA_IRQHandler+0xb94>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0208 	bic.w	r2, r2, #8
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e007      	b.n	80043b4 <HAL_DMA_IRQHandler+0xba4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8165 	beq.w	8004688 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c6:	e15f      	b.n	8004688 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2202      	movs	r2, #2
 80043d2:	409a      	lsls	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80c5 	beq.w	8004568 <HAL_DMA_IRQHandler+0xd58>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80bf 	beq.w	8004568 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2202      	movs	r2, #2
 80043f4:	409a      	lsls	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d018      	beq.n	8004436 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 813a 	beq.w	800468c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004420:	e134      	b.n	800468c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8130 	beq.w	800468c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004434:	e12a      	b.n	800468c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	f040 8089 	bne.w	8004554 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2b      	ldr	r2, [pc, #172]	; (80044f4 <HAL_DMA_IRQHandler+0xce4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d04a      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <HAL_DMA_IRQHandler+0xce8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d045      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a28      	ldr	r2, [pc, #160]	; (80044fc <HAL_DMA_IRQHandler+0xcec>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d040      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <HAL_DMA_IRQHandler+0xcf0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d03b      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a25      	ldr	r2, [pc, #148]	; (8004504 <HAL_DMA_IRQHandler+0xcf4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d036      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_DMA_IRQHandler+0xcf8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d031      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a22      	ldr	r2, [pc, #136]	; (800450c <HAL_DMA_IRQHandler+0xcfc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d02c      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_DMA_IRQHandler+0xd00>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d027      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <HAL_DMA_IRQHandler+0xd04>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_DMA_IRQHandler+0xd08>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01d      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <HAL_DMA_IRQHandler+0xd0c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_DMA_IRQHandler+0xd10>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_DMA_IRQHandler+0xd14>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <HAL_DMA_IRQHandler+0xd18>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a16      	ldr	r2, [pc, #88]	; (800452c <HAL_DMA_IRQHandler+0xd1c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xcd2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <HAL_DMA_IRQHandler+0xd20>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d128      	bne.n	8004534 <HAL_DMA_IRQHandler+0xd24>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0214 	bic.w	r2, r2, #20
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e027      	b.n	8004544 <HAL_DMA_IRQHandler+0xd34>
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020a 	bic.w	r2, r2, #10
 8004542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8097 	beq.w	800468c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004566:	e091      	b.n	800468c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	2208      	movs	r2, #8
 8004572:	409a      	lsls	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8088 	beq.w	800468e <HAL_DMA_IRQHandler+0xe7e>
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8082 	beq.w	800468e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a41      	ldr	r2, [pc, #260]	; (8004694 <HAL_DMA_IRQHandler+0xe84>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d04a      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <HAL_DMA_IRQHandler+0xe88>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d045      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3e      	ldr	r2, [pc, #248]	; (800469c <HAL_DMA_IRQHandler+0xe8c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d040      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <HAL_DMA_IRQHandler+0xe90>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d03b      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <HAL_DMA_IRQHandler+0xe94>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d036      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <HAL_DMA_IRQHandler+0xe98>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d031      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a38      	ldr	r2, [pc, #224]	; (80046ac <HAL_DMA_IRQHandler+0xe9c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d02c      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a36      	ldr	r2, [pc, #216]	; (80046b0 <HAL_DMA_IRQHandler+0xea0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d027      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <HAL_DMA_IRQHandler+0xea4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <HAL_DMA_IRQHandler+0xea8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a32      	ldr	r2, [pc, #200]	; (80046bc <HAL_DMA_IRQHandler+0xeac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a30      	ldr	r2, [pc, #192]	; (80046c0 <HAL_DMA_IRQHandler+0xeb0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <HAL_DMA_IRQHandler+0xeb4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <HAL_DMA_IRQHandler+0xeb8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <HAL_DMA_IRQHandler+0xebc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_DMA_IRQHandler+0xe1a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_DMA_IRQHandler+0xec0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <HAL_DMA_IRQHandler+0xe2c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 021c 	bic.w	r2, r2, #28
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e007      	b.n	800464c <HAL_DMA_IRQHandler+0xe3c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 020e 	bic.w	r2, r2, #14
 800464a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
 8004682:	e004      	b.n	800468e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40020010 	.word	0x40020010
 8004698:	40020028 	.word	0x40020028
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020058 	.word	0x40020058
 80046a4:	40020070 	.word	0x40020070
 80046a8:	40020088 	.word	0x40020088
 80046ac:	400200a0 	.word	0x400200a0
 80046b0:	400200b8 	.word	0x400200b8
 80046b4:	40020410 	.word	0x40020410
 80046b8:	40020428 	.word	0x40020428
 80046bc:	40020440 	.word	0x40020440
 80046c0:	40020458 	.word	0x40020458
 80046c4:	40020470 	.word	0x40020470
 80046c8:	40020488 	.word	0x40020488
 80046cc:	400204a0 	.word	0x400204a0
 80046d0:	400204b8 	.word	0x400204b8

080046d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7f      	ldr	r2, [pc, #508]	; (80048f0 <DMA_SetConfig+0x21c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d072      	beq.n	80047de <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a7d      	ldr	r2, [pc, #500]	; (80048f4 <DMA_SetConfig+0x220>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d06d      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <DMA_SetConfig+0x224>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d068      	beq.n	80047de <DMA_SetConfig+0x10a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <DMA_SetConfig+0x228>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d063      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a79      	ldr	r2, [pc, #484]	; (8004900 <DMA_SetConfig+0x22c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d05e      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a77      	ldr	r2, [pc, #476]	; (8004904 <DMA_SetConfig+0x230>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d059      	beq.n	80047de <DMA_SetConfig+0x10a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a76      	ldr	r2, [pc, #472]	; (8004908 <DMA_SetConfig+0x234>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d054      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a74      	ldr	r2, [pc, #464]	; (800490c <DMA_SetConfig+0x238>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d04f      	beq.n	80047de <DMA_SetConfig+0x10a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a73      	ldr	r2, [pc, #460]	; (8004910 <DMA_SetConfig+0x23c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04a      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a71      	ldr	r2, [pc, #452]	; (8004914 <DMA_SetConfig+0x240>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d045      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a70      	ldr	r2, [pc, #448]	; (8004918 <DMA_SetConfig+0x244>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6e      	ldr	r2, [pc, #440]	; (800491c <DMA_SetConfig+0x248>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6d      	ldr	r2, [pc, #436]	; (8004920 <DMA_SetConfig+0x24c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d036      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <DMA_SetConfig+0x250>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6a      	ldr	r2, [pc, #424]	; (8004928 <DMA_SetConfig+0x254>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d02c      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a68      	ldr	r2, [pc, #416]	; (800492c <DMA_SetConfig+0x258>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d027      	beq.n	80047de <DMA_SetConfig+0x10a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a67      	ldr	r2, [pc, #412]	; (8004930 <DMA_SetConfig+0x25c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <DMA_SetConfig+0x10a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a65      	ldr	r2, [pc, #404]	; (8004934 <DMA_SetConfig+0x260>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a64      	ldr	r2, [pc, #400]	; (8004938 <DMA_SetConfig+0x264>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a62      	ldr	r2, [pc, #392]	; (800493c <DMA_SetConfig+0x268>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a61      	ldr	r2, [pc, #388]	; (8004940 <DMA_SetConfig+0x26c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5f      	ldr	r2, [pc, #380]	; (8004944 <DMA_SetConfig+0x270>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5e      	ldr	r2, [pc, #376]	; (8004948 <DMA_SetConfig+0x274>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <DMA_SetConfig+0x10a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5c      	ldr	r2, [pc, #368]	; (800494c <DMA_SetConfig+0x278>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <DMA_SetConfig+0x10e>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <DMA_SetConfig+0x110>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004802:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a39      	ldr	r2, [pc, #228]	; (80048f0 <DMA_SetConfig+0x21c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d04a      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	; (80048f4 <DMA_SetConfig+0x220>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d045      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	; (80048f8 <DMA_SetConfig+0x224>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d040      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	; (80048fc <DMA_SetConfig+0x228>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d03b      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	; (8004900 <DMA_SetConfig+0x22c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d036      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	; (8004904 <DMA_SetConfig+0x230>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d031      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <DMA_SetConfig+0x234>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02c      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	; (800490c <DMA_SetConfig+0x238>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d027      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <DMA_SetConfig+0x23c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d022      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2c      	ldr	r2, [pc, #176]	; (8004914 <DMA_SetConfig+0x240>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d01d      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <DMA_SetConfig+0x244>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d018      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a29      	ldr	r2, [pc, #164]	; (800491c <DMA_SetConfig+0x248>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a27      	ldr	r2, [pc, #156]	; (8004920 <DMA_SetConfig+0x24c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a26      	ldr	r2, [pc, #152]	; (8004924 <DMA_SetConfig+0x250>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d009      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <DMA_SetConfig+0x254>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <DMA_SetConfig+0x1d0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a23      	ldr	r2, [pc, #140]	; (800492c <DMA_SetConfig+0x258>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <DMA_SetConfig+0x1d4>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <DMA_SetConfig+0x1d6>
 80048a8:	2300      	movs	r3, #0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d059      	beq.n	8004962 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	223f      	movs	r2, #63	; 0x3f
 80048b8:	409a      	lsls	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d138      	bne.n	8004950 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ee:	e0ae      	b.n	8004a4e <DMA_SetConfig+0x37a>
 80048f0:	40020010 	.word	0x40020010
 80048f4:	40020028 	.word	0x40020028
 80048f8:	40020040 	.word	0x40020040
 80048fc:	40020058 	.word	0x40020058
 8004900:	40020070 	.word	0x40020070
 8004904:	40020088 	.word	0x40020088
 8004908:	400200a0 	.word	0x400200a0
 800490c:	400200b8 	.word	0x400200b8
 8004910:	40020410 	.word	0x40020410
 8004914:	40020428 	.word	0x40020428
 8004918:	40020440 	.word	0x40020440
 800491c:	40020458 	.word	0x40020458
 8004920:	40020470 	.word	0x40020470
 8004924:	40020488 	.word	0x40020488
 8004928:	400204a0 	.word	0x400204a0
 800492c:	400204b8 	.word	0x400204b8
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	60da      	str	r2, [r3, #12]
}
 8004960:	e075      	b.n	8004a4e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a3d      	ldr	r2, [pc, #244]	; (8004a5c <DMA_SetConfig+0x388>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d04a      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3b      	ldr	r2, [pc, #236]	; (8004a60 <DMA_SetConfig+0x38c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d045      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <DMA_SetConfig+0x390>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d040      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <DMA_SetConfig+0x394>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d03b      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a37      	ldr	r2, [pc, #220]	; (8004a6c <DMA_SetConfig+0x398>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d036      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <DMA_SetConfig+0x39c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d031      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <DMA_SetConfig+0x3a0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02c      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a32      	ldr	r2, [pc, #200]	; (8004a78 <DMA_SetConfig+0x3a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d027      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <DMA_SetConfig+0x3a8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <DMA_SetConfig+0x3ac>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <DMA_SetConfig+0x3b0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <DMA_SetConfig+0x3b4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <DMA_SetConfig+0x3b8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <DMA_SetConfig+0x3bc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <DMA_SetConfig+0x3c0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <DMA_SetConfig+0x32e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <DMA_SetConfig+0x3c4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <DMA_SetConfig+0x332>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <DMA_SetConfig+0x334>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2201      	movs	r2, #1
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d108      	bne.n	8004a3e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	60da      	str	r2, [r3, #12]
}
 8004a3c:	e007      	b.n	8004a4e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	48022c08 	.word	0x48022c08
 8004a60:	48022c1c 	.word	0x48022c1c
 8004a64:	48022c30 	.word	0x48022c30
 8004a68:	48022c44 	.word	0x48022c44
 8004a6c:	48022c58 	.word	0x48022c58
 8004a70:	48022c6c 	.word	0x48022c6c
 8004a74:	48022c80 	.word	0x48022c80
 8004a78:	48022c94 	.word	0x48022c94
 8004a7c:	58025408 	.word	0x58025408
 8004a80:	5802541c 	.word	0x5802541c
 8004a84:	58025430 	.word	0x58025430
 8004a88:	58025444 	.word	0x58025444
 8004a8c:	58025458 	.word	0x58025458
 8004a90:	5802546c 	.word	0x5802546c
 8004a94:	58025480 	.word	0x58025480
 8004a98:	58025494 	.word	0x58025494

08004a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a42      	ldr	r2, [pc, #264]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x118>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d04a      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a41      	ldr	r2, [pc, #260]	; (8004bb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d045      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3f      	ldr	r2, [pc, #252]	; (8004bbc <DMA_CalcBaseAndBitshift+0x120>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d040      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3e      	ldr	r2, [pc, #248]	; (8004bc0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d03b      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d036      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3b      	ldr	r2, [pc, #236]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d031      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a39      	ldr	r2, [pc, #228]	; (8004bcc <DMA_CalcBaseAndBitshift+0x130>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02c      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x134>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d027      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x138>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01d      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <DMA_CalcBaseAndBitshift+0x140>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <DMA_CalcBaseAndBitshift+0x144>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <DMA_CalcBaseAndBitshift+0x148>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <DMA_CalcBaseAndBitshift+0x150>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x154>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <DMA_CalcBaseAndBitshift+0xac>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <DMA_CalcBaseAndBitshift+0xae>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d024      	beq.n	8004b98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3b10      	subs	r3, #16
 8004b56:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x158>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	4a24      	ldr	r2, [pc, #144]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d908      	bls.n	8004b88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <DMA_CalcBaseAndBitshift+0x160>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	659a      	str	r2, [r3, #88]	; 0x58
 8004b86:	e00d      	b.n	8004ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <DMA_CalcBaseAndBitshift+0x160>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6593      	str	r3, [r2, #88]	; 0x58
 8004b96:	e005      	b.n	8004ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40020010 	.word	0x40020010
 8004bb8:	40020028 	.word	0x40020028
 8004bbc:	40020040 	.word	0x40020040
 8004bc0:	40020058 	.word	0x40020058
 8004bc4:	40020070 	.word	0x40020070
 8004bc8:	40020088 	.word	0x40020088
 8004bcc:	400200a0 	.word	0x400200a0
 8004bd0:	400200b8 	.word	0x400200b8
 8004bd4:	40020410 	.word	0x40020410
 8004bd8:	40020428 	.word	0x40020428
 8004bdc:	40020440 	.word	0x40020440
 8004be0:	40020458 	.word	0x40020458
 8004be4:	40020470 	.word	0x40020470
 8004be8:	40020488 	.word	0x40020488
 8004bec:	400204a0 	.word	0x400204a0
 8004bf0:	400204b8 	.word	0x400204b8
 8004bf4:	aaaaaaab 	.word	0xaaaaaaab
 8004bf8:	0800944c 	.word	0x0800944c
 8004bfc:	fffffc00 	.word	0xfffffc00

08004c00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d120      	bne.n	8004c56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d858      	bhi.n	8004cce <DMA_CheckFifoParam+0xce>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <DMA_CheckFifoParam+0x24>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c47 	.word	0x08004c47
 8004c2c:	08004c35 	.word	0x08004c35
 8004c30:	08004ccf 	.word	0x08004ccf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d048      	beq.n	8004cd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c44:	e045      	b.n	8004cd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c4e:	d142      	bne.n	8004cd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c54:	e03f      	b.n	8004cd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5e:	d123      	bne.n	8004ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d838      	bhi.n	8004cda <DMA_CheckFifoParam+0xda>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <DMA_CheckFifoParam+0x70>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c87 	.word	0x08004c87
 8004c78:	08004c81 	.word	0x08004c81
 8004c7c:	08004c99 	.word	0x08004c99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
        break;
 8004c84:	e030      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d025      	beq.n	8004cde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c96:	e022      	b.n	8004cde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca0:	d11f      	bne.n	8004ce2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ca6:	e01c      	b.n	8004ce2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d902      	bls.n	8004cb6 <DMA_CheckFifoParam+0xb6>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d003      	beq.n	8004cbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cb4:	e018      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cba:	e015      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
    break;
 8004ccc:	e00b      	b.n	8004ce6 <DMA_CheckFifoParam+0xe6>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e00a      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cd2:	bf00      	nop
 8004cd4:	e008      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e006      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e004      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ce6:	bf00      	nop
    }
  }

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a38      	ldr	r2, [pc, #224]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a36      	ldr	r2, [pc, #216]	; (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a35      	ldr	r2, [pc, #212]	; (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a30      	ldr	r2, [pc, #192]	; (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2f      	ldr	r2, [pc, #188]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3b08      	subs	r3, #8
 8004d68:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d94:	e024      	b.n	8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	3b10      	subs	r3, #16
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d806      	bhi.n	8004dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d902      	bls.n	8004dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3308      	adds	r3, #8
 8004dbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004dd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2201      	movs	r2, #1
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	58025408 	.word	0x58025408
 8004df0:	5802541c 	.word	0x5802541c
 8004df4:	58025430 	.word	0x58025430
 8004df8:	58025444 	.word	0x58025444
 8004dfc:	58025458 	.word	0x58025458
 8004e00:	5802546c 	.word	0x5802546c
 8004e04:	58025480 	.word	0x58025480
 8004e08:	58025494 	.word	0x58025494
 8004e0c:	cccccccd 	.word	0xcccccccd
 8004e10:	16009600 	.word	0x16009600
 8004e14:	58025880 	.word	0x58025880
 8004e18:	aaaaaaab 	.word	0xaaaaaaab
 8004e1c:	400204b8 	.word	0x400204b8
 8004e20:	4002040f 	.word	0x4002040f
 8004e24:	10008200 	.word	0x10008200
 8004e28:	40020880 	.word	0x40020880

08004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04a      	beq.n	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d847      	bhi.n	8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d01d      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a22      	ldr	r2, [pc, #136]	; (8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004eb4:	671a      	str	r2, [r3, #112]	; 0x70
 8004eb6:	e009      	b.n	8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004eca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	58025408 	.word	0x58025408
 8004ee8:	5802541c 	.word	0x5802541c
 8004eec:	58025430 	.word	0x58025430
 8004ef0:	58025444 	.word	0x58025444
 8004ef4:	58025458 	.word	0x58025458
 8004ef8:	5802546c 	.word	0x5802546c
 8004efc:	58025480 	.word	0x58025480
 8004f00:	58025494 	.word	0x58025494
 8004f04:	1600963f 	.word	0x1600963f
 8004f08:	58025940 	.word	0x58025940
 8004f0c:	1000823f 	.word	0x1000823f
 8004f10:	40020940 	.word	0x40020940

08004f14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b098      	sub	sp, #96	; 0x60
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004f1c:	4a84      	ldr	r2, [pc, #528]	; (8005130 <HAL_FDCAN_Init+0x21c>)
 8004f1e:	f107 030c 	add.w	r3, r7, #12
 8004f22:	4611      	mov	r1, r2
 8004f24:	224c      	movs	r2, #76	; 0x4c
 8004f26:	4618      	mov	r0, r3
 8004f28:	f004 fa48 	bl	80093bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1c6      	b.n	80052c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7e      	ldr	r2, [pc, #504]	; (8005134 <HAL_FDCAN_Init+0x220>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d106      	bne.n	8004f4e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc f826 	bl	8000fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f78:	f7fc fb82 	bl	8001680 <HAL_GetTick>
 8004f7c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f7e:	e014      	b.n	8004faa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f80:	f7fc fb7e 	bl	8001680 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b0a      	cmp	r3, #10
 8004f8c:	d90d      	bls.n	8004faa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e18c      	b.n	80052c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d0e3      	beq.n	8004f80 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc8:	f7fc fb5a 	bl	8001680 <HAL_GetTick>
 8004fcc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fce:	e014      	b.n	8004ffa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004fd0:	f7fc fb56 	bl	8001680 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b0a      	cmp	r3, #10
 8004fdc:	d90d      	bls.n	8004ffa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e164      	b.n	80052c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0e3      	beq.n	8004fd0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0202 	orr.w	r2, r2, #2
 8005016:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	7c1b      	ldrb	r3, [r3, #16]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502e:	619a      	str	r2, [r3, #24]
 8005030:	e007      	b.n	8005042 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005040:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7c5b      	ldrb	r3, [r3, #17]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d108      	bne.n	800505c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	e007      	b.n	800506c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800506a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7c9b      	ldrb	r3, [r3, #18]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d108      	bne.n	8005086 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005082:	619a      	str	r2, [r3, #24]
 8005084:	e007      	b.n	8005096 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005094:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80050ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d108      	bne.n	80050e6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0204 	orr.w	r2, r2, #4
 80050e2:	619a      	str	r2, [r3, #24]
 80050e4:	e030      	b.n	8005148 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02c      	beq.n	8005148 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d020      	beq.n	8005138 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005104:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0210 	orr.w	r2, r2, #16
 8005114:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d114      	bne.n	8005148 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	619a      	str	r2, [r3, #24]
 800512e:	e00b      	b.n	8005148 <HAL_FDCAN_Init+0x234>
 8005130:	080093f0 	.word	0x080093f0
 8005134:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0220 	orr.w	r2, r2, #32
 8005146:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	3b01      	subs	r3, #1
 800514e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	3b01      	subs	r3, #1
 8005156:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005158:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005160:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	3b01      	subs	r3, #1
 800516a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005170:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005172:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d115      	bne.n	80051aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	3b01      	subs	r3, #1
 800518a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800518c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	3b01      	subs	r3, #1
 8005194:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005196:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	3b01      	subs	r3, #1
 80051a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80051a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80051a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	4413      	add	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d011      	beq.n	80051fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80051de:	f023 0107 	bic.w	r1, r3, #7
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3360      	adds	r3, #96	; 0x60
 80051ea:	443b      	add	r3, r7
 80051ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800520a:	f023 0107 	bic.w	r1, r3, #7
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3360      	adds	r3, #96	; 0x60
 8005216:	443b      	add	r3, r7
 8005218:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005236:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	3360      	adds	r3, #96	; 0x60
 8005242:	443b      	add	r3, r7
 8005244:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	2b00      	cmp	r3, #0
 800525a:	d012      	beq.n	8005282 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005264:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	3360      	adds	r3, #96	; 0x60
 8005270:	443b      	add	r3, r7
 8005272:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a11      	ldr	r2, [pc, #68]	; (80052cc <HAL_FDCAN_Init+0x3b8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d107      	bne.n	800529c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f022 0203 	bic.w	r2, r2, #3
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f80b 	bl	80052d0 <FDCAN_CalcultateRamBlockAddresses>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80052c0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3760      	adds	r7, #96	; 0x60
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	4000a000 	.word	0x4000a000

080052d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052e6:	4ba7      	ldr	r3, [pc, #668]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	0091      	lsls	r1, r2, #2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	041a      	lsls	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005326:	4b97      	ldr	r3, [pc, #604]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005328:	4013      	ands	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	0091      	lsls	r1, r2, #2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	430b      	orrs	r3, r1
 8005334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	041a      	lsls	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005368:	4b86      	ldr	r3, [pc, #536]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0091      	lsls	r1, r2, #2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	430b      	orrs	r3, r1
 8005376:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005382:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	041a      	lsls	r2, r3, #16
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4413      	add	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053b0:	4b74      	ldr	r3, [pc, #464]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	0091      	lsls	r1, r2, #2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	430b      	orrs	r3, r1
 80053be:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d2:	041a      	lsls	r2, r3, #16
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053f8:	4b62      	ldr	r3, [pc, #392]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0091      	lsls	r1, r2, #2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	0091      	lsls	r1, r2, #2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	430b      	orrs	r3, r1
 8005432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	041a      	lsls	r2, r3, #16
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	4413      	add	r3, r2
 800545c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005468:	4013      	ands	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0091      	lsls	r1, r2, #2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	430b      	orrs	r3, r1
 8005474:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005480:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800549c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	061a      	lsls	r2, r3, #24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b4:	4b34      	ldr	r3, [pc, #208]	; (8005588 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80054b6:	4413      	add	r3, r2
 80054b8:	009a      	lsls	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d915      	bls.n	80055ac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005580:	e006      	b.n	8005590 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005582:	bf00      	nop
 8005584:	ffff0003 	.word	0xffff0003
 8005588:	10002b00 	.word	0x10002b00
 800558c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2203      	movs	r2, #3
 80055a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e010      	b.n	80055ce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e005      	b.n	80055c0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d3f3      	bcc.n	80055b4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055ea:	4b89      	ldr	r3, [pc, #548]	; (8005810 <HAL_GPIO_Init+0x234>)
 80055ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ee:	e194      	b.n	800591a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2101      	movs	r1, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8186 	beq.w	8005914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d005      	beq.n	8005620 <HAL_GPIO_Init+0x44>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d130      	bne.n	8005682 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	2203      	movs	r2, #3
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005656:	2201      	movs	r2, #1
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 0201 	and.w	r2, r3, #1
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d017      	beq.n	80056be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d123      	bne.n	8005712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	08da      	lsrs	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3208      	adds	r2, #8
 80056d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	220f      	movs	r2, #15
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43db      	mvns	r3, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4013      	ands	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	08da      	lsrs	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3208      	adds	r2, #8
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	2203      	movs	r2, #3
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 0203 	and.w	r2, r3, #3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80e0 	beq.w	8005914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005754:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_GPIO_Init+0x238>)
 8005756:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <HAL_GPIO_Init+0x238>)
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005764:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <HAL_GPIO_Init+0x238>)
 8005766:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_GPIO_Init+0x23c>)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	220f      	movs	r2, #15
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_GPIO_Init+0x240>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d052      	beq.n	8005844 <HAL_GPIO_Init+0x268>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_GPIO_Init+0x244>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_GPIO_Init+0x22e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_GPIO_Init+0x248>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d02b      	beq.n	8005806 <HAL_GPIO_Init+0x22a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_GPIO_Init+0x24c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d025      	beq.n	8005802 <HAL_GPIO_Init+0x226>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_GPIO_Init+0x250>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <HAL_GPIO_Init+0x222>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_GPIO_Init+0x254>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d019      	beq.n	80057fa <HAL_GPIO_Init+0x21e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_GPIO_Init+0x258>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_GPIO_Init+0x21a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <HAL_GPIO_Init+0x25c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00d      	beq.n	80057f2 <HAL_GPIO_Init+0x216>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a18      	ldr	r2, [pc, #96]	; (800583c <HAL_GPIO_Init+0x260>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <HAL_GPIO_Init+0x212>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a17      	ldr	r2, [pc, #92]	; (8005840 <HAL_GPIO_Init+0x264>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <HAL_GPIO_Init+0x20e>
 80057e6:	2309      	movs	r3, #9
 80057e8:	e02d      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057ea:	230a      	movs	r3, #10
 80057ec:	e02b      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057ee:	2308      	movs	r3, #8
 80057f0:	e029      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e027      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057f6:	2306      	movs	r3, #6
 80057f8:	e025      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057fa:	2305      	movs	r3, #5
 80057fc:	e023      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 80057fe:	2304      	movs	r3, #4
 8005800:	e021      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 8005802:	2303      	movs	r3, #3
 8005804:	e01f      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 8005806:	2302      	movs	r3, #2
 8005808:	e01d      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 800580a:	2301      	movs	r3, #1
 800580c:	e01b      	b.n	8005846 <HAL_GPIO_Init+0x26a>
 800580e:	bf00      	nop
 8005810:	58000080 	.word	0x58000080
 8005814:	58024400 	.word	0x58024400
 8005818:	58000400 	.word	0x58000400
 800581c:	58020000 	.word	0x58020000
 8005820:	58020400 	.word	0x58020400
 8005824:	58020800 	.word	0x58020800
 8005828:	58020c00 	.word	0x58020c00
 800582c:	58021000 	.word	0x58021000
 8005830:	58021400 	.word	0x58021400
 8005834:	58021800 	.word	0x58021800
 8005838:	58021c00 	.word	0x58021c00
 800583c:	58022000 	.word	0x58022000
 8005840:	58022400 	.word	0x58022400
 8005844:	2300      	movs	r3, #0
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	f002 0203 	and.w	r2, r2, #3
 800584c:	0092      	lsls	r2, r2, #2
 800584e:	4093      	lsls	r3, r2
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005856:	4938      	ldr	r1, [pc, #224]	; (8005938 <HAL_GPIO_Init+0x35c>)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	3302      	adds	r3, #2
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	43db      	mvns	r3, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	3301      	adds	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f ae63 	bne.w	80055f0 <HAL_GPIO_Init+0x14>
  }
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3724      	adds	r7, #36	; 0x24
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	58000400 	.word	0x58000400

0800593c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e07f      	b.n	8005a4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb fbf6 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	; 0x24
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800598c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	e006      	b.n	80059c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d104      	bne.n	80059d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_I2C_Init+0x11c>)
 80059e2:	430b      	orrs	r3, r1
 80059e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	02008000 	.word	0x02008000

08005a5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d138      	bne.n	8005ae4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e032      	b.n	8005ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	; 0x24
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d139      	bne.n	8005b7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e033      	b.n	8005b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b94:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_PWREx_ConfigSupply+0x70>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <HAL_PWREx_ConfigSupply+0x70>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d001      	beq.n	8005bb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e01f      	b.n	8005bf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e01d      	b.n	8005bf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <HAL_PWREx_ConfigSupply+0x70>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 0207 	bic.w	r2, r3, #7
 8005bbe:	490f      	ldr	r1, [pc, #60]	; (8005bfc <HAL_PWREx_ConfigSupply+0x70>)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005bc6:	f7fb fd5b 	bl	8001680 <HAL_GetTick>
 8005bca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bcc:	e009      	b.n	8005be2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bce:	f7fb fd57 	bl	8001680 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bdc:	d901      	bls.n	8005be2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e007      	b.n	8005bf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_PWREx_ConfigSupply+0x70>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d1ee      	bne.n	8005bce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	58024800 	.word	0x58024800

08005c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	; 0x30
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f000 bc1f 	b.w	8006452 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80b3 	beq.w	8005d88 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b95      	ldr	r3, [pc, #596]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c2c:	4b92      	ldr	r3, [pc, #584]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d007      	beq.n	8005c48 <HAL_RCC_OscConfig+0x48>
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b18      	cmp	r3, #24
 8005c3c:	d112      	bne.n	8005c64 <HAL_RCC_OscConfig+0x64>
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d10d      	bne.n	8005c64 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c48:	4b8b      	ldr	r3, [pc, #556]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8098 	beq.w	8005d86 <HAL_RCC_OscConfig+0x186>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8093 	bne.w	8005d86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e3f6      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCC_OscConfig+0x7c>
 8005c6e:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a81      	ldr	r2, [pc, #516]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e058      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d112      	bne.n	8005caa <HAL_RCC_OscConfig+0xaa>
 8005c84:	4b7c      	ldr	r3, [pc, #496]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a7b      	ldr	r2, [pc, #492]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4b79      	ldr	r3, [pc, #484]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a78      	ldr	r2, [pc, #480]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b76      	ldr	r3, [pc, #472]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a75      	ldr	r2, [pc, #468]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e041      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb2:	d112      	bne.n	8005cda <HAL_RCC_OscConfig+0xda>
 8005cb4:	4b70      	ldr	r3, [pc, #448]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a6f      	ldr	r2, [pc, #444]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b6d      	ldr	r3, [pc, #436]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6c      	ldr	r2, [pc, #432]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	4b6a      	ldr	r3, [pc, #424]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a69      	ldr	r2, [pc, #420]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e029      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005ce2:	d112      	bne.n	8005d0a <HAL_RCC_OscConfig+0x10a>
 8005ce4:	4b64      	ldr	r3, [pc, #400]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a63      	ldr	r2, [pc, #396]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a60      	ldr	r2, [pc, #384]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5d      	ldr	r2, [pc, #372]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	e011      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a5a      	ldr	r2, [pc, #360]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	4b58      	ldr	r3, [pc, #352]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a57      	ldr	r2, [pc, #348]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a54      	ldr	r2, [pc, #336]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fb fca3 	bl	8001680 <HAL_GetTick>
 8005d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d3e:	f7fb fc9f 	bl	8001680 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b64      	cmp	r3, #100	; 0x64
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e380      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d50:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x13e>
 8005d5c:	e014      	b.n	8005d88 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5e:	f7fb fc8f 	bl	8001680 <HAL_GetTick>
 8005d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d66:	f7fb fc8b 	bl	8001680 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b64      	cmp	r3, #100	; 0x64
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e36c      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d78:	4b3f      	ldr	r3, [pc, #252]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f0      	bne.n	8005d66 <HAL_RCC_OscConfig+0x166>
 8005d84:	e000      	b.n	8005d88 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 808c 	beq.w	8005eae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d96:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005da0:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1bc>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b18      	cmp	r3, #24
 8005db0:	d137      	bne.n	8005e22 <HAL_RCC_OscConfig+0x222>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d132      	bne.n	8005e22 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dbc:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x1d4>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e33e      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 0219 	bic.w	r2, r3, #25
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4925      	ldr	r1, [pc, #148]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fb fc4b 	bl	8001680 <HAL_GetTick>
 8005dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fb fc47 	bl	8001680 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e328      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	4917      	ldr	r1, [pc, #92]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e20:	e045      	b.n	8005eae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d028      	beq.n	8005e7c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 0219 	bic.w	r2, r3, #25
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	4910      	ldr	r1, [pc, #64]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fb fc20 	bl	8001680 <HAL_GetTick>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e44:	f7fb fc1c 	bl	8001680 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e2fd      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0f0      	beq.n	8005e44 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	4901      	ldr	r1, [pc, #4]	; (8005e78 <HAL_RCC_OscConfig+0x278>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
 8005e76:	e01a      	b.n	8005eae <HAL_RCC_OscConfig+0x2ae>
 8005e78:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7c:	4b97      	ldr	r3, [pc, #604]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a96      	ldr	r2, [pc, #600]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005e82:	f023 0301 	bic.w	r3, r3, #1
 8005e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fb fbfa 	bl	8001680 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e90:	f7fb fbf6 	bl	8001680 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e2d7      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ea2:	4b8e      	ldr	r3, [pc, #568]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d06a      	beq.n	8005f90 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b88      	ldr	r3, [pc, #544]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec4:	4b85      	ldr	r3, [pc, #532]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2e0>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b18      	cmp	r3, #24
 8005ed4:	d11b      	bne.n	8005f0e <HAL_RCC_OscConfig+0x30e>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d116      	bne.n	8005f0e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ee0:	4b7e      	ldr	r3, [pc, #504]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x2f8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e2ac      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ef8:	4b78      	ldr	r3, [pc, #480]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	4975      	ldr	r1, [pc, #468]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f0c:	e040      	b.n	8005f90 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d023      	beq.n	8005f5e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f16:	4b71      	ldr	r3, [pc, #452]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a70      	ldr	r2, [pc, #448]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fb fbad 	bl	8001680 <HAL_GetTick>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f2a:	f7fb fba9 	bl	8001680 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e28a      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f3c:	4b67      	ldr	r3, [pc, #412]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f48:	4b64      	ldr	r3, [pc, #400]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	061b      	lsls	r3, r3, #24
 8005f56:	4961      	ldr	r1, [pc, #388]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60cb      	str	r3, [r1, #12]
 8005f5c:	e018      	b.n	8005f90 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f5e:	4b5f      	ldr	r3, [pc, #380]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5e      	ldr	r2, [pc, #376]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7fb fb89 	bl	8001680 <HAL_GetTick>
 8005f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f72:	f7fb fb85 	bl	8001680 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e266      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f84:	4b55      	ldr	r3, [pc, #340]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d036      	beq.n	800600a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d019      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa8:	4a4c      	ldr	r2, [pc, #304]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fb fb66 	bl	8001680 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb8:	f7fb fb62 	bl	8001680 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e243      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fca:	4b44      	ldr	r3, [pc, #272]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x3b8>
 8005fd6:	e018      	b.n	800600a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd8:	4b40      	ldr	r3, [pc, #256]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fdc:	4a3f      	ldr	r2, [pc, #252]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fb fb4c 	bl	8001680 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fec:	f7fb fb48 	bl	8001680 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e229      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d019      	beq.n	8006052 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800601e:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006028:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800602a:	f7fb fb29 	bl	8001680 <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006032:	f7fb fb25 	bl	8001680 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e206      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006044:	4b25      	ldr	r3, [pc, #148]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x432>
 8006050:	e018      	b.n	8006084 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a21      	ldr	r2, [pc, #132]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800605e:	f7fb fb0f 	bl	8001680 <HAL_GetTick>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006066:	f7fb fb0b 	bl	8001680 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e1ec      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80af 	beq.w	80061f0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006092:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_RCC_OscConfig+0x4e0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <HAL_RCC_OscConfig+0x4e0>)
 8006098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800609e:	f7fb faef 	bl	8001680 <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a6:	f7fb faeb 	bl	8001680 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b64      	cmp	r3, #100	; 0x64
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1cc      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <HAL_RCC_OscConfig+0x4e0>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d10b      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4e4>
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a02      	ldr	r2, [pc, #8]	; (80060dc <HAL_RCC_OscConfig+0x4dc>)
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	e05b      	b.n	8006192 <HAL_RCC_OscConfig+0x592>
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
 80060e0:	58024800 	.word	0x58024800
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d112      	bne.n	8006112 <HAL_RCC_OscConfig+0x512>
 80060ec:	4b9d      	ldr	r3, [pc, #628]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	4a9c      	ldr	r2, [pc, #624]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6713      	str	r3, [r2, #112]	; 0x70
 80060f8:	4b9a      	ldr	r3, [pc, #616]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fc:	4a99      	ldr	r2, [pc, #612]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80060fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006102:	6713      	str	r3, [r2, #112]	; 0x70
 8006104:	4b97      	ldr	r3, [pc, #604]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a96      	ldr	r2, [pc, #600]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800610a:	f023 0304 	bic.w	r3, r3, #4
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
 8006110:	e03f      	b.n	8006192 <HAL_RCC_OscConfig+0x592>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d112      	bne.n	8006140 <HAL_RCC_OscConfig+0x540>
 800611a:	4b92      	ldr	r3, [pc, #584]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a91      	ldr	r2, [pc, #580]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
 8006126:	4b8f      	ldr	r3, [pc, #572]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a8e      	ldr	r2, [pc, #568]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800612c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
 8006132:	4b8c      	ldr	r3, [pc, #560]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	4a8b      	ldr	r2, [pc, #556]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	6713      	str	r3, [r2, #112]	; 0x70
 800613e:	e028      	b.n	8006192 <HAL_RCC_OscConfig+0x592>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b85      	cmp	r3, #133	; 0x85
 8006146:	d112      	bne.n	800616e <HAL_RCC_OscConfig+0x56e>
 8006148:	4b86      	ldr	r3, [pc, #536]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	4a85      	ldr	r2, [pc, #532]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	6713      	str	r3, [r2, #112]	; 0x70
 8006154:	4b83      	ldr	r3, [pc, #524]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	4a82      	ldr	r2, [pc, #520]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	6713      	str	r3, [r2, #112]	; 0x70
 8006160:	4b80      	ldr	r3, [pc, #512]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	4a7f      	ldr	r2, [pc, #508]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6713      	str	r3, [r2, #112]	; 0x70
 800616c:	e011      	b.n	8006192 <HAL_RCC_OscConfig+0x592>
 800616e:	4b7d      	ldr	r3, [pc, #500]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	4a7c      	ldr	r2, [pc, #496]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	6713      	str	r3, [r2, #112]	; 0x70
 800617a:	4b7a      	ldr	r3, [pc, #488]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	4a79      	ldr	r2, [pc, #484]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	6713      	str	r3, [r2, #112]	; 0x70
 8006186:	4b77      	ldr	r3, [pc, #476]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a76      	ldr	r2, [pc, #472]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800618c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d015      	beq.n	80061c6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619a:	f7fb fa71 	bl	8001680 <HAL_GetTick>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a2:	f7fb fa6d 	bl	8001680 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e14c      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061b8:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0ee      	beq.n	80061a2 <HAL_RCC_OscConfig+0x5a2>
 80061c4:	e014      	b.n	80061f0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c6:	f7fb fa5b 	bl	8001680 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061cc:	e00a      	b.n	80061e4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ce:	f7fb fa57 	bl	8001680 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061dc:	4293      	cmp	r3, r2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e136      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061e4:	4b5f      	ldr	r3, [pc, #380]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1ee      	bne.n	80061ce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 812b 	beq.w	8006450 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061fa:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006202:	2b18      	cmp	r3, #24
 8006204:	f000 80bb 	beq.w	800637e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2b02      	cmp	r3, #2
 800620e:	f040 8095 	bne.w	800633c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006212:	4b54      	ldr	r3, [pc, #336]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a53      	ldr	r2, [pc, #332]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800621c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fb fa2f 	bl	8001680 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006226:	f7fb fa2b 	bl	8001680 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10c      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006238:	4b4a      	ldr	r3, [pc, #296]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006244:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006248:	4b47      	ldr	r3, [pc, #284]	; (8006368 <HAL_RCC_OscConfig+0x768>)
 800624a:	4013      	ands	r3, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006254:	0112      	lsls	r2, r2, #4
 8006256:	430a      	orrs	r2, r1
 8006258:	4942      	ldr	r1, [pc, #264]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800625a:	4313      	orrs	r3, r2
 800625c:	628b      	str	r3, [r1, #40]	; 0x28
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	3b01      	subs	r3, #1
 8006264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	3b01      	subs	r3, #1
 800626e:	025b      	lsls	r3, r3, #9
 8006270:	b29b      	uxth	r3, r3
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	3b01      	subs	r3, #1
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	3b01      	subs	r3, #1
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800628e:	4935      	ldr	r1, [pc, #212]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006290:	4313      	orrs	r3, r2
 8006292:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006294:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a32      	ldr	r2, [pc, #200]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062a0:	4b30      	ldr	r3, [pc, #192]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_RCC_OscConfig+0x76c>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062ac:	00d2      	lsls	r2, r2, #3
 80062ae:	492d      	ldr	r1, [pc, #180]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062b4:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	f023 020c 	bic.w	r2, r3, #12
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	4928      	ldr	r1, [pc, #160]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062c6:	4b27      	ldr	r3, [pc, #156]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	f023 0202 	bic.w	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	4924      	ldr	r1, [pc, #144]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a21      	ldr	r2, [pc, #132]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e4:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006308:	4b16      	ldr	r3, [pc, #88]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a15      	ldr	r2, [pc, #84]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800630e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fb f9b4 	bl	8001680 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631c:	f7fb f9b0 	bl	8001680 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e091      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800632e:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f0      	beq.n	800631c <HAL_RCC_OscConfig+0x71c>
 800633a:	e089      	b.n	8006450 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <HAL_RCC_OscConfig+0x764>)
 8006342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fb f99a 	bl	8001680 <HAL_GetTick>
 800634c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800634e:	e00f      	b.n	8006370 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006350:	f7fb f996 	bl	8001680 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d908      	bls.n	8006370 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e077      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
 8006368:	fffffc0c 	.word	0xfffffc0c
 800636c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006370:	4b3a      	ldr	r3, [pc, #232]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e9      	bne.n	8006350 <HAL_RCC_OscConfig+0x750>
 800637c:	e068      	b.n	8006450 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800637e:	4b37      	ldr	r3, [pc, #220]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006384:	4b35      	ldr	r3, [pc, #212]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	2b01      	cmp	r3, #1
 8006390:	d031      	beq.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0203 	and.w	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d12a      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d122      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d11a      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	0a5b      	lsrs	r3, r3, #9
 80063c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d111      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d108      	bne.n	80063f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	0e1b      	lsrs	r3, r3, #24
 80063e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d001      	beq.n	80063fa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02b      	b.n	8006452 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063fa:	4b18      	ldr	r3, [pc, #96]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	08db      	lsrs	r3, r3, #3
 8006400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006404:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	429a      	cmp	r2, r3
 800640e:	d01f      	beq.n	8006450 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800641c:	f7fb f930 	bl	8001680 <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006422:	bf00      	nop
 8006424:	f7fb f92c 	bl	8001680 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	4293      	cmp	r3, r2
 800642e:	d0f9      	beq.n	8006424 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <HAL_RCC_OscConfig+0x860>)
 8006436:	4013      	ands	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800643c:	00d2      	lsls	r2, r2, #3
 800643e:	4907      	ldr	r1, [pc, #28]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006440:	4313      	orrs	r3, r2
 8006442:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a04      	ldr	r2, [pc, #16]	; (800645c <HAL_RCC_OscConfig+0x85c>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
 8006460:	ffff0007 	.word	0xffff0007

08006464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e19c      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b8a      	ldr	r3, [pc, #552]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d910      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b87      	ldr	r3, [pc, #540]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 020f 	bic.w	r2, r3, #15
 800648e:	4985      	ldr	r1, [pc, #532]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b83      	ldr	r3, [pc, #524]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e184      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d010      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	4b7b      	ldr	r3, [pc, #492]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d908      	bls.n	80064d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064c4:	4b78      	ldr	r3, [pc, #480]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	4975      	ldr	r1, [pc, #468]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	4b70      	ldr	r3, [pc, #448]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d908      	bls.n	8006504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064f2:	4b6d      	ldr	r3, [pc, #436]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	496a      	ldr	r1, [pc, #424]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006500:	4313      	orrs	r3, r2
 8006502:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	4b64      	ldr	r3, [pc, #400]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800651c:	429a      	cmp	r2, r3
 800651e:	d908      	bls.n	8006532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006520:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	495e      	ldr	r1, [pc, #376]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 800652e:	4313      	orrs	r3, r2
 8006530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	4b59      	ldr	r3, [pc, #356]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800654a:	429a      	cmp	r2, r3
 800654c:	d908      	bls.n	8006560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800654e:	4b56      	ldr	r3, [pc, #344]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4953      	ldr	r1, [pc, #332]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 800655c:	4313      	orrs	r3, r2
 800655e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	429a      	cmp	r2, r3
 800657a:	d908      	bls.n	800658e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657c:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f023 020f 	bic.w	r2, r3, #15
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4947      	ldr	r1, [pc, #284]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 800658a:	4313      	orrs	r3, r2
 800658c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d055      	beq.n	8006646 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800659a:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4940      	ldr	r1, [pc, #256]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065b4:	4b3c      	ldr	r3, [pc, #240]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d121      	bne.n	8006604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0f6      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d107      	bne.n	80065dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d115      	bne.n	8006604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0ea      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d107      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065e4:	4b30      	ldr	r3, [pc, #192]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0de      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065f4:	4b2c      	ldr	r3, [pc, #176]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0d6      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006604:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f023 0207 	bic.w	r2, r3, #7
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4925      	ldr	r1, [pc, #148]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006616:	f7fb f833 	bl	8001680 <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661c:	e00a      	b.n	8006634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800661e:	f7fb f82f 	bl	8001680 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0be      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006634:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	429a      	cmp	r2, r3
 8006644:	d1eb      	bne.n	800661e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	429a      	cmp	r2, r3
 8006660:	d208      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f023 020f 	bic.w	r2, r3, #15
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	490e      	ldr	r1, [pc, #56]	; (80066a8 <HAL_RCC_ClockConfig+0x244>)
 8006670:	4313      	orrs	r3, r2
 8006672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d214      	bcs.n	80066ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f023 020f 	bic.w	r2, r3, #15
 800668a:	4906      	ldr	r1, [pc, #24]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	4313      	orrs	r3, r2
 8006690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <HAL_RCC_ClockConfig+0x240>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d005      	beq.n	80066ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e086      	b.n	80067b2 <HAL_RCC_ClockConfig+0x34e>
 80066a4:	52002000 	.word	0x52002000
 80066a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d010      	beq.n	80066da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d208      	bcs.n	80066da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066c8:	4b3c      	ldr	r3, [pc, #240]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	4939      	ldr	r1, [pc, #228]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	4b34      	ldr	r3, [pc, #208]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d208      	bcs.n	8006708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066f6:	4b31      	ldr	r3, [pc, #196]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	492e      	ldr	r1, [pc, #184]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006704:	4313      	orrs	r3, r2
 8006706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	d010      	beq.n	8006736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	4b28      	ldr	r3, [pc, #160]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006720:	429a      	cmp	r2, r3
 8006722:	d208      	bcs.n	8006736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	4922      	ldr	r1, [pc, #136]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006732:	4313      	orrs	r3, r2
 8006734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800674e:	429a      	cmp	r2, r3
 8006750:	d208      	bcs.n	8006764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006752:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4917      	ldr	r1, [pc, #92]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006760:	4313      	orrs	r3, r2
 8006762:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006764:	f000 f834 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8006768:	4602      	mov	r2, r0
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	4912      	ldr	r1, [pc, #72]	; (80067c0 <HAL_RCC_ClockConfig+0x35c>)
 8006776:	5ccb      	ldrb	r3, [r1, r3]
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006782:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <HAL_RCC_ClockConfig+0x358>)
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <HAL_RCC_ClockConfig+0x35c>)
 800678c:	5cd3      	ldrb	r3, [r2, r3]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
 8006798:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <HAL_RCC_ClockConfig+0x360>)
 800679a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800679c:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <HAL_RCC_ClockConfig+0x364>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <HAL_RCC_ClockConfig+0x368>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fa ff20 	bl	80015ec <HAL_InitTick>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
 80067c0:	0800943c 	.word	0x0800943c
 80067c4:	24000004 	.word	0x24000004
 80067c8:	24000000 	.word	0x24000000
 80067cc:	24000008 	.word	0x24000008

080067d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b089      	sub	sp, #36	; 0x24
 80067d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067d6:	4bb3      	ldr	r3, [pc, #716]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067de:	2b18      	cmp	r3, #24
 80067e0:	f200 8155 	bhi.w	8006a8e <HAL_RCC_GetSysClockFreq+0x2be>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006a8f 	.word	0x08006a8f
 80067f4:	08006a8f 	.word	0x08006a8f
 80067f8:	08006a8f 	.word	0x08006a8f
 80067fc:	08006a8f 	.word	0x08006a8f
 8006800:	08006a8f 	.word	0x08006a8f
 8006804:	08006a8f 	.word	0x08006a8f
 8006808:	08006a8f 	.word	0x08006a8f
 800680c:	08006877 	.word	0x08006877
 8006810:	08006a8f 	.word	0x08006a8f
 8006814:	08006a8f 	.word	0x08006a8f
 8006818:	08006a8f 	.word	0x08006a8f
 800681c:	08006a8f 	.word	0x08006a8f
 8006820:	08006a8f 	.word	0x08006a8f
 8006824:	08006a8f 	.word	0x08006a8f
 8006828:	08006a8f 	.word	0x08006a8f
 800682c:	0800687d 	.word	0x0800687d
 8006830:	08006a8f 	.word	0x08006a8f
 8006834:	08006a8f 	.word	0x08006a8f
 8006838:	08006a8f 	.word	0x08006a8f
 800683c:	08006a8f 	.word	0x08006a8f
 8006840:	08006a8f 	.word	0x08006a8f
 8006844:	08006a8f 	.word	0x08006a8f
 8006848:	08006a8f 	.word	0x08006a8f
 800684c:	08006883 	.word	0x08006883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006850:	4b94      	ldr	r3, [pc, #592]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800685c:	4b91      	ldr	r3, [pc, #580]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	08db      	lsrs	r3, r3, #3
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	4a90      	ldr	r2, [pc, #576]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
 800686c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800686e:	e111      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006870:	4b8d      	ldr	r3, [pc, #564]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006872:	61bb      	str	r3, [r7, #24]
      break;
 8006874:	e10e      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006876:	4b8d      	ldr	r3, [pc, #564]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006878:	61bb      	str	r3, [r7, #24]
      break;
 800687a:	e10b      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800687c:	4b8c      	ldr	r3, [pc, #560]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800687e:	61bb      	str	r3, [r7, #24]
      break;
 8006880:	e108      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006882:	4b88      	ldr	r3, [pc, #544]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800688c:	4b85      	ldr	r3, [pc, #532]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006896:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006898:	4b82      	ldr	r3, [pc, #520]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80068a2:	4b80      	ldr	r3, [pc, #512]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80e1 	beq.w	8006a88 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	f000 8083 	beq.w	80069d4 <HAL_RCC_GetSysClockFreq+0x204>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	f200 80a1 	bhi.w	8006a18 <HAL_RCC_GetSysClockFreq+0x248>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0x114>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d056      	beq.n	8006990 <HAL_RCC_GetSysClockFreq+0x1c0>
 80068e2:	e099      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e4:	4b6f      	ldr	r3, [pc, #444]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d02d      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f0:	4b6c      	ldr	r3, [pc, #432]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	08db      	lsrs	r3, r3, #3
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	4a6b      	ldr	r2, [pc, #428]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a02 	vldr	s12, [r7, #8]
 800692e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800694a:	e087      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ab8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b51      	ldr	r3, [pc, #324]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006972:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800698e:	e065      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2ec>
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	4b40      	ldr	r3, [pc, #256]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069d2:	e043      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ac0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80069e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a16:	e021      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006abc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a5c:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	0a5b      	lsrs	r3, r3, #9
 8006a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a66:	3301      	adds	r3, #1
 8006a68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a80:	ee17 3a90 	vmov	r3, s15
 8006a84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a86:	e005      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61bb      	str	r3, [r7, #24]
      break;
 8006a8c:	e002      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a90:	61bb      	str	r3, [r7, #24]
      break;
 8006a92:	bf00      	nop
  }

  return sysclockfreq;
 8006a94:	69bb      	ldr	r3, [r7, #24]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3724      	adds	r7, #36	; 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	58024400 	.word	0x58024400
 8006aa8:	03d09000 	.word	0x03d09000
 8006aac:	003d0900 	.word	0x003d0900
 8006ab0:	016e3600 	.word	0x016e3600
 8006ab4:	46000000 	.word	0x46000000
 8006ab8:	4c742400 	.word	0x4c742400
 8006abc:	4a742400 	.word	0x4a742400
 8006ac0:	4bb71b00 	.word	0x4bb71b00

08006ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006aca:	f7ff fe81 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	490f      	ldr	r1, [pc, #60]	; (8006b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006adc:	5ccb      	ldrb	r3, [r1, r3]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006af2:	5cd3      	ldrb	r3, [r2, r3]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	fa22 f303 	lsr.w	r3, r2, r3
 8006afe:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006b00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b02:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	58024400 	.word	0x58024400
 8006b18:	0800943c 	.word	0x0800943c
 8006b1c:	24000004 	.word	0x24000004
 8006b20:	24000000 	.word	0x24000000

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006b28:	f7ff ffcc 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4904      	ldr	r1, [pc, #16]	; (8006b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	f003 031f 	and.w	r3, r3, #31
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	0800943c 	.word	0x0800943c

08006b50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b54:	b0c8      	sub	sp, #288	; 0x120
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006b74:	2500      	movs	r5, #0
 8006b76:	ea54 0305 	orrs.w	r3, r4, r5
 8006b7a:	d049      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b86:	d02f      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b8c:	d828      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b92:	d01a      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b98:	d822      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba2:	d007      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ba4:	e01c      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba6:	4ba7      	ldr	r3, [pc, #668]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	4aa6      	ldr	r2, [pc, #664]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bb2:	e01a      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 fa6d 	bl	800909c <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bce:	3328      	adds	r3, #40	; 0x28
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fb14 	bl	8009200 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bf2:	4b94      	ldr	r3, [pc, #592]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c00:	4a90      	ldr	r2, [pc, #576]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6513      	str	r3, [r2, #80]	; 0x50
 8006c06:	e003      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006c1c:	f04f 0900 	mov.w	r9, #0
 8006c20:	ea58 0309 	orrs.w	r3, r8, r9
 8006c24:	d047      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d82a      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c4d 	.word	0x08006c4d
 8006c3c:	08006c5b 	.word	0x08006c5b
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c8f 	.word	0x08006c8f
 8006c48:	08006c8f 	.word	0x08006c8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4c:	4b7d      	ldr	r3, [pc, #500]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4a7c      	ldr	r2, [pc, #496]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c58:	e01a      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5e:	3308      	adds	r3, #8
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fa1a 	bl	800909c <RCCEx_PLL2_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c6e:	e00f      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c74:	3328      	adds	r3, #40	; 0x28
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f002 fac1 	bl	8009200 <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c84:	e004      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c98:	4b6a      	ldr	r3, [pc, #424]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9c:	f023 0107 	bic.w	r1, r3, #7
 8006ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	4a67      	ldr	r2, [pc, #412]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6513      	str	r3, [r2, #80]	; 0x50
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006cc2:	f04f 0b00 	mov.w	fp, #0
 8006cc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cca:	d054      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006cd6:	d036      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006cd8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006cdc:	d82f      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce2:	d032      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce8:	d829      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cea:	2bc0      	cmp	r3, #192	; 0xc0
 8006cec:	d02f      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006cee:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf0:	d825      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d018      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d821      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d007      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006d02:	e01c      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d04:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4a4e      	ldr	r2, [pc, #312]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006d10:	e01e      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d16:	3308      	adds	r3, #8
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 f9be 	bl	800909c <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006d26:	e013      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2c:	3328      	adds	r3, #40	; 0x28
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fa65 	bl	8009200 <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006d3c:	e008      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d44:	e004      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006d58:	4b3a      	ldr	r3, [pc, #232]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6513      	str	r3, [r2, #80]	; 0x50
 8006d6c:	e003      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006d82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d86:	2300      	movs	r3, #0
 8006d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d90:	460b      	mov	r3, r1
 8006d92:	4313      	orrs	r3, r2
 8006d94:	d05c      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006da0:	d03b      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006da2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006da6:	d834      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dac:	d037      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	d82e      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006db4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006db8:	d033      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006dba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006dbe:	d828      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d01a      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d822      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd4:	d007      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006dd6:	e01c      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd8:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006de4:	e01e      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dea:	3308      	adds	r3, #8
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f002 f954 	bl	800909c <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006dfa:	e013      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e00:	3328      	adds	r3, #40	; 0x28
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f002 f9fb 	bl	8009200 <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006e10:	e008      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e18:	e004      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10d      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3a:	4a02      	ldr	r2, [pc, #8]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e40:	e006      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e60:	2300      	movs	r3, #0
 8006e62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	d03a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	2b30      	cmp	r3, #48	; 0x30
 8006e78:	d01f      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006e7a:	2b30      	cmp	r3, #48	; 0x30
 8006e7c:	d819      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d00c      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d815      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d019      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d111      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8e:	4bae      	ldr	r3, [pc, #696]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4aad      	ldr	r2, [pc, #692]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 f8f9 	bl	800909c <RCCEx_PLL2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006eb0:	e006      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ec8:	4b9f      	ldr	r3, [pc, #636]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	4a9c      	ldr	r2, [pc, #624]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ee2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006efc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4313      	orrs	r3, r2
 8006f04:	d051      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f10:	d035      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f16:	d82e      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f1c:	d031      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006f1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f22:	d828      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f28:	d01a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	d822      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f38:	d007      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006f3a:	e01c      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b82      	ldr	r3, [pc, #520]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	4a81      	ldr	r2, [pc, #516]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f48:	e01c      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4e:	3308      	adds	r3, #8
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 f8a2 	bl	800909c <RCCEx_PLL2_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f5e:	e011      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	3328      	adds	r3, #40	; 0x28
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f002 f949 	bl	8009200 <RCCEx_PLL3_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f7c:	e002      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f8c:	4b6e      	ldr	r3, [pc, #440]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9a:	4a6b      	ldr	r2, [pc, #428]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6513      	str	r3, [r2, #80]	; 0x50
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	d053      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd4:	d033      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fda:	d82c      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006fdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe0:	d02f      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe6:	d826      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006fe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fec:	d02b      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ff2:	d820      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff8:	d012      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ffe:	d81a      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d022      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007008:	d115      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800700a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700e:	3308      	adds	r3, #8
 8007010:	2101      	movs	r1, #1
 8007012:	4618      	mov	r0, r3
 8007014:	f002 f842 	bl	800909c <RCCEx_PLL2_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800701e:	e015      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007024:	3328      	adds	r3, #40	; 0x28
 8007026:	2101      	movs	r1, #1
 8007028:	4618      	mov	r0, r3
 800702a:	f002 f8e9 	bl	8009200 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007034:	e00a      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800704a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007054:	4b3c      	ldr	r3, [pc, #240]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800705c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007062:	4a39      	ldr	r2, [pc, #228]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007064:	430b      	orrs	r3, r1
 8007066:	6513      	str	r3, [r2, #80]	; 0x50
 8007068:	e003      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800706e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800707e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007088:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800708c:	460b      	mov	r3, r1
 800708e:	4313      	orrs	r3, r2
 8007090:	d060      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800709a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800709e:	d039      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80070a0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80070a4:	d832      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070aa:	d035      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80070ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b0:	d82c      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d031      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d826      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070c2:	d02d      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80070c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070c8:	d820      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d012      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d4:	d81a      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d024      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80070da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070de:	d115      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e4:	3308      	adds	r3, #8
 80070e6:	2101      	movs	r1, #1
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 ffd7 	bl	800909c <RCCEx_PLL2_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070f4:	e017      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fa:	3328      	adds	r3, #40	; 0x28
 80070fc:	2101      	movs	r1, #1
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 f87e 	bl	8009200 <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800710a:	e00c      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007112:	e008      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007114:	bf00      	nop
 8007116:	e006      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007118:	bf00      	nop
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10e      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800713a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800713e:	4a02      	ldr	r2, [pc, #8]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6593      	str	r3, [r2, #88]	; 0x58
 8007144:	e006      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007146:	bf00      	nop
 8007148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007150:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007164:	2300      	movs	r3, #0
 8007166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800716a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800716e:	460b      	mov	r3, r1
 8007170:	4313      	orrs	r3, r2
 8007172:	d037      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d00e      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007184:	d816      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718e:	d111      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007190:	4bc4      	ldr	r3, [pc, #784]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4ac3      	ldr	r2, [pc, #780]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800719c:	e00f      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800719e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a2:	3308      	adds	r3, #8
 80071a4:	2101      	movs	r1, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 ff78 	bl	800909c <RCCEx_PLL2_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80071b2:	e004      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071ba:	e000      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80071bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071c6:	4bb7      	ldr	r3, [pc, #732]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80071ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d4:	4ab3      	ldr	r2, [pc, #716]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d6:	430b      	orrs	r3, r1
 80071d8:	6513      	str	r3, [r2, #80]	; 0x50
 80071da:	e003      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f4:	2300      	movs	r3, #0
 80071f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d039      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	2b03      	cmp	r3, #3
 800720c:	d81c      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007251 	.word	0x08007251
 8007218:	08007225 	.word	0x08007225
 800721c:	08007233 	.word	0x08007233
 8007220:	08007251 	.word	0x08007251
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4b9f      	ldr	r3, [pc, #636]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	4a9e      	ldr	r2, [pc, #632]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800722e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007230:	e00f      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007236:	3308      	adds	r3, #8
 8007238:	2102      	movs	r1, #2
 800723a:	4618      	mov	r0, r3
 800723c:	f001 ff2e 	bl	800909c <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007246:	e004      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800725a:	4b92      	ldr	r3, [pc, #584]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725e:	f023 0103 	bic.w	r1, r3, #3
 8007262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007268:	4a8e      	ldr	r2, [pc, #568]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800726a:	430b      	orrs	r3, r1
 800726c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800726e:	e003      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007288:	2300      	movs	r3, #0
 800728a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800728e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007292:	460b      	mov	r3, r1
 8007294:	4313      	orrs	r3, r2
 8007296:	f000 8099 	beq.w	80073cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800729a:	4b83      	ldr	r3, [pc, #524]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a82      	ldr	r2, [pc, #520]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072a6:	f7fa f9eb 	bl	8001680 <HAL_GetTick>
 80072aa:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072ae:	e00b      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b0:	f7fa f9e6 	bl	8001680 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b64      	cmp	r3, #100	; 0x64
 80072be:	d903      	bls.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072c6:	e005      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072c8:	4b77      	ldr	r3, [pc, #476]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ed      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80072d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d173      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072dc:	4b71      	ldr	r3, [pc, #452]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072e8:	4053      	eors	r3, r2
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d015      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072f2:	4b6c      	ldr	r3, [pc, #432]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072fe:	4b69      	ldr	r3, [pc, #420]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4a68      	ldr	r2, [pc, #416]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007308:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800730a:	4b66      	ldr	r3, [pc, #408]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	4a65      	ldr	r2, [pc, #404]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007314:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007316:	4a63      	ldr	r2, [pc, #396]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800731e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	d118      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fa f9a8 	bl	8001680 <HAL_GetTick>
 8007330:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007334:	e00d      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fa f9a3 	bl	8001680 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007340:	1ad2      	subs	r2, r2, r3
 8007342:	f241 3388 	movw	r3, #5000	; 0x1388
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007350:	e005      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007352:	4b54      	ldr	r3, [pc, #336]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0eb      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800735e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007362:	2b00      	cmp	r3, #0
 8007364:	d129      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007376:	d10e      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007378:	4b4a      	ldr	r3, [pc, #296]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007388:	091a      	lsrs	r2, r3, #4
 800738a:	4b48      	ldr	r3, [pc, #288]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800738c:	4013      	ands	r3, r2
 800738e:	4a45      	ldr	r2, [pc, #276]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007390:	430b      	orrs	r3, r1
 8007392:	6113      	str	r3, [r2, #16]
 8007394:	e005      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007396:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800739c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073a0:	6113      	str	r3, [r2, #16]
 80073a2:	4b40      	ldr	r3, [pc, #256]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80073a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80073ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b2:	4a3c      	ldr	r2, [pc, #240]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6713      	str	r3, [r2, #112]	; 0x70
 80073b8:	e008      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80073c2:	e003      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f002 0301 	and.w	r3, r2, #1
 80073d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f000 8090 	beq.w	800750e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	2b28      	cmp	r3, #40	; 0x28
 80073f8:	d870      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80073fa:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	080074e5 	.word	0x080074e5
 8007404:	080074dd 	.word	0x080074dd
 8007408:	080074dd 	.word	0x080074dd
 800740c:	080074dd 	.word	0x080074dd
 8007410:	080074dd 	.word	0x080074dd
 8007414:	080074dd 	.word	0x080074dd
 8007418:	080074dd 	.word	0x080074dd
 800741c:	080074dd 	.word	0x080074dd
 8007420:	080074b1 	.word	0x080074b1
 8007424:	080074dd 	.word	0x080074dd
 8007428:	080074dd 	.word	0x080074dd
 800742c:	080074dd 	.word	0x080074dd
 8007430:	080074dd 	.word	0x080074dd
 8007434:	080074dd 	.word	0x080074dd
 8007438:	080074dd 	.word	0x080074dd
 800743c:	080074dd 	.word	0x080074dd
 8007440:	080074c7 	.word	0x080074c7
 8007444:	080074dd 	.word	0x080074dd
 8007448:	080074dd 	.word	0x080074dd
 800744c:	080074dd 	.word	0x080074dd
 8007450:	080074dd 	.word	0x080074dd
 8007454:	080074dd 	.word	0x080074dd
 8007458:	080074dd 	.word	0x080074dd
 800745c:	080074dd 	.word	0x080074dd
 8007460:	080074e5 	.word	0x080074e5
 8007464:	080074dd 	.word	0x080074dd
 8007468:	080074dd 	.word	0x080074dd
 800746c:	080074dd 	.word	0x080074dd
 8007470:	080074dd 	.word	0x080074dd
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074dd 	.word	0x080074dd
 8007480:	080074e5 	.word	0x080074e5
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074dd 	.word	0x080074dd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074dd 	.word	0x080074dd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074e5 	.word	0x080074e5
 80074a4:	58024400 	.word	0x58024400
 80074a8:	58024800 	.word	0x58024800
 80074ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b4:	3308      	adds	r3, #8
 80074b6:	2101      	movs	r1, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fdef 	bl	800909c <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074c4:	e00f      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	3328      	adds	r3, #40	; 0x28
 80074cc:	2101      	movs	r1, #1
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fe96 	bl	8009200 <RCCEx_PLL3_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80074da:	e004      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80074e2:	e000      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80074e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074ee:	4bc0      	ldr	r3, [pc, #768]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80074f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fe:	4abc      	ldr	r2, [pc, #752]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007500:	430b      	orrs	r3, r1
 8007502:	6553      	str	r3, [r2, #84]	; 0x54
 8007504:	e003      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800750a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800750e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f002 0302 	and.w	r3, r2, #2
 800751a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800751e:	2300      	movs	r3, #0
 8007520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007524:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007528:	460b      	mov	r3, r1
 800752a:	4313      	orrs	r3, r2
 800752c:	d043      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800752e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007536:	2b05      	cmp	r3, #5
 8007538:	d824      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800753a:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	0800758d 	.word	0x0800758d
 8007544:	08007559 	.word	0x08007559
 8007548:	0800756f 	.word	0x0800756f
 800754c:	0800758d 	.word	0x0800758d
 8007550:	0800758d 	.word	0x0800758d
 8007554:	0800758d 	.word	0x0800758d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755c:	3308      	adds	r3, #8
 800755e:	2101      	movs	r1, #1
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fd9b 	bl	800909c <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800756c:	e00f      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800756e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007572:	3328      	adds	r3, #40	; 0x28
 8007574:	2101      	movs	r1, #1
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fe42 	bl	8009200 <RCCEx_PLL3_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007582:	e004      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800758a:	e000      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800758c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007596:	4b96      	ldr	r3, [pc, #600]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	f023 0107 	bic.w	r1, r3, #7
 800759e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a6:	4a92      	ldr	r2, [pc, #584]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075a8:	430b      	orrs	r3, r1
 80075aa:	6553      	str	r3, [r2, #84]	; 0x54
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f002 0304 	and.w	r3, r2, #4
 80075c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4313      	orrs	r3, r2
 80075d4:	d043      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80075d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d824      	bhi.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007635 	.word	0x08007635
 80075ec:	08007601 	.word	0x08007601
 80075f0:	08007617 	.word	0x08007617
 80075f4:	08007635 	.word	0x08007635
 80075f8:	08007635 	.word	0x08007635
 80075fc:	08007635 	.word	0x08007635
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007604:	3308      	adds	r3, #8
 8007606:	2101      	movs	r1, #1
 8007608:	4618      	mov	r0, r3
 800760a:	f001 fd47 	bl	800909c <RCCEx_PLL2_Config>
 800760e:	4603      	mov	r3, r0
 8007610:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007614:	e00f      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800761a:	3328      	adds	r3, #40	; 0x28
 800761c:	2101      	movs	r1, #1
 800761e:	4618      	mov	r0, r3
 8007620:	f001 fdee 	bl	8009200 <RCCEx_PLL3_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800762a:	e004      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007632:	e000      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007636:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10b      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800763e:	4b6c      	ldr	r3, [pc, #432]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	f023 0107 	bic.w	r1, r3, #7
 8007646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800764a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800764e:	4a68      	ldr	r2, [pc, #416]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007650:	430b      	orrs	r3, r1
 8007652:	6593      	str	r3, [r2, #88]	; 0x58
 8007654:	e003      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800765a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800765e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f002 0320 	and.w	r3, r2, #32
 800766a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007678:	460b      	mov	r3, r1
 800767a:	4313      	orrs	r3, r2
 800767c:	d055      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800767e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800768a:	d033      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800768c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007690:	d82c      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007696:	d02f      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d826      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800769e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a2:	d02b      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80076a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a8:	d820      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d012      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d81a      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d022      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80076ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076be:	d115      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c4:	3308      	adds	r3, #8
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fce7 	bl	800909c <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076d4:	e015      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076da:	3328      	adds	r3, #40	; 0x28
 80076dc:	2102      	movs	r1, #2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fd8e 	bl	8009200 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80076ea:	e00a      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076f2:	e006      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076f4:	bf00      	nop
 80076f6:	e004      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076f8:	bf00      	nop
 80076fa:	e002      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007702:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800770a:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771a:	4a35      	ldr	r2, [pc, #212]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6553      	str	r3, [r2, #84]	; 0x54
 8007720:	e003      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007726:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800772a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007740:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007744:	460b      	mov	r3, r1
 8007746:	4313      	orrs	r3, r2
 8007748:	d058      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800774a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007752:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007756:	d033      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007758:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800775c:	d82c      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d02f      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007768:	d826      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800776a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776e:	d02b      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007774:	d820      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777a:	d012      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800777c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007780:	d81a      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d022      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d115      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007790:	3308      	adds	r3, #8
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fc81 	bl	800909c <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077a0:	e015      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a6:	3328      	adds	r3, #40	; 0x28
 80077a8:	2102      	movs	r1, #2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fd28 	bl	8009200 <RCCEx_PLL3_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80077b6:	e00a      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80077be:	e006      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80077c0:	bf00      	nop
 80077c2:	e004      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80077cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10e      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80077de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077e6:	4a02      	ldr	r2, [pc, #8]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6593      	str	r3, [r2, #88]	; 0x58
 80077ec:	e006      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80077ee:	bf00      	nop
 80077f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007812:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d055      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800781c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007820:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007828:	d033      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800782a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800782e:	d82c      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007834:	d02f      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783a:	d826      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800783c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007840:	d02b      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007842:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007846:	d820      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784c:	d012      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800784e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007852:	d81a      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d022      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d115      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007862:	3308      	adds	r3, #8
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fc18 	bl	800909c <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007872:	e015      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	3328      	adds	r3, #40	; 0x28
 800787a:	2102      	movs	r1, #2
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fcbf 	bl	8009200 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007888:	e00a      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007890:	e006      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007892:	bf00      	nop
 8007894:	e004      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007896:	bf00      	nop
 8007898:	e002      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800789e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80078a8:	4ba1      	ldr	r3, [pc, #644]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80078b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078b8:	4a9d      	ldr	r2, [pc, #628]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6593      	str	r3, [r2, #88]	; 0x58
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 0308 	and.w	r3, r2, #8
 80078d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d01e      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80078e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f4:	d10c      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078fa:	3328      	adds	r3, #40	; 0x28
 80078fc:	2102      	movs	r1, #2
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 fc7e 	bl	8009200 <RCCEx_PLL3_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007910:	4b87      	ldr	r3, [pc, #540]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007914:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007920:	4a83      	ldr	r2, [pc, #524]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007922:	430b      	orrs	r3, r1
 8007924:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f002 0310 	and.w	r3, r2, #16
 8007932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007936:	2300      	movs	r3, #0
 8007938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800793c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007940:	460b      	mov	r3, r1
 8007942:	4313      	orrs	r3, r2
 8007944:	d01e      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800794e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007952:	d10c      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007958:	3328      	adds	r3, #40	; 0x28
 800795a:	2102      	movs	r1, #2
 800795c:	4618      	mov	r0, r3
 800795e:	f001 fc4f 	bl	8009200 <RCCEx_PLL3_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800796e:	4b70      	ldr	r3, [pc, #448]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800797e:	4a6c      	ldr	r2, [pc, #432]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007980:	430b      	orrs	r3, r1
 8007982:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007994:	2300      	movs	r3, #0
 8007996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800799a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d03e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80079a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b0:	d022      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80079b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b6:	d81b      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c0:	d00b      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80079c2:	e015      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c8:	3308      	adds	r3, #8
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 fb65 	bl	800909c <RCCEx_PLL2_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079d8:	e00f      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079de:	3328      	adds	r3, #40	; 0x28
 80079e0:	2102      	movs	r1, #2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fc0c 	bl	8009200 <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80079ee:	e004      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80079f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a02:	4b4b      	ldr	r3, [pc, #300]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a12:	4a47      	ldr	r2, [pc, #284]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6593      	str	r3, [r2, #88]	; 0x58
 8007a18:	e003      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007a2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a30:	2300      	movs	r3, #0
 8007a32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d03b      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a4a:	d01f      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a50:	d818      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5c:	d007      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007a5e:	e011      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4b33      	ldr	r3, [pc, #204]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	4a32      	ldr	r2, [pc, #200]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00f      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a72:	3328      	adds	r3, #40	; 0x28
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fbc2 	bl	8009200 <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a82:	e004      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a8a:	e000      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a96:	4b26      	ldr	r3, [pc, #152]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa6:	4a22      	ldr	r2, [pc, #136]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6553      	str	r3, [r2, #84]	; 0x54
 8007aac:	e003      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8007ac8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007acc:	460b      	mov	r3, r1
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	d034      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae0:	d007      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007ae2:	e011      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a11      	ldr	r2, [pc, #68]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007af0:	e00e      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af6:	3308      	adds	r3, #8
 8007af8:	2102      	movs	r1, #2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 face 	bl	800909c <RCCEx_PLL2_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b06:	e003      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10d      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	4a02      	ldr	r2, [pc, #8]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007b2e:	bf00      	nop
 8007b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d00c      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b5c:	3328      	adds	r3, #40	; 0x28
 8007b5e:	2102      	movs	r1, #2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fb4d 	bl	8009200 <RCCEx_PLL3_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b80:	2300      	movs	r3, #0
 8007b82:	667b      	str	r3, [r7, #100]	; 0x64
 8007b84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d038      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b9a:	d018      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba0:	d811      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba6:	d014      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bac:	d80b      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d011      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb6:	d106      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb8:	4bc3      	ldr	r3, [pc, #780]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4ac2      	ldr	r2, [pc, #776]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007bcc:	e004      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e002      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007be0:	4bb9      	ldr	r3, [pc, #740]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	4ab5      	ldr	r2, [pc, #724]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	6553      	str	r3, [r2, #84]	; 0x54
 8007bf6:	e003      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c0e:	2300      	movs	r3, #0
 8007c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	d009      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c1c:	4baa      	ldr	r3, [pc, #680]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2a:	4aa7      	ldr	r2, [pc, #668]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c3e:	2300      	movs	r3, #0
 8007c40:	657b      	str	r3, [r7, #84]	; 0x54
 8007c42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007c46:	460b      	mov	r3, r1
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	d009      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c4c:	4b9e      	ldr	r3, [pc, #632]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c50:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a9b      	ldr	r2, [pc, #620]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6e:	2300      	movs	r3, #0
 8007c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007c7c:	4b92      	ldr	r3, [pc, #584]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c80:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8a:	4a8f      	ldr	r2, [pc, #572]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cac:	4b86      	ldr	r3, [pc, #536]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	4a85      	ldr	r2, [pc, #532]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cb6:	6113      	str	r3, [r2, #16]
 8007cb8:	4b83      	ldr	r3, [pc, #524]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cba:	6919      	ldr	r1, [r3, #16]
 8007cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cc4:	4a80      	ldr	r2, [pc, #512]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cdc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ce6:	4b78      	ldr	r3, [pc, #480]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	4a74      	ldr	r2, [pc, #464]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007d06:	633b      	str	r3, [r7, #48]	; 0x30
 8007d08:	2300      	movs	r3, #0
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d16:	4b6c      	ldr	r3, [pc, #432]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d26:	4a68      	ldr	r2, [pc, #416]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	2100      	movs	r1, #0
 8007d36:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d42:	460b      	mov	r3, r1
 8007d44:	4313      	orrs	r3, r2
 8007d46:	d011      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f9a3 	bl	800909c <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	2100      	movs	r1, #0
 8007d76:	6239      	str	r1, [r7, #32]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d82:	460b      	mov	r3, r1
 8007d84:	4313      	orrs	r3, r2
 8007d86:	d011      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f983 	bl	800909c <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007da8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	2100      	movs	r1, #0
 8007db6:	61b9      	str	r1, [r7, #24]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	d011      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dcc:	3308      	adds	r3, #8
 8007dce:	2102      	movs	r1, #2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 f963 	bl	800909c <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007de8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	2100      	movs	r1, #0
 8007df6:	6139      	str	r1, [r7, #16]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e02:	460b      	mov	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	d011      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e0c:	3328      	adds	r3, #40	; 0x28
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f9f5 	bl	8009200 <RCCEx_PLL3_Config>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	2100      	movs	r1, #0
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	d011      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4c:	3328      	adds	r3, #40	; 0x28
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f9d5 	bl	8009200 <RCCEx_PLL3_Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	2100      	movs	r1, #0
 8007e76:	6039      	str	r1, [r7, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e82:	460b      	mov	r3, r1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d011      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e8c:	3328      	adds	r3, #40	; 0x28
 8007e8e:	2102      	movs	r1, #2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 f9b5 	bl	8009200 <RCCEx_PLL3_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ea8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007eac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ec6:	bf00      	nop
 8007ec8:	58024400 	.word	0x58024400

08007ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b090      	sub	sp, #64	; 0x40
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eda:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	f040 8094 	bne.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007ee4:	4b97      	ldr	r3, [pc, #604]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	f200 8087 	bhi.w	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f61 	.word	0x08007f61
 8007f08:	08007ffd 	.word	0x08007ffd
 8007f0c:	08007f89 	.word	0x08007f89
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f10:	4b8c      	ldr	r3, [pc, #560]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f1c:	d108      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 ff68 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2c:	f000 bc97 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f34:	f000 bc93 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f38:	4b82      	ldr	r3, [pc, #520]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f44:	d108      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fcac 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f54:	f000 bc83 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5c:	f000 bc7f 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f60:	4b78      	ldr	r3, [pc, #480]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6c:	d108      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6e:	f107 030c 	add.w	r3, r7, #12
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fdec 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7c:	f000 bc6f 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f84:	f000 bc6b 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f88:	4b6e      	ldr	r3, [pc, #440]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f92:	4b6c      	ldr	r3, [pc, #432]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa4:	4b67      	ldr	r3, [pc, #412]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	4a66      	ldr	r2, [pc, #408]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb6:	e01f      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fb8:	4b62      	ldr	r3, [pc, #392]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fce:	4b5f      	ldr	r3, [pc, #380]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd2:	e011      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fd4:	4b5b      	ldr	r3, [pc, #364]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe0:	d106      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fea:	4b59      	ldr	r3, [pc, #356]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ff4:	f000 bc33 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ff8:	f000 bc31 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ffc:	4b55      	ldr	r3, [pc, #340]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008000:	f000 bc2d 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008008:	f000 bc29 	b.w	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800800c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008010:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008014:	430b      	orrs	r3, r1
 8008016:	f040 809f 	bne.w	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800801a:	4b4a      	ldr	r3, [pc, #296]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800801c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008022:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800802a:	d04d      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008032:	f200 8084 	bhi.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	2bc0      	cmp	r3, #192	; 0xc0
 800803a:	d07d      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2bc0      	cmp	r3, #192	; 0xc0
 8008040:	d87d      	bhi.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d02d      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	d877      	bhi.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d012      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800805a:	e070      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800805c:	4b39      	ldr	r3, [pc, #228]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008068:	d107      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800806a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fec2 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008078:	e3f1      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807e:	e3ee      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008080:	4b30      	ldr	r3, [pc, #192]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800808c:	d107      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808e:	f107 0318 	add.w	r3, r7, #24
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fc08 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809c:	e3df      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a2:	e3dc      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080a4:	4b27      	ldr	r3, [pc, #156]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b0:	d107      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080b2:	f107 030c 	add.w	r3, r7, #12
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fd4a 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c0:	e3cd      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c6:	e3ca      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c8:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080d2:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d10c      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080e4:	4b17      	ldr	r3, [pc, #92]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	08db      	lsrs	r3, r3, #3
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	4a16      	ldr	r2, [pc, #88]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f6:	e01e      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080f8:	4b12      	ldr	r3, [pc, #72]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008104:	d106      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800810c:	d102      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008112:	e010      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008120:	d106      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008128:	d102      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812e:	e002      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008134:	e393      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008136:	e392      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813c:	e38f      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008142:	e38c      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008144:	58024400 	.word	0x58024400
 8008148:	03d09000 	.word	0x03d09000
 800814c:	003d0900 	.word	0x003d0900
 8008150:	016e3600 	.word	0x016e3600
 8008154:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008160:	430b      	orrs	r3, r1
 8008162:	f040 809c 	bne.w	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008166:	4b9e      	ldr	r3, [pc, #632]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800816e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d054      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800817e:	f200 808b 	bhi.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008188:	f000 8083 	beq.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008192:	f200 8081 	bhi.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d02f      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a4:	d878      	bhi.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b2:	d012      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80081b4:	e070      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081b6:	4b8a      	ldr	r3, [pc, #552]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081c2:	d107      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fe15 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d2:	e344      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d8:	e341      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081da:	4b81      	ldr	r3, [pc, #516]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e6:	d107      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e8:	f107 0318 	add.w	r3, r7, #24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fb5b 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f6:	e332      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081fc:	e32f      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081fe:	4b78      	ldr	r3, [pc, #480]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820a:	d107      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820c:	f107 030c 	add.w	r3, r7, #12
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fc9d 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821a:	e320      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008220:	e31d      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008222:	4b6f      	ldr	r3, [pc, #444]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800822a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800822c:	4b6c      	ldr	r3, [pc, #432]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d10c      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800823e:	4b68      	ldr	r3, [pc, #416]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a66      	ldr	r2, [pc, #408]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008250:	e01e      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008252:	4b63      	ldr	r3, [pc, #396]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825e:	d106      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008266:	d102      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008268:	4b5f      	ldr	r3, [pc, #380]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826c:	e010      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800826e:	4b5c      	ldr	r3, [pc, #368]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827a:	d106      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d102      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008284:	4b59      	ldr	r3, [pc, #356]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008288:	e002      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800828e:	e2e6      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008290:	e2e5      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008292:	4b57      	ldr	r3, [pc, #348]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008296:	e2e2      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800829c:	e2df      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800829e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80082a6:	430b      	orrs	r3, r1
 80082a8:	f040 80a7 	bne.w	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80082ac:	4b4c      	ldr	r3, [pc, #304]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082bc:	d055      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082c4:	f200 8096 	bhi.w	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082ce:	f000 8084 	beq.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082d8:	f200 808c 	bhi.w	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e2:	d030      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ea:	f200 8083 	bhi.w	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	d012      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80082fc:	e07a      	b.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082fe:	4b38      	ldr	r3, [pc, #224]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800830a:	d107      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800830c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fd71 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800831a:	e2a0      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e29d      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008322:	4b2f      	ldr	r3, [pc, #188]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800832a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800832e:	d107      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fab7 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800833e:	e28e      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008344:	e28b      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008346:	4b26      	ldr	r3, [pc, #152]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008352:	d107      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fbf9 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008362:	e27c      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008368:	e279      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800836a:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008372:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008374:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b04      	cmp	r3, #4
 800837e:	d10c      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008386:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008392:	fa22 f303 	lsr.w	r3, r2, r3
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008398:	e01e      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	e010      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b6:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083c2:	d106      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ca:	d102      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083cc:	4b07      	ldr	r3, [pc, #28]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d0:	e002      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083d6:	e242      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80083d8:	e241      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083da:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083de:	e23e      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80083e0:	58024400 	.word	0x58024400
 80083e4:	03d09000 	.word	0x03d09000
 80083e8:	003d0900 	.word	0x003d0900
 80083ec:	016e3600 	.word	0x016e3600
 80083f0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f8:	e231      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fe:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008402:	430b      	orrs	r3, r1
 8008404:	f040 8085 	bne.w	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008408:	4b9c      	ldr	r3, [pc, #624]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800840a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008410:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008418:	d06b      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008420:	d874      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008428:	d056      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008430:	d86c      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008438:	d03b      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008440:	d864      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008448:	d021      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008450:	d85c      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845e:	d004      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008460:	e054      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008462:	f7fe fb5f 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8008466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008468:	e1f9      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800846a:	4b84      	ldr	r3, [pc, #528]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008476:	d107      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008478:	f107 0318 	add.w	r3, r7, #24
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa13 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008486:	e1ea      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848c:	e1e7      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800848e:	4b7b      	ldr	r3, [pc, #492]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849a:	d107      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849c:	f107 030c 	add.w	r3, r7, #12
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fb55 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084aa:	e1d8      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b0:	e1d5      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b2:	4b72      	ldr	r3, [pc, #456]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d109      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084be:	4b6f      	ldr	r3, [pc, #444]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	4a6d      	ldr	r2, [pc, #436]	; (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d0:	e1c5      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d6:	e1c2      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084d8:	4b68      	ldr	r3, [pc, #416]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e4:	d102      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80084e6:	4b67      	ldr	r3, [pc, #412]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e1b8      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e1b5      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084f2:	4b62      	ldr	r3, [pc, #392]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084fe:	d102      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008500:	4b61      	ldr	r3, [pc, #388]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008504:	e1ab      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850a:	e1a8      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008510:	e1a5      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008516:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800851a:	430b      	orrs	r3, r1
 800851c:	d173      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800851e:	4b57      	ldr	r3, [pc, #348]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008526:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852e:	d02f      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008536:	d863      	bhi.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008544:	d012      	beq.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008546:	e05b      	b.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008548:	4b4c      	ldr	r3, [pc, #304]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008554:	d107      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008556:	f107 0318 	add.w	r3, r7, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f9a4 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008564:	e17b      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856a:	e178      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800856c:	4b43      	ldr	r3, [pc, #268]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008578:	d107      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fae6 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008588:	e169      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858e:	e166      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008590:	4b3a      	ldr	r3, [pc, #232]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008598:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800859a:	4b38      	ldr	r3, [pc, #224]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d109      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ac:	4b33      	ldr	r3, [pc, #204]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	08db      	lsrs	r3, r3, #3
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	4a32      	ldr	r2, [pc, #200]	; (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085be:	e01e      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085c0:	4b2e      	ldr	r3, [pc, #184]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085cc:	d106      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085d4:	d102      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085d6:	4b2b      	ldr	r3, [pc, #172]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085da:	e010      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085dc:	4b27      	ldr	r3, [pc, #156]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e8:	d106      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d102      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085f2:	4b25      	ldr	r3, [pc, #148]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80085f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f6:	e002      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085fc:	e12f      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80085fe:	e12e      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008604:	e12b      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800860e:	430b      	orrs	r3, r1
 8008610:	d13c      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800861a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008628:	d012      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800862a:	e023      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862c:	4b13      	ldr	r3, [pc, #76]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008638:	d107      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fbda 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008648:	e109      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864e:	e106      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865e:	f107 0318 	add.w	r3, r7, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f920 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866c:	e0f7      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008672:	e0f4      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008678:	e0f1      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800867a:	bf00      	nop
 800867c:	58024400 	.word	0x58024400
 8008680:	03d09000 	.word	0x03d09000
 8008684:	003d0900 	.word	0x003d0900
 8008688:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800868c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008690:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008694:	430b      	orrs	r3, r1
 8008696:	f040 8091 	bne.w	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800869a:	4b73      	ldr	r3, [pc, #460]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800869c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80086aa:	f000 8081 	beq.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80086b4:	d87f      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086bc:	d06b      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086c4:	d877      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086cc:	d056      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d4:	d86f      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086dc:	d03b      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086e4:	d867      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ec:	d021      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f4:	d85f      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008702:	d004      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008704:	e057      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008706:	f000 f8b9 	bl	800887c <HAL_RCCEx_GetD3PCLK1Freq>
 800870a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800870c:	e0a7      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800870e:	4b56      	ldr	r3, [pc, #344]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800871a:	d107      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871c:	f107 0318 	add.w	r3, r7, #24
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f8c1 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872a:	e098      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008730:	e095      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008732:	4b4d      	ldr	r3, [pc, #308]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800873a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873e:	d107      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fa03 	bl	8008b50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874e:	e086      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e083      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008756:	4b44      	ldr	r3, [pc, #272]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b04      	cmp	r3, #4
 8008760:	d109      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008762:	4b41      	ldr	r3, [pc, #260]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	08db      	lsrs	r3, r3, #3
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	4a3f      	ldr	r2, [pc, #252]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008774:	e073      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877a:	e070      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800877c:	4b3a      	ldr	r3, [pc, #232]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008788:	d102      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800878a:	4b39      	ldr	r3, [pc, #228]	; (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878e:	e066      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008794:	e063      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008796:	4b34      	ldr	r3, [pc, #208]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a2:	d102      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80087a4:	4b33      	ldr	r3, [pc, #204]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a8:	e059      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ae:	e056      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087b0:	4b31      	ldr	r3, [pc, #196]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e053      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ba:	e050      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80087bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80087c4:	430b      	orrs	r3, r1
 80087c6:	d148      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087c8:	4b27      	ldr	r3, [pc, #156]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d8:	d02a      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e0:	d838      	bhi.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ee:	d00d      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80087f0:	e030      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087f2:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fe:	d102      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008800:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008804:	e02b      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800880a:	e028      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800880c:	4b16      	ldr	r3, [pc, #88]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008818:	d107      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800881a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800881e:	4618      	mov	r0, r3
 8008820:	f000 faea 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008828:	e019      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882e:	e016      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800883c:	d107      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800883e:	f107 0318 	add.w	r3, r7, #24
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f830 	bl	80088a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884c:	e007      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008852:	e004      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008858:	e001      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800885e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008860:	4618      	mov	r0, r3
 8008862:	3740      	adds	r7, #64	; 0x40
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	58024400 	.word	0x58024400
 800886c:	03d09000 	.word	0x03d09000
 8008870:	003d0900 	.word	0x003d0900
 8008874:	016e3600 	.word	0x016e3600
 8008878:	00bb8000 	.word	0x00bb8000

0800887c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008880:	f7fe f920 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8008884:	4602      	mov	r2, r0
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008892:	5ccb      	ldrb	r3, [r1, r3]
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800889c:	4618      	mov	r0, r3
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	58024400 	.word	0x58024400
 80088a4:	0800943c 	.word	0x0800943c

080088a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b089      	sub	sp, #36	; 0x24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088b0:	4ba1      	ldr	r3, [pc, #644]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088ba:	4b9f      	ldr	r3, [pc, #636]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	0b1b      	lsrs	r3, r3, #12
 80088c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088c6:	4b9c      	ldr	r3, [pc, #624]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	091b      	lsrs	r3, r3, #4
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088d2:	4b99      	ldr	r3, [pc, #612]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	08db      	lsrs	r3, r3, #3
 80088d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8111 	beq.w	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f000 8083 	beq.w	8008a04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b02      	cmp	r3, #2
 8008902:	f200 80a1 	bhi.w	8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d056      	beq.n	80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008912:	e099      	b.n	8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008914:	4b88      	ldr	r3, [pc, #544]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d02d      	beq.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008920:	4b85      	ldr	r3, [pc, #532]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	08db      	lsrs	r3, r3, #3
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	4a84      	ldr	r2, [pc, #528]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
 8008930:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894a:	4b7b      	ldr	r3, [pc, #492]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a03 	vldr	s12, [r7, #12]
 800895e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800897a:	e087      	b.n	8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b6a      	ldr	r3, [pc, #424]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089be:	e065      	b.n	8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b59      	ldr	r3, [pc, #356]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a02:	e043      	b.n	8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b48      	ldr	r3, [pc, #288]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a46:	e021      	b.n	8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b37      	ldr	r3, [pc, #220]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a8c:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	0a5b      	lsrs	r3, r3, #9
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab2:	ee17 2a90 	vmov	r2, s15
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008aba:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	0c1b      	lsrs	r3, r3, #16
 8008ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac4:	ee07 3a90 	vmov	s15, r3
 8008ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae0:	ee17 2a90 	vmov	r2, s15
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	0e1b      	lsrs	r3, r3, #24
 8008aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b0e:	ee17 2a90 	vmov	r2, s15
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b16:	e008      	b.n	8008b2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
}
 8008b2a:	bf00      	nop
 8008b2c:	3724      	adds	r7, #36	; 0x24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	03d09000 	.word	0x03d09000
 8008b40:	46000000 	.word	0x46000000
 8008b44:	4c742400 	.word	0x4c742400
 8008b48:	4a742400 	.word	0x4a742400
 8008b4c:	4bb71b00 	.word	0x4bb71b00

08008b50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	; 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b58:	4ba1      	ldr	r3, [pc, #644]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b62:	4b9f      	ldr	r3, [pc, #636]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	0d1b      	lsrs	r3, r3, #20
 8008b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b6e:	4b9c      	ldr	r3, [pc, #624]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	0a1b      	lsrs	r3, r3, #8
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b7a:	4b99      	ldr	r3, [pc, #612]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	08db      	lsrs	r3, r3, #3
 8008b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8111 	beq.w	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	f000 8083 	beq.w	8008cac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	f200 80a1 	bhi.w	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d056      	beq.n	8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bba:	e099      	b.n	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bbc:	4b88      	ldr	r3, [pc, #544]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02d      	beq.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc8:	4b85      	ldr	r3, [pc, #532]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a84      	ldr	r2, [pc, #528]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf2:	4b7b      	ldr	r3, [pc, #492]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c22:	e087      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c36:	4b6a      	ldr	r3, [pc, #424]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c66:	e065      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7a:	4b59      	ldr	r3, [pc, #356]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008caa:	e043      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbe:	4b48      	ldr	r3, [pc, #288]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cee:	e021      	b.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d34:	4b2a      	ldr	r3, [pc, #168]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	0a5b      	lsrs	r3, r3, #9
 8008d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5a:	ee17 2a90 	vmov	r2, s15
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d62:	4b1f      	ldr	r3, [pc, #124]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6c:	ee07 3a90 	vmov	s15, r3
 8008d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d88:	ee17 2a90 	vmov	r2, s15
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d90:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	0e1b      	lsrs	r3, r3, #24
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db6:	ee17 2a90 	vmov	r2, s15
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	609a      	str	r2, [r3, #8]
}
 8008dd2:	bf00      	nop
 8008dd4:	3724      	adds	r7, #36	; 0x24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
 8008de4:	03d09000 	.word	0x03d09000
 8008de8:	46000000 	.word	0x46000000
 8008dec:	4c742400 	.word	0x4c742400
 8008df0:	4a742400 	.word	0x4a742400
 8008df4:	4bb71b00 	.word	0x4bb71b00

08008df8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b089      	sub	sp, #36	; 0x24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e00:	4ba0      	ldr	r3, [pc, #640]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e0a:	4b9e      	ldr	r3, [pc, #632]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	091b      	lsrs	r3, r3, #4
 8008e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e16:	4b9b      	ldr	r3, [pc, #620]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e20:	4b98      	ldr	r3, [pc, #608]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	08db      	lsrs	r3, r3, #3
 8008e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	fb02 f303 	mul.w	r3, r2, r3
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 8111 	beq.w	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	f000 8083 	beq.w	8008f52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	f200 80a1 	bhi.w	8008f96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d056      	beq.n	8008f0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e60:	e099      	b.n	8008f96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e62:	4b88      	ldr	r3, [pc, #544]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d02d      	beq.n	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e6e:	4b85      	ldr	r3, [pc, #532]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	08db      	lsrs	r3, r3, #3
 8008e74:	f003 0303 	and.w	r3, r3, #3
 8008e78:	4a83      	ldr	r2, [pc, #524]	; (8009088 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	ee07 3a90 	vmov	s15, r3
 8008e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e98:	4b7a      	ldr	r3, [pc, #488]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ec8:	e087      	b.n	8008fda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008edc:	4b69      	ldr	r3, [pc, #420]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eec:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f0c:	e065      	b.n	8008fda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009094 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f20:	4b58      	ldr	r3, [pc, #352]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f34:	eddf 5a55 	vldr	s11, [pc, #340]	; 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f50:	e043      	b.n	8008fda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	ee07 3a90 	vmov	s15, r3
 8008f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009098 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f64:	4b47      	ldr	r3, [pc, #284]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f74:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f78:	eddf 5a44 	vldr	s11, [pc, #272]	; 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f94:	e021      	b.n	8008fda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa8:	4b36      	ldr	r3, [pc, #216]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fbc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008fda:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	0a5b      	lsrs	r3, r3, #9
 8008fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009000:	ee17 2a90 	vmov	r2, s15
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800901e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009022:	edd7 6a07 	vldr	s13, [r7, #28]
 8009026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902e:	ee17 2a90 	vmov	r2, s15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009040:	ee07 3a90 	vmov	s15, r3
 8009044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009050:	edd7 6a07 	vldr	s13, [r7, #28]
 8009054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800905c:	ee17 2a90 	vmov	r2, s15
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009064:	e008      	b.n	8009078 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	609a      	str	r2, [r3, #8]
}
 8009078:	bf00      	nop
 800907a:	3724      	adds	r7, #36	; 0x24
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	58024400 	.word	0x58024400
 8009088:	03d09000 	.word	0x03d09000
 800908c:	46000000 	.word	0x46000000
 8009090:	4c742400 	.word	0x4c742400
 8009094:	4a742400 	.word	0x4a742400
 8009098:	4bb71b00 	.word	0x4bb71b00

0800909c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090aa:	4b53      	ldr	r3, [pc, #332]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d101      	bne.n	80090ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e099      	b.n	80091ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090ba:	4b4f      	ldr	r3, [pc, #316]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a4e      	ldr	r2, [pc, #312]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7f8 fadb 	bl	8001680 <HAL_GetTick>
 80090ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090cc:	e008      	b.n	80090e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090ce:	f7f8 fad7 	bl	8001680 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e086      	b.n	80091ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090e0:	4b45      	ldr	r3, [pc, #276]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f0      	bne.n	80090ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090ec:	4b42      	ldr	r3, [pc, #264]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	031b      	lsls	r3, r3, #12
 80090fa:	493f      	ldr	r1, [pc, #252]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	628b      	str	r3, [r1, #40]	; 0x28
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	3b01      	subs	r3, #1
 8009106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	3b01      	subs	r3, #1
 8009110:	025b      	lsls	r3, r3, #9
 8009112:	b29b      	uxth	r3, r3
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	041b      	lsls	r3, r3, #16
 800911e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	3b01      	subs	r3, #1
 800912a:	061b      	lsls	r3, r3, #24
 800912c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009130:	4931      	ldr	r1, [pc, #196]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009136:	4b30      	ldr	r3, [pc, #192]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	492d      	ldr	r1, [pc, #180]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009144:	4313      	orrs	r3, r2
 8009146:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009148:	4b2b      	ldr	r3, [pc, #172]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	f023 0220 	bic.w	r2, r3, #32
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4928      	ldr	r1, [pc, #160]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009156:	4313      	orrs	r3, r2
 8009158:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800915a:	4b27      	ldr	r3, [pc, #156]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	4a26      	ldr	r2, [pc, #152]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009160:	f023 0310 	bic.w	r3, r3, #16
 8009164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009166:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800916a:	4b24      	ldr	r3, [pc, #144]	; (80091fc <RCCEx_PLL2_Config+0x160>)
 800916c:	4013      	ands	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	69d2      	ldr	r2, [r2, #28]
 8009172:	00d2      	lsls	r2, r2, #3
 8009174:	4920      	ldr	r1, [pc, #128]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800917a:	4b1f      	ldr	r3, [pc, #124]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009180:	f043 0310 	orr.w	r3, r3, #16
 8009184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800918c:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	4a19      	ldr	r2, [pc, #100]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 8009192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009196:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009198:	e00f      	b.n	80091ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d106      	bne.n	80091ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091a0:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	4a14      	ldr	r2, [pc, #80]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091ac:	e005      	b.n	80091ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	4a11      	ldr	r2, [pc, #68]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091ba:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a0e      	ldr	r2, [pc, #56]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c6:	f7f8 fa5b 	bl	8001680 <HAL_GetTick>
 80091ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091cc:	e008      	b.n	80091e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091ce:	f7f8 fa57 	bl	8001680 <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e006      	b.n	80091ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <RCCEx_PLL2_Config+0x15c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f0      	beq.n	80091ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	ffff0007 	.word	0xffff0007

08009200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800920e:	4b53      	ldr	r3, [pc, #332]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b03      	cmp	r3, #3
 8009218:	d101      	bne.n	800921e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e099      	b.n	8009352 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800921e:	4b4f      	ldr	r3, [pc, #316]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a4e      	ldr	r2, [pc, #312]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800922a:	f7f8 fa29 	bl	8001680 <HAL_GetTick>
 800922e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009230:	e008      	b.n	8009244 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009232:	f7f8 fa25 	bl	8001680 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b02      	cmp	r3, #2
 800923e:	d901      	bls.n	8009244 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e086      	b.n	8009352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009244:	4b45      	ldr	r3, [pc, #276]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f0      	bne.n	8009232 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009250:	4b42      	ldr	r3, [pc, #264]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	051b      	lsls	r3, r3, #20
 800925e:	493f      	ldr	r1, [pc, #252]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009260:	4313      	orrs	r3, r2
 8009262:	628b      	str	r3, [r1, #40]	; 0x28
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	3b01      	subs	r3, #1
 800926a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	3b01      	subs	r3, #1
 8009274:	025b      	lsls	r3, r3, #9
 8009276:	b29b      	uxth	r3, r3
 8009278:	431a      	orrs	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	3b01      	subs	r3, #1
 8009280:	041b      	lsls	r3, r3, #16
 8009282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	3b01      	subs	r3, #1
 800928e:	061b      	lsls	r3, r3, #24
 8009290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009294:	4931      	ldr	r1, [pc, #196]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009296:	4313      	orrs	r3, r2
 8009298:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800929a:	4b30      	ldr	r3, [pc, #192]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	492d      	ldr	r1, [pc, #180]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092ac:	4b2b      	ldr	r3, [pc, #172]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	4928      	ldr	r1, [pc, #160]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092be:	4b27      	ldr	r3, [pc, #156]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	4a26      	ldr	r2, [pc, #152]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ce:	4b24      	ldr	r3, [pc, #144]	; (8009360 <RCCEx_PLL3_Config+0x160>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	69d2      	ldr	r2, [r2, #28]
 80092d6:	00d2      	lsls	r2, r2, #3
 80092d8:	4920      	ldr	r1, [pc, #128]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092de:	4b1f      	ldr	r3, [pc, #124]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	4a1e      	ldr	r2, [pc, #120]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4a19      	ldr	r2, [pc, #100]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 80092f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092fc:	e00f      	b.n	800931e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d106      	bne.n	8009312 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009304:	4b15      	ldr	r3, [pc, #84]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	4a14      	ldr	r2, [pc, #80]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 800930a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800930e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009310:	e005      	b.n	800931e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009312:	4b12      	ldr	r3, [pc, #72]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009316:	4a11      	ldr	r2, [pc, #68]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800931c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a0e      	ldr	r2, [pc, #56]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800932a:	f7f8 f9a9 	bl	8001680 <HAL_GetTick>
 800932e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009330:	e008      	b.n	8009344 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009332:	f7f8 f9a5 	bl	8001680 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e006      	b.n	8009352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <RCCEx_PLL3_Config+0x15c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	58024400 	.word	0x58024400
 8009360:	ffff0007 	.word	0xffff0007

08009364 <memset>:
 8009364:	4402      	add	r2, r0
 8009366:	4603      	mov	r3, r0
 8009368:	4293      	cmp	r3, r2
 800936a:	d100      	bne.n	800936e <memset+0xa>
 800936c:	4770      	bx	lr
 800936e:	f803 1b01 	strb.w	r1, [r3], #1
 8009372:	e7f9      	b.n	8009368 <memset+0x4>

08009374 <__libc_init_array>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	4d0d      	ldr	r5, [pc, #52]	; (80093ac <__libc_init_array+0x38>)
 8009378:	4c0d      	ldr	r4, [pc, #52]	; (80093b0 <__libc_init_array+0x3c>)
 800937a:	1b64      	subs	r4, r4, r5
 800937c:	10a4      	asrs	r4, r4, #2
 800937e:	2600      	movs	r6, #0
 8009380:	42a6      	cmp	r6, r4
 8009382:	d109      	bne.n	8009398 <__libc_init_array+0x24>
 8009384:	4d0b      	ldr	r5, [pc, #44]	; (80093b4 <__libc_init_array+0x40>)
 8009386:	4c0c      	ldr	r4, [pc, #48]	; (80093b8 <__libc_init_array+0x44>)
 8009388:	f000 f826 	bl	80093d8 <_init>
 800938c:	1b64      	subs	r4, r4, r5
 800938e:	10a4      	asrs	r4, r4, #2
 8009390:	2600      	movs	r6, #0
 8009392:	42a6      	cmp	r6, r4
 8009394:	d105      	bne.n	80093a2 <__libc_init_array+0x2e>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	f855 3b04 	ldr.w	r3, [r5], #4
 800939c:	4798      	blx	r3
 800939e:	3601      	adds	r6, #1
 80093a0:	e7ee      	b.n	8009380 <__libc_init_array+0xc>
 80093a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a6:	4798      	blx	r3
 80093a8:	3601      	adds	r6, #1
 80093aa:	e7f2      	b.n	8009392 <__libc_init_array+0x1e>
 80093ac:	08009454 	.word	0x08009454
 80093b0:	08009454 	.word	0x08009454
 80093b4:	08009454 	.word	0x08009454
 80093b8:	08009458 	.word	0x08009458

080093bc <memcpy>:
 80093bc:	440a      	add	r2, r1
 80093be:	4291      	cmp	r1, r2
 80093c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c4:	d100      	bne.n	80093c8 <memcpy+0xc>
 80093c6:	4770      	bx	lr
 80093c8:	b510      	push	{r4, lr}
 80093ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d2:	4291      	cmp	r1, r2
 80093d4:	d1f9      	bne.n	80093ca <memcpy+0xe>
 80093d6:	bd10      	pop	{r4, pc}

080093d8 <_init>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr

080093e4 <_fini>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	bf00      	nop
 80093e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ea:	bc08      	pop	{r3}
 80093ec:	469e      	mov	lr, r3
 80093ee:	4770      	bx	lr

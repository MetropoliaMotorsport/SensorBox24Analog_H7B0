
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b1bc  0800b1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b230  0800b230  0000c230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b234  0800b234  0000c234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800b238  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000068c  24000010  0800b248  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400069c  0800b248  0000d69c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c72e  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002fe2  00000000  00000000  0002976c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018e0  00000000  00000000  0002c74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001369  00000000  00000000  0002e02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e8d  00000000  00000000  0002f397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f78b  00000000  00000000  00063224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a24a  00000000  00000000  000829af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dcbf9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d94  00000000  00000000  001dcc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b1a4 	.word	0x0800b1a4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800b1a4 	.word	0x0800b1a4

080002ec <Config_Setup>:

#include "config.h"

#define ID 2

void Config_Setup(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

#if ID == 1
	Config_1();
#elif ID == 2
	Config_2();
 80002f0:	f000 f802 	bl	80002f8 <Config_2>
#elif ID == 3
	Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_2>:
	CAN_ID[14] = 15;
	CAN_ID[15] = 16;

}

void Config_2(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

	CAN_interval = 20;
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <Config_2+0xd4>)
 80002fe:	2214      	movs	r2, #20
 8000300:	801a      	strh	r2, [r3, #0]

	//Set up sensors to respective MCU pins

	transfer_functions[0] = NC;	//PA6 24v_1
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <Config_2+0xd8>)
 8000304:	220d      	movs	r2, #13
 8000306:	801a      	strh	r2, [r3, #0]
	transfer_functions[1] = NC;	//PC4 3v3_0
 8000308:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <Config_2+0xd8>)
 800030a:	220d      	movs	r2, #13
 800030c:	805a      	strh	r2, [r3, #2]
	transfer_functions[2] = NC;	//PB1 3v3_1
 800030e:	4b30      	ldr	r3, [pc, #192]	@ (80003d0 <Config_2+0xd8>)
 8000310:	220d      	movs	r2, #13
 8000312:	809a      	strh	r2, [r3, #4]
	transfer_functions[3] = NC;	//PA7 24v_2
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <Config_2+0xd8>)
 8000316:	220d      	movs	r2, #13
 8000318:	80da      	strh	r2, [r3, #6]
	transfer_functions[4] = NC;	//PC5 NC
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <Config_2+0xd8>)
 800031c:	220d      	movs	r2, #13
 800031e:	811a      	strh	r2, [r3, #8]
	transfer_functions[5] = NC;	//PB0 NC
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <Config_2+0xd8>)
 8000322:	220d      	movs	r2, #13
 8000324:	815a      	strh	r2, [r3, #10]
	transfer_functions[6] = NC;	//PC0 24v_0
 8000326:	4b2a      	ldr	r3, [pc, #168]	@ (80003d0 <Config_2+0xd8>)
 8000328:	220d      	movs	r2, #13
 800032a:	819a      	strh	r2, [r3, #12]
	transfer_functions[7] = NC;		//PC1 5v_6
 800032c:	4b28      	ldr	r3, [pc, #160]	@ (80003d0 <Config_2+0xd8>)
 800032e:	220d      	movs	r2, #13
 8000330:	81da      	strh	r2, [r3, #14]
	transfer_functions[8] = NC;		//PC2 5v_5
 8000332:	4b27      	ldr	r3, [pc, #156]	@ (80003d0 <Config_2+0xd8>)
 8000334:	220d      	movs	r2, #13
 8000336:	821a      	strh	r2, [r3, #16]
	transfer_functions[9] = NC;		//PC3 5v_4
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <Config_2+0xd8>)
 800033a:	220d      	movs	r2, #13
 800033c:	825a      	strh	r2, [r3, #18]
	transfer_functions[10] = NC;	//PA2 5v_1 angle gear sensor
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_2+0xd8>)
 8000340:	220d      	movs	r2, #13
 8000342:	829a      	strh	r2, [r3, #20]
	transfer_functions[11] = NC;	//PA3 5v_0
 8000344:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <Config_2+0xd8>)
 8000346:	220d      	movs	r2, #13
 8000348:	82da      	strh	r2, [r3, #22]
	transfer_functions[12] = NC;	//PA0 5v_3
 800034a:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <Config_2+0xd8>)
 800034c:	220d      	movs	r2, #13
 800034e:	831a      	strh	r2, [r3, #24]
	transfer_functions[13] = NC;	//PA1 5v_2
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <Config_2+0xd8>)
 8000352:	220d      	movs	r2, #13
 8000354:	835a      	strh	r2, [r3, #26]
	transfer_functions[14] = NC;	//PA4 NC
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_2+0xd8>)
 8000358:	220d      	movs	r2, #13
 800035a:	839a      	strh	r2, [r3, #28]
	transfer_functions[15] = NC;	//PA5 NC
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Config_2+0xd8>)
 800035e:	220d      	movs	r2, #13
 8000360:	83da      	strh	r2, [r3, #30]

	//Change CAN ids for sensors

	CAN_ID[0] = 1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <Config_2+0xdc>)
 8000364:	2201      	movs	r2, #1
 8000366:	801a      	strh	r2, [r3, #0]
	CAN_ID[1] = 2;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <Config_2+0xdc>)
 800036a:	2202      	movs	r2, #2
 800036c:	805a      	strh	r2, [r3, #2]
	CAN_ID[2] = 3;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Config_2+0xdc>)
 8000370:	2203      	movs	r2, #3
 8000372:	809a      	strh	r2, [r3, #4]
	CAN_ID[3] = 4;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Config_2+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	80da      	strh	r2, [r3, #6]
	CAN_ID[4] = 5;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <Config_2+0xdc>)
 800037c:	2205      	movs	r2, #5
 800037e:	811a      	strh	r2, [r3, #8]
	CAN_ID[5] = 6;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Config_2+0xdc>)
 8000382:	2206      	movs	r2, #6
 8000384:	815a      	strh	r2, [r3, #10]
	CAN_ID[6] = 7;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <Config_2+0xdc>)
 8000388:	2207      	movs	r2, #7
 800038a:	819a      	strh	r2, [r3, #12]
	CAN_ID[7] = 8;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <Config_2+0xdc>)
 800038e:	2208      	movs	r2, #8
 8000390:	81da      	strh	r2, [r3, #14]
	CAN_ID[8] = 9;
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <Config_2+0xdc>)
 8000394:	2209      	movs	r2, #9
 8000396:	821a      	strh	r2, [r3, #16]
	CAN_ID[9] = 10;
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <Config_2+0xdc>)
 800039a:	220a      	movs	r2, #10
 800039c:	825a      	strh	r2, [r3, #18]
	CAN_ID[10] = 11;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_2+0xdc>)
 80003a0:	220b      	movs	r2, #11
 80003a2:	829a      	strh	r2, [r3, #20]
	CAN_ID[11] = 12;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <Config_2+0xdc>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	82da      	strh	r2, [r3, #22]
	CAN_ID[12] = 13;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <Config_2+0xdc>)
 80003ac:	220d      	movs	r2, #13
 80003ae:	831a      	strh	r2, [r3, #24]
	CAN_ID[13] = 14;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <Config_2+0xdc>)
 80003b2:	220e      	movs	r2, #14
 80003b4:	835a      	strh	r2, [r3, #26]
	CAN_ID[14] = 15;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Config_2+0xdc>)
 80003b8:	220f      	movs	r2, #15
 80003ba:	839a      	strh	r2, [r3, #28]
	CAN_ID[15] = 16;
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <Config_2+0xdc>)
 80003be:	2210      	movs	r2, #16
 80003c0:	83da      	strh	r2, [r3, #30]

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	24000602 	.word	0x24000602
 80003d0:	24000628 	.word	0x24000628
 80003d4:	24000604 	.word	0x24000604

080003d8 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e0:	e001      	b.n	80003e6 <CanSend+0xe>
		Error_Handler();
 80003e2:	f000 fe57 	bl	8001094 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <CanSend+0x34>)
 80003e8:	f005 fd24 	bl	8005e34 <HAL_FDCAN_GetTxFifoFreeLevel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d007      	beq.n	8000402 <CanSend+0x2a>
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4906      	ldr	r1, [pc, #24]	@ (8000410 <CanSend+0x38>)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <CanSend+0x34>)
 80003f8:	f005 fb55 	bl	8005aa6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ef      	bne.n	80003e2 <CanSend+0xa>
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	24000118 	.word	0x24000118
 8000410:	24000648 	.word	0x24000648

08000414 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d017      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800042c:	2140      	movs	r1, #64	@ 0x40
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f005 fb94 	bl	8005b5c <HAL_FDCAN_GetRxMessage>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800043a:	f000 fe2b 	bl	8001094 <Error_Handler>
 800043e:	e001      	b.n	8000444 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000440:	f000 f84e 	bl	80004e0 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f005 fd05 	bl	8005e58 <HAL_FDCAN_ActivateNotification>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000454:	f000 fe1e 	bl	8001094 <Error_Handler>
		}
	}
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	24000034 	.word	0x24000034
 8000464:	2400066c 	.word	0x2400066c

08000468 <print>:



void print(uint16_t select){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
	if(transfer_functions[select] != NC){
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4a15      	ldr	r2, [pc, #84]	@ (80004cc <print+0x64>)
 8000476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047a:	2b0d      	cmp	r3, #13
 800047c:	d022      	beq.n	80004c4 <print+0x5c>
		uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <print+0x68>)
 8000482:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <print+0x64>)
 800048a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	2001      	movs	r0, #1
 8000494:	f001 fa1c 	bl	80018d0 <TF_Select>
 8000498:	4603      	mov	r3, r0
 800049a:	81fb      	strh	r3, [r7, #14]
		TxData[0] = Data;
 800049c:	89fb      	ldrh	r3, [r7, #14]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <print+0x6c>)
 80004a2:	701a      	strb	r2, [r3, #0]
		TxData[1] = Data >> 8;
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <print+0x6c>)
 80004ae:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = CAN_ID[select];
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <print+0x70>)
 80004b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <print+0x74>)
 80004bc:	601a      	str	r2, [r3, #0]

		CanSend(TxData);
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <print+0x6c>)
 80004c0:	f7ff ff8a 	bl	80003d8 <CanSend>
	}
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	24000628 	.word	0x24000628
 80004d0:	240005c0 	.word	0x240005c0
 80004d4:	2400002c 	.word	0x2400002c
 80004d8:	24000604 	.word	0x24000604
 80004dc:	24000648 	.word	0x24000648

080004e0 <decode>:

void decode(){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
	switch(TxData[0]){
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <decode+0x6c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d01d      	beq.n	800052a <decode+0x4a>
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	dc26      	bgt.n	8000540 <decode+0x60>
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d002      	beq.n	80004fc <decode+0x1c>
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d00b      	beq.n	8000512 <decode+0x32>
	case 3:					//change CAN_id for sensor (most probably not to be used but in case let's have it)
		uint8_t new_can_id = TxData[1];
		CAN_ID[new_can_id] = TxData[2];
		break;
	}
}
 80004fa:	e021      	b.n	8000540 <decode+0x60>
		uint8_t select_id = TxData[1];
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <decode+0x6c>)
 80004fe:	785b      	ldrb	r3, [r3, #1]
 8000500:	717b      	strb	r3, [r7, #5]
		transfer_functions[select_id] = TxData[2];
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <decode+0x6c>)
 8000504:	789a      	ldrb	r2, [r3, #2]
 8000506:	797b      	ldrb	r3, [r7, #5]
 8000508:	4611      	mov	r1, r2
 800050a:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <decode+0x70>)
 800050c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000510:	e016      	b.n	8000540 <decode+0x60>
		uint8_t divider = TxData[1];
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <decode+0x6c>)
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	71bb      	strb	r3, [r7, #6]
		CAN_interval = 1000 / divider;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800051e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000522:	b29a      	uxth	r2, r3
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <decode+0x74>)
 8000526:	801a      	strh	r2, [r3, #0]
		break;
 8000528:	e00a      	b.n	8000540 <decode+0x60>
		uint8_t new_can_id = TxData[1];
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <decode+0x6c>)
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	71fb      	strb	r3, [r7, #7]
		CAN_ID[new_can_id] = TxData[2];
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <decode+0x6c>)
 8000532:	789a      	ldrb	r2, [r3, #2]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4611      	mov	r1, r2
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <decode+0x78>)
 800053a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 800053e:	bf00      	nop
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	2400002c 	.word	0x2400002c
 8000550:	24000628 	.word	0x24000628
 8000554:	24000602 	.word	0x24000602
 8000558:	24000604 	.word	0x24000604

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 fbe7 	bl	8001d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f87b 	bl	8000660 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 800056a:	f7ff febf 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fc95 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 fc73 	bl	8000e5c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000576:	f000 fa57 	bl	8000a28 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800057a:	f000 fadb 	bl	8000b34 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800057e:	f000 fb5f 	bl	8000c40 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000582:	f000 fb9d 	bl	8000cc0 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000586:	f000 f8d9 	bl	800073c <MX_ADC1_Init>
  MX_I2C4_Init();
 800058a:	f000 fbd9 	bl	8000d40 <MX_I2C4_Init>
  MX_TIM3_Init();
 800058e:	f000 fc17 	bl	8000dc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 8000592:	482a      	ldr	r0, [pc, #168]	@ (800063c <main+0xe0>)
 8000594:	f00a f932 	bl	800a7fc <HAL_TIM_Base_Start_IT>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <main+0x46>
 800059e:	f000 fd79 	bl	8001094 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <main+0xe4>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4926      	ldr	r1, [pc, #152]	@ (8000644 <main+0xe8>)
 80005aa:	4825      	ldr	r0, [pc, #148]	@ (8000640 <main+0xe4>)
 80005ac:	f001 ff96 	bl	80024dc <HAL_ADC_Start_DMA>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <main+0x5e>
 80005b6:	f000 fd6d 	bl	8001094 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 80005ba:	4823      	ldr	r0, [pc, #140]	@ (8000648 <main+0xec>)
 80005bc:	f005 fa48 	bl	8005a50 <HAL_FDCAN_Start>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <main+0x70>
 80005c6:	f000 fd65 	bl	8001094 <Error_Handler>
 80005ca:	e008      	b.n	80005de <main+0x82>
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d2:	481e      	ldr	r0, [pc, #120]	@ (800064c <main+0xf0>)
 80005d4:	f006 fb66 	bl	8006ca4 <HAL_GPIO_WritePin>
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <main+0xf4>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	4819      	ldr	r0, [pc, #100]	@ (8000648 <main+0xec>)
 80005e4:	f005 fc38 	bl	8005e58 <HAL_FDCAN_ActivateNotification>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x96>
 80005ee:	f000 fd51 	bl	8001094 <Error_Handler>


  uint8_t counter = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <main+0xf4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1fb      	bne.n	80005f6 <main+0x9a>
		  if(millis % CAN_interval == 0){
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <main+0xf8>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <main+0xfc>)
 8000604:	8812      	ldrh	r2, [r2, #0]
 8000606:	fbb3 f1f2 	udiv	r1, r3, r2
 800060a:	fb01 f202 	mul.w	r2, r1, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1ef      	bne.n	80005f6 <main+0x9a>
			  print(counter);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff24 	bl	8000468 <print>
			  counter++;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3301      	adds	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b10      	cmp	r3, #16
 800062a:	d1e4      	bne.n	80005f6 <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	480b      	ldr	r0, [pc, #44]	@ (800065c <main+0x100>)
 8000630:	f006 fb51 	bl	8006cd6 <HAL_GPIO_TogglePin>
				  counter = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000638:	e7dd      	b.n	80005f6 <main+0x9a>
 800063a:	bf00      	nop
 800063c:	24000354 	.word	0x24000354
 8000640:	2400003c 	.word	0x2400003c
 8000644:	240003a0 	.word	0x240003a0
 8000648:	24000118 	.word	0x24000118
 800064c:	58020400 	.word	0x58020400
 8000650:	24000626 	.word	0x24000626
 8000654:	24000624 	.word	0x24000624
 8000658:	24000602 	.word	0x24000602
 800065c:	58020800 	.word	0x58020800

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	224c      	movs	r2, #76	@ 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a fd5e 	bl	800b130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00a fd58 	bl	800b130 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <SystemClock_Config+0xd4>)
 8000682:	f04f 32ff 	mov.w	r2, #4294967295
 8000686:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068a:	2002      	movs	r0, #2
 800068c:	f006 fc72 	bl	8006f74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xd8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a27      	ldr	r2, [pc, #156]	@ (8000738 <SystemClock_Config+0xd8>)
 800069a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xd8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ac:	bf00      	nop
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <SystemClock_Config+0xd8>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ba:	d1f8      	bne.n	80006ae <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <SystemClock_Config+0xd4>)
 80006be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006c0:	f023 0303 	bic.w	r3, r3, #3
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <SystemClock_Config+0xd4>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006cc:	2303      	movs	r3, #3
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fc7e 	bl	8006fe8 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 fccf 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	@ 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	@ 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f007 f895 	bl	800784c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000728:	f000 fcb4 	bl	8001094 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58024400 	.word	0x58024400
 8000738:	58024800 	.word	0x58024800

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000760:	4b9f      	ldr	r3, [pc, #636]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000762:	4aa0      	ldr	r2, [pc, #640]	@ (80009e4 <MX_ADC1_Init+0x2a8>)
 8000764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000766:	4b9e      	ldr	r3, [pc, #632]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000768:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b9c      	ldr	r3, [pc, #624]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000770:	2208      	movs	r2, #8
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000774:	4b9a      	ldr	r3, [pc, #616]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000776:	2201      	movs	r2, #1
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077a:	4b99      	ldr	r3, [pc, #612]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800077c:	2204      	movs	r2, #4
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000780:	4b97      	ldr	r3, [pc, #604]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000782:	2200      	movs	r2, #0
 8000784:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000786:	4b96      	ldr	r3, [pc, #600]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000788:	2201      	movs	r2, #1
 800078a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 800078c:	4b94      	ldr	r3, [pc, #592]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800078e:	2210      	movs	r2, #16
 8000790:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b93      	ldr	r3, [pc, #588]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000794:	2200      	movs	r2, #0
 8000796:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b91      	ldr	r3, [pc, #580]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b90      	ldr	r3, [pc, #576]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a4:	4b8e      	ldr	r3, [pc, #568]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007a6:	2203      	movs	r2, #3
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007aa:	4b8d      	ldr	r3, [pc, #564]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b0:	4b8b      	ldr	r3, [pc, #556]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b8a      	ldr	r3, [pc, #552]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	4888      	ldr	r0, [pc, #544]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007c0:	f001 fd32 	bl	8002228 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ca:	f000 fc63 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4881      	ldr	r0, [pc, #516]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80007da:	f002 fc35 	bl	8003048 <HAL_ADCEx_MultiModeConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e4:	f000 fc56 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e8:	4b7f      	ldr	r3, [pc, #508]	@ (80009e8 <MX_ADC1_Init+0x2ac>)
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2306      	movs	r3, #6
 80007ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007f0:	2304      	movs	r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4875      	ldr	r0, [pc, #468]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800080c:	f001 ff2e 	bl	800266c <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000816:	f000 fc3d 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800081a:	4b74      	ldr	r3, [pc, #464]	@ (80009ec <MX_ADC1_Init+0x2b0>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800081e:	230c      	movs	r3, #12
 8000820:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	486e      	ldr	r0, [pc, #440]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000828:	f001 ff20 	bl	800266c <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000832:	f000 fc2f 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000836:	4b6e      	ldr	r3, [pc, #440]	@ (80009f0 <MX_ADC1_Init+0x2b4>)
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800083a:	2312      	movs	r3, #18
 800083c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4867      	ldr	r0, [pc, #412]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000844:	f001 ff12 	bl	800266c <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800084e:	f000 fc21 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000852:	4b68      	ldr	r3, [pc, #416]	@ (80009f4 <MX_ADC1_Init+0x2b8>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000856:	2318      	movs	r3, #24
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4860      	ldr	r0, [pc, #384]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000860:	f001 ff04 	bl	800266c <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800086a:	f000 fc13 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800086e:	4b62      	ldr	r3, [pc, #392]	@ (80009f8 <MX_ADC1_Init+0x2bc>)
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4858      	ldr	r0, [pc, #352]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800087e:	f001 fef5 	bl	800266c <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000888:	f000 fc04 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800088c:	4b5b      	ldr	r3, [pc, #364]	@ (80009fc <MX_ADC1_Init+0x2c0>)
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000890:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000894:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4851      	ldr	r0, [pc, #324]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800089c:	f001 fee6 	bl	800266c <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80008a6:	f000 fbf5 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008aa:	4b55      	ldr	r3, [pc, #340]	@ (8000a00 <MX_ADC1_Init+0x2c4>)
 80008ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008ae:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4849      	ldr	r0, [pc, #292]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80008ba:	f001 fed7 	bl	800266c <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008c4:	f000 fbe6 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a04 <MX_ADC1_Init+0x2c8>)
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008cc:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4842      	ldr	r0, [pc, #264]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80008d8:	f001 fec8 	bl	800266c <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80008e2:	f000 fbd7 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008e6:	4b48      	ldr	r3, [pc, #288]	@ (8000a08 <MX_ADC1_Init+0x2cc>)
 80008e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80008ea:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	483a      	ldr	r0, [pc, #232]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80008f6:	f001 feb9 	bl	800266c <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8000900:	f000 fbc8 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000904:	4b41      	ldr	r3, [pc, #260]	@ (8000a0c <MX_ADC1_Init+0x2d0>)
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4833      	ldr	r0, [pc, #204]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000914:	f001 feaa 	bl	800266c <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800091e:	f000 fbb9 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000922:	4b3b      	ldr	r3, [pc, #236]	@ (8000a10 <MX_ADC1_Init+0x2d4>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000926:	f240 2306 	movw	r3, #518	@ 0x206
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	482b      	ldr	r0, [pc, #172]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000932:	f001 fe9b 	bl	800266c <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 800093c:	f000 fbaa 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000940:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <MX_ADC1_Init+0x2d8>)
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000944:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000948:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4824      	ldr	r0, [pc, #144]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 8000950:	f001 fe8c 	bl	800266c <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 800095a:	f000 fb9b 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800095e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <MX_ADC1_Init+0x2dc>)
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000962:	f240 2312 	movw	r3, #530	@ 0x212
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	481c      	ldr	r0, [pc, #112]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800096e:	f001 fe7d 	bl	800266c <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 8000978:	f000 fb8c 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <MX_ADC1_Init+0x2e0>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000980:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 800098c:	f001 fe6e 	bl	800266c <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8000996:	f000 fb7d 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_ADC1_Init+0x2e4>)
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800099e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80009aa:	f001 fe5f 	bl	800266c <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80009b4:	f000 fb6e 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_ADC1_Init+0x2e8>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80009bc:	f240 3306 	movw	r3, #774	@ 0x306
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_ADC1_Init+0x2a4>)
 80009c8:	f001 fe50 	bl	800266c <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80009d2:	f000 fb5f 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	@ 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2400003c 	.word	0x2400003c
 80009e4:	40022000 	.word	0x40022000
 80009e8:	0c900008 	.word	0x0c900008
 80009ec:	10c00010 	.word	0x10c00010
 80009f0:	14f00020 	.word	0x14f00020
 80009f4:	1d500080 	.word	0x1d500080
 80009f8:	21800100 	.word	0x21800100
 80009fc:	25b00200 	.word	0x25b00200
 8000a00:	2a000400 	.word	0x2a000400
 8000a04:	2e300800 	.word	0x2e300800
 8000a08:	32601000 	.word	0x32601000
 8000a0c:	36902000 	.word	0x36902000
 8000a10:	3ac04000 	.word	0x3ac04000
 8000a14:	3ef08000 	.word	0x3ef08000
 8000a18:	43210000 	.word	0x43210000
 8000a1c:	47520000 	.word	0x47520000
 8000a20:	4b840000 	.word	0x4b840000
 8000a24:	4fb80000 	.word	0x4fb80000

08000a28 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b28 <MX_FDCAN1_Init+0x100>)
 8000a30:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a32:	4b3c      	ldr	r3, [pc, #240]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a38:	4b3a      	ldr	r3, [pc, #232]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a3e:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a44:	4b37      	ldr	r3, [pc, #220]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a4a:	4b36      	ldr	r3, [pc, #216]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a50:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a5e:	2216      	movs	r2, #22
 8000a60:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a74:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a80:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a88:	221c      	movs	r2, #28
 8000a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a92:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <MX_FDCAN1_Init+0xfc>)
 8000ad6:	f004 fddd 	bl	8005694 <HAL_FDCAN_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ae0:	f000 fad8 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_FDCAN1_Init+0x104>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000aec:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <MX_FDCAN1_Init+0x108>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24000118 	.word	0x24000118
 8000b28:	4000a000 	.word	0x4000a000
 8000b2c:	24000604 	.word	0x24000604
 8000b30:	24000648 	.word	0x24000648

08000b34 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c34 <MX_FDCAN2_Init+0x100>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b4a:	4b39      	ldr	r3, [pc, #228]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b50:	4b37      	ldr	r3, [pc, #220]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b56:	4b36      	ldr	r3, [pc, #216]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b62:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000b68:	4b31      	ldr	r3, [pc, #196]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b6a:	2216      	movs	r2, #22
 8000b6c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <MX_FDCAN2_Init+0xfc>)
 8000be2:	f004 fd57 	bl	8005694 <HAL_FDCAN_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bec:	f000 fa52 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_FDCAN2_Init+0x104>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000bf8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <MX_FDCAN2_Init+0x108>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	240001b8 	.word	0x240001b8
 8000c34:	4000a400 	.word	0x4000a400
 8000c38:	24000604 	.word	0x24000604
 8000c3c:	24000648 	.word	0x24000648

08000c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_I2C1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <MX_I2C1_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c7c:	f006 f846 	bl	8006d0c <HAL_I2C_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f000 fa05 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c8e:	f006 f8d9 	bl	8006e44 <HAL_I2CEx_ConfigAnalogFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 f9fc 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000ca0:	f006 f91b 	bl	8006eda <HAL_I2CEx_ConfigDigitalFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 f9f3 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000258 	.word	0x24000258
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	00707cbb 	.word	0x00707cbb

08000cc0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <MX_I2C3_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <MX_I2C3_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000cfc:	f006 f806 	bl	8006d0c <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 f9c5 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000d0e:	f006 f899 	bl	8006e44 <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f9bc 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_I2C3_Init+0x74>)
 8000d20:	f006 f8db 	bl	8006eda <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f9b3 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240002ac 	.word	0x240002ac
 8000d38:	40005c00 	.word	0x40005c00
 8000d3c:	00707cbb 	.word	0x00707cbb

08000d40 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <MX_I2C4_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <MX_I2C4_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d7c:	f005 ffc6 	bl	8006d0c <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 f985 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000d8e:	f006 f859 	bl	8006e44 <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 f97c 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_I2C4_Init+0x74>)
 8000da0:	f006 f89b 	bl	8006eda <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 f973 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000300 	.word	0x24000300
 8000db8:	58001c00 	.word	0x58001c00
 8000dbc:	00707cbb 	.word	0x00707cbb

08000dc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000de0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <MX_TIM3_Init+0x98>)
 8000de2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000de6:	223f      	movs	r2, #63	@ 0x3f
 8000de8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e06:	f009 fca1 	bl	800a74c <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e10:	f000 f940 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e22:	f009 fe6b 	bl	800aafc <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e2c:	f000 f932 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e3e:	f00a f8cb 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e48:	f000 f924 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000354 	.word	0x24000354
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e64:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e68:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_DMA_Init+0x3c>)
 8000e74:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	200b      	movs	r0, #11
 8000e86:	f002 fa56 	bl	8003336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f002 fa6d 	bl	800336a <HAL_NVIC_EnableIRQ>

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000eb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eb8:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef4:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f12:	4a1c      	ldr	r2, [pc, #112]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_GPIO_Init+0xe8>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f30:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <MX_GPIO_Init+0xec>)
 8000f32:	f005 feb7 	bl	8006ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2140      	movs	r1, #64	@ 0x40
 8000f3a:	4814      	ldr	r0, [pc, #80]	@ (8000f8c <MX_GPIO_Init+0xf0>)
 8000f3c:	f005 feb2 	bl	8006ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <MX_GPIO_Init+0xec>)
 8000f5a:	f005 fcf3 	bl	8006944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000f5e:	2340      	movs	r3, #64	@ 0x40
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_GPIO_Init+0xf0>)
 8000f76:	f005 fce5 	bl	8006944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	58020800 	.word	0x58020800

08000f90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a37      	ldr	r2, [pc, #220]	@ (800107c <HAL_ADC_ConvCpltCallback+0xec>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d165      	bne.n	800106e <HAL_ADC_ConvCpltCallback+0xde>
		if(AVE_POS < ROLLING_AVE){
 8000fa2:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	d806      	bhi.n	8000fb8 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 8000faa:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e03b      	b.n	8001030 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e030      	b.n	8001026 <HAL_ADC_ConvCpltCallback+0x96>
				if(transfer_functions[i] != NC){
 8000fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	2b0d      	cmp	r3, #13
 8000fce:	d027      	beq.n	8001020 <HAL_ADC_ConvCpltCallback+0x90>
					for(int z = 0; z < ROLLING_AVE;z++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e021      	b.n	800101a <HAL_ADC_ConvCpltCallback+0x8a>
						if(z == 0){
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10a      	bne.n	8000ff2 <HAL_ADC_ConvCpltCallback+0x62>
							averages[i] = all_raw_data[i][0];
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001088 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	4413      	add	r3, r2
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4a28      	ldr	r2, [pc, #160]	@ (800108c <HAL_ADC_ConvCpltCallback+0xfc>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ff0:	e010      	b.n	8001014 <HAL_ADC_ConvCpltCallback+0x84>
						}else{
							averages[i]=(averages[i] + all_raw_data[i][z])/2;
 8000ff2:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_ADC_ConvCpltCallback+0xfc>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	4823      	ldr	r0, [pc, #140]	@ (8001088 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	0111      	lsls	r1, r2, #4
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	440a      	add	r2, r1
 8001004:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001008:	4413      	add	r3, r2
 800100a:	085a      	lsrs	r2, r3, #1
 800100c:	491f      	ldr	r1, [pc, #124]	@ (800108c <HAL_ADC_ConvCpltCallback+0xfc>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int z = 0; z < ROLLING_AVE;z++){
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3301      	adds	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	ddda      	ble.n	8000fd6 <HAL_ADC_ConvCpltCallback+0x46>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8c9      	bhi.n	8000fc4 <HAL_ADC_ConvCpltCallback+0x34>
						}
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e016      	b.n	8001064 <HAL_ADC_ConvCpltCallback+0xd4>
			if(transfer_functions[j] != NC){
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103e:	2b0d      	cmp	r3, #13
 8001040:	d00d      	beq.n	800105e <HAL_ADC_ConvCpltCallback+0xce>
				all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3b01      	subs	r3, #1
 8001048:	4911      	ldr	r1, [pc, #68]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x100>)
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8001050:	490d      	ldr	r1, [pc, #52]	@ (8001088 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	4413      	add	r3, r2
 8001058:	4602      	mov	r2, r0
 800105a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699a      	ldr	r2, [r3, #24]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8e3      	bhi.n	8001036 <HAL_ADC_ConvCpltCallback+0xa6>
			}
		}
	}
}
 800106e:	bf00      	nop
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000
 8001080:	24000600 	.word	0x24000600
 8001084:	24000628 	.word	0x24000628
 8001088:	240003c0 	.word	0x240003c0
 800108c:	240005c0 	.word	0x240005c0
 8001090:	240003a0 	.word	0x240003a0

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_MspInit+0x3c>)
 80010a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_MspInit+0x3c>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_MspInit+0x3c>)
 80010b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2005      	movs	r0, #5
 80010ca:	f002 f934 	bl	8003336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f002 f94b 	bl	800336a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58024400 	.word	0x58024400

080010e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0bc      	sub	sp, #240	@ 0xf0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	22c0      	movs	r2, #192	@ 0xc0
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00a f815 	bl	800b130 <memset>
  if(hadc->Instance==ADC1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a62      	ldr	r2, [pc, #392]	@ (8001294 <HAL_ADC_MspInit+0x1b4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f040 80bc 	bne.w	800128a <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001112:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001122:	2320      	movs	r3, #32
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001126:	2308      	movs	r3, #8
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 800112a:	2319      	movs	r3, #25
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001132:	23c0      	movs	r3, #192	@ 0xc0
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fef5 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001154:	f7ff ff9e 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b4f      	ldr	r3, [pc, #316]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 800115a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800115e:	4a4e      	ldr	r2, [pc, #312]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001168:	4b4b      	ldr	r3, [pc, #300]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 800116a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b48      	ldr	r3, [pc, #288]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 8001178:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800117c:	4a46      	ldr	r2, [pc, #280]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001186:	4b44      	ldr	r3, [pc, #272]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 8001188:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 8001196:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800119a:	4a3f      	ldr	r2, [pc, #252]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 80011a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 80011b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b8:	4a37      	ldr	r2, [pc, #220]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_ADC_MspInit+0x1b8>)
 80011c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011d0:	233f      	movs	r3, #63	@ 0x3f
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <HAL_ADC_MspInit+0x1bc>)
 80011ea:	f005 fbab 	bl	8006944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001204:	4619      	mov	r1, r3
 8001206:	4826      	ldr	r0, [pc, #152]	@ (80012a0 <HAL_ADC_MspInit+0x1c0>)
 8001208:	f005 fb9c 	bl	8006944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001222:	4619      	mov	r1, r3
 8001224:	481f      	ldr	r0, [pc, #124]	@ (80012a4 <HAL_ADC_MspInit+0x1c4>)
 8001226:	f005 fb8d 	bl	8006944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 800122c:	4a1f      	ldr	r2, [pc, #124]	@ (80012ac <HAL_ADC_MspInit+0x1cc>)
 800122e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001232:	2209      	movs	r2, #9
 8001234:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001244:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001248:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 800124c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001250:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001258:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 800125c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001260:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800126e:	480e      	ldr	r0, [pc, #56]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001270:	f002 f896 	bl	80033a0 <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 800127a:	f7ff ff0b 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001282:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_ADC_MspInit+0x1c8>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	37f0      	adds	r7, #240	@ 0xf0
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000
 8001298:	58024400 	.word	0x58024400
 800129c:	58020800 	.word	0x58020800
 80012a0:	58020000 	.word	0x58020000
 80012a4:	58020400 	.word	0x58020400
 80012a8:	240000a0 	.word	0x240000a0
 80012ac:	40020010 	.word	0x40020010

080012b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0bc      	sub	sp, #240	@ 0xf0
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	22c0      	movs	r2, #192	@ 0xc0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f009 ff2d 	bl	800b130 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5a      	ldr	r2, [pc, #360]	@ (8001444 <HAL_FDCAN_MspInit+0x194>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d158      	bne.n	8001392 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 fe1e 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001302:	f7ff fec7 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001306:	4b50      	ldr	r3, [pc, #320]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10e      	bne.n	8001336 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001318:	4b4c      	ldr	r3, [pc, #304]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 800131a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800131e:	4a4b      	ldr	r2, [pc, #300]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001324:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001328:	4b48      	ldr	r3, [pc, #288]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 800132a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b45      	ldr	r3, [pc, #276]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 8001338:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800133c:	4a43      	ldr	r2, [pc, #268]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001346:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 8001348:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001354:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001358:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800136e:	2309      	movs	r3, #9
 8001370:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001378:	4619      	mov	r1, r3
 800137a:	4835      	ldr	r0, [pc, #212]	@ (8001450 <HAL_FDCAN_MspInit+0x1a0>)
 800137c:	f005 fae2 	bl	8006944 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2013      	movs	r0, #19
 8001386:	f001 ffd6 	bl	8003336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800138a:	2013      	movs	r0, #19
 800138c:	f001 ffed 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001390:	e054      	b.n	800143c <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <HAL_FDCAN_MspInit+0x1a4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d14f      	bne.n	800143c <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800139c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fdc0 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 80013be:	f7ff fe69 	bl	8001094 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <HAL_FDCAN_MspInit+0x198>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10e      	bne.n	80013f2 <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 80013d6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013da:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 80013e6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 80013f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_FDCAN_MspInit+0x19c>)
 8001404:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001410:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001414:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800142a:	2309      	movs	r3, #9
 800142c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001434:	4619      	mov	r1, r3
 8001436:	4808      	ldr	r0, [pc, #32]	@ (8001458 <HAL_FDCAN_MspInit+0x1a8>)
 8001438:	f005 fa84 	bl	8006944 <HAL_GPIO_Init>
}
 800143c:	bf00      	nop
 800143e:	37f0      	adds	r7, #240	@ 0xf0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	4000a000 	.word	0x4000a000
 8001448:	24000694 	.word	0x24000694
 800144c:	58024400 	.word	0x58024400
 8001450:	58020000 	.word	0x58020000
 8001454:	4000a400 	.word	0x4000a400
 8001458:	58020400 	.word	0x58020400

0800145c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0c0      	sub	sp, #256	@ 0x100
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f009 fe57 	bl	800b130 <memset>
  if(hi2c->Instance==I2C1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a86      	ldr	r2, [pc, #536]	@ (80016a0 <HAL_I2C_MspInit+0x244>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d146      	bne.n	800151a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800148c:	f04f 0208 	mov.w	r2, #8
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fd48 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014ae:	f7ff fdf1 	bl	8001094 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80014b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014b8:	4a7a      	ldr	r2, [pc, #488]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014c2:	4b78      	ldr	r3, [pc, #480]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80014c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d0:	23c0      	movs	r3, #192	@ 0xc0
 80014d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014f2:	4619      	mov	r1, r3
 80014f4:	486c      	ldr	r0, [pc, #432]	@ (80016a8 <HAL_I2C_MspInit+0x24c>)
 80014f6:	f005 fa25 	bl	8006944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fa:	4b6a      	ldr	r3, [pc, #424]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80014fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001500:	4a68      	ldr	r2, [pc, #416]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001506:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800150a:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800150c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001518:	e0bd      	b.n	8001696 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a63      	ldr	r2, [pc, #396]	@ (80016ac <HAL_I2C_MspInit+0x250>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d16c      	bne.n	80015fe <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001524:	f04f 0208 	mov.w	r2, #8
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fcfc 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001546:	f7ff fda5 	bl	8001094 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b56      	ldr	r3, [pc, #344]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800154c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001550:	4a54      	ldr	r2, [pc, #336]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800155a:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800155c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b4e      	ldr	r3, [pc, #312]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800156a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800156e:	4a4d      	ldr	r2, [pc, #308]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001578:	4b4a      	ldr	r3, [pc, #296]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800157a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800158a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158e:	2312      	movs	r3, #18
 8001590:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a0:	2304      	movs	r3, #4
 80015a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015aa:	4619      	mov	r1, r3
 80015ac:	4840      	ldr	r0, [pc, #256]	@ (80016b0 <HAL_I2C_MspInit+0x254>)
 80015ae:	f005 f9c9 	bl	8006944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ba:	2312      	movs	r3, #18
 80015bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015cc:	2304      	movs	r3, #4
 80015ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015d6:	4619      	mov	r1, r3
 80015d8:	4836      	ldr	r0, [pc, #216]	@ (80016b4 <HAL_I2C_MspInit+0x258>)
 80015da:	f005 f9b3 	bl	8006944 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80015e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015e4:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80015e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 80015f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
}
 80015fc:	e04b      	b.n	8001696 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <HAL_I2C_MspInit+0x25c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d146      	bne.n	8001696 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001608:	f04f 0210 	mov.w	r2, #16
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fc8a 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 800162a:	f7ff fd33 	bl	8001094 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001654:	2312      	movs	r3, #18
 8001656:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001666:	2306      	movs	r3, #6
 8001668:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <HAL_I2C_MspInit+0x24c>)
 8001674:	f005 f966 	bl	8006944 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800167a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001684:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800168a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800168e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	bf00      	nop
 8001698:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005400 	.word	0x40005400
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58020400 	.word	0x58020400
 80016ac:	40005c00 	.word	0x40005c00
 80016b0:	58020800 	.word	0x58020800
 80016b4:	58020000 	.word	0x58020000
 80016b8:	58001c00 	.word	0x58001c00

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_TIM_Base_MspInit+0x48>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d116      	bne.n	80016fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_TIM_Base_MspInit+0x4c>)
 80016d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <HAL_TIM_Base_MspInit+0x4c>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	201d      	movs	r0, #29
 80016f2:	f001 fe20 	bl	8003336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f6:	201d      	movs	r0, #29
 80016f8:	f001 fe37 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40000400 	.word	0x40000400
 8001708:	58024400 	.word	0x58024400

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 fb59 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream0_IRQHandler+0x10>)
 800177e:	f002 fc07 	bl	8003f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	240000a0 	.word	0x240000a0

0800178c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <FDCAN1_IT0_IRQHandler+0x10>)
 8001792:	f004 fbdb 	bl	8005f4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000118 	.word	0x24000118

080017a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <TIM3_IRQHandler+0x2c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <TIM3_IRQHandler+0x2c>)
 80017ae:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <TIM3_IRQHandler+0x2c>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b8:	d102      	bne.n	80017c0 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <TIM3_IRQHandler+0x30>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <TIM3_IRQHandler+0x34>)
 80017c2:	f009 f893 	bl	800a8ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24000624 	.word	0x24000624
 80017d0:	24000626 	.word	0x24000626
 80017d4:	24000354 	.word	0x24000354

080017d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <SystemInit+0xd8>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	4a33      	ldr	r2, [pc, #204]	@ (80018b0 <SystemInit+0xd8>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <SystemInit+0xdc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d807      	bhi.n	8001808 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <SystemInit+0xdc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 030f 	bic.w	r3, r3, #15
 8001800:	4a2c      	ldr	r2, [pc, #176]	@ (80018b4 <SystemInit+0xdc>)
 8001802:	f043 0303 	orr.w	r3, r3, #3
 8001806:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001808:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <SystemInit+0xe0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <SystemInit+0xe0>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <SystemInit+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <SystemInit+0xe0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4926      	ldr	r1, [pc, #152]	@ (80018b8 <SystemInit+0xe0>)
 8001820:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <SystemInit+0xe4>)
 8001822:	4013      	ands	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <SystemInit+0xdc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <SystemInit+0xdc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 030f 	bic.w	r3, r3, #15
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <SystemInit+0xdc>)
 800183c:	f043 0303 	orr.w	r3, r3, #3
 8001840:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <SystemInit+0xe0>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <SystemInit+0xe0>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800184e:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <SystemInit+0xe0>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <SystemInit+0xe0>)
 8001856:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <SystemInit+0xe8>)
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <SystemInit+0xe0>)
 800185c:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <SystemInit+0xec>)
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <SystemInit+0xe0>)
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <SystemInit+0xf0>)
 8001864:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001866:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <SystemInit+0xe0>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <SystemInit+0xe0>)
 800186e:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <SystemInit+0xf0>)
 8001870:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <SystemInit+0xe0>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <SystemInit+0xe0>)
 800187a:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <SystemInit+0xf0>)
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <SystemInit+0xe0>)
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <SystemInit+0xe0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <SystemInit+0xe0>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <SystemInit+0xe0>)
 8001892:	2200      	movs	r2, #0
 8001894:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <SystemInit+0xf4>)
 8001898:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800189c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <SystemInit+0xd8>)
 80018a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018a4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	52002000 	.word	0x52002000
 80018b8:	58024400 	.word	0x58024400
 80018bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80018c0:	02020200 	.word	0x02020200
 80018c4:	01ff0000 	.word	0x01ff0000
 80018c8:	01010280 	.word	0x01010280
 80018cc:	52004000 	.word	0x52004000

080018d0 <TF_Select>:
#include "functions.h"
#include "main.h"



uint16_t TF_Select(uint8_t bytes, uint32_t raw, uint8_t sensor){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	71bb      	strb	r3, [r7, #6]

	uint16_t transmit = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	81fb      	strh	r3, [r7, #14]

	switch(sensor){
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	f200 8085 	bhi.w	80019f6 <TF_Select+0x126>
 80018ec:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <TF_Select+0x24>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001929 	.word	0x08001929
 80018f8:	08001939 	.word	0x08001939
 80018fc:	08001949 	.word	0x08001949
 8001900:	08001959 	.word	0x08001959
 8001904:	08001969 	.word	0x08001969
 8001908:	08001979 	.word	0x08001979
 800190c:	08001999 	.word	0x08001999
 8001910:	08001989 	.word	0x08001989
 8001914:	080019a9 	.word	0x080019a9
 8001918:	080019b9 	.word	0x080019b9
 800191c:	080019c9 	.word	0x080019c9
 8001920:	080019d9 	.word	0x080019d9
 8001924:	080019e9 	.word	0x080019e9
	case VOLTAGE_3V3:
		transmit = TF_3V3(bytes, raw);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f869 	bl	8001a04 <TF_3V3>
 8001932:	4603      	mov	r3, r0
 8001934:	81fb      	strh	r3, [r7, #14]
		break;
 8001936:	e05f      	b.n	80019f8 <TF_Select+0x128>
	case VOLTAGE_5V:
		transmit = TF_5V(bytes, raw);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f885 	bl	8001a4c <TF_5V>
 8001942:	4603      	mov	r3, r0
 8001944:	81fb      	strh	r3, [r7, #14]
		break;
 8001946:	e057      	b.n	80019f8 <TF_Select+0x128>
	case VOLTAGE_24V:
		transmit = TF_24V(bytes,raw);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f8a1 	bl	8001a94 <TF_24V>
 8001952:	4603      	mov	r3, r0
 8001954:	81fb      	strh	r3, [r7, #14]
		break;
 8001956:	e04f      	b.n	80019f8 <TF_Select+0x128>
	case BPPS:
		transmit = TF_BPPS(bytes, raw);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f8bd 	bl	8001adc <TF_BPPS>
 8001962:	4603      	mov	r3, r0
 8001964:	81fb      	strh	r3, [r7, #14]
		break;
 8001966:	e047      	b.n	80019f8 <TF_Select+0x128>
	case APPS:
		transmit = TF_APPS(bytes, raw);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f8d2 	bl	8001b16 <TF_APPS>
 8001972:	4603      	mov	r3, r0
 8001974:	81fb      	strh	r3, [r7, #14]
		break;
 8001976:	e03f      	b.n	80019f8 <TF_Select+0x128>
	case FRONT_HEAVE:
		transmit = TF_FRONT_HEAVE(bytes, raw);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f8e7 	bl	8001b50 <TF_FRONT_HEAVE>
 8001982:	4603      	mov	r3, r0
 8001984:	81fb      	strh	r3, [r7, #14]
		break;
 8001986:	e037      	b.n	80019f8 <TF_Select+0x128>
	case REAR_HEAVE:
		transmit = TF_REAR_HEAVE(bytes, raw);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f8fc 	bl	8001b8a <TF_REAR_HEAVE>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]
		break;
 8001996:	e02f      	b.n	80019f8 <TF_Select+0x128>
	case FRONT_ROLL:
		transmit = TF_FRONT_ROLL(bytes, raw);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f911 	bl	8001bc4 <TF_FRONT_ROLL>
 80019a2:	4603      	mov	r3, r0
 80019a4:	81fb      	strh	r3, [r7, #14]
		break;
 80019a6:	e027      	b.n	80019f8 <TF_Select+0x128>
	case REAR_ROLL:
		transmit = TF_REAR_ROLL(bytes, raw);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f926 	bl	8001bfe <TF_REAR_ROLL>
 80019b2:	4603      	mov	r3, r0
 80019b4:	81fb      	strh	r3, [r7, #14]
		break;
 80019b6:	e01f      	b.n	80019f8 <TF_Select+0x128>
	case TYRE_TEMP:
		transmit = TF_TYRE_TEMP(bytes, raw);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f93b 	bl	8001c38 <TF_TYRE_TEMP>
 80019c2:	4603      	mov	r3, r0
 80019c4:	81fb      	strh	r3, [r7, #14]
		break;
 80019c6:	e017      	b.n	80019f8 <TF_Select+0x128>
	case ANGLE_GEAR:
		transmit = TF_ANGLE_GEAR(bytes, raw);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f940 	bl	8001c52 <TF_ANGLE_GEAR>
 80019d2:	4603      	mov	r3, r0
 80019d4:	81fb      	strh	r3, [r7, #14]
		break;
 80019d6:	e00f      	b.n	80019f8 <TF_Select+0x128>
	case WATER_LVL:
		transmit = TF_WATER_LVL(bytes, raw);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f955 	bl	8001c8c <TF_WATER_LVL>
 80019e2:	4603      	mov	r3, r0
 80019e4:	81fb      	strh	r3, [r7, #14]
		break;
 80019e6:	e007      	b.n	80019f8 <TF_Select+0x128>
	case BRK_PRES:
		transmit = TF_BRK_PRES(bytes, raw);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f95a 	bl	8001ca6 <TF_BRK_PRES>
 80019f2:	4603      	mov	r3, r0
 80019f4:	81fb      	strh	r3, [r7, #14]
	default:
		//TODO implement error here
		break;
 80019f6:	bf00      	nop
	}

	return transmit;
 80019f8:	89fb      	ldrh	r3, [r7, #14]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 8001a10:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001a14:	81fb      	strh	r3, [r7, #14]
	uint16_t min_volt = 52;
 8001a16:	2334      	movs	r3, #52	@ 0x34
 8001a18:	81bb      	strh	r3, [r7, #12]

	uint16_t voltage = (raw*max_volt / 4095)-min_volt;
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	fb03 f202 	mul.w	r2, r3, r2
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <TF_3V3+0x44>)
 8001a24:	fba3 1302 	umull	r1, r3, r3, r2
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	0852      	lsrs	r2, r2, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	89bb      	ldrh	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	817b      	strh	r3, [r7, #10]

	return voltage;
 8001a38:	897b      	ldrh	r3, [r7, #10]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	00100101 	.word	0x00100101

08001a4c <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 5000;
 8001a58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a5c:	81fb      	strh	r3, [r7, #14]
	uint16_t min_volt = 78;
 8001a5e:	234e      	movs	r3, #78	@ 0x4e
 8001a60:	81bb      	strh	r3, [r7, #12]

	uint16_t voltage = raw*max_volt / 4095 -min_volt;
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	fb03 f202 	mul.w	r2, r3, r2
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <TF_5V+0x44>)
 8001a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a70:	1ad2      	subs	r2, r2, r3
 8001a72:	0852      	lsrs	r2, r2, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	817b      	strh	r3, [r7, #10]
	return voltage;
 8001a80:	897b      	ldrh	r3, [r7, #10]

}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	00100101 	.word	0x00100101

08001a94 <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw){
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 24000;
 8001aa0:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001aa4:	81fb      	strh	r3, [r7, #14]
	uint16_t min_volt = 375;
 8001aa6:	f240 1377 	movw	r3, #375	@ 0x177
 8001aaa:	81bb      	strh	r3, [r7, #12]

	uint16_t voltage = raw*max_volt / 4095 -min_volt;
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	fb03 f202 	mul.w	r2, r3, r2
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <TF_24V+0x44>)
 8001ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0852      	lsrs	r2, r2, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	0adb      	lsrs	r3, r3, #11
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	89bb      	ldrh	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	817b      	strh	r3, [r7, #10]
	return voltage;
 8001aca:	897b      	ldrh	r3, [r7, #10]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	00100101 	.word	0x00100101

08001adc <TF_BPPS>:

uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001ae8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001aec:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	81bb      	strh	r3, [r7, #12]

	uint16_t bpps = raw*max_pos / (4095-min_pos_raw);
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	fb03 f202 	mul.w	r2, r3, r2
 8001afa:	89b9      	ldrh	r1, [r7, #12]
 8001afc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001b00:	1a5b      	subs	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	817b      	strh	r3, [r7, #10]
	return bpps;
 8001b08:	897b      	ldrh	r3, [r7, #10]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <TF_APPS>:

uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	6039      	str	r1, [r7, #0]
 8001b20:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001b22:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b26:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	81bb      	strh	r3, [r7, #12]

	uint16_t apps = raw*max_pos / (4095-min_pos_raw);
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	fb03 f202 	mul.w	r2, r3, r2
 8001b34:	89b9      	ldrh	r1, [r7, #12]
 8001b36:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	817b      	strh	r3, [r7, #10]
	return apps;
 8001b42:	897b      	ldrh	r3, [r7, #10]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <TF_FRONT_HEAVE>:

uint16_t TF_FRONT_HEAVE(uint8_t bytes, uint32_t raw){
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001b5c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b60:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	81bb      	strh	r3, [r7, #12]

	uint16_t front_heave = raw*max_pos / (4095-min_pos_raw);
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	89b9      	ldrh	r1, [r7, #12]
 8001b70:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001b74:	1a5b      	subs	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	817b      	strh	r3, [r7, #10]
	return front_heave;
 8001b7c:	897b      	ldrh	r3, [r7, #10]

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <TF_REAR_HEAVE>:
uint16_t TF_REAR_HEAVE(uint8_t bytes, uint32_t raw){
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	6039      	str	r1, [r7, #0]
 8001b94:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001b96:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b9a:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	81bb      	strh	r3, [r7, #12]

	uint16_t rear_heave = raw*max_pos / (4095-min_pos_raw);
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	fb03 f202 	mul.w	r2, r3, r2
 8001ba8:	89b9      	ldrh	r1, [r7, #12]
 8001baa:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001bae:	1a5b      	subs	r3, r3, r1
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	817b      	strh	r3, [r7, #10]
	return rear_heave;
 8001bb6:	897b      	ldrh	r3, [r7, #10]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <TF_FRONT_ROLL>:
uint16_t TF_FRONT_ROLL(uint8_t bytes, uint32_t raw){
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001bd0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bd4:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	81bb      	strh	r3, [r7, #12]

	uint16_t front_roll = raw*max_pos / (4095-min_pos_raw);
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	fb03 f202 	mul.w	r2, r3, r2
 8001be2:	89b9      	ldrh	r1, [r7, #12]
 8001be4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001be8:	1a5b      	subs	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	817b      	strh	r3, [r7, #10]
	return front_roll;
 8001bf0:	897b      	ldrh	r3, [r7, #10]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <TF_REAR_ROLL>:
uint16_t TF_REAR_ROLL(uint8_t bytes, uint32_t raw){
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	6039      	str	r1, [r7, #0]
 8001c08:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 10000; //in percent 100.00%
 8001c0a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c0e:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	81bb      	strh	r3, [r7, #12]

	uint16_t rear_roll = raw*max_pos / (4095-min_pos_raw);
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	fb03 f202 	mul.w	r2, r3, r2
 8001c1c:	89b9      	ldrh	r1, [r7, #12]
 8001c1e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001c22:	1a5b      	subs	r3, r3, r1
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	817b      	strh	r3, [r7, #10]
	return rear_roll;
 8001c2a:	897b      	ldrh	r3, [r7, #10]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <TF_TYRE_TEMP>:
uint16_t TF_TYRE_TEMP(uint8_t bytes, uint32_t raw){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]

}
 8001c44:	bf00      	nop
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <TF_ANGLE_GEAR>:
uint16_t TF_ANGLE_GEAR(uint8_t bytes, uint32_t raw){
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	6039      	str	r1, [r7, #0]
 8001c5c:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 36000; //in degrees 360.00
 8001c5e:	f648 43a0 	movw	r3, #36000	@ 0x8ca0
 8001c62:	81fb      	strh	r3, [r7, #14]
	uint16_t min_pos_raw = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	81bb      	strh	r3, [r7, #12]

	uint16_t angle_gear_sensor = raw*max_pos / (4095-min_pos_raw);
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	fb03 f202 	mul.w	r2, r3, r2
 8001c70:	89b9      	ldrh	r1, [r7, #12]
 8001c72:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001c76:	1a5b      	subs	r3, r3, r1
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	817b      	strh	r3, [r7, #10]
	return angle_gear_sensor;
 8001c7e:	897b      	ldrh	r3, [r7, #10]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <TF_WATER_LVL>:
uint16_t TF_WATER_LVL(uint8_t bytes, uint32_t raw){
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]

}
 8001c98:	bf00      	nop
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <TF_BRK_PRES>:

uint16_t TF_BRK_PRES(uint8_t bytes, uint32_t raw){
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	6039      	str	r1, [r7, #0]
 8001cb0:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 8001cb2:	23c8      	movs	r3, #200	@ 0xc8
 8001cb4:	81fb      	strh	r3, [r7, #14]
	uint16_t min_raw = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	81bb      	strh	r3, [r7, #12]

	uint16_t brake_pres = raw*max_brake_pres / (4095-min_raw);
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	89b9      	ldrh	r1, [r7, #12]
 8001cc4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001cc8:	1a5b      	subs	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	817b      	strh	r3, [r7, #10]
	return brake_pres;
 8001cd0:	897b      	ldrh	r3, [r7, #10]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <Reset_Handler>:
 8001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d18 <LoopFillZerobss+0xe>
 8001ce4:	f7ff fd78 	bl	80017d8 <SystemInit>
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <LoopFillZerobss+0x12>)
 8001cea:	490d      	ldr	r1, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x16>)
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x1a>)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:
 8001cf2:	58d4      	ldr	r4, [r2, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:
 8001cf8:	18c4      	adds	r4, r0, r3
 8001cfa:	428c      	cmp	r4, r1
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <LoopFillZerobss+0x1e>)
 8001d00:	4c0a      	ldr	r4, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x22>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:
 8001d0a:	42a2      	cmp	r2, r4
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>
 8001d0e:	f009 fa17 	bl	800b140 <__libc_init_array>
 8001d12:	f7fe fc23 	bl	800055c <main>
 8001d16:	4770      	bx	lr
 8001d18:	24100000 	.word	0x24100000
 8001d1c:	24000000 	.word	0x24000000
 8001d20:	24000010 	.word	0x24000010
 8001d24:	0800b238 	.word	0x0800b238
 8001d28:	24000010 	.word	0x24000010
 8001d2c:	2400069c 	.word	0x2400069c

08001d30 <ADC_IRQHandler>:
 8001d30:	e7fe      	b.n	8001d30 <ADC_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f001 faf0 	bl	8003320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d40:	f005 ff3a 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_Init+0x68>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	4913      	ldr	r1, [pc, #76]	@ (8001da0 <HAL_Init+0x6c>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <HAL_Init+0x68>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <HAL_Init+0x6c>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <HAL_Init+0x70>)
 8001d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d78:	4a0b      	ldr	r2, [pc, #44]	@ (8001da8 <HAL_Init+0x74>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f814 	bl	8001dac <HAL_InitTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e002      	b.n	8001d94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8e:	f7ff f987 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	0800b208 	.word	0x0800b208
 8001da4:	24000004 	.word	0x24000004
 8001da8:	24000000 	.word	0x24000000

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_InitTick+0x60>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e021      	b.n	8001e04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <HAL_InitTick+0x64>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_InitTick+0x60>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fad5 	bl	8003386 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f001 fa9f 	bl	8003336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x68>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2400000c 	.word	0x2400000c
 8001e10:	24000000 	.word	0x24000000
 8001e14:	24000008 	.word	0x24000008

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2400000c 	.word	0x2400000c
 8001e3c:	24000698 	.word	0x24000698

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	24000698 	.word	0x24000698

08001e58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3360      	adds	r3, #96	@ 0x60
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	611a      	str	r2, [r3, #16]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3360      	adds	r3, #96	@ 0x60
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3330      	adds	r3, #48	@ 0x30
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	211f      	movs	r1, #31
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	f003 011f 	and.w	r1, r3, #31
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f023 0203 	bic.w	r2, r3, #3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3314      	adds	r3, #20
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	0e5b      	lsrs	r3, r3, #25
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	4413      	add	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2107      	movs	r1, #7
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0d1b      	lsrs	r3, r3, #20
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0318 	and.w	r3, r3, #24
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002088:	40d9      	lsrs	r1, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	400b      	ands	r3, r1
 800208e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	000fffff 	.word	0x000fffff

080020ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 031f 	and.w	r3, r3, #31
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6093      	str	r3, [r2, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	5fffffc0 	.word	0x5fffffc0

080020ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002100:	d101      	bne.n	8002106 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <LL_ADC_EnableInternalRegulator+0x24>)
 8002122:	4013      	ands	r3, r2
 8002124:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	6fffffc0 	.word	0x6fffffc0

0800213c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <LL_ADC_Enable+0x24>)
 8002172:	4013      	ands	r3, r2
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	7fffffc0 	.word	0x7fffffc0

0800218c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <LL_ADC_IsEnabled+0x18>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <LL_ADC_IsEnabled+0x1a>
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <LL_ADC_REG_StartConversion+0x24>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	7fffffc0 	.word	0x7fffffc0

080021dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d101      	bne.n	80021f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d101      	bne.n	800221a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e138      	b.n	80024b4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe ff45 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff3f 	bl	80020ec <LL_ADC_IsDeepPowerDownEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff25 	bl	80020c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff5a 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d114      	bne.n	80022b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff3e 	bl	8002114 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002298:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <HAL_ADC_Init+0x294>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	4a88      	ldr	r2, [pc, #544]	@ (80024c0 <HAL_ADC_Init+0x298>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	3301      	adds	r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022aa:	e002      	b.n	80022b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff3d 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff77 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80022ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 80d2 	bne.w	80024a2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 80ce 	bne.w	80024a2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800230e:	f043 0202 	orr.w	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff36 	bl	800218c <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d110      	bne.n	8002348 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002326:	4867      	ldr	r0, [pc, #412]	@ (80024c4 <HAL_ADC_Init+0x29c>)
 8002328:	f7ff ff30 	bl	800218c <LL_ADC_IsEnabled>
 800232c:	4604      	mov	r4, r0
 800232e:	4866      	ldr	r0, [pc, #408]	@ (80024c8 <HAL_ADC_Init+0x2a0>)
 8002330:	f7ff ff2c 	bl	800218c <LL_ADC_IsEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	4323      	orrs	r3, r4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4619      	mov	r1, r3
 8002342:	4862      	ldr	r0, [pc, #392]	@ (80024cc <HAL_ADC_Init+0x2a4>)
 8002344:	f7ff fd88 	bl	8001e58 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7d5b      	ldrb	r3, [r3, #21]
 800234c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002352:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002358:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7f1b      	ldrb	r3, [r3, #28]
 800235e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7f1b      	ldrb	r3, [r3, #28]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	3b01      	subs	r3, #1
 8002372:	045b      	lsls	r3, r3, #17
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_ADC_Init+0x2a8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff14 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80023b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff21 	bl	8002202 <LL_ADC_INJ_IsConversionOngoing>
 80023c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d14a      	bne.n	800245e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d147      	bne.n	800245e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7d1b      	ldrb	r3, [r3, #20]
 80023d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	4b3c      	ldr	r3, [pc, #240]	@ (80024d4 <HAL_ADC_Init+0x2ac>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d11b      	bne.n	8002432 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_ADC_Init+0x2b0>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800240e:	3a01      	subs	r2, #1
 8002410:	0411      	lsls	r1, r2, #16
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002422:	430a      	orrs	r2, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	e007      	b.n	8002442 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fd01 	bl	8002e60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10c      	bne.n	8002480 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	f023 010f 	bic.w	r1, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30
 800247e:	e007      	b.n	8002490 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020f 	bic.w	r2, r2, #15
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f023 0303 	bic.w	r3, r3, #3
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
 80024a0:	e007      	b.n	80024b2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3724      	adds	r7, #36	@ 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	24000000 	.word	0x24000000
 80024c0:	053e2d63 	.word	0x053e2d63
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40022100 	.word	0x40022100
 80024cc:	40022300 	.word	0x40022300
 80024d0:	fff0c003 	.word	0xfff0c003
 80024d4:	ffffbffc 	.word	0xffffbffc
 80024d8:	fc00f81e 	.word	0xfc00f81e

080024dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e8:	484f      	ldr	r0, [pc, #316]	@ (8002628 <HAL_ADC_Start_DMA+0x14c>)
 80024ea:	f7ff fddf 	bl	80020ac <LL_ADC_GetMultimode>
 80024ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe71 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 808c 	bne.w	800261a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_Start_DMA+0x34>
 800250c:	2302      	movs	r3, #2
 800250e:	e087      	b.n	8002620 <HAL_ADC_Start_DMA+0x144>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d002      	beq.n	800252a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b09      	cmp	r3, #9
 8002528:	d170      	bne.n	800260c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fb88 	bl	8002c40 <ADC_Enable>
 8002530:	4603      	mov	r3, r0
 8002532:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d163      	bne.n	8002602 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800253e:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_ADC_Start_DMA+0x150>)
 8002540:	4013      	ands	r3, r2
 8002542:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_ADC_Start_DMA+0x154>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_Start_DMA+0x7e>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e000      	b.n	800255c <HAL_ADC_Start_DMA+0x80>
 800255a:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_ADC_Start_DMA+0x158>)
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	4293      	cmp	r3, r2
 8002562:	d002      	beq.n	800256a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f023 0206 	bic.w	r2, r3, #6
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	659a      	str	r2, [r3, #88]	@ 0x58
 800258e:	e002      	b.n	8002596 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_ADC_Start_DMA+0x15c>)
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_ADC_Start_DMA+0x160>)
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <HAL_ADC_Start_DMA+0x164>)
 80025ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	221c      	movs	r2, #28
 80025b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0210 	orr.w	r2, r2, #16
 80025cc:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff fd04 	bl	8001fe6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3340      	adds	r3, #64	@ 0x40
 80025e8:	4619      	mov	r1, r3
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f001 fa65 	bl	8003abc <HAL_DMA_Start_IT>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdda 	bl	80021b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002600:	e00d      	b.n	800261e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800260a:	e008      	b.n	800261e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002618:	e001      	b.n	800261e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40022300 	.word	0x40022300
 800262c:	fffff0fe 	.word	0xfffff0fe
 8002630:	40022100 	.word	0x40022100
 8002634:	40022000 	.word	0x40022000
 8002638:	08002d39 	.word	0x08002d39
 800263c:	08002e11 	.word	0x08002e11
 8002640:	08002e2d 	.word	0x08002e2d

08002644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b0a1      	sub	sp, #132	@ 0x84
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a95      	ldr	r2, [pc, #596]	@ (80028dc <HAL_ADC_ConfigChannel+0x270>)
 8002686:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x2a>
 8002692:	2302      	movs	r3, #2
 8002694:	e2c0      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x5ac>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fd9a 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 82a5 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db2c      	blt.n	8002712 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x6a>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2201      	movs	r2, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	e016      	b.n	8002704 <HAL_ADC_ConfigChannel+0x98>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e003      	b.n	80026fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80026f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2201      	movs	r2, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	69d1      	ldr	r1, [r2, #28]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	430b      	orrs	r3, r1
 8002710:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f7ff fc35 	bl	8001f8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fd57 	bl	80021dc <LL_ADC_REG_IsConversionOngoing>
 800272e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fd64 	bl	8002202 <LL_ADC_INJ_IsConversionOngoing>
 800273a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800273c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 80a0 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 809c 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	461a      	mov	r2, r3
 800275a:	f7ff fc57 	bl	800200c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x118>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	e00a      	b.n	800279a <HAL_ADC_ConfigChannel+0x12e>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d027      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027b2:	f7ff fb85 	bl	8001ec0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7e5b      	ldrb	r3, [r3, #25]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x160>
 80027c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x162>
 80027cc:	2300      	movs	r3, #0
 80027ce:	461a      	mov	r2, r3
 80027d0:	f7ff fbaf 	bl	8001f32 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x17e>
 80027e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x180>
 80027ea:	2300      	movs	r3, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fb87 	bl	8001f00 <LL_ADC_SetDataRightShift>
 80027f2:	e047      	b.n	8002884 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002816:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800281e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800283a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800285e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	429a      	cmp	r2, r3
 8002872:	d107      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002882:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fc7f 	bl	800218c <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81bb 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7ff fbde 	bl	8002064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <HAL_ADC_ConfigChannel+0x270>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 8130 	bne.w	8002b14 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x274>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e01b      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
 80028dc:	47ff0000 	.word	0x47ff0000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e003      	b.n	8002904 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80028fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2b09      	cmp	r3, #9
 800290c:	bf94      	ite	ls
 800290e:	2301      	movls	r3, #1
 8002910:	2300      	movhi	r3, #0
 8002912:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002914:	2b00      	cmp	r3, #0
 8002916:	d079      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x2c8>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002932:	e015      	b.n	8002960 <HAL_ADC_ConfigChannel+0x2f4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002944:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x314>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	e017      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x344>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800298e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800299c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	051b      	lsls	r3, r3, #20
 80029d4:	e018      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x39c>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	e07e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x3bc>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a26:	e015      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x3e8>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x408>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x438>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	61bb      	str	r3, [r7, #24]
  return result;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x464>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	051b      	lsls	r3, r3, #20
 8002aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	e01b      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x49c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	60fb      	str	r3, [r7, #12]
  return result;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	3b1e      	subs	r3, #30
 8002b02:	051b      	lsls	r3, r3, #20
 8002b04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	6892      	ldr	r2, [r2, #8]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7ff fa7c 	bl	800200c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da77      	bge.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1c:	4840      	ldr	r0, [pc, #256]	@ (8002c20 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b1e:	f7ff f9c1 	bl	8001ea4 <LL_ADC_GetCommonPathInternalCh>
 8002b22:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b24:	483f      	ldr	r0, [pc, #252]	@ (8002c24 <HAL_ADC_ConfigChannel+0x5b8>)
 8002b26:	f7ff fb31 	bl	800218c <LL_ADC_IsEnabled>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	483e      	ldr	r0, [pc, #248]	@ (8002c28 <HAL_ADC_ConfigChannel+0x5bc>)
 8002b2e:	f7ff fb2d 	bl	800218c <LL_ADC_IsEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4323      	orrs	r3, r4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d155      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c2c <HAL_ADC_ConfigChannel+0x5c0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d122      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x51e>
 8002b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a35      	ldr	r2, [pc, #212]	@ (8002c28 <HAL_ADC_ConfigChannel+0x5bc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d159      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	4619      	mov	r1, r3
 8002b60:	482f      	ldr	r0, [pc, #188]	@ (8002c20 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b62:	f7ff f98c 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b66:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	4a31      	ldr	r2, [pc, #196]	@ (8002c34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	3301      	adds	r3, #1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b7a:	e002      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b88:	e040      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x54c>
 8002b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	@ (8002c28 <HAL_ADC_ConfigChannel+0x5bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d131      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481b      	ldr	r0, [pc, #108]	@ (8002c20 <HAL_ADC_ConfigChannel+0x5b4>)
 8002bb2:	f7ff f964 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb6:	e029      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c3c <HAL_ADC_ConfigChannel+0x5d0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d124      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
 8002bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11f      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a15      	ldr	r2, [pc, #84]	@ (8002c28 <HAL_ADC_ConfigChannel+0x5bc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11a      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4810      	ldr	r0, [pc, #64]	@ (8002c20 <HAL_ADC_ConfigChannel+0x5b4>)
 8002be0:	f7ff f94d 	bl	8001e7e <LL_ADC_SetCommonPathInternalCh>
 8002be4:	e012      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bf8:	e008      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3784      	adds	r7, #132	@ 0x84
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}
 8002c20:	40022300 	.word	0x40022300
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022100 	.word	0x40022100
 8002c2c:	cb840000 	.word	0xcb840000
 8002c30:	24000000 	.word	0x24000000
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	bac04000 	.word	0xbac04000
 8002c3c:	cfb80000 	.word	0xcfb80000

08002c40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fa9d 	bl	800218c <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d161      	bne.n	8002d1c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b32      	ldr	r3, [pc, #200]	@ (8002d28 <ADC_Enable+0xe8>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e04d      	b.n	8002d1e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fa6c 	bl	8002164 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c8c:	f7ff f8d8 	bl	8001e40 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c92:	4826      	ldr	r0, [pc, #152]	@ (8002d2c <ADC_Enable+0xec>)
 8002c94:	f7ff fa0a 	bl	80020ac <LL_ADC_GetMultimode>
 8002c98:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <ADC_Enable+0xf0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d002      	beq.n	8002caa <ADC_Enable+0x6a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	e000      	b.n	8002cac <ADC_Enable+0x6c>
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <ADC_Enable+0xf4>)
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d02c      	beq.n	8002d0e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d130      	bne.n	8002d1c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cba:	e028      	b.n	8002d0e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fa63 	bl	800218c <LL_ADC_IsEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fa47 	bl	8002164 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd6:	f7ff f8b3 	bl	8001e40 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d914      	bls.n	8002d0e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d00d      	beq.n	8002d0e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1cf      	bne.n	8002cbc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	8000003f 	.word	0x8000003f
 8002d2c:	40022300 	.word	0x40022300
 8002d30:	40022100 	.word	0x40022100
 8002d34:	40022000 	.word	0x40022000

08002d38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d14b      	bne.n	8002dea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d021      	beq.n	8002db0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f8f9 	bl	8001f68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d032      	beq.n	8002de2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d12b      	bne.n	8002de2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11f      	bne.n	8002de2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dae:	e018      	b.n	8002de2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d111      	bne.n	8002de2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7fe f8d4 	bl	8000f90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002de8:	e00e      	b.n	8002e08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fc2e 	bl	8002658 <HAL_ADC_ErrorCallback>
}
 8002dfc:	e004      	b.n	8002e08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fc10 	bl	8002644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	f043 0204 	orr.w	r2, r3, #4
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff fc00 	bl	8002658 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e68:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <ADC_ConfigureBoostMode+0x18c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e74:	f005 f81a 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8002e78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e82:	d010      	beq.n	8002ea6 <ADC_ConfigureBoostMode+0x46>
 8002e84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e88:	d873      	bhi.n	8002f72 <ADC_ConfigureBoostMode+0x112>
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8e:	d002      	beq.n	8002e96 <ADC_ConfigureBoostMode+0x36>
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e94:	d16d      	bne.n	8002f72 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
        break;
 8002ea4:	e068      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	60fb      	str	r3, [r7, #12]
        break;
 8002eac:	e064      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002eae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	f006 f9fd 	bl	80092b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002eba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ec4:	d051      	beq.n	8002f6a <ADC_ConfigureBoostMode+0x10a>
 8002ec6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002eca:	d854      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002ecc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002ed0:	d047      	beq.n	8002f62 <ADC_ConfigureBoostMode+0x102>
 8002ed2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002ed6:	d84e      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002ed8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002edc:	d03d      	beq.n	8002f5a <ADC_ConfigureBoostMode+0xfa>
 8002ede:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ee2:	d848      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ee8:	d033      	beq.n	8002f52 <ADC_ConfigureBoostMode+0xf2>
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eee:	d842      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002ef0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ef4:	d029      	beq.n	8002f4a <ADC_ConfigureBoostMode+0xea>
 8002ef6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002efa:	d83c      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002efc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f00:	d01a      	beq.n	8002f38 <ADC_ConfigureBoostMode+0xd8>
 8002f02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f06:	d836      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002f08:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f0c:	d014      	beq.n	8002f38 <ADC_ConfigureBoostMode+0xd8>
 8002f0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f12:	d830      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f18:	d00e      	beq.n	8002f38 <ADC_ConfigureBoostMode+0xd8>
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d82a      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002f20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f24:	d008      	beq.n	8002f38 <ADC_ConfigureBoostMode+0xd8>
 8002f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f2a:	d824      	bhi.n	8002f76 <ADC_ConfigureBoostMode+0x116>
 8002f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f30:	d002      	beq.n	8002f38 <ADC_ConfigureBoostMode+0xd8>
 8002f32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f36:	d11e      	bne.n	8002f76 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c9b      	lsrs	r3, r3, #18
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	60fb      	str	r3, [r7, #12]
        break;
 8002f48:	e016      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
        break;
 8002f50:	e012      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	60fb      	str	r3, [r7, #12]
        break;
 8002f58:	e00e      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	60fb      	str	r3, [r7, #12]
        break;
 8002f60:	e00a      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	09db      	lsrs	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]
        break;
 8002f68:	e006      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	60fb      	str	r3, [r7, #12]
        break;
 8002f70:	e002      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
        break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002f76:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <ADC_ConfigureBoostMode+0x190>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d808      	bhi.n	8002f98 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f94:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f96:	e025      	b.n	8002fe4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <ADC_ConfigureBoostMode+0x194>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d80a      	bhi.n	8002fb6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	e016      	b.n	8002fe4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff8 <ADC_ConfigureBoostMode+0x198>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d80a      	bhi.n	8002fd4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	e007      	b.n	8002fe4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002fe2:	609a      	str	r2, [r3, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40022300 	.word	0x40022300
 8002ff0:	005f5e10 	.word	0x005f5e10
 8002ff4:	00bebc20 	.word	0x00bebc20
 8002ff8:	017d7840 	.word	0x017d7840

08002ffc <LL_ADC_IsEnabled>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <LL_ADC_IsEnabled+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_IsEnabled+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_REG_IsConversionOngoing>:
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d101      	bne.n	800303a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b09f      	sub	sp, #124	@ 0x7c
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003062:	2302      	movs	r3, #2
 8003064:	e080      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003072:	2300      	movs	r3, #0
 8003074:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a3d      	ldr	r2, [pc, #244]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003080:	4b3c      	ldr	r3, [pc, #240]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	e001      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e05f      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ffb9 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 80030b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ffb3 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d141      	bne.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d13e      	bne.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80030ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e6:	4822      	ldr	r0, [pc, #136]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80030e8:	f7ff ff88 	bl	8002ffc <LL_ADC_IsEnabled>
 80030ec:	4604      	mov	r4, r0
 80030ee:	4821      	ldr	r0, [pc, #132]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80030f0:	f7ff ff84 	bl	8002ffc <LL_ADC_IsEnabled>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4323      	orrs	r3, r4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12e      	bne.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003102:	4013      	ands	r3, r2
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6811      	ldr	r1, [r2, #0]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	430a      	orrs	r2, r1
 800310e:	431a      	orrs	r2, r3
 8003110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003112:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	e021      	b.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800311e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003120:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003122:	4813      	ldr	r0, [pc, #76]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003124:	f7ff ff6a 	bl	8002ffc <LL_ADC_IsEnabled>
 8003128:	4604      	mov	r4, r0
 800312a:	4812      	ldr	r0, [pc, #72]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800312c:	f7ff ff66 	bl	8002ffc <LL_ADC_IsEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	4323      	orrs	r3, r4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d110      	bne.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800313e:	4013      	ands	r3, r2
 8003140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003142:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	e009      	b.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003158:	e000      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800315a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003164:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003168:	4618      	mov	r0, r3
 800316a:	377c      	adds	r7, #124	@ 0x7c
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	40022000 	.word	0x40022000
 8003174:	40022100 	.word	0x40022100
 8003178:	40022300 	.word	0x40022300
 800317c:	fffff0e0 	.word	0xfffff0e0

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x40>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ae:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x40>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60d3      	str	r3, [r2, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	05fa0000 	.word	0x05fa0000

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	@ (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	@ (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	@ (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	@ 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	@ 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ec:	d301      	bcc.n	80032f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00f      	b.n	8003312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <SysTick_Config+0x40>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fa:	210f      	movs	r1, #15
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f7ff ff8e 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <SysTick_Config+0x40>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	@ (800331c <SysTick_Config+0x40>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff29 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff40 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff33 	bl	80031e4 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa4 	bl	80032dc <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7fe fd4a 	bl	8001e40 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e37d      	b.n	8003ab4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a66      	ldr	r2, [pc, #408]	@ (8003558 <HAL_DMA_Init+0x1b8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04a      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a65      	ldr	r2, [pc, #404]	@ (800355c <HAL_DMA_Init+0x1bc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d045      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a63      	ldr	r2, [pc, #396]	@ (8003560 <HAL_DMA_Init+0x1c0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d040      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a62      	ldr	r2, [pc, #392]	@ (8003564 <HAL_DMA_Init+0x1c4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d03b      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a60      	ldr	r2, [pc, #384]	@ (8003568 <HAL_DMA_Init+0x1c8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d036      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5f      	ldr	r2, [pc, #380]	@ (800356c <HAL_DMA_Init+0x1cc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d031      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003570 <HAL_DMA_Init+0x1d0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02c      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5c      	ldr	r2, [pc, #368]	@ (8003574 <HAL_DMA_Init+0x1d4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d027      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5a      	ldr	r2, [pc, #360]	@ (8003578 <HAL_DMA_Init+0x1d8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d022      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a59      	ldr	r2, [pc, #356]	@ (800357c <HAL_DMA_Init+0x1dc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01d      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a57      	ldr	r2, [pc, #348]	@ (8003580 <HAL_DMA_Init+0x1e0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d018      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a56      	ldr	r2, [pc, #344]	@ (8003584 <HAL_DMA_Init+0x1e4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a54      	ldr	r2, [pc, #336]	@ (8003588 <HAL_DMA_Init+0x1e8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00e      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a53      	ldr	r2, [pc, #332]	@ (800358c <HAL_DMA_Init+0x1ec>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a51      	ldr	r2, [pc, #324]	@ (8003590 <HAL_DMA_Init+0x1f0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_Init+0xb8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a50      	ldr	r2, [pc, #320]	@ (8003594 <HAL_DMA_Init+0x1f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_DMA_Init+0xbc>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_DMA_Init+0xbe>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 813c 	beq.w	80036dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a37      	ldr	r2, [pc, #220]	@ (8003558 <HAL_DMA_Init+0x1b8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d04a      	beq.n	8003514 <HAL_DMA_Init+0x174>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a36      	ldr	r2, [pc, #216]	@ (800355c <HAL_DMA_Init+0x1bc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d045      	beq.n	8003514 <HAL_DMA_Init+0x174>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_DMA_Init+0x1c0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <HAL_DMA_Init+0x174>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a33      	ldr	r2, [pc, #204]	@ (8003564 <HAL_DMA_Init+0x1c4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03b      	beq.n	8003514 <HAL_DMA_Init+0x174>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a31      	ldr	r2, [pc, #196]	@ (8003568 <HAL_DMA_Init+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d036      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a30      	ldr	r2, [pc, #192]	@ (800356c <HAL_DMA_Init+0x1cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d031      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003570 <HAL_DMA_Init+0x1d0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02c      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2d      	ldr	r2, [pc, #180]	@ (8003574 <HAL_DMA_Init+0x1d4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d027      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <HAL_DMA_Init+0x1d8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <HAL_DMA_Init+0x1dc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d01d      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <HAL_DMA_Init+0x1e0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a27      	ldr	r2, [pc, #156]	@ (8003584 <HAL_DMA_Init+0x1e4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a25      	ldr	r2, [pc, #148]	@ (8003588 <HAL_DMA_Init+0x1e8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_DMA_Init+0x174>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a24      	ldr	r2, [pc, #144]	@ (800358c <HAL_DMA_Init+0x1ec>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_DMA_Init+0x174>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_DMA_Init+0x1f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_DMA_Init+0x174>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_DMA_Init+0x1f4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <HAL_DMA_Init+0x186>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e007      	b.n	8003536 <HAL_DMA_Init+0x196>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003536:	e02f      	b.n	8003598 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003538:	f7fe fc82 	bl	8001e40 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b05      	cmp	r3, #5
 8003544:	d928      	bls.n	8003598 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e2ad      	b.n	8003ab4 <HAL_DMA_Init+0x714>
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1c8      	bne.n	8003538 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <HAL_DMA_Init+0x3e0>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d107      	bne.n	80035fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	4313      	orrs	r3, r2
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b28      	cmp	r3, #40	@ 0x28
 8003602:	d903      	bls.n	800360c <HAL_DMA_Init+0x26c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b2e      	cmp	r3, #46	@ 0x2e
 800360a:	d91f      	bls.n	800364c <HAL_DMA_Init+0x2ac>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b3e      	cmp	r3, #62	@ 0x3e
 8003612:	d903      	bls.n	800361c <HAL_DMA_Init+0x27c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b42      	cmp	r3, #66	@ 0x42
 800361a:	d917      	bls.n	800364c <HAL_DMA_Init+0x2ac>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b46      	cmp	r3, #70	@ 0x46
 8003622:	d903      	bls.n	800362c <HAL_DMA_Init+0x28c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b48      	cmp	r3, #72	@ 0x48
 800362a:	d90f      	bls.n	800364c <HAL_DMA_Init+0x2ac>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b4e      	cmp	r3, #78	@ 0x4e
 8003632:	d903      	bls.n	800363c <HAL_DMA_Init+0x29c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b52      	cmp	r3, #82	@ 0x52
 800363a:	d907      	bls.n	800364c <HAL_DMA_Init+0x2ac>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b73      	cmp	r3, #115	@ 0x73
 8003642:	d905      	bls.n	8003650 <HAL_DMA_Init+0x2b0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b77      	cmp	r3, #119	@ 0x77
 800364a:	d801      	bhi.n	8003650 <HAL_DMA_Init+0x2b0>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_DMA_Init+0x2b2>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0307 	bic.w	r3, r3, #7
 8003674:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	2b04      	cmp	r3, #4
 8003686:	d117      	bne.n	80036b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 fe70 	bl	8005380 <DMA_CheckFifoParam>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2240      	movs	r2, #64	@ 0x40
 80036aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e1fd      	b.n	8003ab4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 fdab 	bl	800521c <DMA_CalcBaseAndBitshift>
 80036c6:	4603      	mov	r3, r0
 80036c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	223f      	movs	r2, #63	@ 0x3f
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	e0fd      	b.n	80038d8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <HAL_DMA_Init+0x3e4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a27      	ldr	r2, [pc, #156]	@ (8003788 <HAL_DMA_Init+0x3e8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d045      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a25      	ldr	r2, [pc, #148]	@ (800378c <HAL_DMA_Init+0x3ec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d040      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a24      	ldr	r2, [pc, #144]	@ (8003790 <HAL_DMA_Init+0x3f0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03b      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <HAL_DMA_Init+0x3f4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a21      	ldr	r2, [pc, #132]	@ (8003798 <HAL_DMA_Init+0x3f8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d031      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1f      	ldr	r2, [pc, #124]	@ (800379c <HAL_DMA_Init+0x3fc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02c      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <HAL_DMA_Init+0x400>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <HAL_DMA_Init+0x404>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <HAL_DMA_Init+0x408>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01d      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a19      	ldr	r2, [pc, #100]	@ (80037ac <HAL_DMA_Init+0x40c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_DMA_Init+0x410>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a16      	ldr	r2, [pc, #88]	@ (80037b4 <HAL_DMA_Init+0x414>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_DMA_Init+0x418>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a13      	ldr	r2, [pc, #76]	@ (80037bc <HAL_DMA_Init+0x41c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_DMA_Init+0x3dc>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <HAL_DMA_Init+0x420>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d123      	bne.n	80037c4 <HAL_DMA_Init+0x424>
 800377c:	2301      	movs	r3, #1
 800377e:	e022      	b.n	80037c6 <HAL_DMA_Init+0x426>
 8003780:	fe10803f 	.word	0xfe10803f
 8003784:	48022c08 	.word	0x48022c08
 8003788:	48022c1c 	.word	0x48022c1c
 800378c:	48022c30 	.word	0x48022c30
 8003790:	48022c44 	.word	0x48022c44
 8003794:	48022c58 	.word	0x48022c58
 8003798:	48022c6c 	.word	0x48022c6c
 800379c:	48022c80 	.word	0x48022c80
 80037a0:	48022c94 	.word	0x48022c94
 80037a4:	58025408 	.word	0x58025408
 80037a8:	5802541c 	.word	0x5802541c
 80037ac:	58025430 	.word	0x58025430
 80037b0:	58025444 	.word	0x58025444
 80037b4:	58025458 	.word	0x58025458
 80037b8:	5802546c 	.word	0x5802546c
 80037bc:	58025480 	.word	0x58025480
 80037c0:	58025494 	.word	0x58025494
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d07d      	beq.n	80038c6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7f      	ldr	r2, [pc, #508]	@ (80039cc <HAL_DMA_Init+0x62c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d021      	beq.n	8003818 <HAL_DMA_Init+0x478>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7d      	ldr	r2, [pc, #500]	@ (80039d0 <HAL_DMA_Init+0x630>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01c      	beq.n	8003818 <HAL_DMA_Init+0x478>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7c      	ldr	r2, [pc, #496]	@ (80039d4 <HAL_DMA_Init+0x634>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d017      	beq.n	8003818 <HAL_DMA_Init+0x478>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7a      	ldr	r2, [pc, #488]	@ (80039d8 <HAL_DMA_Init+0x638>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d012      	beq.n	8003818 <HAL_DMA_Init+0x478>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a79      	ldr	r2, [pc, #484]	@ (80039dc <HAL_DMA_Init+0x63c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00d      	beq.n	8003818 <HAL_DMA_Init+0x478>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a77      	ldr	r2, [pc, #476]	@ (80039e0 <HAL_DMA_Init+0x640>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d008      	beq.n	8003818 <HAL_DMA_Init+0x478>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a76      	ldr	r2, [pc, #472]	@ (80039e4 <HAL_DMA_Init+0x644>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <HAL_DMA_Init+0x478>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a74      	ldr	r2, [pc, #464]	@ (80039e8 <HAL_DMA_Init+0x648>)
 8003816:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4b6e      	ldr	r3, [pc, #440]	@ (80039ec <HAL_DMA_Init+0x64c>)
 8003834:	4013      	ands	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d008      	beq.n	8003852 <HAL_DMA_Init+0x4b2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b80      	cmp	r3, #128	@ 0x80
 8003846:	d102      	bne.n	800384e <HAL_DMA_Init+0x4ae>
 8003848:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800384c:	e002      	b.n	8003854 <HAL_DMA_Init+0x4b4>
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_DMA_Init+0x4b4>
 8003852:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68d2      	ldr	r2, [r2, #12]
 8003858:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800385a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003862:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800386a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003872:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800387a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003882:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <HAL_DMA_Init+0x650>)
 800389a:	4413      	add	r3, r2
 800389c:	4a55      	ldr	r2, [pc, #340]	@ (80039f4 <HAL_DMA_Init+0x654>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fcb6 	bl	800521c <DMA_CalcBaseAndBitshift>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e008      	b.n	80038d8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2240      	movs	r2, #64	@ 0x40
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0ed      	b.n	8003ab4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a46      	ldr	r2, [pc, #280]	@ (80039f8 <HAL_DMA_Init+0x658>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d072      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a45      	ldr	r2, [pc, #276]	@ (80039fc <HAL_DMA_Init+0x65c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d06d      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a43      	ldr	r2, [pc, #268]	@ (8003a00 <HAL_DMA_Init+0x660>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d068      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a42      	ldr	r2, [pc, #264]	@ (8003a04 <HAL_DMA_Init+0x664>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d063      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <HAL_DMA_Init+0x668>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d05e      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a0c <HAL_DMA_Init+0x66c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d059      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3d      	ldr	r2, [pc, #244]	@ (8003a10 <HAL_DMA_Init+0x670>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d054      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3c      	ldr	r2, [pc, #240]	@ (8003a14 <HAL_DMA_Init+0x674>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04f      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a18 <HAL_DMA_Init+0x678>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d04a      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a39      	ldr	r2, [pc, #228]	@ (8003a1c <HAL_DMA_Init+0x67c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d045      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a37      	ldr	r2, [pc, #220]	@ (8003a20 <HAL_DMA_Init+0x680>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d040      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a36      	ldr	r2, [pc, #216]	@ (8003a24 <HAL_DMA_Init+0x684>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d03b      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	@ (8003a28 <HAL_DMA_Init+0x688>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d036      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	@ (8003a2c <HAL_DMA_Init+0x68c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d031      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	@ (8003a30 <HAL_DMA_Init+0x690>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02c      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	@ (8003a34 <HAL_DMA_Init+0x694>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d027      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <HAL_DMA_Init+0x62c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d022      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <HAL_DMA_Init+0x630>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d01d      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a10      	ldr	r2, [pc, #64]	@ (80039d4 <HAL_DMA_Init+0x634>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d018      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0f      	ldr	r2, [pc, #60]	@ (80039d8 <HAL_DMA_Init+0x638>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	@ (80039dc <HAL_DMA_Init+0x63c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00e      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0c      	ldr	r2, [pc, #48]	@ (80039e0 <HAL_DMA_Init+0x640>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <HAL_DMA_Init+0x644>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_DMA_Init+0x628>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_DMA_Init+0x648>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d137      	bne.n	8003a38 <HAL_DMA_Init+0x698>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e036      	b.n	8003a3a <HAL_DMA_Init+0x69a>
 80039cc:	58025408 	.word	0x58025408
 80039d0:	5802541c 	.word	0x5802541c
 80039d4:	58025430 	.word	0x58025430
 80039d8:	58025444 	.word	0x58025444
 80039dc:	58025458 	.word	0x58025458
 80039e0:	5802546c 	.word	0x5802546c
 80039e4:	58025480 	.word	0x58025480
 80039e8:	58025494 	.word	0x58025494
 80039ec:	fffe000f 	.word	0xfffe000f
 80039f0:	a7fdabf8 	.word	0xa7fdabf8
 80039f4:	cccccccd 	.word	0xcccccccd
 80039f8:	40020010 	.word	0x40020010
 80039fc:	40020028 	.word	0x40020028
 8003a00:	40020040 	.word	0x40020040
 8003a04:	40020058 	.word	0x40020058
 8003a08:	40020070 	.word	0x40020070
 8003a0c:	40020088 	.word	0x40020088
 8003a10:	400200a0 	.word	0x400200a0
 8003a14:	400200b8 	.word	0x400200b8
 8003a18:	40020410 	.word	0x40020410
 8003a1c:	40020428 	.word	0x40020428
 8003a20:	40020440 	.word	0x40020440
 8003a24:	40020458 	.word	0x40020458
 8003a28:	40020470 	.word	0x40020470
 8003a2c:	40020488 	.word	0x40020488
 8003a30:	400204a0 	.word	0x400204a0
 8003a34:	400204b8 	.word	0x400204b8
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d032      	beq.n	8003aa4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 fd1a 	bl	8005478 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b80      	cmp	r3, #128	@ 0x80
 8003a4a:	d102      	bne.n	8003a52 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a66:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <HAL_DMA_Init+0x6f2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d80c      	bhi.n	8003a92 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f001 fd97 	bl	80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	e008      	b.n	8003aa4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e226      	b.n	8003f26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_Start_IT+0x2a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e21f      	b.n	8003f26 <HAL_DMA_Start_IT+0x46a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	f040 820a 	bne.w	8003f10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a68      	ldr	r2, [pc, #416]	@ (8003cb0 <HAL_DMA_Start_IT+0x1f4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a66      	ldr	r2, [pc, #408]	@ (8003cb4 <HAL_DMA_Start_IT+0x1f8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a65      	ldr	r2, [pc, #404]	@ (8003cb8 <HAL_DMA_Start_IT+0x1fc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a63      	ldr	r2, [pc, #396]	@ (8003cbc <HAL_DMA_Start_IT+0x200>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a62      	ldr	r2, [pc, #392]	@ (8003cc0 <HAL_DMA_Start_IT+0x204>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a60      	ldr	r2, [pc, #384]	@ (8003cc4 <HAL_DMA_Start_IT+0x208>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8003cc8 <HAL_DMA_Start_IT+0x20c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5d      	ldr	r2, [pc, #372]	@ (8003ccc <HAL_DMA_Start_IT+0x210>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd0 <HAL_DMA_Start_IT+0x214>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd4 <HAL_DMA_Start_IT+0x218>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a59      	ldr	r2, [pc, #356]	@ (8003cd8 <HAL_DMA_Start_IT+0x21c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a57      	ldr	r2, [pc, #348]	@ (8003cdc <HAL_DMA_Start_IT+0x220>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a56      	ldr	r2, [pc, #344]	@ (8003ce0 <HAL_DMA_Start_IT+0x224>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a54      	ldr	r2, [pc, #336]	@ (8003ce4 <HAL_DMA_Start_IT+0x228>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a53      	ldr	r2, [pc, #332]	@ (8003ce8 <HAL_DMA_Start_IT+0x22c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_Start_IT+0xee>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a51      	ldr	r2, [pc, #324]	@ (8003cec <HAL_DMA_Start_IT+0x230>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_Start_IT+0x100>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e007      	b.n	8003bcc <HAL_DMA_Start_IT+0x110>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f001 f93e 	bl	8004e54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <HAL_DMA_Start_IT+0x1f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04a      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a33      	ldr	r2, [pc, #204]	@ (8003cb4 <HAL_DMA_Start_IT+0x1f8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d045      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <HAL_DMA_Start_IT+0x1fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d040      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a30      	ldr	r2, [pc, #192]	@ (8003cbc <HAL_DMA_Start_IT+0x200>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03b      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc0 <HAL_DMA_Start_IT+0x204>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d036      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc4 <HAL_DMA_Start_IT+0x208>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <HAL_DMA_Start_IT+0x20c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ccc <HAL_DMA_Start_IT+0x210>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <HAL_DMA_Start_IT+0x214>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d022      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a27      	ldr	r2, [pc, #156]	@ (8003cd4 <HAL_DMA_Start_IT+0x218>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01d      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a25      	ldr	r2, [pc, #148]	@ (8003cd8 <HAL_DMA_Start_IT+0x21c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a24      	ldr	r2, [pc, #144]	@ (8003cdc <HAL_DMA_Start_IT+0x220>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a22      	ldr	r2, [pc, #136]	@ (8003ce0 <HAL_DMA_Start_IT+0x224>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <HAL_DMA_Start_IT+0x228>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce8 <HAL_DMA_Start_IT+0x22c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_Start_IT+0x1bc>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <HAL_DMA_Start_IT+0x230>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_DMA_Start_IT+0x1c0>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_Start_IT+0x1c2>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 021e 	bic.w	r2, r3, #30
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0216 	orr.w	r2, r2, #22
 8003c94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03e      	beq.n	8003d1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0208 	orr.w	r2, r2, #8
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e035      	b.n	8003d1c <HAL_DMA_Start_IT+0x260>
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 020e 	bic.w	r2, r3, #14
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 020a 	orr.w	r2, r2, #10
 8003d02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0204 	orr.w	r2, r2, #4
 8003d1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a83      	ldr	r2, [pc, #524]	@ (8003f30 <HAL_DMA_Start_IT+0x474>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d072      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a82      	ldr	r2, [pc, #520]	@ (8003f34 <HAL_DMA_Start_IT+0x478>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d06d      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a80      	ldr	r2, [pc, #512]	@ (8003f38 <HAL_DMA_Start_IT+0x47c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d068      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f3c <HAL_DMA_Start_IT+0x480>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d063      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7d      	ldr	r2, [pc, #500]	@ (8003f40 <HAL_DMA_Start_IT+0x484>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d05e      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7c      	ldr	r2, [pc, #496]	@ (8003f44 <HAL_DMA_Start_IT+0x488>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d059      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f48 <HAL_DMA_Start_IT+0x48c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d054      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a79      	ldr	r2, [pc, #484]	@ (8003f4c <HAL_DMA_Start_IT+0x490>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04f      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a77      	ldr	r2, [pc, #476]	@ (8003f50 <HAL_DMA_Start_IT+0x494>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d04a      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a76      	ldr	r2, [pc, #472]	@ (8003f54 <HAL_DMA_Start_IT+0x498>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d045      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a74      	ldr	r2, [pc, #464]	@ (8003f58 <HAL_DMA_Start_IT+0x49c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d040      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a73      	ldr	r2, [pc, #460]	@ (8003f5c <HAL_DMA_Start_IT+0x4a0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d03b      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a71      	ldr	r2, [pc, #452]	@ (8003f60 <HAL_DMA_Start_IT+0x4a4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d036      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a70      	ldr	r2, [pc, #448]	@ (8003f64 <HAL_DMA_Start_IT+0x4a8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d031      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6e      	ldr	r2, [pc, #440]	@ (8003f68 <HAL_DMA_Start_IT+0x4ac>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02c      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6d      	ldr	r2, [pc, #436]	@ (8003f6c <HAL_DMA_Start_IT+0x4b0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d027      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f70 <HAL_DMA_Start_IT+0x4b4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6a      	ldr	r2, [pc, #424]	@ (8003f74 <HAL_DMA_Start_IT+0x4b8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d01d      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a68      	ldr	r2, [pc, #416]	@ (8003f78 <HAL_DMA_Start_IT+0x4bc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d018      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a67      	ldr	r2, [pc, #412]	@ (8003f7c <HAL_DMA_Start_IT+0x4c0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a65      	ldr	r2, [pc, #404]	@ (8003f80 <HAL_DMA_Start_IT+0x4c4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a64      	ldr	r2, [pc, #400]	@ (8003f84 <HAL_DMA_Start_IT+0x4c8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a62      	ldr	r2, [pc, #392]	@ (8003f88 <HAL_DMA_Start_IT+0x4cc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_DMA_Start_IT+0x350>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a61      	ldr	r2, [pc, #388]	@ (8003f8c <HAL_DMA_Start_IT+0x4d0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_DMA_Start_IT+0x354>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_Start_IT+0x356>
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01a      	beq.n	8003e4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a37      	ldr	r2, [pc, #220]	@ (8003f30 <HAL_DMA_Start_IT+0x474>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a36      	ldr	r2, [pc, #216]	@ (8003f34 <HAL_DMA_Start_IT+0x478>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a34      	ldr	r2, [pc, #208]	@ (8003f38 <HAL_DMA_Start_IT+0x47c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a33      	ldr	r2, [pc, #204]	@ (8003f3c <HAL_DMA_Start_IT+0x480>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a31      	ldr	r2, [pc, #196]	@ (8003f40 <HAL_DMA_Start_IT+0x484>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a30      	ldr	r2, [pc, #192]	@ (8003f44 <HAL_DMA_Start_IT+0x488>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f48 <HAL_DMA_Start_IT+0x48c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	@ (8003f4c <HAL_DMA_Start_IT+0x490>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f50 <HAL_DMA_Start_IT+0x494>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8003f54 <HAL_DMA_Start_IT+0x498>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a28      	ldr	r2, [pc, #160]	@ (8003f58 <HAL_DMA_Start_IT+0x49c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a27      	ldr	r2, [pc, #156]	@ (8003f5c <HAL_DMA_Start_IT+0x4a0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	@ (8003f60 <HAL_DMA_Start_IT+0x4a4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a24      	ldr	r2, [pc, #144]	@ (8003f64 <HAL_DMA_Start_IT+0x4a8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <HAL_DMA_Start_IT+0x4ac>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_Start_IT+0x430>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a21      	ldr	r2, [pc, #132]	@ (8003f6c <HAL_DMA_Start_IT+0x4b0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <HAL_DMA_Start_IT+0x442>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e012      	b.n	8003f24 <HAL_DMA_Start_IT+0x468>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e009      	b.n	8003f24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8
 8003f70:	58025408 	.word	0x58025408
 8003f74:	5802541c 	.word	0x5802541c
 8003f78:	58025430 	.word	0x58025430
 8003f7c:	58025444 	.word	0x58025444
 8003f80:	58025458 	.word	0x58025458
 8003f84:	5802546c 	.word	0x5802546c
 8003f88:	58025480 	.word	0x58025480
 8003f8c:	58025494 	.word	0x58025494

08003f90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f9c:	4b67      	ldr	r3, [pc, #412]	@ (800413c <HAL_DMA_IRQHandler+0x1ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a67      	ldr	r2, [pc, #412]	@ (8004140 <HAL_DMA_IRQHandler+0x1b0>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0a9b      	lsrs	r3, r3, #10
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8004144 <HAL_DMA_IRQHandler+0x1b4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8004148 <HAL_DMA_IRQHandler+0x1b8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5c      	ldr	r2, [pc, #368]	@ (800414c <HAL_DMA_IRQHandler+0x1bc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8004150 <HAL_DMA_IRQHandler+0x1c0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a59      	ldr	r2, [pc, #356]	@ (8004154 <HAL_DMA_IRQHandler+0x1c4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a57      	ldr	r2, [pc, #348]	@ (8004158 <HAL_DMA_IRQHandler+0x1c8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a56      	ldr	r2, [pc, #344]	@ (800415c <HAL_DMA_IRQHandler+0x1cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a54      	ldr	r2, [pc, #336]	@ (8004160 <HAL_DMA_IRQHandler+0x1d0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a53      	ldr	r2, [pc, #332]	@ (8004164 <HAL_DMA_IRQHandler+0x1d4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a51      	ldr	r2, [pc, #324]	@ (8004168 <HAL_DMA_IRQHandler+0x1d8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a50      	ldr	r2, [pc, #320]	@ (800416c <HAL_DMA_IRQHandler+0x1dc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a4e      	ldr	r2, [pc, #312]	@ (8004170 <HAL_DMA_IRQHandler+0x1e0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a4d      	ldr	r2, [pc, #308]	@ (8004174 <HAL_DMA_IRQHandler+0x1e4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a4b      	ldr	r2, [pc, #300]	@ (8004178 <HAL_DMA_IRQHandler+0x1e8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4a      	ldr	r2, [pc, #296]	@ (800417c <HAL_DMA_IRQHandler+0x1ec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0xd2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a48      	ldr	r2, [pc, #288]	@ (8004180 <HAL_DMA_IRQHandler+0x1f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_DMA_IRQHandler+0xd6>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_DMA_IRQHandler+0xd8>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 842b 	beq.w	80048c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2208      	movs	r2, #8
 8004078:	409a      	lsls	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a2 	beq.w	80041c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <HAL_DMA_IRQHandler+0x1b4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d04a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2d      	ldr	r2, [pc, #180]	@ (8004148 <HAL_DMA_IRQHandler+0x1b8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d045      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2b      	ldr	r2, [pc, #172]	@ (800414c <HAL_DMA_IRQHandler+0x1bc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d040      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004150 <HAL_DMA_IRQHandler+0x1c0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d03b      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a28      	ldr	r2, [pc, #160]	@ (8004154 <HAL_DMA_IRQHandler+0x1c4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d036      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <HAL_DMA_IRQHandler+0x1c8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d031      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	@ (800415c <HAL_DMA_IRQHandler+0x1cc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02c      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a24      	ldr	r2, [pc, #144]	@ (8004160 <HAL_DMA_IRQHandler+0x1d0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d027      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <HAL_DMA_IRQHandler+0x1d4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	@ (8004168 <HAL_DMA_IRQHandler+0x1d8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <HAL_DMA_IRQHandler+0x1dc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <HAL_DMA_IRQHandler+0x1e0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_DMA_IRQHandler+0x1e4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_DMA_IRQHandler+0x1e8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <HAL_DMA_IRQHandler+0x1ec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x194>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <HAL_DMA_IRQHandler+0x1f0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d12f      	bne.n	8004184 <HAL_DMA_IRQHandler+0x1f4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e02e      	b.n	8004198 <HAL_DMA_IRQHandler+0x208>
 800413a:	bf00      	nop
 800413c:	24000000 	.word	0x24000000
 8004140:	1b4e81b5 	.word	0x1b4e81b5
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2208      	movs	r2, #8
 80041b6:	409a      	lsls	r2, r3
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d06e      	beq.n	80042bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a69      	ldr	r2, [pc, #420]	@ (8004388 <HAL_DMA_IRQHandler+0x3f8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d04a      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a67      	ldr	r2, [pc, #412]	@ (800438c <HAL_DMA_IRQHandler+0x3fc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d045      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a66      	ldr	r2, [pc, #408]	@ (8004390 <HAL_DMA_IRQHandler+0x400>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d040      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a64      	ldr	r2, [pc, #400]	@ (8004394 <HAL_DMA_IRQHandler+0x404>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d03b      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a63      	ldr	r2, [pc, #396]	@ (8004398 <HAL_DMA_IRQHandler+0x408>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d036      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a61      	ldr	r2, [pc, #388]	@ (800439c <HAL_DMA_IRQHandler+0x40c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d031      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a60      	ldr	r2, [pc, #384]	@ (80043a0 <HAL_DMA_IRQHandler+0x410>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d02c      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a5e      	ldr	r2, [pc, #376]	@ (80043a4 <HAL_DMA_IRQHandler+0x414>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d027      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5d      	ldr	r2, [pc, #372]	@ (80043a8 <HAL_DMA_IRQHandler+0x418>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5b      	ldr	r2, [pc, #364]	@ (80043ac <HAL_DMA_IRQHandler+0x41c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5a      	ldr	r2, [pc, #360]	@ (80043b0 <HAL_DMA_IRQHandler+0x420>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a58      	ldr	r2, [pc, #352]	@ (80043b4 <HAL_DMA_IRQHandler+0x424>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a57      	ldr	r2, [pc, #348]	@ (80043b8 <HAL_DMA_IRQHandler+0x428>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a55      	ldr	r2, [pc, #340]	@ (80043bc <HAL_DMA_IRQHandler+0x42c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a54      	ldr	r2, [pc, #336]	@ (80043c0 <HAL_DMA_IRQHandler+0x430>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_DMA_IRQHandler+0x2ee>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a52      	ldr	r2, [pc, #328]	@ (80043c4 <HAL_DMA_IRQHandler+0x434>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d10a      	bne.n	8004294 <HAL_DMA_IRQHandler+0x304>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e003      	b.n	800429c <HAL_DMA_IRQHandler+0x30c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	f043 0202 	orr.w	r2, r3, #2
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2204      	movs	r2, #4
 80042c6:	409a      	lsls	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 808f 	beq.w	80043f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <HAL_DMA_IRQHandler+0x3f8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04a      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <HAL_DMA_IRQHandler+0x3fc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d045      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a29      	ldr	r2, [pc, #164]	@ (8004390 <HAL_DMA_IRQHandler+0x400>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d040      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a27      	ldr	r2, [pc, #156]	@ (8004394 <HAL_DMA_IRQHandler+0x404>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d03b      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a26      	ldr	r2, [pc, #152]	@ (8004398 <HAL_DMA_IRQHandler+0x408>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d036      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a24      	ldr	r2, [pc, #144]	@ (800439c <HAL_DMA_IRQHandler+0x40c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <HAL_DMA_IRQHandler+0x410>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d02c      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <HAL_DMA_IRQHandler+0x414>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d027      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <HAL_DMA_IRQHandler+0x418>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_DMA_IRQHandler+0x41c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_DMA_IRQHandler+0x420>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_DMA_IRQHandler+0x424>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_DMA_IRQHandler+0x428>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_DMA_IRQHandler+0x42c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <HAL_DMA_IRQHandler+0x430>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_DMA_IRQHandler+0x3e2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <HAL_DMA_IRQHandler+0x434>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d12a      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x438>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e023      	b.n	80043d0 <HAL_DMA_IRQHandler+0x440>
 8004388:	40020010 	.word	0x40020010
 800438c:	40020028 	.word	0x40020028
 8004390:	40020040 	.word	0x40020040
 8004394:	40020058 	.word	0x40020058
 8004398:	40020070 	.word	0x40020070
 800439c:	40020088 	.word	0x40020088
 80043a0:	400200a0 	.word	0x400200a0
 80043a4:	400200b8 	.word	0x400200b8
 80043a8:	40020410 	.word	0x40020410
 80043ac:	40020428 	.word	0x40020428
 80043b0:	40020440 	.word	0x40020440
 80043b4:	40020458 	.word	0x40020458
 80043b8:	40020470 	.word	0x40020470
 80043bc:	40020488 	.word	0x40020488
 80043c0:	400204a0 	.word	0x400204a0
 80043c4:	400204b8 	.word	0x400204b8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2204      	movs	r2, #4
 80043de:	409a      	lsls	r2, r3
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2210      	movs	r2, #16
 80043fa:	409a      	lsls	r2, r3
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80a6 	beq.w	8004552 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a85      	ldr	r2, [pc, #532]	@ (8004620 <HAL_DMA_IRQHandler+0x690>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d04a      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a83      	ldr	r2, [pc, #524]	@ (8004624 <HAL_DMA_IRQHandler+0x694>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d045      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a82      	ldr	r2, [pc, #520]	@ (8004628 <HAL_DMA_IRQHandler+0x698>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d040      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a80      	ldr	r2, [pc, #512]	@ (800462c <HAL_DMA_IRQHandler+0x69c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d03b      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7f      	ldr	r2, [pc, #508]	@ (8004630 <HAL_DMA_IRQHandler+0x6a0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d036      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a7d      	ldr	r2, [pc, #500]	@ (8004634 <HAL_DMA_IRQHandler+0x6a4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7c      	ldr	r2, [pc, #496]	@ (8004638 <HAL_DMA_IRQHandler+0x6a8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02c      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7a      	ldr	r2, [pc, #488]	@ (800463c <HAL_DMA_IRQHandler+0x6ac>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d027      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a79      	ldr	r2, [pc, #484]	@ (8004640 <HAL_DMA_IRQHandler+0x6b0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a77      	ldr	r2, [pc, #476]	@ (8004644 <HAL_DMA_IRQHandler+0x6b4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a76      	ldr	r2, [pc, #472]	@ (8004648 <HAL_DMA_IRQHandler+0x6b8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a74      	ldr	r2, [pc, #464]	@ (800464c <HAL_DMA_IRQHandler+0x6bc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a73      	ldr	r2, [pc, #460]	@ (8004650 <HAL_DMA_IRQHandler+0x6c0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a71      	ldr	r2, [pc, #452]	@ (8004654 <HAL_DMA_IRQHandler+0x6c4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a70      	ldr	r2, [pc, #448]	@ (8004658 <HAL_DMA_IRQHandler+0x6c8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x516>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	@ (800465c <HAL_DMA_IRQHandler+0x6cc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10a      	bne.n	80044bc <HAL_DMA_IRQHandler+0x52c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e009      	b.n	80044d0 <HAL_DMA_IRQHandler+0x540>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d03e      	beq.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2210      	movs	r2, #16
 80044de:	409a      	lsls	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d024      	beq.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
 8004510:	e01f      	b.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01b      	beq.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e016      	b.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0208 	bic.w	r2, r2, #8
 8004540:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2220      	movs	r2, #32
 800455c:	409a      	lsls	r2, r3
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8110 	beq.w	8004788 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <HAL_DMA_IRQHandler+0x690>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d04a      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2b      	ldr	r2, [pc, #172]	@ (8004624 <HAL_DMA_IRQHandler+0x694>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d045      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a29      	ldr	r2, [pc, #164]	@ (8004628 <HAL_DMA_IRQHandler+0x698>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d040      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a28      	ldr	r2, [pc, #160]	@ (800462c <HAL_DMA_IRQHandler+0x69c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d03b      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <HAL_DMA_IRQHandler+0x6a0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d036      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a25      	ldr	r2, [pc, #148]	@ (8004634 <HAL_DMA_IRQHandler+0x6a4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d031      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a23      	ldr	r2, [pc, #140]	@ (8004638 <HAL_DMA_IRQHandler+0x6a8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02c      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a22      	ldr	r2, [pc, #136]	@ (800463c <HAL_DMA_IRQHandler+0x6ac>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d027      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <HAL_DMA_IRQHandler+0x6b0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d022      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004644 <HAL_DMA_IRQHandler+0x6b4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01d      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004648 <HAL_DMA_IRQHandler+0x6b8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <HAL_DMA_IRQHandler+0x6bc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <HAL_DMA_IRQHandler+0x6c0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a19      	ldr	r2, [pc, #100]	@ (8004654 <HAL_DMA_IRQHandler+0x6c4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_DMA_IRQHandler+0x6c8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_IRQHandler+0x678>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <HAL_DMA_IRQHandler+0x6cc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d12b      	bne.n	8004660 <HAL_DMA_IRQHandler+0x6d0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e02a      	b.n	8004674 <HAL_DMA_IRQHandler+0x6e4>
 800461e:	bf00      	nop
 8004620:	40020010 	.word	0x40020010
 8004624:	40020028 	.word	0x40020028
 8004628:	40020040 	.word	0x40020040
 800462c:	40020058 	.word	0x40020058
 8004630:	40020070 	.word	0x40020070
 8004634:	40020088 	.word	0x40020088
 8004638:	400200a0 	.word	0x400200a0
 800463c:	400200b8 	.word	0x400200b8
 8004640:	40020410 	.word	0x40020410
 8004644:	40020428 	.word	0x40020428
 8004648:	40020440 	.word	0x40020440
 800464c:	40020458 	.word	0x40020458
 8004650:	40020470 	.word	0x40020470
 8004654:	40020488 	.word	0x40020488
 8004658:	400204a0 	.word	0x400204a0
 800465c:	400204b8 	.word	0x400204b8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8087 	beq.w	8004788 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2220      	movs	r2, #32
 8004684:	409a      	lsls	r2, r3
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b04      	cmp	r3, #4
 8004694:	d139      	bne.n	800470a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0216 	bic.w	r2, r2, #22
 80046a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x736>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0208 	bic.w	r2, r2, #8
 80046d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	223f      	movs	r2, #63	@ 0x3f
 80046e0:	409a      	lsls	r2, r3
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8382 	beq.w	8004e04 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
          }
          return;
 8004708:	e37c      	b.n	8004e04 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02c      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
 8004736:	e027      	b.n	8004788 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d023      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
 8004748:	e01e      	b.n	8004788 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10f      	bne.n	8004778 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 833e 	beq.w	8004e0e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8088 	beq.w	80048b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2204      	movs	r2, #4
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a89      	ldr	r2, [pc, #548]	@ (80049d4 <HAL_DMA_IRQHandler+0xa44>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d04a      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a88      	ldr	r2, [pc, #544]	@ (80049d8 <HAL_DMA_IRQHandler+0xa48>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d045      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a86      	ldr	r2, [pc, #536]	@ (80049dc <HAL_DMA_IRQHandler+0xa4c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d040      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a85      	ldr	r2, [pc, #532]	@ (80049e0 <HAL_DMA_IRQHandler+0xa50>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d03b      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a83      	ldr	r2, [pc, #524]	@ (80049e4 <HAL_DMA_IRQHandler+0xa54>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d036      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a82      	ldr	r2, [pc, #520]	@ (80049e8 <HAL_DMA_IRQHandler+0xa58>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d031      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a80      	ldr	r2, [pc, #512]	@ (80049ec <HAL_DMA_IRQHandler+0xa5c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02c      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7f      	ldr	r2, [pc, #508]	@ (80049f0 <HAL_DMA_IRQHandler+0xa60>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a7d      	ldr	r2, [pc, #500]	@ (80049f4 <HAL_DMA_IRQHandler+0xa64>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7c      	ldr	r2, [pc, #496]	@ (80049f8 <HAL_DMA_IRQHandler+0xa68>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a7a      	ldr	r2, [pc, #488]	@ (80049fc <HAL_DMA_IRQHandler+0xa6c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a79      	ldr	r2, [pc, #484]	@ (8004a00 <HAL_DMA_IRQHandler+0xa70>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a77      	ldr	r2, [pc, #476]	@ (8004a04 <HAL_DMA_IRQHandler+0xa74>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a76      	ldr	r2, [pc, #472]	@ (8004a08 <HAL_DMA_IRQHandler+0xa78>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a74      	ldr	r2, [pc, #464]	@ (8004a0c <HAL_DMA_IRQHandler+0xa7c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_IRQHandler+0x8b8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a73      	ldr	r2, [pc, #460]	@ (8004a10 <HAL_DMA_IRQHandler+0xa80>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <HAL_DMA_IRQHandler+0x8ca>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e007      	b.n	800486a <HAL_DMA_IRQHandler+0x8da>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004872:	429a      	cmp	r2, r3
 8004874:	d307      	bcc.n	8004886 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f2      	bne.n	800486a <HAL_DMA_IRQHandler+0x8da>
 8004884:	e000      	b.n	8004888 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004886:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800489e:	e003      	b.n	80048a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 82aa 	beq.w	8004e0e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
 80048c2:	e2a4      	b.n	8004e0e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a52      	ldr	r2, [pc, #328]	@ (8004a14 <HAL_DMA_IRQHandler+0xa84>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d04a      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a51      	ldr	r2, [pc, #324]	@ (8004a18 <HAL_DMA_IRQHandler+0xa88>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d045      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4f      	ldr	r2, [pc, #316]	@ (8004a1c <HAL_DMA_IRQHandler+0xa8c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d040      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004a20 <HAL_DMA_IRQHandler+0xa90>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d03b      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004a24 <HAL_DMA_IRQHandler+0xa94>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d036      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a4b      	ldr	r2, [pc, #300]	@ (8004a28 <HAL_DMA_IRQHandler+0xa98>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d031      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a49      	ldr	r2, [pc, #292]	@ (8004a2c <HAL_DMA_IRQHandler+0xa9c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02c      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a48      	ldr	r2, [pc, #288]	@ (8004a30 <HAL_DMA_IRQHandler+0xaa0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d027      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a46      	ldr	r2, [pc, #280]	@ (8004a34 <HAL_DMA_IRQHandler+0xaa4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a45      	ldr	r2, [pc, #276]	@ (8004a38 <HAL_DMA_IRQHandler+0xaa8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01d      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a43      	ldr	r2, [pc, #268]	@ (8004a3c <HAL_DMA_IRQHandler+0xaac>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <HAL_DMA_IRQHandler+0xab0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a40      	ldr	r2, [pc, #256]	@ (8004a44 <HAL_DMA_IRQHandler+0xab4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a48 <HAL_DMA_IRQHandler+0xab8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3d      	ldr	r2, [pc, #244]	@ (8004a4c <HAL_DMA_IRQHandler+0xabc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_DMA_IRQHandler+0x9d4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a50 <HAL_DMA_IRQHandler+0xac0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_DMA_IRQHandler+0x9d8>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_DMA_IRQHandler+0x9da>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 824f 	beq.w	8004e0e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2204      	movs	r2, #4
 8004982:	409a      	lsls	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80dd 	beq.w	8004b48 <HAL_DMA_IRQHandler+0xbb8>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80d7 	beq.w	8004b48 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2204      	movs	r2, #4
 80049a4:	409a      	lsls	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d059      	beq.n	8004a68 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d14a      	bne.n	8004a54 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8220 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d0:	e21a      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe78>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	48022c08 	.word	0x48022c08
 8004a18:	48022c1c 	.word	0x48022c1c
 8004a1c:	48022c30 	.word	0x48022c30
 8004a20:	48022c44 	.word	0x48022c44
 8004a24:	48022c58 	.word	0x48022c58
 8004a28:	48022c6c 	.word	0x48022c6c
 8004a2c:	48022c80 	.word	0x48022c80
 8004a30:	48022c94 	.word	0x48022c94
 8004a34:	58025408 	.word	0x58025408
 8004a38:	5802541c 	.word	0x5802541c
 8004a3c:	58025430 	.word	0x58025430
 8004a40:	58025444 	.word	0x58025444
 8004a44:	58025458 	.word	0x58025458
 8004a48:	5802546c 	.word	0x5802546c
 8004a4c:	58025480 	.word	0x58025480
 8004a50:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 81d5 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a66:	e1cf      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d160      	bne.n	8004b34 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7f      	ldr	r2, [pc, #508]	@ (8004c74 <HAL_DMA_IRQHandler+0xce4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d04a      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7d      	ldr	r2, [pc, #500]	@ (8004c78 <HAL_DMA_IRQHandler+0xce8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d045      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c7c <HAL_DMA_IRQHandler+0xcec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d040      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7a      	ldr	r2, [pc, #488]	@ (8004c80 <HAL_DMA_IRQHandler+0xcf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d03b      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a79      	ldr	r2, [pc, #484]	@ (8004c84 <HAL_DMA_IRQHandler+0xcf4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d036      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a77      	ldr	r2, [pc, #476]	@ (8004c88 <HAL_DMA_IRQHandler+0xcf8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d031      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a76      	ldr	r2, [pc, #472]	@ (8004c8c <HAL_DMA_IRQHandler+0xcfc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d02c      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a74      	ldr	r2, [pc, #464]	@ (8004c90 <HAL_DMA_IRQHandler+0xd00>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d027      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a73      	ldr	r2, [pc, #460]	@ (8004c94 <HAL_DMA_IRQHandler+0xd04>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a71      	ldr	r2, [pc, #452]	@ (8004c98 <HAL_DMA_IRQHandler+0xd08>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01d      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a70      	ldr	r2, [pc, #448]	@ (8004c9c <HAL_DMA_IRQHandler+0xd0c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca0 <HAL_DMA_IRQHandler+0xd10>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca4 <HAL_DMA_IRQHandler+0xd14>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca8 <HAL_DMA_IRQHandler+0xd18>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6a      	ldr	r2, [pc, #424]	@ (8004cac <HAL_DMA_IRQHandler+0xd1c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xb82>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a68      	ldr	r2, [pc, #416]	@ (8004cb0 <HAL_DMA_IRQHandler+0xd20>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <HAL_DMA_IRQHandler+0xb94>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e007      	b.n	8004b34 <HAL_DMA_IRQHandler+0xba4>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8165 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b46:	e15f      	b.n	8004e08 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2202      	movs	r2, #2
 8004b52:	409a      	lsls	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80c5 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xd58>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80bf 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2202      	movs	r2, #2
 8004b74:	409a      	lsls	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d018      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 813a 	beq.w	8004e0c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ba0:	e134      	b.n	8004e0c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8130 	beq.w	8004e0c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bb4:	e12a      	b.n	8004e0c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8089 	bne.w	8004cd4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c74 <HAL_DMA_IRQHandler+0xce4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	@ (8004c78 <HAL_DMA_IRQHandler+0xce8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a28      	ldr	r2, [pc, #160]	@ (8004c7c <HAL_DMA_IRQHandler+0xcec>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a26      	ldr	r2, [pc, #152]	@ (8004c80 <HAL_DMA_IRQHandler+0xcf0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a25      	ldr	r2, [pc, #148]	@ (8004c84 <HAL_DMA_IRQHandler+0xcf4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <HAL_DMA_IRQHandler+0xcf8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a22      	ldr	r2, [pc, #136]	@ (8004c8c <HAL_DMA_IRQHandler+0xcfc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	@ (8004c90 <HAL_DMA_IRQHandler+0xd00>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1f      	ldr	r2, [pc, #124]	@ (8004c94 <HAL_DMA_IRQHandler+0xd04>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <HAL_DMA_IRQHandler+0xd08>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c9c <HAL_DMA_IRQHandler+0xd0c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca0 <HAL_DMA_IRQHandler+0xd10>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_DMA_IRQHandler+0xd14>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <HAL_DMA_IRQHandler+0xd18>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <HAL_DMA_IRQHandler+0xd1c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xcd2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <HAL_DMA_IRQHandler+0xd20>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d128      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0xd24>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0214 	bic.w	r2, r2, #20
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e027      	b.n	8004cc4 <HAL_DMA_IRQHandler+0xd34>
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020a 	bic.w	r2, r2, #10
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8097 	beq.w	8004e0c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce6:	e091      	b.n	8004e0c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8088 	beq.w	8004e0e <HAL_DMA_IRQHandler+0xe7e>
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8082 	beq.w	8004e0e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a41      	ldr	r2, [pc, #260]	@ (8004e14 <HAL_DMA_IRQHandler+0xe84>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04a      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3f      	ldr	r2, [pc, #252]	@ (8004e18 <HAL_DMA_IRQHandler+0xe88>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d045      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a3e      	ldr	r2, [pc, #248]	@ (8004e1c <HAL_DMA_IRQHandler+0xe8c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d040      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004e20 <HAL_DMA_IRQHandler+0xe90>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d03b      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a3b      	ldr	r2, [pc, #236]	@ (8004e24 <HAL_DMA_IRQHandler+0xe94>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d036      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a39      	ldr	r2, [pc, #228]	@ (8004e28 <HAL_DMA_IRQHandler+0xe98>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d031      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a38      	ldr	r2, [pc, #224]	@ (8004e2c <HAL_DMA_IRQHandler+0xe9c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d02c      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a36      	ldr	r2, [pc, #216]	@ (8004e30 <HAL_DMA_IRQHandler+0xea0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d027      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <HAL_DMA_IRQHandler+0xea4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a33      	ldr	r2, [pc, #204]	@ (8004e38 <HAL_DMA_IRQHandler+0xea8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <HAL_DMA_IRQHandler+0xeac>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a30      	ldr	r2, [pc, #192]	@ (8004e40 <HAL_DMA_IRQHandler+0xeb0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2f      	ldr	r2, [pc, #188]	@ (8004e44 <HAL_DMA_IRQHandler+0xeb4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2d      	ldr	r2, [pc, #180]	@ (8004e48 <HAL_DMA_IRQHandler+0xeb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e4c <HAL_DMA_IRQHandler+0xebc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_DMA_IRQHandler+0xe1a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e50 <HAL_DMA_IRQHandler+0xec0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <HAL_DMA_IRQHandler+0xe2c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 021c 	bic.w	r2, r2, #28
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e007      	b.n	8004dcc <HAL_DMA_IRQHandler+0xe3c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 020e 	bic.w	r2, r2, #14
 8004dca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
 8004e02:	e004      	b.n	8004e0e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e0e:	3728      	adds	r7, #40	@ 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40020010 	.word	0x40020010
 8004e18:	40020028 	.word	0x40020028
 8004e1c:	40020040 	.word	0x40020040
 8004e20:	40020058 	.word	0x40020058
 8004e24:	40020070 	.word	0x40020070
 8004e28:	40020088 	.word	0x40020088
 8004e2c:	400200a0 	.word	0x400200a0
 8004e30:	400200b8 	.word	0x400200b8
 8004e34:	40020410 	.word	0x40020410
 8004e38:	40020428 	.word	0x40020428
 8004e3c:	40020440 	.word	0x40020440
 8004e40:	40020458 	.word	0x40020458
 8004e44:	40020470 	.word	0x40020470
 8004e48:	40020488 	.word	0x40020488
 8004e4c:	400204a0 	.word	0x400204a0
 8004e50:	400204b8 	.word	0x400204b8

08004e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7f      	ldr	r2, [pc, #508]	@ (8005070 <DMA_SetConfig+0x21c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d072      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8005074 <DMA_SetConfig+0x220>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d06d      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7c      	ldr	r2, [pc, #496]	@ (8005078 <DMA_SetConfig+0x224>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d068      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7a      	ldr	r2, [pc, #488]	@ (800507c <DMA_SetConfig+0x228>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d063      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a79      	ldr	r2, [pc, #484]	@ (8005080 <DMA_SetConfig+0x22c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d05e      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a77      	ldr	r2, [pc, #476]	@ (8005084 <DMA_SetConfig+0x230>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d059      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a76      	ldr	r2, [pc, #472]	@ (8005088 <DMA_SetConfig+0x234>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d054      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a74      	ldr	r2, [pc, #464]	@ (800508c <DMA_SetConfig+0x238>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d04f      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a73      	ldr	r2, [pc, #460]	@ (8005090 <DMA_SetConfig+0x23c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a71      	ldr	r2, [pc, #452]	@ (8005094 <DMA_SetConfig+0x240>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a70      	ldr	r2, [pc, #448]	@ (8005098 <DMA_SetConfig+0x244>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800509c <DMA_SetConfig+0x248>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a6d      	ldr	r2, [pc, #436]	@ (80050a0 <DMA_SetConfig+0x24c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80050a4 <DMA_SetConfig+0x250>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6a      	ldr	r2, [pc, #424]	@ (80050a8 <DMA_SetConfig+0x254>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a68      	ldr	r2, [pc, #416]	@ (80050ac <DMA_SetConfig+0x258>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a67      	ldr	r2, [pc, #412]	@ (80050b0 <DMA_SetConfig+0x25c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a65      	ldr	r2, [pc, #404]	@ (80050b4 <DMA_SetConfig+0x260>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a64      	ldr	r2, [pc, #400]	@ (80050b8 <DMA_SetConfig+0x264>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a62      	ldr	r2, [pc, #392]	@ (80050bc <DMA_SetConfig+0x268>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a61      	ldr	r2, [pc, #388]	@ (80050c0 <DMA_SetConfig+0x26c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5f      	ldr	r2, [pc, #380]	@ (80050c4 <DMA_SetConfig+0x270>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80050c8 <DMA_SetConfig+0x274>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <DMA_SetConfig+0x10a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a5c      	ldr	r2, [pc, #368]	@ (80050cc <DMA_SetConfig+0x278>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <DMA_SetConfig+0x10e>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <DMA_SetConfig+0x110>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a39      	ldr	r2, [pc, #228]	@ (8005070 <DMA_SetConfig+0x21c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d04a      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <DMA_SetConfig+0x220>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d045      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a36      	ldr	r2, [pc, #216]	@ (8005078 <DMA_SetConfig+0x224>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d040      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <DMA_SetConfig+0x228>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d03b      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a33      	ldr	r2, [pc, #204]	@ (8005080 <DMA_SetConfig+0x22c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d036      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a32      	ldr	r2, [pc, #200]	@ (8005084 <DMA_SetConfig+0x230>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d031      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <DMA_SetConfig+0x234>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d02c      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <DMA_SetConfig+0x238>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d027      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005090 <DMA_SetConfig+0x23c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d022      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <DMA_SetConfig+0x240>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d01d      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	@ (8005098 <DMA_SetConfig+0x244>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a29      	ldr	r2, [pc, #164]	@ (800509c <DMA_SetConfig+0x248>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a27      	ldr	r2, [pc, #156]	@ (80050a0 <DMA_SetConfig+0x24c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a26      	ldr	r2, [pc, #152]	@ (80050a4 <DMA_SetConfig+0x250>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a24      	ldr	r2, [pc, #144]	@ (80050a8 <DMA_SetConfig+0x254>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <DMA_SetConfig+0x1d0>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a23      	ldr	r2, [pc, #140]	@ (80050ac <DMA_SetConfig+0x258>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <DMA_SetConfig+0x1d4>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <DMA_SetConfig+0x1d6>
 8005028:	2300      	movs	r3, #0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d059      	beq.n	80050e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	223f      	movs	r2, #63	@ 0x3f
 8005038:	409a      	lsls	r2, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800504c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d138      	bne.n	80050d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800506e:	e0ae      	b.n	80051ce <DMA_SetConfig+0x37a>
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
 80050b0:	58025408 	.word	0x58025408
 80050b4:	5802541c 	.word	0x5802541c
 80050b8:	58025430 	.word	0x58025430
 80050bc:	58025444 	.word	0x58025444
 80050c0:	58025458 	.word	0x58025458
 80050c4:	5802546c 	.word	0x5802546c
 80050c8:	58025480 	.word	0x58025480
 80050cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
}
 80050e0:	e075      	b.n	80051ce <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <DMA_SetConfig+0x388>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <DMA_SetConfig+0x32e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3b      	ldr	r2, [pc, #236]	@ (80051e0 <DMA_SetConfig+0x38c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <DMA_SetConfig+0x32e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3a      	ldr	r2, [pc, #232]	@ (80051e4 <DMA_SetConfig+0x390>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a38      	ldr	r2, [pc, #224]	@ (80051e8 <DMA_SetConfig+0x394>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <DMA_SetConfig+0x32e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a37      	ldr	r2, [pc, #220]	@ (80051ec <DMA_SetConfig+0x398>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a35      	ldr	r2, [pc, #212]	@ (80051f0 <DMA_SetConfig+0x39c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <DMA_SetConfig+0x32e>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a34      	ldr	r2, [pc, #208]	@ (80051f4 <DMA_SetConfig+0x3a0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a32      	ldr	r2, [pc, #200]	@ (80051f8 <DMA_SetConfig+0x3a4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a31      	ldr	r2, [pc, #196]	@ (80051fc <DMA_SetConfig+0x3a8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <DMA_SetConfig+0x32e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2f      	ldr	r2, [pc, #188]	@ (8005200 <DMA_SetConfig+0x3ac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2e      	ldr	r2, [pc, #184]	@ (8005204 <DMA_SetConfig+0x3b0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2c      	ldr	r2, [pc, #176]	@ (8005208 <DMA_SetConfig+0x3b4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <DMA_SetConfig+0x32e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2b      	ldr	r2, [pc, #172]	@ (800520c <DMA_SetConfig+0x3b8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a29      	ldr	r2, [pc, #164]	@ (8005210 <DMA_SetConfig+0x3bc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <DMA_SetConfig+0x32e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a28      	ldr	r2, [pc, #160]	@ (8005214 <DMA_SetConfig+0x3c0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <DMA_SetConfig+0x32e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a26      	ldr	r2, [pc, #152]	@ (8005218 <DMA_SetConfig+0x3c4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <DMA_SetConfig+0x332>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <DMA_SetConfig+0x334>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d108      	bne.n	80051be <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	60da      	str	r2, [r3, #12]
}
 80051bc:	e007      	b.n	80051ce <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	48022c08 	.word	0x48022c08
 80051e0:	48022c1c 	.word	0x48022c1c
 80051e4:	48022c30 	.word	0x48022c30
 80051e8:	48022c44 	.word	0x48022c44
 80051ec:	48022c58 	.word	0x48022c58
 80051f0:	48022c6c 	.word	0x48022c6c
 80051f4:	48022c80 	.word	0x48022c80
 80051f8:	48022c94 	.word	0x48022c94
 80051fc:	58025408 	.word	0x58025408
 8005200:	5802541c 	.word	0x5802541c
 8005204:	58025430 	.word	0x58025430
 8005208:	58025444 	.word	0x58025444
 800520c:	58025458 	.word	0x58025458
 8005210:	5802546c 	.word	0x5802546c
 8005214:	58025480 	.word	0x58025480
 8005218:	58025494 	.word	0x58025494

0800521c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a42      	ldr	r2, [pc, #264]	@ (8005334 <DMA_CalcBaseAndBitshift+0x118>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a41      	ldr	r2, [pc, #260]	@ (8005338 <DMA_CalcBaseAndBitshift+0x11c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3f      	ldr	r2, [pc, #252]	@ (800533c <DMA_CalcBaseAndBitshift+0x120>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a3e      	ldr	r2, [pc, #248]	@ (8005340 <DMA_CalcBaseAndBitshift+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3c      	ldr	r2, [pc, #240]	@ (8005344 <DMA_CalcBaseAndBitshift+0x128>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3b      	ldr	r2, [pc, #236]	@ (8005348 <DMA_CalcBaseAndBitshift+0x12c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a39      	ldr	r2, [pc, #228]	@ (800534c <DMA_CalcBaseAndBitshift+0x130>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a38      	ldr	r2, [pc, #224]	@ (8005350 <DMA_CalcBaseAndBitshift+0x134>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a36      	ldr	r2, [pc, #216]	@ (8005354 <DMA_CalcBaseAndBitshift+0x138>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a35      	ldr	r2, [pc, #212]	@ (8005358 <DMA_CalcBaseAndBitshift+0x13c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a33      	ldr	r2, [pc, #204]	@ (800535c <DMA_CalcBaseAndBitshift+0x140>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a32      	ldr	r2, [pc, #200]	@ (8005360 <DMA_CalcBaseAndBitshift+0x144>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a30      	ldr	r2, [pc, #192]	@ (8005364 <DMA_CalcBaseAndBitshift+0x148>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005368 <DMA_CalcBaseAndBitshift+0x14c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2d      	ldr	r2, [pc, #180]	@ (800536c <DMA_CalcBaseAndBitshift+0x150>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xa8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2c      	ldr	r2, [pc, #176]	@ (8005370 <DMA_CalcBaseAndBitshift+0x154>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <DMA_CalcBaseAndBitshift+0xac>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <DMA_CalcBaseAndBitshift+0xae>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d024      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	3b10      	subs	r3, #16
 80052d6:	4a27      	ldr	r2, [pc, #156]	@ (8005374 <DMA_CalcBaseAndBitshift+0x158>)
 80052d8:	fba2 2303 	umull	r2, r3, r2, r3
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <DMA_CalcBaseAndBitshift+0x15c>)
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d908      	bls.n	8005308 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <DMA_CalcBaseAndBitshift+0x160>)
 80052fe:	4013      	ands	r3, r2
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	659a      	str	r2, [r3, #88]	@ 0x58
 8005306:	e00d      	b.n	8005324 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <DMA_CalcBaseAndBitshift+0x160>)
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6593      	str	r3, [r2, #88]	@ 0x58
 8005316:	e005      	b.n	8005324 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	40020040 	.word	0x40020040
 8005340:	40020058 	.word	0x40020058
 8005344:	40020070 	.word	0x40020070
 8005348:	40020088 	.word	0x40020088
 800534c:	400200a0 	.word	0x400200a0
 8005350:	400200b8 	.word	0x400200b8
 8005354:	40020410 	.word	0x40020410
 8005358:	40020428 	.word	0x40020428
 800535c:	40020440 	.word	0x40020440
 8005360:	40020458 	.word	0x40020458
 8005364:	40020470 	.word	0x40020470
 8005368:	40020488 	.word	0x40020488
 800536c:	400204a0 	.word	0x400204a0
 8005370:	400204b8 	.word	0x400204b8
 8005374:	aaaaaaab 	.word	0xaaaaaaab
 8005378:	0800b218 	.word	0x0800b218
 800537c:	fffffc00 	.word	0xfffffc00

08005380 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d120      	bne.n	80053d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	2b03      	cmp	r3, #3
 800539a:	d858      	bhi.n	800544e <DMA_CheckFifoParam+0xce>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <DMA_CheckFifoParam+0x24>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c7 	.word	0x080053c7
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	0800544f 	.word	0x0800544f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d048      	beq.n	8005452 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053c4:	e045      	b.n	8005452 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053ce:	d142      	bne.n	8005456 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d4:	e03f      	b.n	8005456 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053de:	d123      	bne.n	8005428 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d838      	bhi.n	800545a <DMA_CheckFifoParam+0xda>
 80053e8:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <DMA_CheckFifoParam+0x70>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005401 	.word	0x08005401
 80053f4:	08005407 	.word	0x08005407
 80053f8:	08005401 	.word	0x08005401
 80053fc:	08005419 	.word	0x08005419
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
        break;
 8005404:	e030      	b.n	8005468 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d025      	beq.n	800545e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005416:	e022      	b.n	800545e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005420:	d11f      	bne.n	8005462 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005426:	e01c      	b.n	8005462 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	2b02      	cmp	r3, #2
 800542e:	d902      	bls.n	8005436 <DMA_CheckFifoParam+0xb6>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d003      	beq.n	800543c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005434:	e018      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
        break;
 800543a:	e015      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
    break;
 800544c:	e00b      	b.n	8005466 <DMA_CheckFifoParam+0xe6>
        break;
 800544e:	bf00      	nop
 8005450:	e00a      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        break;
 8005452:	bf00      	nop
 8005454:	e008      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        break;
 8005456:	bf00      	nop
 8005458:	e006      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        break;
 800545a:	bf00      	nop
 800545c:	e004      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        break;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
        break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <DMA_CheckFifoParam+0xe8>
    break;
 8005466:	bf00      	nop
    }
  }

  return status;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a38      	ldr	r2, [pc, #224]	@ (800556c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a36      	ldr	r2, [pc, #216]	@ (8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01d      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a35      	ldr	r2, [pc, #212]	@ (8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a33      	ldr	r2, [pc, #204]	@ (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a32      	ldr	r2, [pc, #200]	@ (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a30      	ldr	r2, [pc, #192]	@ (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d101      	bne.n	80054da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	3b08      	subs	r3, #8
 80054e8:	4a28      	ldr	r2, [pc, #160]	@ (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4b26      	ldr	r3, [pc, #152]	@ (8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a24      	ldr	r2, [pc, #144]	@ (8005594 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005504:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2201      	movs	r2, #1
 800550e:	409a      	lsls	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005514:	e024      	b.n	8005560 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3b10      	subs	r3, #16
 800551e:	4a1e      	ldr	r2, [pc, #120]	@ (8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d806      	bhi.n	800553e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a1b      	ldr	r2, [pc, #108]	@ (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d902      	bls.n	800553e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3308      	adds	r3, #8
 800553c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	2201      	movs	r2, #1
 800555a:	409a      	lsls	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	58025408 	.word	0x58025408
 8005570:	5802541c 	.word	0x5802541c
 8005574:	58025430 	.word	0x58025430
 8005578:	58025444 	.word	0x58025444
 800557c:	58025458 	.word	0x58025458
 8005580:	5802546c 	.word	0x5802546c
 8005584:	58025480 	.word	0x58025480
 8005588:	58025494 	.word	0x58025494
 800558c:	cccccccd 	.word	0xcccccccd
 8005590:	16009600 	.word	0x16009600
 8005594:	58025880 	.word	0x58025880
 8005598:	aaaaaaab 	.word	0xaaaaaaab
 800559c:	400204b8 	.word	0x400204b8
 80055a0:	4002040f 	.word	0x4002040f
 80055a4:	10008200 	.word	0x10008200
 80055a8:	40020880 	.word	0x40020880

080055ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d04a      	beq.n	8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d847      	bhi.n	8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a25      	ldr	r2, [pc, #148]	@ (8005664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a24      	ldr	r2, [pc, #144]	@ (8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d01d      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a22      	ldr	r2, [pc, #136]	@ (800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a21      	ldr	r2, [pc, #132]	@ (8005670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	@ (8005680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a15      	ldr	r2, [pc, #84]	@ (8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005634:	671a      	str	r2, [r3, #112]	@ 0x70
 8005636:	e009      	b.n	800564c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800564a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3b01      	subs	r3, #1
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	58025408 	.word	0x58025408
 8005668:	5802541c 	.word	0x5802541c
 800566c:	58025430 	.word	0x58025430
 8005670:	58025444 	.word	0x58025444
 8005674:	58025458 	.word	0x58025458
 8005678:	5802546c 	.word	0x5802546c
 800567c:	58025480 	.word	0x58025480
 8005680:	58025494 	.word	0x58025494
 8005684:	1600963f 	.word	0x1600963f
 8005688:	58025940 	.word	0x58025940
 800568c:	1000823f 	.word	0x1000823f
 8005690:	40020940 	.word	0x40020940

08005694 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b098      	sub	sp, #96	@ 0x60
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800569c:	4a84      	ldr	r2, [pc, #528]	@ (80058b0 <HAL_FDCAN_Init+0x21c>)
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	4611      	mov	r1, r2
 80056a4:	224c      	movs	r2, #76	@ 0x4c
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 fd6e 	bl	800b188 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e1c6      	b.n	8005a44 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a7e      	ldr	r2, [pc, #504]	@ (80058b4 <HAL_FDCAN_Init+0x220>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d106      	bne.n	80056ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fb fde4 	bl	80012b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0210 	bic.w	r2, r2, #16
 80056f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056f8:	f7fc fba2 	bl	8001e40 <HAL_GetTick>
 80056fc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056fe:	e014      	b.n	800572a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005700:	f7fc fb9e 	bl	8001e40 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b0a      	cmp	r3, #10
 800570c:	d90d      	bls.n	800572a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2203      	movs	r2, #3
 8005722:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e18c      	b.n	8005a44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d0e3      	beq.n	8005700 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005748:	f7fc fb7a 	bl	8001e40 <HAL_GetTick>
 800574c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800574e:	e014      	b.n	800577a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005750:	f7fc fb76 	bl	8001e40 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b0a      	cmp	r3, #10
 800575c:	d90d      	bls.n	800577a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005764:	f043 0201 	orr.w	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2203      	movs	r2, #3
 8005772:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e164      	b.n	8005a44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0e3      	beq.n	8005750 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0202 	orr.w	r2, r2, #2
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7c1b      	ldrb	r3, [r3, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d108      	bne.n	80057b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ae:	619a      	str	r2, [r3, #24]
 80057b0:	e007      	b.n	80057c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7c5b      	ldrb	r3, [r3, #17]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d108      	bne.n	80057dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057d8:	619a      	str	r2, [r3, #24]
 80057da:	e007      	b.n	80057ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c9b      	ldrb	r3, [r3, #18]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d108      	bne.n	8005806 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005802:	619a      	str	r2, [r3, #24]
 8005804:	e007      	b.n	8005816 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005814:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800583a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0210 	bic.w	r2, r2, #16
 800584a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d108      	bne.n	8005866 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0204 	orr.w	r2, r2, #4
 8005862:	619a      	str	r2, [r3, #24]
 8005864:	e030      	b.n	80058c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02c      	beq.n	80058c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d020      	beq.n	80058b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005884:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0210 	orr.w	r2, r2, #16
 8005894:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d114      	bne.n	80058c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0220 	orr.w	r2, r2, #32
 80058ac:	619a      	str	r2, [r3, #24]
 80058ae:	e00b      	b.n	80058c8 <HAL_FDCAN_Init+0x234>
 80058b0:	0800b1bc 	.word	0x0800b1bc
 80058b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0220 	orr.w	r2, r2, #32
 80058c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058fc:	d115      	bne.n	800592a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005902:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	3b01      	subs	r3, #1
 800590a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800590c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	3b01      	subs	r3, #1
 8005914:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005916:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	3b01      	subs	r3, #1
 8005920:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005926:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005928:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005950:	4413      	add	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800595e:	f023 0107 	bic.w	r1, r3, #7
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3360      	adds	r3, #96	@ 0x60
 800596a:	443b      	add	r3, r7
 800596c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800598a:	f023 0107 	bic.w	r1, r3, #7
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3360      	adds	r3, #96	@ 0x60
 8005996:	443b      	add	r3, r7
 8005998:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d012      	beq.n	80059d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059b6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3360      	adds	r3, #96	@ 0x60
 80059c2:	443b      	add	r3, r7
 80059c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80059c8:	011a      	lsls	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	3360      	adds	r3, #96	@ 0x60
 80059f0:	443b      	add	r3, r7
 80059f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <HAL_FDCAN_Init+0x3b8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d107      	bne.n	8005a1c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f022 0203 	bic.w	r2, r2, #3
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fd81 	bl	800653c <FDCAN_CalcultateRamBlockAddresses>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005a40:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3760      	adds	r7, #96	@ 0x60
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	4000a000 	.word	0x4000a000

08005a50 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d111      	bne.n	8005a88 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e008      	b.n	8005a9a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a8e:	f043 0204 	orr.w	r2, r3, #4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d141      	bne.n	8005b42 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ac6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e038      	b.n	8005b54 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e026      	b.n	8005b54 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fe93 	bl	8006848 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2101      	movs	r1, #1
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005b32:	2201      	movs	r2, #1
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	409a      	lsls	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e008      	b.n	8005b54 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b48:	f043 0208 	orr.w	r2, r3, #8
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b08b      	sub	sp, #44	@ 0x2c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b74:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005b76:	7efb      	ldrb	r3, [r7, #27]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	f040 8149 	bne.w	8005e10 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d14c      	bne.n	8005c1e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e13c      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e12a      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10a      	bne.n	8005bf4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005be6:	0fdb      	lsrs	r3, r3, #31
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	fb01 f303 	mul.w	r3, r1, r3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c1c:	e068      	b.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b41      	cmp	r3, #65	@ 0x41
 8005c22:	d14c      	bne.n	8005cbe <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c2c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0ec      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0da      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c74:	0e1b      	lsrs	r3, r3, #24
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10a      	bne.n	8005c94 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c86:	0fdb      	lsrs	r3, r3, #31
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb0:	69f9      	ldr	r1, [r7, #28]
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbc:	e018      	b.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d309      	bcc.n	8005cdc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0a2      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d107      	bne.n	8005d14 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	0c9b      	lsrs	r3, r3, #18
 8005d0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e005      	b.n	8005d20 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0fda      	lsrs	r2, r3, #31
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	3304      	adds	r3, #4
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	e00a      	b.n	8005dac <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	440b      	add	r3, r1
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	3301      	adds	r3, #1
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e30 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d3ec      	bcc.n	8005d96 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b40      	cmp	r3, #64	@ 0x40
 8005dc0:	d105      	bne.n	8005dce <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005dcc:	e01e      	b.n	8005e0c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b41      	cmp	r3, #65	@ 0x41
 8005dd2:	d105      	bne.n	8005de0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005dde:	e015      	b.n	8005e0c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b1f      	cmp	r3, #31
 8005de4:	d808      	bhi.n	8005df8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2101      	movs	r1, #1
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	fa01 f202 	lsl.w	r2, r1, r2
 8005df2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005df6:	e009      	b.n	8005e0c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 021f 	and.w	r2, r3, #31
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e008      	b.n	8005e22 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e16:	f043 0208 	orr.w	r2, r3, #8
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	372c      	adds	r7, #44	@ 0x2c
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	0800b220 	.word	0x0800b220

08005e34 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005e6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d002      	beq.n	8005e78 <HAL_FDCAN_ActivateNotification+0x20>
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d155      	bne.n	8005f24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d108      	bne.n	8005e98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e96:	e014      	b.n	8005ec2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d108      	bne.n	8005eba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0202 	orr.w	r2, r2, #2
 8005eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005eb8:	e003      	b.n	8005ec2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <HAL_FDCAN_ActivateNotification+0xec>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f12:	4b0d      	ldr	r3, [pc, #52]	@ (8005f48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	0f9b      	lsrs	r3, r3, #30
 8005f1a:	490b      	ldr	r1, [pc, #44]	@ (8005f48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e008      	b.n	8005f36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f2a:	f043 0202 	orr.w	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	3fcfffff 	.word	0x3fcfffff
 8005f48:	4000a800 	.word	0x4000a800

08005f4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b096      	sub	sp, #88	@ 0x58
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005f54:	4b95      	ldr	r3, [pc, #596]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	079b      	lsls	r3, r3, #30
 8005f5a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005f5c:	4b93      	ldr	r3, [pc, #588]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	079b      	lsls	r3, r3, #30
 8005f62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f64:	4013      	ands	r3, r2
 8005f66:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005f72:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f94:	4013      	ands	r3, r2
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fac:	4013      	ands	r3, r2
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005fba:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fce:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fdc:	4013      	ands	r3, r2
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00f      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800600c:	651a      	str	r2, [r3, #80]	@ 0x50
 800600e:	4b67      	ldr	r3, [pc, #412]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006010:	2200      	movs	r2, #0
 8006012:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa44 	bl	80064a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800601a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01c      	beq.n	800605e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602a:	2b00      	cmp	r3, #0
 800602c:	d017      	beq.n	800605e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006042:	4013      	ands	r3, r2
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800604e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006050:	4b56      	ldr	r3, [pc, #344]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9f9 	bl	8006450 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800605e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00d      	beq.n	8006080 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800606a:	4b51      	ldr	r3, [pc, #324]	@ (80061b0 <HAL_FDCAN_IRQHandler+0x264>)
 800606c:	400b      	ands	r3, r1
 800606e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006070:	4a4e      	ldr	r2, [pc, #312]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006074:	0f9b      	lsrs	r3, r3, #30
 8006076:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9b2 	bl	80063e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800608c:	4b48      	ldr	r3, [pc, #288]	@ (80061b0 <HAL_FDCAN_IRQHandler+0x264>)
 800608e:	400b      	ands	r3, r1
 8006090:	6513      	str	r3, [r2, #80]	@ 0x50
 8006092:	4a46      	ldr	r2, [pc, #280]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006096:	0f9b      	lsrs	r3, r3, #30
 8006098:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800609a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9ac 	bl	80063fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80060a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00d      	beq.n	80060c4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80060ae:	4b40      	ldr	r3, [pc, #256]	@ (80061b0 <HAL_FDCAN_IRQHandler+0x264>)
 80060b0:	400b      	ands	r3, r1
 80060b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060b4:	4a3d      	ldr	r2, [pc, #244]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 80060b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b8:	0f9b      	lsrs	r3, r3, #30
 80060ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80060bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa f9a8 	bl	8000414 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80060c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060d0:	4b37      	ldr	r3, [pc, #220]	@ (80061b0 <HAL_FDCAN_IRQHandler+0x264>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060d6:	4a35      	ldr	r2, [pc, #212]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 80060d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060da:	0f9b      	lsrs	r3, r3, #30
 80060dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80060de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f995 	bl	8006410 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00f      	beq.n	8006110 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006102:	651a      	str	r2, [r3, #80]	@ 0x50
 8006104:	4b29      	ldr	r3, [pc, #164]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f98b 	bl	8006426 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01c      	beq.n	8006154 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800612c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006138:	4013      	ands	r3, r2
 800613a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50
 8006146:	4b19      	ldr	r3, [pc, #100]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006148:	2200      	movs	r2, #0
 800614a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800614c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f973 	bl	800643a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006156:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006170:	651a      	str	r2, [r3, #80]	@ 0x50
 8006172:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 8006174:	2200      	movs	r2, #0
 8006176:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f974 	bl	8006466 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800617e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d010      	beq.n	80061b4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800619a:	651a      	str	r2, [r3, #80]	@ 0x50
 800619c:	4b03      	ldr	r3, [pc, #12]	@ (80061ac <HAL_FDCAN_IRQHandler+0x260>)
 800619e:	2200      	movs	r2, #0
 80061a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f969 	bl	800647a <HAL_FDCAN_TimestampWraparoundCallback>
 80061a8:	e004      	b.n	80061b4 <HAL_FDCAN_IRQHandler+0x268>
 80061aa:	bf00      	nop
 80061ac:	4000a800 	.word	0x4000a800
 80061b0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80061b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00f      	beq.n	80061de <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80061d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80061d2:	4b81      	ldr	r3, [pc, #516]	@ (80063d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f958 	bl	800648e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80061de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d014      	beq.n	8006212 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80061fc:	4b76      	ldr	r3, [pc, #472]	@ (80063d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006208:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800621e:	4b6f      	ldr	r3, [pc, #444]	@ (80063dc <HAL_FDCAN_IRQHandler+0x490>)
 8006220:	400b      	ands	r3, r1
 8006222:	6513      	str	r3, [r2, #80]	@ 0x50
 8006224:	4a6c      	ldr	r2, [pc, #432]	@ (80063d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8006226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006228:	0f9b      	lsrs	r3, r3, #30
 800622a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800622c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f94b 	bl	80064ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006240:	4b66      	ldr	r3, [pc, #408]	@ (80063dc <HAL_FDCAN_IRQHandler+0x490>)
 8006242:	400b      	ands	r3, r1
 8006244:	6513      	str	r3, [r2, #80]	@ 0x50
 8006246:	4a64      	ldr	r2, [pc, #400]	@ (80063d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8006248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800624a:	0f9b      	lsrs	r3, r3, #30
 800624c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5f      	ldr	r2, [pc, #380]	@ (80063e0 <HAL_FDCAN_IRQHandler+0x494>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f040 80aa 	bne.w	80063be <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80a2 	beq.w	80063be <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800628e:	4013      	ands	r3, r2
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a6:	4013      	ands	r3, r2
 80062a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062be:	4013      	ands	r3, r2
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80062cc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	4013      	ands	r3, r2
 80062d8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80062e4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	4013      	ands	r3, r2
 80062f0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800630e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f8e4 	bl	80064e0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006324:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f8e4 	bl	80064f6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d019      	beq.n	800636c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d014      	beq.n	800636c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	b29b      	uxth	r3, r3
 800634c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006358:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6939      	ldr	r1, [r7, #16]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8d0 	bl	800650c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006378:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800637a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f8d1 	bl	8006524 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f874 	bl	80064b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80063ce:	bf00      	nop
 80063d0:	3758      	adds	r7, #88	@ 0x58
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	4000a800 	.word	0x4000a800
 80063dc:	3fcfffff 	.word	0x3fcfffff
 80063e0:	4000a000 	.word	0x4000a000

080063e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006548:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006552:	4ba7      	ldr	r3, [pc, #668]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006554:	4013      	ands	r3, r2
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	0091      	lsls	r1, r2, #2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	430b      	orrs	r3, r1
 8006560:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	041a      	lsls	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4413      	add	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006592:	4b97      	ldr	r3, [pc, #604]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006594:	4013      	ands	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0091      	lsls	r1, r2, #2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	430b      	orrs	r3, r1
 80065a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b4:	041a      	lsls	r2, r3, #16
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80065d4:	4b86      	ldr	r3, [pc, #536]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	0091      	lsls	r1, r2, #2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	430b      	orrs	r3, r1
 80065e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065ee:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	041a      	lsls	r2, r3, #16
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800661c:	4b74      	ldr	r3, [pc, #464]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800661e:	4013      	ands	r3, r2
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	0091      	lsls	r1, r2, #2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	430b      	orrs	r3, r1
 800662a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006636:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663e:	041a      	lsls	r2, r3, #16
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006664:	4b62      	ldr	r3, [pc, #392]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	0091      	lsls	r1, r2, #2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006690:	4b57      	ldr	r3, [pc, #348]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006692:	4013      	ands	r3, r2
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0091      	lsls	r1, r2, #2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	430b      	orrs	r3, r1
 800669e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066aa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	041a      	lsls	r2, r3, #16
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	4413      	add	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80066d2:	4b47      	ldr	r3, [pc, #284]	@ (80067f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0091      	lsls	r1, r2, #2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6812      	ldr	r2, [r2, #0]
 80066de:	430b      	orrs	r3, r1
 80066e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066ec:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	041a      	lsls	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006708:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006710:	061a      	lsls	r2, r3, #24
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006720:	4b34      	ldr	r3, [pc, #208]	@ (80067f4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006722:	4413      	add	r3, r2
 8006724:	009a      	lsls	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800675c:	441a      	add	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80067d2:	fb01 f303 	mul.w	r3, r1, r3
 80067d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80067d8:	441a      	add	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e6:	4a04      	ldr	r2, [pc, #16]	@ (80067f8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d915      	bls.n	8006818 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80067ec:	e006      	b.n	80067fc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80067ee:	bf00      	nop
 80067f0:	ffff0003 	.word	0xffff0003
 80067f4:	10002b00 	.word	0x10002b00
 80067f8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2203      	movs	r2, #3
 8006810:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e010      	b.n	800683a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e005      	b.n	800682c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3304      	adds	r3, #4
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d3f3      	bcc.n	8006820 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop

08006848 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	@ 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006866:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800686e:	4313      	orrs	r3, r2
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	e00a      	b.n	800688a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800687c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006882:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006888:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006894:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800689a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80068a0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	3304      	adds	r3, #4
 80068cc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	3304      	adds	r3, #4
 80068d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e020      	b.n	8006922 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	3303      	adds	r3, #3
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	4413      	add	r3, r2
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	3302      	adds	r3, #2
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	440b      	add	r3, r1
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068f8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	3301      	adds	r3, #1
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	440b      	add	r3, r1
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006906:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	440a      	add	r2, r1
 800690e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006910:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3304      	adds	r3, #4
 800691a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3304      	adds	r3, #4
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4a06      	ldr	r2, [pc, #24]	@ (8006940 <FDCAN_CopyMessageToRAM+0xf8>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	461a      	mov	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4293      	cmp	r3, r2
 8006930:	d3d6      	bcc.n	80068e0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	3724      	adds	r7, #36	@ 0x24
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	0800b220 	.word	0x0800b220

08006944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006944:	b480      	push	{r7}
 8006946:	b089      	sub	sp, #36	@ 0x24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006952:	4b89      	ldr	r3, [pc, #548]	@ (8006b78 <HAL_GPIO_Init+0x234>)
 8006954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006956:	e194      	b.n	8006c82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	2101      	movs	r1, #1
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	4013      	ands	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8186 	beq.w	8006c7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d005      	beq.n	8006988 <HAL_GPIO_Init+0x44>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d130      	bne.n	80069ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	2203      	movs	r2, #3
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069be:	2201      	movs	r2, #1
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43db      	mvns	r3, r3
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	4013      	ands	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	f003 0201 	and.w	r2, r3, #1
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d017      	beq.n	8006a26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	2203      	movs	r2, #3
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43db      	mvns	r3, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d123      	bne.n	8006a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	08da      	lsrs	r2, r3, #3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3208      	adds	r2, #8
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	220f      	movs	r2, #15
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	4013      	ands	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	08da      	lsrs	r2, r3, #3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3208      	adds	r2, #8
 8006a74:	69b9      	ldr	r1, [r7, #24]
 8006a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	2203      	movs	r2, #3
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80e0 	beq.w	8006c7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006abc:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <HAL_GPIO_Init+0x238>)
 8006abe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8006b7c <HAL_GPIO_Init+0x238>)
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006acc:	4b2b      	ldr	r3, [pc, #172]	@ (8006b7c <HAL_GPIO_Init+0x238>)
 8006ace:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ada:	4a29      	ldr	r2, [pc, #164]	@ (8006b80 <HAL_GPIO_Init+0x23c>)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	220f      	movs	r2, #15
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a20      	ldr	r2, [pc, #128]	@ (8006b84 <HAL_GPIO_Init+0x240>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d052      	beq.n	8006bac <HAL_GPIO_Init+0x268>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a1f      	ldr	r2, [pc, #124]	@ (8006b88 <HAL_GPIO_Init+0x244>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d031      	beq.n	8006b72 <HAL_GPIO_Init+0x22e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a1e      	ldr	r2, [pc, #120]	@ (8006b8c <HAL_GPIO_Init+0x248>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d02b      	beq.n	8006b6e <HAL_GPIO_Init+0x22a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <HAL_GPIO_Init+0x24c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d025      	beq.n	8006b6a <HAL_GPIO_Init+0x226>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a1c      	ldr	r2, [pc, #112]	@ (8006b94 <HAL_GPIO_Init+0x250>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <HAL_GPIO_Init+0x222>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1b      	ldr	r2, [pc, #108]	@ (8006b98 <HAL_GPIO_Init+0x254>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d019      	beq.n	8006b62 <HAL_GPIO_Init+0x21e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	@ (8006b9c <HAL_GPIO_Init+0x258>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_GPIO_Init+0x21a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a19      	ldr	r2, [pc, #100]	@ (8006ba0 <HAL_GPIO_Init+0x25c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00d      	beq.n	8006b5a <HAL_GPIO_Init+0x216>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a18      	ldr	r2, [pc, #96]	@ (8006ba4 <HAL_GPIO_Init+0x260>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <HAL_GPIO_Init+0x212>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a17      	ldr	r2, [pc, #92]	@ (8006ba8 <HAL_GPIO_Init+0x264>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_GPIO_Init+0x20e>
 8006b4e:	2309      	movs	r3, #9
 8006b50:	e02d      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b52:	230a      	movs	r3, #10
 8006b54:	e02b      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b56:	2308      	movs	r3, #8
 8006b58:	e029      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b5a:	2307      	movs	r3, #7
 8006b5c:	e027      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b5e:	2306      	movs	r3, #6
 8006b60:	e025      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b62:	2305      	movs	r3, #5
 8006b64:	e023      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b66:	2304      	movs	r3, #4
 8006b68:	e021      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e01f      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e01d      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e01b      	b.n	8006bae <HAL_GPIO_Init+0x26a>
 8006b76:	bf00      	nop
 8006b78:	58000080 	.word	0x58000080
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	58000400 	.word	0x58000400
 8006b84:	58020000 	.word	0x58020000
 8006b88:	58020400 	.word	0x58020400
 8006b8c:	58020800 	.word	0x58020800
 8006b90:	58020c00 	.word	0x58020c00
 8006b94:	58021000 	.word	0x58021000
 8006b98:	58021400 	.word	0x58021400
 8006b9c:	58021800 	.word	0x58021800
 8006ba0:	58021c00 	.word	0x58021c00
 8006ba4:	58022000 	.word	0x58022000
 8006ba8:	58022400 	.word	0x58022400
 8006bac:	2300      	movs	r3, #0
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	f002 0203 	and.w	r2, r2, #3
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	4093      	lsls	r3, r2
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bbe:	4938      	ldr	r1, [pc, #224]	@ (8006ca0 <HAL_GPIO_Init+0x35c>)
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f47f ae63 	bne.w	8006958 <HAL_GPIO_Init+0x14>
  }
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	3724      	adds	r7, #36	@ 0x24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	58000400 	.word	0x58000400

08006ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cb4:	787b      	ldrb	r3, [r7, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cba:	887a      	ldrh	r2, [r7, #2]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cc0:	e003      	b.n	8006cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cc2:	887b      	ldrh	r3, [r7, #2]
 8006cc4:	041a      	lsls	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	619a      	str	r2, [r3, #24]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ce8:	887a      	ldrh	r2, [r7, #2]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4013      	ands	r3, r2
 8006cee:	041a      	lsls	r2, r3, #16
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	43d9      	mvns	r1, r3
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	619a      	str	r2, [r3, #24]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e08b      	b.n	8006e36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa fb92 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2224      	movs	r2, #36	@ 0x24
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0201 	bic.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d107      	bne.n	8006d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e006      	b.n	8006d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d108      	bne.n	8006dae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	e007      	b.n	8006dbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e40 <HAL_I2C_Init+0x134>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	02008000 	.word	0x02008000

08006e44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d138      	bne.n	8006ecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e032      	b.n	8006ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2224      	movs	r2, #36	@ 0x24
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0201 	bic.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d139      	bne.n	8006f64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e033      	b.n	8006f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2224      	movs	r2, #36	@ 0x24
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0201 	bic.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f7c:	4b19      	ldr	r3, [pc, #100]	@ (8006fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d00a      	beq.n	8006f9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f88:	4b16      	ldr	r3, [pc, #88]	@ (8006fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d001      	beq.n	8006f9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e01f      	b.n	8006fda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e01d      	b.n	8006fda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f9e:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f023 0207 	bic.w	r2, r3, #7
 8006fa6:	490f      	ldr	r1, [pc, #60]	@ (8006fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006fae:	f7fa ff47 	bl	8001e40 <HAL_GetTick>
 8006fb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fb4:	e009      	b.n	8006fca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fb6:	f7fa ff43 	bl	8001e40 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fc4:	d901      	bls.n	8006fca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e007      	b.n	8006fda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fca:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <HAL_PWREx_ConfigSupply+0x70>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd6:	d1ee      	bne.n	8006fb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	58024800 	.word	0x58024800

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08c      	sub	sp, #48	@ 0x30
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f000 bc1f 	b.w	800783a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 80b3 	beq.w	8007170 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800700a:	4b95      	ldr	r3, [pc, #596]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007014:	4b92      	ldr	r3, [pc, #584]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	2b10      	cmp	r3, #16
 800701e:	d007      	beq.n	8007030 <HAL_RCC_OscConfig+0x48>
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	2b18      	cmp	r3, #24
 8007024:	d112      	bne.n	800704c <HAL_RCC_OscConfig+0x64>
 8007026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d10d      	bne.n	800704c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007030:	4b8b      	ldr	r3, [pc, #556]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8098 	beq.w	800716e <HAL_RCC_OscConfig+0x186>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 8093 	bne.w	800716e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e3f6      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007054:	d106      	bne.n	8007064 <HAL_RCC_OscConfig+0x7c>
 8007056:	4b82      	ldr	r3, [pc, #520]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a81      	ldr	r2, [pc, #516]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e058      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d112      	bne.n	8007092 <HAL_RCC_OscConfig+0xaa>
 800706c:	4b7c      	ldr	r3, [pc, #496]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a7b      	ldr	r2, [pc, #492]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b79      	ldr	r3, [pc, #484]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a78      	ldr	r2, [pc, #480]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800707e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b76      	ldr	r3, [pc, #472]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a75      	ldr	r2, [pc, #468]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800708a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e041      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800709a:	d112      	bne.n	80070c2 <HAL_RCC_OscConfig+0xda>
 800709c:	4b70      	ldr	r3, [pc, #448]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a6f      	ldr	r2, [pc, #444]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b6d      	ldr	r3, [pc, #436]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6c      	ldr	r2, [pc, #432]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a69      	ldr	r2, [pc, #420]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e029      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80070ca:	d112      	bne.n	80070f2 <HAL_RCC_OscConfig+0x10a>
 80070cc:	4b64      	ldr	r3, [pc, #400]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a63      	ldr	r2, [pc, #396]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	4b61      	ldr	r3, [pc, #388]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a60      	ldr	r2, [pc, #384]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	4b5e      	ldr	r3, [pc, #376]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e011      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
 80070f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a5a      	ldr	r2, [pc, #360]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80070f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b58      	ldr	r3, [pc, #352]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a57      	ldr	r2, [pc, #348]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	4b55      	ldr	r3, [pc, #340]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a54      	ldr	r2, [pc, #336]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007110:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007114:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d013      	beq.n	8007146 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fa fe8f 	bl	8001e40 <HAL_GetTick>
 8007122:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007126:	f7fa fe8b 	bl	8001e40 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b64      	cmp	r3, #100	@ 0x64
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e380      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007138:	4b49      	ldr	r3, [pc, #292]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f0      	beq.n	8007126 <HAL_RCC_OscConfig+0x13e>
 8007144:	e014      	b.n	8007170 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7fa fe7b 	bl	8001e40 <HAL_GetTick>
 800714a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714e:	f7fa fe77 	bl	8001e40 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b64      	cmp	r3, #100	@ 0x64
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e36c      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007160:	4b3f      	ldr	r3, [pc, #252]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f0      	bne.n	800714e <HAL_RCC_OscConfig+0x166>
 800716c:	e000      	b.n	8007170 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 808c 	beq.w	8007296 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800717e:	4b38      	ldr	r3, [pc, #224]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007186:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007188:	4b35      	ldr	r3, [pc, #212]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <HAL_RCC_OscConfig+0x1bc>
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2b18      	cmp	r3, #24
 8007198:	d137      	bne.n	800720a <HAL_RCC_OscConfig+0x222>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d132      	bne.n	800720a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_OscConfig+0x1d4>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e33e      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071bc:	4b28      	ldr	r3, [pc, #160]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f023 0219 	bic.w	r2, r3, #25
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4925      	ldr	r1, [pc, #148]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ce:	f7fa fe37 	bl	8001e40 <HAL_GetTick>
 80071d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d6:	f7fa fe33 	bl	8001e40 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e328      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	061b      	lsls	r3, r3, #24
 8007202:	4917      	ldr	r1, [pc, #92]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007204:	4313      	orrs	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007208:	e045      	b.n	8007296 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d028      	beq.n	8007264 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007212:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 0219 	bic.w	r2, r3, #25
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	4910      	ldr	r1, [pc, #64]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007220:	4313      	orrs	r3, r2
 8007222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007224:	f7fa fe0c 	bl	8001e40 <HAL_GetTick>
 8007228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722c:	f7fa fe08 	bl	8001e40 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e2fd      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723e:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f0      	beq.n	800722c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724a:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	061b      	lsls	r3, r3, #24
 8007258:	4901      	ldr	r1, [pc, #4]	@ (8007260 <HAL_RCC_OscConfig+0x278>)
 800725a:	4313      	orrs	r3, r2
 800725c:	604b      	str	r3, [r1, #4]
 800725e:	e01a      	b.n	8007296 <HAL_RCC_OscConfig+0x2ae>
 8007260:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007264:	4b97      	ldr	r3, [pc, #604]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a96      	ldr	r2, [pc, #600]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fa fde6 	bl	8001e40 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007278:	f7fa fde2 	bl	8001e40 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e2d7      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800728a:	4b8e      	ldr	r3, [pc, #568]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d06a      	beq.n	8007378 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a2:	4b88      	ldr	r3, [pc, #544]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072ac:	4b85      	ldr	r3, [pc, #532]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d007      	beq.n	80072c8 <HAL_RCC_OscConfig+0x2e0>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b18      	cmp	r3, #24
 80072bc:	d11b      	bne.n	80072f6 <HAL_RCC_OscConfig+0x30e>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d116      	bne.n	80072f6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072c8:	4b7e      	ldr	r3, [pc, #504]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_OscConfig+0x2f8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	2b80      	cmp	r3, #128	@ 0x80
 80072da:	d001      	beq.n	80072e0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e2ac      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072e0:	4b78      	ldr	r3, [pc, #480]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	061b      	lsls	r3, r3, #24
 80072ee:	4975      	ldr	r1, [pc, #468]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072f4:	e040      	b.n	8007378 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d023      	beq.n	8007346 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072fe:	4b71      	ldr	r3, [pc, #452]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a70      	ldr	r2, [pc, #448]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fa fd99 	bl	8001e40 <HAL_GetTick>
 800730e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007312:	f7fa fd95 	bl	8001e40 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e28a      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007324:	4b67      	ldr	r3, [pc, #412]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007330:	4b64      	ldr	r3, [pc, #400]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	4961      	ldr	r1, [pc, #388]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007340:	4313      	orrs	r3, r2
 8007342:	60cb      	str	r3, [r1, #12]
 8007344:	e018      	b.n	8007378 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007346:	4b5f      	ldr	r3, [pc, #380]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a5e      	ldr	r2, [pc, #376]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800734c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007352:	f7fa fd75 	bl	8001e40 <HAL_GetTick>
 8007356:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800735a:	f7fa fd71 	bl	8001e40 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e266      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800736c:	4b55      	ldr	r3, [pc, #340]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f0      	bne.n	800735a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d036      	beq.n	80073f2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d019      	beq.n	80073c0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800738c:	4b4d      	ldr	r3, [pc, #308]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800738e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007390:	4a4c      	ldr	r2, [pc, #304]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fa fd52 	bl	8001e40 <HAL_GetTick>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073a0:	f7fa fd4e 	bl	8001e40 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e243      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073b2:	4b44      	ldr	r3, [pc, #272]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0x3b8>
 80073be:	e018      	b.n	80073f2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c0:	4b40      	ldr	r3, [pc, #256]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c4:	4a3f      	ldr	r2, [pc, #252]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073cc:	f7fa fd38 	bl	8001e40 <HAL_GetTick>
 80073d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d4:	f7fa fd34 	bl	8001e40 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e229      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073e6:	4b37      	ldr	r3, [pc, #220]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d036      	beq.n	800746c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d019      	beq.n	800743a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007406:	4b2f      	ldr	r3, [pc, #188]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2e      	ldr	r2, [pc, #184]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800740c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007410:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007412:	f7fa fd15 	bl	8001e40 <HAL_GetTick>
 8007416:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800741a:	f7fa fd11 	bl	8001e40 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e206      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800742c:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x432>
 8007438:	e018      	b.n	800746c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800743a:	4b22      	ldr	r3, [pc, #136]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007444:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007446:	f7fa fcfb 	bl	8001e40 <HAL_GetTick>
 800744a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800744e:	f7fa fcf7 	bl	8001e40 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e1ec      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007460:	4b18      	ldr	r3, [pc, #96]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80af 	beq.w	80075d8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800747a:	4b13      	ldr	r3, [pc, #76]	@ (80074c8 <HAL_RCC_OscConfig+0x4e0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a12      	ldr	r2, [pc, #72]	@ (80074c8 <HAL_RCC_OscConfig+0x4e0>)
 8007480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007486:	f7fa fcdb 	bl	8001e40 <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748e:	f7fa fcd7 	bl	8001e40 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b64      	cmp	r3, #100	@ 0x64
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e1cc      	b.n	800783a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a0:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <HAL_RCC_OscConfig+0x4e0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10b      	bne.n	80074cc <HAL_RCC_OscConfig+0x4e4>
 80074b4:	4b03      	ldr	r3, [pc, #12]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b8:	4a02      	ldr	r2, [pc, #8]	@ (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6713      	str	r3, [r2, #112]	@ 0x70
 80074c0:	e05b      	b.n	800757a <HAL_RCC_OscConfig+0x592>
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	58024800 	.word	0x58024800
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d112      	bne.n	80074fa <HAL_RCC_OscConfig+0x512>
 80074d4:	4b9d      	ldr	r3, [pc, #628]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d8:	4a9c      	ldr	r2, [pc, #624]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074da:	f023 0301 	bic.w	r3, r3, #1
 80074de:	6713      	str	r3, [r2, #112]	@ 0x70
 80074e0:	4b9a      	ldr	r3, [pc, #616]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	4a99      	ldr	r2, [pc, #612]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ec:	4b97      	ldr	r3, [pc, #604]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f0:	4a96      	ldr	r2, [pc, #600]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80074f2:	f023 0304 	bic.w	r3, r3, #4
 80074f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f8:	e03f      	b.n	800757a <HAL_RCC_OscConfig+0x592>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d112      	bne.n	8007528 <HAL_RCC_OscConfig+0x540>
 8007502:	4b92      	ldr	r3, [pc, #584]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007506:	4a91      	ldr	r2, [pc, #580]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007508:	f043 0304 	orr.w	r3, r3, #4
 800750c:	6713      	str	r3, [r2, #112]	@ 0x70
 800750e:	4b8f      	ldr	r3, [pc, #572]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007512:	4a8e      	ldr	r2, [pc, #568]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007518:	6713      	str	r3, [r2, #112]	@ 0x70
 800751a:	4b8c      	ldr	r3, [pc, #560]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	4a8b      	ldr	r2, [pc, #556]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6713      	str	r3, [r2, #112]	@ 0x70
 8007526:	e028      	b.n	800757a <HAL_RCC_OscConfig+0x592>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b85      	cmp	r3, #133	@ 0x85
 800752e:	d112      	bne.n	8007556 <HAL_RCC_OscConfig+0x56e>
 8007530:	4b86      	ldr	r3, [pc, #536]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007534:	4a85      	ldr	r2, [pc, #532]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007536:	f043 0304 	orr.w	r3, r3, #4
 800753a:	6713      	str	r3, [r2, #112]	@ 0x70
 800753c:	4b83      	ldr	r3, [pc, #524]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800753e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007540:	4a82      	ldr	r2, [pc, #520]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007546:	6713      	str	r3, [r2, #112]	@ 0x70
 8007548:	4b80      	ldr	r3, [pc, #512]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800754a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754c:	4a7f      	ldr	r2, [pc, #508]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6713      	str	r3, [r2, #112]	@ 0x70
 8007554:	e011      	b.n	800757a <HAL_RCC_OscConfig+0x592>
 8007556:	4b7d      	ldr	r3, [pc, #500]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755a:	4a7c      	ldr	r2, [pc, #496]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	6713      	str	r3, [r2, #112]	@ 0x70
 8007562:	4b7a      	ldr	r3, [pc, #488]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	4a79      	ldr	r2, [pc, #484]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007568:	f023 0304 	bic.w	r3, r3, #4
 800756c:	6713      	str	r3, [r2, #112]	@ 0x70
 800756e:	4b77      	ldr	r3, [pc, #476]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007572:	4a76      	ldr	r2, [pc, #472]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007578:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d015      	beq.n	80075ae <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007582:	f7fa fc5d 	bl	8001e40 <HAL_GetTick>
 8007586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007588:	e00a      	b.n	80075a0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fa fc59 	bl	8001e40 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e14c      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a0:	4b6a      	ldr	r3, [pc, #424]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0ee      	beq.n	800758a <HAL_RCC_OscConfig+0x5a2>
 80075ac:	e014      	b.n	80075d8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ae:	f7fa fc47 	bl	8001e40 <HAL_GetTick>
 80075b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075b4:	e00a      	b.n	80075cc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b6:	f7fa fc43 	bl	8001e40 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e136      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075cc:	4b5f      	ldr	r3, [pc, #380]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1ee      	bne.n	80075b6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 812b 	beq.w	8007838 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075e2:	4b5a      	ldr	r3, [pc, #360]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075ea:	2b18      	cmp	r3, #24
 80075ec:	f000 80bb 	beq.w	8007766 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	f040 8095 	bne.w	8007724 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fa:	4b54      	ldr	r3, [pc, #336]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a53      	ldr	r2, [pc, #332]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fa fc1b 	bl	8001e40 <HAL_GetTick>
 800760a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760e:	f7fa fc17 	bl	8001e40 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e10c      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007620:	4b4a      	ldr	r3, [pc, #296]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f0      	bne.n	800760e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800762c:	4b47      	ldr	r3, [pc, #284]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800762e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007630:	4b47      	ldr	r3, [pc, #284]	@ (8007750 <HAL_RCC_OscConfig+0x768>)
 8007632:	4013      	ands	r3, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800763c:	0112      	lsls	r2, r2, #4
 800763e:	430a      	orrs	r2, r1
 8007640:	4942      	ldr	r1, [pc, #264]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007642:	4313      	orrs	r3, r2
 8007644:	628b      	str	r3, [r1, #40]	@ 0x28
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764a:	3b01      	subs	r3, #1
 800764c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007654:	3b01      	subs	r3, #1
 8007656:	025b      	lsls	r3, r3, #9
 8007658:	b29b      	uxth	r3, r3
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	3b01      	subs	r3, #1
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766e:	3b01      	subs	r3, #1
 8007670:	061b      	lsls	r3, r3, #24
 8007672:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007676:	4935      	ldr	r1, [pc, #212]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007678:	4313      	orrs	r3, r2
 800767a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800767c:	4b33      	ldr	r3, [pc, #204]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a32      	ldr	r2, [pc, #200]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007688:	4b30      	ldr	r3, [pc, #192]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800768a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800768c:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <HAL_RCC_OscConfig+0x76c>)
 800768e:	4013      	ands	r3, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007694:	00d2      	lsls	r2, r2, #3
 8007696:	492d      	ldr	r1, [pc, #180]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007698:	4313      	orrs	r3, r2
 800769a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800769c:	4b2b      	ldr	r3, [pc, #172]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	f023 020c 	bic.w	r2, r3, #12
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	4928      	ldr	r1, [pc, #160]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076ae:	4b27      	ldr	r3, [pc, #156]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	f023 0202 	bic.w	r2, r3, #2
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ba:	4924      	ldr	r1, [pc, #144]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076c0:	4b22      	ldr	r3, [pc, #136]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	4a21      	ldr	r2, [pc, #132]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076cc:	4b1f      	ldr	r3, [pc, #124]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	4a1e      	ldr	r2, [pc, #120]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076d8:	4b1c      	ldr	r3, [pc, #112]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076e4:	4b19      	ldr	r3, [pc, #100]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	4a18      	ldr	r2, [pc, #96]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f0:	4b16      	ldr	r3, [pc, #88]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a15      	ldr	r2, [pc, #84]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 80076f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fc:	f7fa fba0 	bl	8001e40 <HAL_GetTick>
 8007700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007704:	f7fa fb9c 	bl	8001e40 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e091      	b.n	800783a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007716:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCC_OscConfig+0x71c>
 8007722:	e089      	b.n	8007838 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007724:	4b09      	ldr	r3, [pc, #36]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a08      	ldr	r2, [pc, #32]	@ (800774c <HAL_RCC_OscConfig+0x764>)
 800772a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800772e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fa fb86 	bl	8001e40 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007736:	e00f      	b.n	8007758 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007738:	f7fa fb82 	bl	8001e40 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d908      	bls.n	8007758 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e077      	b.n	800783a <HAL_RCC_OscConfig+0x852>
 800774a:	bf00      	nop
 800774c:	58024400 	.word	0x58024400
 8007750:	fffffc0c 	.word	0xfffffc0c
 8007754:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007758:	4b3a      	ldr	r3, [pc, #232]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e9      	bne.n	8007738 <HAL_RCC_OscConfig+0x750>
 8007764:	e068      	b.n	8007838 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007766:	4b37      	ldr	r3, [pc, #220]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800776c:	4b35      	ldr	r3, [pc, #212]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 800776e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007770:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	2b01      	cmp	r3, #1
 8007778:	d031      	beq.n	80077de <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0203 	and.w	r2, r3, #3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d12a      	bne.n	80077de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d122      	bne.n	80077de <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d11a      	bne.n	80077de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	0a5b      	lsrs	r3, r3, #9
 80077ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d111      	bne.n	80077de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	0c1b      	lsrs	r3, r3, #16
 80077be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d108      	bne.n	80077de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	0e1b      	lsrs	r3, r3, #24
 80077d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077da:	429a      	cmp	r2, r3
 80077dc:	d001      	beq.n	80077e2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e02b      	b.n	800783a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077e2:	4b18      	ldr	r3, [pc, #96]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 80077e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e6:	08db      	lsrs	r3, r3, #3
 80077e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077ec:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d01f      	beq.n	8007838 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80077f8:	4b12      	ldr	r3, [pc, #72]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	4a11      	ldr	r2, [pc, #68]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007804:	f7fa fb1c 	bl	8001e40 <HAL_GetTick>
 8007808:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800780a:	bf00      	nop
 800780c:	f7fa fb18 	bl	8001e40 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	4293      	cmp	r3, r2
 8007816:	d0f9      	beq.n	800780c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007818:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 800781a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <HAL_RCC_OscConfig+0x860>)
 800781e:	4013      	ands	r3, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007824:	00d2      	lsls	r2, r2, #3
 8007826:	4907      	ldr	r1, [pc, #28]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800782c:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	4a04      	ldr	r2, [pc, #16]	@ (8007844 <HAL_RCC_OscConfig+0x85c>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3730      	adds	r7, #48	@ 0x30
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	58024400 	.word	0x58024400
 8007848:	ffff0007 	.word	0xffff0007

0800784c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e19c      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007860:	4b8a      	ldr	r3, [pc, #552]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d910      	bls.n	8007890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786e:	4b87      	ldr	r3, [pc, #540]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f023 020f 	bic.w	r2, r3, #15
 8007876:	4985      	ldr	r1, [pc, #532]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800787e:	4b83      	ldr	r3, [pc, #524]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d001      	beq.n	8007890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e184      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d010      	beq.n	80078be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d908      	bls.n	80078be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078ac:	4b78      	ldr	r3, [pc, #480]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	4975      	ldr	r1, [pc, #468]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d010      	beq.n	80078ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695a      	ldr	r2, [r3, #20]
 80078ce:	4b70      	ldr	r3, [pc, #448]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d908      	bls.n	80078ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078da:	4b6d      	ldr	r3, [pc, #436]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	496a      	ldr	r1, [pc, #424]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d010      	beq.n	800791a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	4b64      	ldr	r3, [pc, #400]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007904:	429a      	cmp	r2, r3
 8007906:	d908      	bls.n	800791a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007908:	4b61      	ldr	r3, [pc, #388]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	495e      	ldr	r1, [pc, #376]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007916:	4313      	orrs	r3, r2
 8007918:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d010      	beq.n	8007948 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69da      	ldr	r2, [r3, #28]
 800792a:	4b59      	ldr	r3, [pc, #356]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007932:	429a      	cmp	r2, r3
 8007934:	d908      	bls.n	8007948 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007936:	4b56      	ldr	r3, [pc, #344]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4953      	ldr	r1, [pc, #332]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007944:	4313      	orrs	r3, r2
 8007946:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d010      	beq.n	8007976 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	4b4d      	ldr	r3, [pc, #308]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	429a      	cmp	r2, r3
 8007962:	d908      	bls.n	8007976 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007964:	4b4a      	ldr	r3, [pc, #296]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f023 020f 	bic.w	r2, r3, #15
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	4947      	ldr	r1, [pc, #284]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007972:	4313      	orrs	r3, r2
 8007974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d055      	beq.n	8007a2e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007982:	4b43      	ldr	r3, [pc, #268]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4940      	ldr	r1, [pc, #256]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007990:	4313      	orrs	r3, r2
 8007992:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d107      	bne.n	80079ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800799c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d121      	bne.n	80079ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0f6      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d107      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079b4:	4b36      	ldr	r3, [pc, #216]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d115      	bne.n	80079ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0ea      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d107      	bne.n	80079dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079cc:	4b30      	ldr	r3, [pc, #192]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0de      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0d6      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079ec:	4b28      	ldr	r3, [pc, #160]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f023 0207 	bic.w	r2, r3, #7
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4925      	ldr	r1, [pc, #148]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079fe:	f7fa fa1f 	bl	8001e40 <HAL_GetTick>
 8007a02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a04:	e00a      	b.n	8007a1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a06:	f7fa fa1b 	bl	8001e40 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e0be      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d1eb      	bne.n	8007a06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	4b14      	ldr	r3, [pc, #80]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d208      	bcs.n	8007a5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a4a:	4b11      	ldr	r3, [pc, #68]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f023 020f 	bic.w	r2, r3, #15
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	490e      	ldr	r1, [pc, #56]	@ (8007a90 <HAL_RCC_ClockConfig+0x244>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d214      	bcs.n	8007a94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6a:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f023 020f 	bic.w	r2, r3, #15
 8007a72:	4906      	ldr	r1, [pc, #24]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7a:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <HAL_RCC_ClockConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d005      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e086      	b.n	8007b9a <HAL_RCC_ClockConfig+0x34e>
 8007a8c:	52002000 	.word	0x52002000
 8007a90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d010      	beq.n	8007ac2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d208      	bcs.n	8007ac2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	4939      	ldr	r1, [pc, #228]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d010      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	4b34      	ldr	r3, [pc, #208]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d208      	bcs.n	8007af0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ade:	4b31      	ldr	r3, [pc, #196]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	492e      	ldr	r1, [pc, #184]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	4b28      	ldr	r3, [pc, #160]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d208      	bcs.n	8007b1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b0c:	4b25      	ldr	r3, [pc, #148]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	4922      	ldr	r1, [pc, #136]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d010      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d208      	bcs.n	8007b4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	4917      	ldr	r1, [pc, #92]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007b4c:	f000 f834 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b14      	ldr	r3, [pc, #80]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	4912      	ldr	r1, [pc, #72]	@ (8007ba8 <HAL_RCC_ClockConfig+0x35c>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba4 <HAL_RCC_ClockConfig+0x358>)
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	4a0d      	ldr	r2, [pc, #52]	@ (8007ba8 <HAL_RCC_ClockConfig+0x35c>)
 8007b74:	5cd3      	ldrb	r3, [r2, r3]
 8007b76:	f003 031f 	and.w	r3, r3, #31
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	4a0a      	ldr	r2, [pc, #40]	@ (8007bac <HAL_RCC_ClockConfig+0x360>)
 8007b82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b84:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb0 <HAL_RCC_ClockConfig+0x364>)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <HAL_RCC_ClockConfig+0x368>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fa f90c 	bl	8001dac <HAL_InitTick>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	58024400 	.word	0x58024400
 8007ba8:	0800b208 	.word	0x0800b208
 8007bac:	24000004 	.word	0x24000004
 8007bb0:	24000000 	.word	0x24000000
 8007bb4:	24000008 	.word	0x24000008

08007bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b089      	sub	sp, #36	@ 0x24
 8007bbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bbe:	4bb3      	ldr	r3, [pc, #716]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc6:	2b18      	cmp	r3, #24
 8007bc8:	f200 8155 	bhi.w	8007e76 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007e77 	.word	0x08007e77
 8007bdc:	08007e77 	.word	0x08007e77
 8007be0:	08007e77 	.word	0x08007e77
 8007be4:	08007e77 	.word	0x08007e77
 8007be8:	08007e77 	.word	0x08007e77
 8007bec:	08007e77 	.word	0x08007e77
 8007bf0:	08007e77 	.word	0x08007e77
 8007bf4:	08007c5f 	.word	0x08007c5f
 8007bf8:	08007e77 	.word	0x08007e77
 8007bfc:	08007e77 	.word	0x08007e77
 8007c00:	08007e77 	.word	0x08007e77
 8007c04:	08007e77 	.word	0x08007e77
 8007c08:	08007e77 	.word	0x08007e77
 8007c0c:	08007e77 	.word	0x08007e77
 8007c10:	08007e77 	.word	0x08007e77
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007e77 	.word	0x08007e77
 8007c1c:	08007e77 	.word	0x08007e77
 8007c20:	08007e77 	.word	0x08007e77
 8007c24:	08007e77 	.word	0x08007e77
 8007c28:	08007e77 	.word	0x08007e77
 8007c2c:	08007e77 	.word	0x08007e77
 8007c30:	08007e77 	.word	0x08007e77
 8007c34:	08007c6b 	.word	0x08007c6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c38:	4b94      	ldr	r3, [pc, #592]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c44:	4b91      	ldr	r3, [pc, #580]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	4a90      	ldr	r2, [pc, #576]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
 8007c54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c56:	e111      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c58:	4b8d      	ldr	r3, [pc, #564]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c5a:	61bb      	str	r3, [r7, #24]
      break;
 8007c5c:	e10e      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c60:	61bb      	str	r3, [r7, #24]
      break;
 8007c62:	e10b      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c64:	4b8c      	ldr	r3, [pc, #560]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c66:	61bb      	str	r3, [r7, #24]
      break;
 8007c68:	e108      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c6a:	4b88      	ldr	r3, [pc, #544]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c74:	4b85      	ldr	r3, [pc, #532]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c80:	4b82      	ldr	r3, [pc, #520]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c8a:	4b80      	ldr	r3, [pc, #512]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80e1 	beq.w	8007e70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	f000 8083 	beq.w	8007dbc <HAL_RCC_GetSysClockFreq+0x204>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f200 80a1 	bhi.w	8007e00 <HAL_RCC_GetSysClockFreq+0x248>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCC_GetSysClockFreq+0x114>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d056      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cca:	e099      	b.n	8007e00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d02d      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	08db      	lsrs	r3, r3, #3
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d02:	4b62      	ldr	r3, [pc, #392]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d32:	e087      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ea0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d46:	4b51      	ldr	r3, [pc, #324]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d76:	e065      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8a:	4b40      	ldr	r3, [pc, #256]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dba:	e043      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ea8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dce:	4b2f      	ldr	r3, [pc, #188]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8007de2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dfe:	e021      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e12:	4b1e      	ldr	r3, [pc, #120]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e44:	4b11      	ldr	r3, [pc, #68]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	0a5b      	lsrs	r3, r3, #9
 8007e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4e:	3301      	adds	r3, #1
 8007e50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e68:	ee17 3a90 	vmov	r3, s15
 8007e6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e6e:	e005      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
      break;
 8007e74:	e002      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e76:	4b07      	ldr	r3, [pc, #28]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e78:	61bb      	str	r3, [r7, #24]
      break;
 8007e7a:	bf00      	nop
  }

  return sysclockfreq;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3724      	adds	r7, #36	@ 0x24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	03d09000 	.word	0x03d09000
 8007e94:	003d0900 	.word	0x003d0900
 8007e98:	017d7840 	.word	0x017d7840
 8007e9c:	46000000 	.word	0x46000000
 8007ea0:	4c742400 	.word	0x4c742400
 8007ea4:	4a742400 	.word	0x4a742400
 8007ea8:	4bbebc20 	.word	0x4bbebc20

08007eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007eb2:	f7ff fe81 	bl	8007bb8 <HAL_RCC_GetSysClockFreq>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b10      	ldr	r3, [pc, #64]	@ (8007efc <HAL_RCC_GetHCLKFreq+0x50>)
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	0a1b      	lsrs	r3, r3, #8
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	490f      	ldr	r1, [pc, #60]	@ (8007f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ec4:	5ccb      	ldrb	r3, [r1, r3]
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ece:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8007efc <HAL_RCC_GetHCLKFreq+0x50>)
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	4a09      	ldr	r2, [pc, #36]	@ (8007f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eda:	5cd3      	ldrb	r3, [r2, r3]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	4a07      	ldr	r2, [pc, #28]	@ (8007f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ee8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007eea:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ef0:	4b04      	ldr	r3, [pc, #16]	@ (8007f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	58024400 	.word	0x58024400
 8007f00:	0800b208 	.word	0x0800b208
 8007f04:	24000004 	.word	0x24000004
 8007f08:	24000000 	.word	0x24000000

08007f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007f10:	f7ff ffcc 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8007f14:	4602      	mov	r2, r0
 8007f16:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	091b      	lsrs	r3, r3, #4
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	4904      	ldr	r1, [pc, #16]	@ (8007f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f22:	5ccb      	ldrb	r3, [r1, r3]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	58024400 	.word	0x58024400
 8007f34:	0800b208 	.word	0x0800b208

08007f38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f3c:	b0c8      	sub	sp, #288	@ 0x120
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f5c:	2500      	movs	r5, #0
 8007f5e:	ea54 0305 	orrs.w	r3, r4, r5
 8007f62:	d049      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f6e:	d02f      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f74:	d828      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f7a:	d01a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f80:	d822      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f8a:	d007      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f8c:	e01c      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8e:	4ba7      	ldr	r3, [pc, #668]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f92:	4aa6      	ldr	r2, [pc, #664]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f9a:	e01a      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	2102      	movs	r1, #2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f002 fa6d 	bl	800a484 <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fb0:	e00f      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb6:	3328      	adds	r3, #40	@ 0x28
 8007fb8:	2102      	movs	r1, #2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f002 fb14 	bl	800a5e8 <RCCEx_PLL3_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fc6:	e004      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fce:	e000      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fda:	4b94      	ldr	r3, [pc, #592]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe8:	4a90      	ldr	r2, [pc, #576]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fea:	430b      	orrs	r3, r1
 8007fec:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ff4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008004:	f04f 0900 	mov.w	r9, #0
 8008008:	ea58 0309 	orrs.w	r3, r8, r9
 800800c:	d047      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008014:	2b04      	cmp	r3, #4
 8008016:	d82a      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008018:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008035 	.word	0x08008035
 8008024:	08008043 	.word	0x08008043
 8008028:	08008059 	.word	0x08008059
 800802c:	08008077 	.word	0x08008077
 8008030:	08008077 	.word	0x08008077
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008034:	4b7d      	ldr	r3, [pc, #500]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008038:	4a7c      	ldr	r2, [pc, #496]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800803a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008040:	e01a      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008046:	3308      	adds	r3, #8
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f002 fa1a 	bl	800a484 <RCCEx_PLL2_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008056:	e00f      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800805c:	3328      	adds	r3, #40	@ 0x28
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f002 fac1 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800806c:	e004      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008074:	e000      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008078:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008080:	4b6a      	ldr	r3, [pc, #424]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008084:	f023 0107 	bic.w	r1, r3, #7
 8008088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800808c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808e:	4a67      	ldr	r2, [pc, #412]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008090:	430b      	orrs	r3, r1
 8008092:	6513      	str	r3, [r2, #80]	@ 0x50
 8008094:	e003      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800809a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800809e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80080aa:	f04f 0b00 	mov.w	fp, #0
 80080ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80080b2:	d054      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80080b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080be:	d036      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080c4:	d82f      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d032      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d0:	d829      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d4:	d02f      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80080d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d8:	d825      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080da:	2b80      	cmp	r3, #128	@ 0x80
 80080dc:	d018      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80080de:	2b80      	cmp	r3, #128	@ 0x80
 80080e0:	d821      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80080e6:	2b40      	cmp	r3, #64	@ 0x40
 80080e8:	d007      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80080ea:	e01c      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ec:	4b4f      	ldr	r3, [pc, #316]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f0:	4a4e      	ldr	r2, [pc, #312]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080f8:	e01e      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fe:	3308      	adds	r3, #8
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f002 f9be 	bl	800a484 <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800810e:	e013      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008114:	3328      	adds	r3, #40	@ 0x28
 8008116:	2100      	movs	r1, #0
 8008118:	4618      	mov	r0, r3
 800811a:	f002 fa65 	bl	800a5e8 <RCCEx_PLL3_Config>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008124:	e008      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800812c:	e004      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008138:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008140:	4b3a      	ldr	r3, [pc, #232]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008144:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814e:	4a37      	ldr	r2, [pc, #220]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008150:	430b      	orrs	r3, r1
 8008152:	6513      	str	r3, [r2, #80]	@ 0x50
 8008154:	e003      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800815a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800816a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800816e:	2300      	movs	r3, #0
 8008170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008174:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d05c      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008184:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008188:	d03b      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800818a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800818e:	d834      	bhi.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008194:	d037      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800819a:	d82e      	bhi.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800819c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081a0:	d033      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081a2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081a6:	d828      	bhi.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ac:	d01a      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80081ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b2:	d822      	bhi.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80081b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081bc:	d007      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x296>
 80081be:	e01c      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c0:	4b1a      	ldr	r3, [pc, #104]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	4a19      	ldr	r2, [pc, #100]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081cc:	e01e      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d2:	3308      	adds	r3, #8
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f002 f954 	bl	800a484 <RCCEx_PLL2_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081e2:	e013      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e8:	3328      	adds	r3, #40	@ 0x28
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f002 f9fb 	bl	800a5e8 <RCCEx_PLL3_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081f8:	e008      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008200:	e004      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008202:	bf00      	nop
 8008204:	e002      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008206:	bf00      	nop
 8008208:	e000      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800820a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800820c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10d      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008214:	4b05      	ldr	r3, [pc, #20]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008218:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800821c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008222:	4a02      	ldr	r2, [pc, #8]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008224:	430b      	orrs	r3, r1
 8008226:	6513      	str	r3, [r2, #80]	@ 0x50
 8008228:	e006      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800822a:	bf00      	nop
 800822c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008234:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008248:	2300      	movs	r3, #0
 800824a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800824e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008252:	460b      	mov	r3, r1
 8008254:	4313      	orrs	r3, r2
 8008256:	d03a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800825c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d01f      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008262:	2b30      	cmp	r3, #48	@ 0x30
 8008264:	d819      	bhi.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008266:	2b20      	cmp	r3, #32
 8008268:	d00c      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800826a:	2b20      	cmp	r3, #32
 800826c:	d815      	bhi.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d019      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008272:	2b10      	cmp	r3, #16
 8008274:	d111      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008276:	4bae      	ldr	r3, [pc, #696]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	4aad      	ldr	r2, [pc, #692]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800827c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008282:	e011      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008288:	3308      	adds	r3, #8
 800828a:	2102      	movs	r1, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f002 f8f9 	bl	800a484 <RCCEx_PLL2_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008298:	e006      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082a0:	e002      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80082a2:	bf00      	nop
 80082a4:	e000      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80082a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082b0:	4b9f      	ldr	r3, [pc, #636]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082be:	4a9c      	ldr	r2, [pc, #624]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082c0:	430b      	orrs	r3, r1
 80082c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082c4:	e003      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082de:	2300      	movs	r3, #0
 80082e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d051      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f8:	d035      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80082fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fe:	d82e      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008300:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008304:	d031      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008306:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800830a:	d828      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800830c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008310:	d01a      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008316:	d822      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008320:	d007      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008322:	e01c      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008324:	4b82      	ldr	r3, [pc, #520]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	4a81      	ldr	r2, [pc, #516]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800832a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800832e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008330:	e01c      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008336:	3308      	adds	r3, #8
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f002 f8a2 	bl	800a484 <RCCEx_PLL2_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008346:	e011      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834c:	3328      	adds	r3, #40	@ 0x28
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f002 f949 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800835c:	e006      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008364:	e002      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800836a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008374:	4b6e      	ldr	r3, [pc, #440]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008378:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008382:	4a6b      	ldr	r2, [pc, #428]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008384:	430b      	orrs	r3, r1
 8008386:	6513      	str	r3, [r2, #80]	@ 0x50
 8008388:	e003      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800838e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800839e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083a2:	2300      	movs	r3, #0
 80083a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80083ac:	460b      	mov	r3, r1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d053      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083bc:	d033      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80083be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083c2:	d82c      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083c8:	d02f      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80083ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083ce:	d826      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083d4:	d02b      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083da:	d820      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e0:	d012      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e6:	d81a      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d022      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80083ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f0:	d115      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	3308      	adds	r3, #8
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 f842 	bl	800a484 <RCCEx_PLL2_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008406:	e015      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800840c:	3328      	adds	r3, #40	@ 0x28
 800840e:	2101      	movs	r1, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f002 f8e9 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800841c:	e00a      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008424:	e006      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008426:	bf00      	nop
 8008428:	e004      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842a:	bf00      	nop
 800842c:	e002      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800843c:	4b3c      	ldr	r3, [pc, #240]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800843e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008440:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800844a:	4a39      	ldr	r2, [pc, #228]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800844c:	430b      	orrs	r3, r1
 800844e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008450:	e003      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008456:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800845a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008466:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008470:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d060      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800847a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008482:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008486:	d039      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008488:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800848c:	d832      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800848e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008492:	d035      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008498:	d82c      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849e:	d031      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a4:	d826      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084aa:	d02d      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084b0:	d820      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b6:	d012      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80084b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084bc:	d81a      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d024      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c6:	d115      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084cc:	3308      	adds	r3, #8
 80084ce:	2101      	movs	r1, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 ffd7 	bl	800a484 <RCCEx_PLL2_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084dc:	e017      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e2:	3328      	adds	r3, #40	@ 0x28
 80084e4:	2101      	movs	r1, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	f002 f87e 	bl	800a5e8 <RCCEx_PLL3_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084f2:	e00c      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084fa:	e008      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084fc:	bf00      	nop
 80084fe:	e006      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008500:	bf00      	nop
 8008502:	e004      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008504:	bf00      	nop
 8008506:	e002      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800850c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10e      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008516:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800851e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008526:	4a02      	ldr	r2, [pc, #8]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008528:	430b      	orrs	r3, r1
 800852a:	6593      	str	r3, [r2, #88]	@ 0x58
 800852c:	e006      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800852e:	bf00      	nop
 8008530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008534:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008538:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800853c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800854c:	2300      	movs	r3, #0
 800854e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d037      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800855c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008566:	d00e      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800856c:	d816      	bhi.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d018      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008576:	d111      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008578:	4bc4      	ldr	r3, [pc, #784]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	4ac3      	ldr	r2, [pc, #780]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008584:	e00f      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800858a:	3308      	adds	r3, #8
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f001 ff78 	bl	800a484 <RCCEx_PLL2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800859a:	e004      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085a2:	e000      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085ae:	4bb7      	ldr	r3, [pc, #732]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085bc:	4ab3      	ldr	r2, [pc, #716]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085be:	430b      	orrs	r3, r1
 80085c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80085c2:	e003      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4313      	orrs	r3, r2
 80085ea:	d039      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d81c      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008639 	.word	0x08008639
 8008600:	0800860d 	.word	0x0800860d
 8008604:	0800861b 	.word	0x0800861b
 8008608:	08008639 	.word	0x08008639
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4b9f      	ldr	r3, [pc, #636]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	4a9e      	ldr	r2, [pc, #632]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008618:	e00f      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	3308      	adds	r3, #8
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f001 ff2e 	bl	800a484 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800862e:	e004      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008642:	4b92      	ldr	r3, [pc, #584]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008646:	f023 0103 	bic.w	r1, r3, #3
 800864a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008650:	4a8e      	ldr	r2, [pc, #568]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008652:	430b      	orrs	r3, r1
 8008654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800865c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800866c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008676:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	f000 8099 	beq.w	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008682:	4b83      	ldr	r3, [pc, #524]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a82      	ldr	r2, [pc, #520]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800868c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868e:	f7f9 fbd7 	bl	8001e40 <HAL_GetTick>
 8008692:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008696:	e00b      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008698:	f7f9 fbd2 	bl	8001e40 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b64      	cmp	r3, #100	@ 0x64
 80086a6:	d903      	bls.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086ae:	e005      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086b0:	4b77      	ldr	r3, [pc, #476]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ed      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d173      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086c4:	4b71      	ldr	r3, [pc, #452]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086d0:	4053      	eors	r3, r2
 80086d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d015      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086da:	4b6c      	ldr	r3, [pc, #432]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e6:	4b69      	ldr	r3, [pc, #420]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ea:	4a68      	ldr	r2, [pc, #416]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086f2:	4b66      	ldr	r3, [pc, #408]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f6:	4a65      	ldr	r2, [pc, #404]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086fe:	4a63      	ldr	r2, [pc, #396]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008704:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800870e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008712:	d118      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7f9 fb94 	bl	8001e40 <HAL_GetTick>
 8008718:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800871c:	e00d      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871e:	f7f9 fb8f 	bl	8001e40 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800872e:	429a      	cmp	r2, r3
 8008730:	d903      	bls.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008738:	e005      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800873a:	4b54      	ldr	r3, [pc, #336]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800873c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0eb      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008746:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d129      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008752:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800875a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800875e:	d10e      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008760:	4b4a      	ldr	r3, [pc, #296]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008770:	091a      	lsrs	r2, r3, #4
 8008772:	4b48      	ldr	r3, [pc, #288]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008774:	4013      	ands	r3, r2
 8008776:	4a45      	ldr	r2, [pc, #276]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008778:	430b      	orrs	r3, r1
 800877a:	6113      	str	r3, [r2, #16]
 800877c:	e005      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800877e:	4b43      	ldr	r3, [pc, #268]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	4a42      	ldr	r2, [pc, #264]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008784:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008788:	6113      	str	r3, [r2, #16]
 800878a:	4b40      	ldr	r3, [pc, #256]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800878c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800878e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800879a:	4a3c      	ldr	r2, [pc, #240]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800879c:	430b      	orrs	r3, r1
 800879e:	6713      	str	r3, [r2, #112]	@ 0x70
 80087a0:	e008      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80087aa:	e003      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f002 0301 	and.w	r3, r2, #1
 80087c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f000 8090 	beq.w	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087de:	2b28      	cmp	r3, #40	@ 0x28
 80087e0:	d870      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	080088cd 	.word	0x080088cd
 80087ec:	080088c5 	.word	0x080088c5
 80087f0:	080088c5 	.word	0x080088c5
 80087f4:	080088c5 	.word	0x080088c5
 80087f8:	080088c5 	.word	0x080088c5
 80087fc:	080088c5 	.word	0x080088c5
 8008800:	080088c5 	.word	0x080088c5
 8008804:	080088c5 	.word	0x080088c5
 8008808:	08008899 	.word	0x08008899
 800880c:	080088c5 	.word	0x080088c5
 8008810:	080088c5 	.word	0x080088c5
 8008814:	080088c5 	.word	0x080088c5
 8008818:	080088c5 	.word	0x080088c5
 800881c:	080088c5 	.word	0x080088c5
 8008820:	080088c5 	.word	0x080088c5
 8008824:	080088c5 	.word	0x080088c5
 8008828:	080088af 	.word	0x080088af
 800882c:	080088c5 	.word	0x080088c5
 8008830:	080088c5 	.word	0x080088c5
 8008834:	080088c5 	.word	0x080088c5
 8008838:	080088c5 	.word	0x080088c5
 800883c:	080088c5 	.word	0x080088c5
 8008840:	080088c5 	.word	0x080088c5
 8008844:	080088c5 	.word	0x080088c5
 8008848:	080088cd 	.word	0x080088cd
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088c5 	.word	0x080088c5
 8008854:	080088c5 	.word	0x080088c5
 8008858:	080088c5 	.word	0x080088c5
 800885c:	080088c5 	.word	0x080088c5
 8008860:	080088c5 	.word	0x080088c5
 8008864:	080088c5 	.word	0x080088c5
 8008868:	080088cd 	.word	0x080088cd
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088c5 	.word	0x080088c5
 8008874:	080088c5 	.word	0x080088c5
 8008878:	080088c5 	.word	0x080088c5
 800887c:	080088c5 	.word	0x080088c5
 8008880:	080088c5 	.word	0x080088c5
 8008884:	080088c5 	.word	0x080088c5
 8008888:	080088cd 	.word	0x080088cd
 800888c:	58024400 	.word	0x58024400
 8008890:	58024800 	.word	0x58024800
 8008894:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889c:	3308      	adds	r3, #8
 800889e:	2101      	movs	r1, #1
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fdef 	bl	800a484 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088ac:	e00f      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2101      	movs	r1, #1
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fe96 	bl	800a5e8 <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088c2:	e004      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088ca:	e000      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088d6:	4bc0      	ldr	r3, [pc, #768]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e6:	4abc      	ldr	r2, [pc, #752]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f002 0302 	and.w	r3, r2, #2
 8008902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008906:	2300      	movs	r3, #0
 8008908:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800890c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008910:	460b      	mov	r3, r1
 8008912:	4313      	orrs	r3, r2
 8008914:	d043      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891e:	2b05      	cmp	r3, #5
 8008920:	d824      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008975 	.word	0x08008975
 800892c:	08008941 	.word	0x08008941
 8008930:	08008957 	.word	0x08008957
 8008934:	08008975 	.word	0x08008975
 8008938:	08008975 	.word	0x08008975
 800893c:	08008975 	.word	0x08008975
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008944:	3308      	adds	r3, #8
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f001 fd9b 	bl	800a484 <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008954:	e00f      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895a:	3328      	adds	r3, #40	@ 0x28
 800895c:	2101      	movs	r1, #1
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fe42 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800896a:	e004      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800897e:	4b96      	ldr	r3, [pc, #600]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008982:	f023 0107 	bic.w	r1, r3, #7
 8008986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800898a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898e:	4a92      	ldr	r2, [pc, #584]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008990:	430b      	orrs	r3, r1
 8008992:	6553      	str	r3, [r2, #84]	@ 0x54
 8008994:	e003      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800899a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f002 0304 	and.w	r3, r2, #4
 80089aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089ae:	2300      	movs	r3, #0
 80089b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089b4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4313      	orrs	r3, r2
 80089bc:	d043      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089c6:	2b05      	cmp	r3, #5
 80089c8:	d824      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80089ca:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	08008a1d 	.word	0x08008a1d
 80089d4:	080089e9 	.word	0x080089e9
 80089d8:	080089ff 	.word	0x080089ff
 80089dc:	08008a1d 	.word	0x08008a1d
 80089e0:	08008a1d 	.word	0x08008a1d
 80089e4:	08008a1d 	.word	0x08008a1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ec:	3308      	adds	r3, #8
 80089ee:	2101      	movs	r1, #1
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 fd47 	bl	800a484 <RCCEx_PLL2_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089fc:	e00f      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a02:	3328      	adds	r3, #40	@ 0x28
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fdee 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a12:	e004      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a26:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2a:	f023 0107 	bic.w	r1, r3, #7
 8008a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a36:	4a68      	ldr	r2, [pc, #416]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f002 0320 	and.w	r3, r2, #32
 8008a52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d055      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a72:	d033      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a78:	d82c      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7e:	d02f      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a84:	d826      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a8a:	d02b      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a90:	d820      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a96:	d012      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a9c:	d81a      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d022      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa6:	d115      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aac:	3308      	adds	r3, #8
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fce7 	bl	800a484 <RCCEx_PLL2_Config>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008abc:	e015      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac2:	3328      	adds	r3, #40	@ 0x28
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fd8e 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ad2:	e00a      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ada:	e006      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008adc:	bf00      	nop
 8008ade:	e004      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae0:	bf00      	nop
 8008ae2:	e002      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae4:	bf00      	nop
 8008ae6:	e000      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10b      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008af2:	4b39      	ldr	r3, [pc, #228]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b08:	e003      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b22:	2300      	movs	r3, #0
 8008b24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	d058      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b3e:	d033      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b44:	d82c      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4a:	d02f      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b50:	d826      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b56:	d02b      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b5c:	d820      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b68:	d81a      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d022      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b72:	d115      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b78:	3308      	adds	r3, #8
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 fc81 	bl	800a484 <RCCEx_PLL2_Config>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b88:	e015      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8e:	3328      	adds	r3, #40	@ 0x28
 8008b90:	2102      	movs	r1, #2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 fd28 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b9e:	e00a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ba6:	e006      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bac:	bf00      	nop
 8008bae:	e002      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bb0:	bf00      	nop
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10e      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bbe:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bce:	4a02      	ldr	r2, [pc, #8]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008be0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bfa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d055      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c10:	d033      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c16:	d82c      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c1c:	d02f      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c22:	d826      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c28:	d02b      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c2e:	d820      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c34:	d012      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c3a:	d81a      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d022      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c44:	d115      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 fc18 	bl	800a484 <RCCEx_PLL2_Config>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c5a:	e015      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c60:	3328      	adds	r3, #40	@ 0x28
 8008c62:	2102      	movs	r1, #2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 fcbf 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c70:	e00a      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c78:	e006      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e004      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e002      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c82:	bf00      	nop
 8008c84:	e000      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c90:	4ba1      	ldr	r3, [pc, #644]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f002 0308 	and.w	r3, r2, #8
 8008cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	d01e      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce2:	3328      	adds	r3, #40	@ 0x28
 8008ce4:	2102      	movs	r1, #2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 fc7e 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008cf8:	4b87      	ldr	r3, [pc, #540]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d08:	4a83      	ldr	r2, [pc, #524]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f002 0310 	and.w	r3, r2, #16
 8008d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d01e      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d3a:	d10c      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d40:	3328      	adds	r3, #40	@ 0x28
 8008d42:	2102      	movs	r1, #2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 fc4f 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d56:	4b70      	ldr	r3, [pc, #448]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d66:	4a6c      	ldr	r2, [pc, #432]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d86:	460b      	mov	r3, r1
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d03e      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d98:	d022      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9e:	d81b      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da8:	d00b      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008daa:	e015      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db0:	3308      	adds	r3, #8
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fb65 	bl	800a484 <RCCEx_PLL2_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dc0:	e00f      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc6:	3328      	adds	r3, #40	@ 0x28
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fc0c 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dd6:	e004      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dde:	e000      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dea:	4b4b      	ldr	r3, [pc, #300]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008dfa:	4a47      	ldr	r2, [pc, #284]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e00:	e003      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e18:	2300      	movs	r3, #0
 8008e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e20:	460b      	mov	r3, r1
 8008e22:	4313      	orrs	r3, r2
 8008e24:	d03b      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e32:	d01f      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008e34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e38:	d818      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3e:	d003      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e44:	d007      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008e46:	e011      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e48:	4b33      	ldr	r3, [pc, #204]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	4a32      	ldr	r2, [pc, #200]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e54:	e00f      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5a:	3328      	adds	r3, #40	@ 0x28
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 fbc2 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e72:	e000      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e7e:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8e:	4a22      	ldr	r2, [pc, #136]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e94:	e003      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eac:	2300      	movs	r3, #0
 8008eae:	677b      	str	r3, [r7, #116]	@ 0x74
 8008eb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	d034      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec8:	d007      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008eca:	e011      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ecc:	4b12      	ldr	r3, [pc, #72]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	4a11      	ldr	r2, [pc, #68]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ed8:	e00e      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ede:	3308      	adds	r3, #8
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 face 	bl	800a484 <RCCEx_PLL2_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eee:	e003      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10d      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0e:	4a02      	ldr	r2, [pc, #8]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f10:	430b      	orrs	r3, r1
 8008f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f14:	e006      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008f16:	bf00      	nop
 8008f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f32:	2300      	movs	r3, #0
 8008f34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	d00c      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f44:	3328      	adds	r3, #40	@ 0x28
 8008f46:	2102      	movs	r1, #2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 fb4d 	bl	800a5e8 <RCCEx_PLL3_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f68:	2300      	movs	r3, #0
 8008f6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f70:	460b      	mov	r3, r1
 8008f72:	4313      	orrs	r3, r2
 8008f74:	d038      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f82:	d018      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f88:	d811      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8e:	d014      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f94:	d80b      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9e:	d106      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa0:	4bc3      	ldr	r3, [pc, #780]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	4ac2      	ldr	r2, [pc, #776]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fac:	e008      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fb4:	e004      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e002      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fc8:	4bb9      	ldr	r3, [pc, #740]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fcc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd8:	4ab5      	ldr	r2, [pc, #724]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fde:	e003      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fe4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ffa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ffe:	460b      	mov	r3, r1
 8009000:	4313      	orrs	r3, r2
 8009002:	d009      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009004:	4baa      	ldr	r3, [pc, #680]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009008:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800900c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009012:	4aa7      	ldr	r2, [pc, #668]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009014:	430b      	orrs	r3, r1
 8009016:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009024:	653b      	str	r3, [r7, #80]	@ 0x50
 8009026:	2300      	movs	r3, #0
 8009028:	657b      	str	r3, [r7, #84]	@ 0x54
 800902a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800902e:	460b      	mov	r3, r1
 8009030:	4313      	orrs	r3, r2
 8009032:	d009      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009034:	4b9e      	ldr	r3, [pc, #632]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009038:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009042:	4a9b      	ldr	r2, [pc, #620]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009044:	430b      	orrs	r3, r1
 8009046:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009056:	2300      	movs	r3, #0
 8009058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800905a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800905e:	460b      	mov	r3, r1
 8009060:	4313      	orrs	r3, r2
 8009062:	d009      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009064:	4b92      	ldr	r3, [pc, #584]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009068:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800906c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009072:	4a8f      	ldr	r2, [pc, #572]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009074:	430b      	orrs	r3, r1
 8009076:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009084:	643b      	str	r3, [r7, #64]	@ 0x40
 8009086:	2300      	movs	r3, #0
 8009088:	647b      	str	r3, [r7, #68]	@ 0x44
 800908a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800908e:	460b      	mov	r3, r1
 8009090:	4313      	orrs	r3, r2
 8009092:	d00e      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009094:	4b86      	ldr	r3, [pc, #536]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	4a85      	ldr	r2, [pc, #532]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800909a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800909e:	6113      	str	r3, [r2, #16]
 80090a0:	4b83      	ldr	r3, [pc, #524]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090a2:	6919      	ldr	r1, [r3, #16]
 80090a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090ac:	4a80      	ldr	r2, [pc, #512]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090c8:	460b      	mov	r3, r1
 80090ca:	4313      	orrs	r3, r2
 80090cc:	d009      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090ce:	4b78      	ldr	r3, [pc, #480]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090dc:	4a74      	ldr	r2, [pc, #464]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090de:	430b      	orrs	r3, r1
 80090e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80090f0:	2300      	movs	r3, #0
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090f8:	460b      	mov	r3, r1
 80090fa:	4313      	orrs	r3, r2
 80090fc:	d00a      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090fe:	4b6c      	ldr	r3, [pc, #432]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009102:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910e:	4a68      	ldr	r2, [pc, #416]	@ (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009110:	430b      	orrs	r3, r1
 8009112:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	2100      	movs	r1, #0
 800911e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009126:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800912a:	460b      	mov	r3, r1
 800912c:	4313      	orrs	r3, r2
 800912e:	d011      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009134:	3308      	adds	r3, #8
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f9a3 	bl	800a484 <RCCEx_PLL2_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009150:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	2100      	movs	r1, #0
 800915e:	6239      	str	r1, [r7, #32]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
 8009166:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800916a:	460b      	mov	r3, r1
 800916c:	4313      	orrs	r3, r2
 800916e:	d011      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009174:	3308      	adds	r3, #8
 8009176:	2101      	movs	r1, #1
 8009178:	4618      	mov	r0, r3
 800917a:	f001 f983 	bl	800a484 <RCCEx_PLL2_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009184:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009190:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	2100      	movs	r1, #0
 800919e:	61b9      	str	r1, [r7, #24]
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091aa:	460b      	mov	r3, r1
 80091ac:	4313      	orrs	r3, r2
 80091ae:	d011      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b4:	3308      	adds	r3, #8
 80091b6:	2102      	movs	r1, #2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f963 	bl	800a484 <RCCEx_PLL2_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	2100      	movs	r1, #0
 80091de:	6139      	str	r1, [r7, #16]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091ea:	460b      	mov	r3, r1
 80091ec:	4313      	orrs	r3, r2
 80091ee:	d011      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f4:	3328      	adds	r3, #40	@ 0x28
 80091f6:	2100      	movs	r1, #0
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 f9f5 	bl	800a5e8 <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	2100      	movs	r1, #0
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d011      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009234:	3328      	adds	r3, #40	@ 0x28
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f001 f9d5 	bl	800a5e8 <RCCEx_PLL3_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009244:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	2100      	movs	r1, #0
 800925e:	6039      	str	r1, [r7, #0]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	e9d7 1200 	ldrd	r1, r2, [r7]
 800926a:	460b      	mov	r3, r1
 800926c:	4313      	orrs	r3, r2
 800926e:	d011      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009274:	3328      	adds	r3, #40	@ 0x28
 8009276:	2102      	movs	r1, #2
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f9b5 	bl	800a5e8 <RCCEx_PLL3_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009284:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009290:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009294:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	e000      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80092a8:	46bd      	mov	sp, r7
 80092aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400

080092b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b090      	sub	sp, #64	@ 0x40
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80092be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80092c6:	430b      	orrs	r3, r1
 80092c8:	f040 8094 	bne.w	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80092cc:	4b97      	ldr	r3, [pc, #604]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	2b04      	cmp	r3, #4
 80092da:	f200 8087 	bhi.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	080092f9 	.word	0x080092f9
 80092e8:	08009321 	.word	0x08009321
 80092ec:	08009349 	.word	0x08009349
 80092f0:	080093e5 	.word	0x080093e5
 80092f4:	08009371 	.word	0x08009371
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092f8:	4b8c      	ldr	r3, [pc, #560]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009304:	d108      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800930a:	4618      	mov	r0, r3
 800930c:	f000 ff68 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009314:	f000 bc97 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931c:	f000 bc93 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009320:	4b82      	ldr	r3, [pc, #520]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800932c:	d108      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0318 	add.w	r3, r7, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fcac 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933c:	f000 bc83 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009344:	f000 bc7f 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009348:	4b78      	ldr	r3, [pc, #480]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009354:	d108      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009356:	f107 030c 	add.w	r3, r7, #12
 800935a:	4618      	mov	r0, r3
 800935c:	f000 fdec 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009364:	f000 bc6f 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	f000 bc6b 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009370:	4b6e      	ldr	r3, [pc, #440]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009374:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800937a:	4b6c      	ldr	r3, [pc, #432]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d10c      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d109      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800938c:	4b67      	ldr	r3, [pc, #412]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a66      	ldr	r2, [pc, #408]	@ (8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800939e:	e01f      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093a0:	4b62      	ldr	r3, [pc, #392]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ac:	d106      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80093ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b4:	d102      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093b6:	4b5f      	ldr	r3, [pc, #380]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ba:	e011      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093bc:	4b5b      	ldr	r3, [pc, #364]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c8:	d106      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80093ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093d0:	d102      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093d2:	4b59      	ldr	r3, [pc, #356]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093d6:	e003      	b.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093dc:	f000 bc33 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80093e0:	f000 bc31 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093e4:	4b55      	ldr	r3, [pc, #340]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e8:	f000 bc2d 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f0:	f000 bc29 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80093f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80093fc:	430b      	orrs	r3, r1
 80093fe:	f040 809f 	bne.w	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009402:	4b4a      	ldr	r3, [pc, #296]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009406:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800940a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009412:	d04d      	beq.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800941a:	f200 8084 	bhi.w	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	2bc0      	cmp	r3, #192	@ 0xc0
 8009422:	d07d      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	2bc0      	cmp	r3, #192	@ 0xc0
 8009428:	d87d      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	2b80      	cmp	r3, #128	@ 0x80
 800942e:	d02d      	beq.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	2b80      	cmp	r3, #128	@ 0x80
 8009434:	d877      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800943c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943e:	2b40      	cmp	r3, #64	@ 0x40
 8009440:	d012      	beq.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009442:	e070      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009444:	4b39      	ldr	r3, [pc, #228]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800944c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009450:	d107      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fec2 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009460:	e3f1      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009466:	e3ee      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009468:	4b30      	ldr	r3, [pc, #192]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009474:	d107      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009476:	f107 0318 	add.w	r3, r7, #24
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc08 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009484:	e3df      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948a:	e3dc      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800948c:	4b27      	ldr	r3, [pc, #156]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009498:	d107      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800949a:	f107 030c 	add.w	r3, r7, #12
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fd4a 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a8:	e3cd      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ae:	e3ca      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094b0:	4b1e      	ldr	r3, [pc, #120]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094ba:	4b1c      	ldr	r3, [pc, #112]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d10c      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80094c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094cc:	4b17      	ldr	r3, [pc, #92]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	08db      	lsrs	r3, r3, #3
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80094d8:	fa22 f303 	lsr.w	r3, r2, r3
 80094dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094de:	e01e      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094e0:	4b12      	ldr	r3, [pc, #72]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ec:	d106      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80094ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f4:	d102      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094fa:	e010      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094fc:	4b0b      	ldr	r3, [pc, #44]	@ (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009508:	d106      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800950a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009510:	d102      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009512:	4b09      	ldr	r3, [pc, #36]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009516:	e002      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800951c:	e393      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800951e:	e392      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009520:	4b06      	ldr	r3, [pc, #24]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009524:	e38f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952a:	e38c      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800952c:	58024400 	.word	0x58024400
 8009530:	03d09000 	.word	0x03d09000
 8009534:	003d0900 	.word	0x003d0900
 8009538:	017d7840 	.word	0x017d7840
 800953c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009544:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009548:	430b      	orrs	r3, r1
 800954a:	f040 809c 	bne.w	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800954e:	4b9e      	ldr	r3, [pc, #632]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009552:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009556:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800955e:	d054      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009566:	f200 808b 	bhi.w	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009570:	f000 8083 	beq.w	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800957a:	f200 8081 	bhi.w	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009584:	d02f      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800958c:	d878      	bhi.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959a:	d012      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800959c:	e070      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800959e:	4b8a      	ldr	r3, [pc, #552]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095aa:	d107      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fe15 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ba:	e344      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c0:	e341      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c2:	4b81      	ldr	r3, [pc, #516]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ce:	d107      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d0:	f107 0318 	add.w	r3, r7, #24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fb5b 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095de:	e332      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e4:	e32f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095e6:	4b78      	ldr	r3, [pc, #480]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fc9d 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009602:	e320      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009608:	e31d      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800960a:	4b6f      	ldr	r3, [pc, #444]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800960c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800960e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009614:	4b6c      	ldr	r3, [pc, #432]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b04      	cmp	r3, #4
 800961e:	d10c      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009626:	4b68      	ldr	r3, [pc, #416]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	08db      	lsrs	r3, r3, #3
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	4a66      	ldr	r2, [pc, #408]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009632:	fa22 f303 	lsr.w	r3, r2, r3
 8009636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009638:	e01e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800963a:	4b63      	ldr	r3, [pc, #396]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009646:	d106      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800964e:	d102      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009650:	4b5f      	ldr	r3, [pc, #380]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009654:	e010      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009656:	4b5c      	ldr	r3, [pc, #368]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800965e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009662:	d106      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800966a:	d102      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800966c:	4b59      	ldr	r3, [pc, #356]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009670:	e002      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8009676:	e2e6      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009678:	e2e5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800967a:	4b57      	ldr	r3, [pc, #348]	@ (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967e:	e2e2      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009684:	e2df      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800968e:	430b      	orrs	r3, r1
 8009690:	f040 80a7 	bne.w	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009694:	4b4c      	ldr	r3, [pc, #304]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009698:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800969c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096a4:	d055      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096ac:	f200 8096 	bhi.w	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096b6:	f000 8084 	beq.w	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80096ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096c0:	f200 808c 	bhi.w	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ca:	d030      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096d2:	f200 8083 	bhi.w	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e2:	d012      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80096e4:	e07a      	b.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096e6:	4b38      	ldr	r3, [pc, #224]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096f2:	d107      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fd71 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e2a0      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e29d      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800970a:	4b2f      	ldr	r3, [pc, #188]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009716:	d107      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009718:	f107 0318 	add.w	r3, r7, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fab7 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009726:	e28e      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972c:	e28b      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800972e:	4b26      	ldr	r3, [pc, #152]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800973a:	d107      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fbf9 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	e27c      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e279      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009752:	4b1d      	ldr	r3, [pc, #116]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975c:	4b1a      	ldr	r3, [pc, #104]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b04      	cmp	r3, #4
 8009766:	d10c      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800976e:	4b16      	ldr	r3, [pc, #88]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	4a14      	ldr	r2, [pc, #80]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009780:	e01e      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009782:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800978e:	d106      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009796:	d102      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009798:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800979c:	e010      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800979e:	4b0a      	ldr	r3, [pc, #40]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80097ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b2:	d102      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097b4:	4b07      	ldr	r3, [pc, #28]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b8:	e002      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097be:	e242      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097c0:	e241      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097c2:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c6:	e23e      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097c8:	58024400 	.word	0x58024400
 80097cc:	03d09000 	.word	0x03d09000
 80097d0:	003d0900 	.word	0x003d0900
 80097d4:	017d7840 	.word	0x017d7840
 80097d8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e0:	e231      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80097e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80097ea:	430b      	orrs	r3, r1
 80097ec:	f040 8085 	bne.w	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80097f0:	4b9c      	ldr	r3, [pc, #624]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80097f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009800:	d06b      	beq.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009808:	d874      	bhi.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009810:	d056      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009818:	d86c      	bhi.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009820:	d03b      	beq.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009824:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009828:	d864      	bhi.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009830:	d021      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009838:	d85c      	bhi.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009846:	d004      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009848:	e054      	b.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800984a:	f7fe fb5f 	bl	8007f0c <HAL_RCC_GetPCLK1Freq>
 800984e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009850:	e1f9      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009852:	4b84      	ldr	r3, [pc, #528]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800985a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985e:	d107      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009860:	f107 0318 	add.w	r3, r7, #24
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fa13 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800986e:	e1ea      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009874:	e1e7      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009876:	4b7b      	ldr	r3, [pc, #492]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800987e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009882:	d107      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009884:	f107 030c 	add.w	r3, r7, #12
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fb55 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009892:	e1d8      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009898:	e1d5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800989a:	4b72      	ldr	r3, [pc, #456]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d109      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	4a6d      	ldr	r2, [pc, #436]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80098b2:	fa22 f303 	lsr.w	r3, r2, r3
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b8:	e1c5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098be:	e1c2      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098c0:	4b68      	ldr	r3, [pc, #416]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098cc:	d102      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80098ce:	4b67      	ldr	r3, [pc, #412]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d2:	e1b8      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d8:	e1b5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098da:	4b62      	ldr	r3, [pc, #392]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e6:	d102      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80098e8:	4b61      	ldr	r3, [pc, #388]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ec:	e1ab      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f2:	e1a8      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f8:	e1a5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80098fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098fe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009902:	430b      	orrs	r3, r1
 8009904:	d173      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009906:	4b57      	ldr	r3, [pc, #348]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800990a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800990e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009916:	d02f      	beq.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800991e:	d863      	bhi.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800992c:	d012      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800992e:	e05b      	b.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009930:	4b4c      	ldr	r3, [pc, #304]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800993c:	d107      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800993e:	f107 0318 	add.w	r3, r7, #24
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f9a4 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994c:	e17b      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009952:	e178      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009954:	4b43      	ldr	r3, [pc, #268]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800995c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009960:	d107      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fae6 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009970:	e169      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009976:	e166      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009978:	4b3a      	ldr	r3, [pc, #232]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800997a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800997c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009982:	4b38      	ldr	r3, [pc, #224]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b04      	cmp	r3, #4
 800998c:	d10c      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800998e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009994:	4b33      	ldr	r3, [pc, #204]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	08db      	lsrs	r3, r3, #3
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	4a32      	ldr	r2, [pc, #200]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80099a0:	fa22 f303 	lsr.w	r3, r2, r3
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099a6:	e01e      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b4:	d106      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80099b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099bc:	d102      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099be:	4b2b      	ldr	r3, [pc, #172]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80099c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099c2:	e010      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099c4:	4b27      	ldr	r3, [pc, #156]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d0:	d106      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80099d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d102      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099da:	4b25      	ldr	r3, [pc, #148]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099de:	e002      	b.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099e4:	e12f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80099e6:	e12e      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ec:	e12b      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80099f6:	430b      	orrs	r3, r1
 80099f8:	d13c      	bne.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80099fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a10:	d012      	beq.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009a12:	e023      	b.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a20:	d107      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fbda 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a30:	e109      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a36:	e106      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a38:	4b0a      	ldr	r3, [pc, #40]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a44:	d107      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a46:	f107 0318 	add.w	r3, r7, #24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f920 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a54:	e0f7      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5a:	e0f4      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a60:	e0f1      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	003d0900 	.word	0x003d0900
 8009a70:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a78:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	f040 8091 	bne.w	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a82:	4b73      	ldr	r3, [pc, #460]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a86:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a92:	f000 8081 	beq.w	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a98:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a9c:	d87f      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009aa4:	d06b      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009aac:	d877      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ab4:	d056      	beq.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009abc:	d86f      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ac4:	d03b      	beq.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009acc:	d867      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad4:	d021      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009adc:	d85f      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aea:	d004      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009aec:	e057      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009aee:	f000 f8b9 	bl	8009c64 <HAL_RCCEx_GetD3PCLK1Freq>
 8009af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009af4:	e0a7      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009af6:	4b56      	ldr	r3, [pc, #344]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b02:	d107      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b04:	f107 0318 	add.w	r3, r7, #24
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f8c1 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b12:	e098      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b18:	e095      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b26:	d107      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fa03 	bl	8009f38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b36:	e086      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3c:	e083      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b3e:	4b44      	ldr	r3, [pc, #272]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d109      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4a:	4b41      	ldr	r3, [pc, #260]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	08db      	lsrs	r3, r3, #3
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	4a3f      	ldr	r2, [pc, #252]	@ (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009b56:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b5c:	e073      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b62:	e070      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b64:	4b3a      	ldr	r3, [pc, #232]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b70:	d102      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009b72:	4b39      	ldr	r3, [pc, #228]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b76:	e066      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b7c:	e063      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b7e:	4b34      	ldr	r3, [pc, #208]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b8a:	d102      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009b8c:	4b33      	ldr	r3, [pc, #204]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b90:	e059      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b96:	e056      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b98:	4b31      	ldr	r3, [pc, #196]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e053      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba2:	e050      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009bac:	430b      	orrs	r3, r1
 8009bae:	d148      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009bb0:	4b27      	ldr	r3, [pc, #156]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bc0:	d02a      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bc8:	d838      	bhi.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bd6:	d00d      	beq.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009bd8:	e030      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bda:	4b1d      	ldr	r3, [pc, #116]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be6:	d102      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009be8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bec:	e02b      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf2:	e028      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bf4:	4b16      	ldr	r3, [pc, #88]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c00:	d107      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 faea 	bl	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c10:	e019      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c16:	e016      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c18:	4b0d      	ldr	r3, [pc, #52]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c24:	d107      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c26:	f107 0318 	add.w	r3, r7, #24
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f830 	bl	8009c90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c34:	e007      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3a:	e004      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c40:	e001      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3740      	adds	r7, #64	@ 0x40
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	58024400 	.word	0x58024400
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	003d0900 	.word	0x003d0900
 8009c5c:	017d7840 	.word	0x017d7840
 8009c60:	00bb8000 	.word	0x00bb8000

08009c64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009c68:	f7fe f920 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	091b      	lsrs	r3, r3, #4
 8009c74:	f003 0307 	and.w	r3, r3, #7
 8009c78:	4904      	ldr	r1, [pc, #16]	@ (8009c8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c7a:	5ccb      	ldrb	r3, [r1, r3]
 8009c7c:	f003 031f 	and.w	r3, r3, #31
 8009c80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	0800b208 	.word	0x0800b208

08009c90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b089      	sub	sp, #36	@ 0x24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c98:	4ba1      	ldr	r3, [pc, #644]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ca2:	4b9f      	ldr	r3, [pc, #636]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca6:	0b1b      	lsrs	r3, r3, #12
 8009ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cae:	4b9c      	ldr	r3, [pc, #624]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	091b      	lsrs	r3, r3, #4
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cba:	4b99      	ldr	r3, [pc, #612]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cbe:	08db      	lsrs	r3, r3, #3
 8009cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 8111 	beq.w	8009f00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	f000 8083 	beq.w	8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	f200 80a1 	bhi.w	8009e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d056      	beq.n	8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cfa:	e099      	b.n	8009e30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cfc:	4b88      	ldr	r3, [pc, #544]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d02d      	beq.n	8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d08:	4b85      	ldr	r3, [pc, #532]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	08db      	lsrs	r3, r3, #3
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	4a84      	ldr	r2, [pc, #528]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d14:	fa22 f303 	lsr.w	r3, r2, r3
 8009d18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d32:	4b7b      	ldr	r3, [pc, #492]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d62:	e087      	b.n	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d76:	4b6a      	ldr	r3, [pc, #424]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009da6:	e065      	b.n	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dba:	4b59      	ldr	r3, [pc, #356]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dea:	e043      	b.n	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfe:	4b48      	ldr	r3, [pc, #288]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e2e:	e021      	b.n	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e42:	4b37      	ldr	r3, [pc, #220]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e74:	4b2a      	ldr	r3, [pc, #168]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e78:	0a5b      	lsrs	r3, r3, #9
 8009e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e9a:	ee17 2a90 	vmov	r2, s15
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea6:	0c1b      	lsrs	r3, r3, #16
 8009ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec8:	ee17 2a90 	vmov	r2, s15
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ed0:	4b13      	ldr	r3, [pc, #76]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	0e1b      	lsrs	r3, r3, #24
 8009ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 2a90 	vmov	r2, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009efe:	e008      	b.n	8009f12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	609a      	str	r2, [r3, #8]
}
 8009f12:	bf00      	nop
 8009f14:	3724      	adds	r7, #36	@ 0x24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
 8009f24:	03d09000 	.word	0x03d09000
 8009f28:	46000000 	.word	0x46000000
 8009f2c:	4c742400 	.word	0x4c742400
 8009f30:	4a742400 	.word	0x4a742400
 8009f34:	4bbebc20 	.word	0x4bbebc20

08009f38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b089      	sub	sp, #36	@ 0x24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f40:	4ba1      	ldr	r3, [pc, #644]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f44:	f003 0303 	and.w	r3, r3, #3
 8009f48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f4a:	4b9f      	ldr	r3, [pc, #636]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	0d1b      	lsrs	r3, r3, #20
 8009f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f56:	4b9c      	ldr	r3, [pc, #624]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	0a1b      	lsrs	r3, r3, #8
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f62:	4b99      	ldr	r3, [pc, #612]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8111 	beq.w	800a1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	f000 8083 	beq.w	800a094 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	f200 80a1 	bhi.w	800a0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d056      	beq.n	800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fa2:	e099      	b.n	800a0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fa4:	4b88      	ldr	r3, [pc, #544]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0320 	and.w	r3, r3, #32
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d02d      	beq.n	800a00c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fb0:	4b85      	ldr	r3, [pc, #532]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	08db      	lsrs	r3, r3, #3
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	4a84      	ldr	r2, [pc, #528]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	ee07 3a90 	vmov	s15, r3
 8009fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fda:	4b7b      	ldr	r3, [pc, #492]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a006:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a00a:	e087      	b.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a016:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a01a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01e:	4b6a      	ldr	r3, [pc, #424]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a032:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a04a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a04e:	e065      	b.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a062:	4b59      	ldr	r3, [pc, #356]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a072:	ed97 6a03 	vldr	s12, [r7, #12]
 800a076:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a092:	e043      	b.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a6:	4b48      	ldr	r3, [pc, #288]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0d6:	e021      	b.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ea:	4b37      	ldr	r3, [pc, #220]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a10a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a11a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a11c:	4b2a      	ldr	r3, [pc, #168]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a120:	0a5b      	lsrs	r3, r3, #9
 800a122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a126:	ee07 3a90 	vmov	s15, r3
 800a12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a132:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a136:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a142:	ee17 2a90 	vmov	r2, s15
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a14a:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14e:	0c1b      	lsrs	r3, r3, #16
 800a150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a160:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a164:	edd7 6a07 	vldr	s13, [r7, #28]
 800a168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a170:	ee17 2a90 	vmov	r2, s15
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a178:	4b13      	ldr	r3, [pc, #76]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17c:	0e1b      	lsrs	r3, r3, #24
 800a17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a18e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a192:	edd7 6a07 	vldr	s13, [r7, #28]
 800a196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a19e:	ee17 2a90 	vmov	r2, s15
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1a6:	e008      	b.n	800a1ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	609a      	str	r2, [r3, #8]
}
 800a1ba:	bf00      	nop
 800a1bc:	3724      	adds	r7, #36	@ 0x24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	58024400 	.word	0x58024400
 800a1cc:	03d09000 	.word	0x03d09000
 800a1d0:	46000000 	.word	0x46000000
 800a1d4:	4c742400 	.word	0x4c742400
 800a1d8:	4a742400 	.word	0x4a742400
 800a1dc:	4bbebc20 	.word	0x4bbebc20

0800a1e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b089      	sub	sp, #36	@ 0x24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1e8:	4ba0      	ldr	r3, [pc, #640]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a1f2:	4b9e      	ldr	r3, [pc, #632]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	091b      	lsrs	r3, r3, #4
 800a1f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1fe:	4b9b      	ldr	r3, [pc, #620]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a208:	4b98      	ldr	r3, [pc, #608]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a20a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a20c:	08db      	lsrs	r3, r3, #3
 800a20e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a220:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 8111 	beq.w	800a44e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	f000 8083 	beq.w	800a33a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	2b02      	cmp	r3, #2
 800a238:	f200 80a1 	bhi.w	800a37e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d056      	beq.n	800a2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a248:	e099      	b.n	800a37e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a24a:	4b88      	ldr	r3, [pc, #544]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	d02d      	beq.n	800a2b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a256:	4b85      	ldr	r3, [pc, #532]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	4a83      	ldr	r2, [pc, #524]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a262:	fa22 f303 	lsr.w	r3, r2, r3
 800a266:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a280:	4b7a      	ldr	r3, [pc, #488]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a288:	ee07 3a90 	vmov	s15, r3
 800a28c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a290:	ed97 6a03 	vldr	s12, [r7, #12]
 800a294:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2b0:	e087      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c4:	4b69      	ldr	r3, [pc, #420]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2f4:	e065      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a300:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a47c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a308:	4b58      	ldr	r3, [pc, #352]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a318:	ed97 6a03 	vldr	s12, [r7, #12]
 800a31c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a32c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a338:	e043      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a34c:	4b47      	ldr	r3, [pc, #284]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a360:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a374:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a37c:	e021      	b.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a388:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a38c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a390:	4b36      	ldr	r3, [pc, #216]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c6:	0a5b      	lsrs	r3, r3, #9
 800a3c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3cc:	ee07 3a90 	vmov	s15, r3
 800a3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e8:	ee17 2a90 	vmov	r2, s15
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a3f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a416:	ee17 2a90 	vmov	r2, s15
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a41e:	4b13      	ldr	r3, [pc, #76]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a422:	0e1b      	lsrs	r3, r3, #24
 800a424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a434:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a438:	edd7 6a07 	vldr	s13, [r7, #28]
 800a43c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a444:	ee17 2a90 	vmov	r2, s15
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a44c:	e008      	b.n	800a460 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	609a      	str	r2, [r3, #8]
}
 800a460:	bf00      	nop
 800a462:	3724      	adds	r7, #36	@ 0x24
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	58024400 	.word	0x58024400
 800a470:	03d09000 	.word	0x03d09000
 800a474:	46000000 	.word	0x46000000
 800a478:	4c742400 	.word	0x4c742400
 800a47c:	4a742400 	.word	0x4a742400
 800a480:	4bbebc20 	.word	0x4bbebc20

0800a484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a492:	4b53      	ldr	r3, [pc, #332]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d101      	bne.n	800a4a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e099      	b.n	800a5d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4a2:	4b4f      	ldr	r3, [pc, #316]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a4e      	ldr	r2, [pc, #312]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ae:	f7f7 fcc7 	bl	8001e40 <HAL_GetTick>
 800a4b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4b4:	e008      	b.n	800a4c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4b6:	f7f7 fcc3 	bl	8001e40 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e086      	b.n	800a5d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4c8:	4b45      	ldr	r3, [pc, #276]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1f0      	bne.n	800a4b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4d4:	4b42      	ldr	r3, [pc, #264]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	031b      	lsls	r3, r3, #12
 800a4e2:	493f      	ldr	r1, [pc, #252]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	025b      	lsls	r3, r3, #9
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	3b01      	subs	r3, #1
 800a504:	041b      	lsls	r3, r3, #16
 800a506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	3b01      	subs	r3, #1
 800a512:	061b      	lsls	r3, r3, #24
 800a514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a518:	4931      	ldr	r1, [pc, #196]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a51e:	4b30      	ldr	r3, [pc, #192]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a522:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	492d      	ldr	r1, [pc, #180]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a530:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a534:	f023 0220 	bic.w	r2, r3, #32
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	4928      	ldr	r1, [pc, #160]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a542:	4b27      	ldr	r3, [pc, #156]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	4a26      	ldr	r2, [pc, #152]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a548:	f023 0310 	bic.w	r3, r3, #16
 800a54c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a54e:	4b24      	ldr	r3, [pc, #144]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a552:	4b24      	ldr	r3, [pc, #144]	@ (800a5e4 <RCCEx_PLL2_Config+0x160>)
 800a554:	4013      	ands	r3, r2
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	69d2      	ldr	r2, [r2, #28]
 800a55a:	00d2      	lsls	r2, r2, #3
 800a55c:	4920      	ldr	r1, [pc, #128]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a562:	4b1f      	ldr	r3, [pc, #124]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a566:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a568:	f043 0310 	orr.w	r3, r3, #16
 800a56c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d106      	bne.n	800a582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a574:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a578:	4a19      	ldr	r2, [pc, #100]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a57a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a57e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a580:	e00f      	b.n	800a5a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d106      	bne.n	800a596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a588:	4b15      	ldr	r3, [pc, #84]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	4a14      	ldr	r2, [pc, #80]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a594:	e005      	b.n	800a5a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a596:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59a:	4a11      	ldr	r2, [pc, #68]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a59c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a5a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5ae:	f7f7 fc47 	bl	8001e40 <HAL_GetTick>
 800a5b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b4:	e008      	b.n	800a5c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5b6:	f7f7 fc43 	bl	8001e40 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d901      	bls.n	800a5c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e006      	b.n	800a5d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5c8:	4b05      	ldr	r3, [pc, #20]	@ (800a5e0 <RCCEx_PLL2_Config+0x15c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0f0      	beq.n	800a5b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	ffff0007 	.word	0xffff0007

0800a5e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5f6:	4b53      	ldr	r3, [pc, #332]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d101      	bne.n	800a606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e099      	b.n	800a73a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a606:	4b4f      	ldr	r3, [pc, #316]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a4e      	ldr	r2, [pc, #312]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a612:	f7f7 fc15 	bl	8001e40 <HAL_GetTick>
 800a616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a618:	e008      	b.n	800a62c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a61a:	f7f7 fc11 	bl	8001e40 <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d901      	bls.n	800a62c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e086      	b.n	800a73a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a62c:	4b45      	ldr	r3, [pc, #276]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1f0      	bne.n	800a61a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a638:	4b42      	ldr	r3, [pc, #264]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	051b      	lsls	r3, r3, #20
 800a646:	493f      	ldr	r1, [pc, #252]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	3b01      	subs	r3, #1
 800a652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	025b      	lsls	r3, r3, #9
 800a65e:	b29b      	uxth	r3, r3
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	3b01      	subs	r3, #1
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a66e:	431a      	orrs	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	3b01      	subs	r3, #1
 800a676:	061b      	lsls	r3, r3, #24
 800a678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a67c:	4931      	ldr	r1, [pc, #196]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a682:	4b30      	ldr	r3, [pc, #192]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	492d      	ldr	r1, [pc, #180]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a690:	4313      	orrs	r3, r2
 800a692:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a694:	4b2b      	ldr	r3, [pc, #172]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a698:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	4928      	ldr	r1, [pc, #160]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6a6:	4b27      	ldr	r3, [pc, #156]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6aa:	4a26      	ldr	r2, [pc, #152]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6b2:	4b24      	ldr	r3, [pc, #144]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6b6:	4b24      	ldr	r3, [pc, #144]	@ (800a748 <RCCEx_PLL3_Config+0x160>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	69d2      	ldr	r2, [r2, #28]
 800a6be:	00d2      	lsls	r2, r2, #3
 800a6c0:	4920      	ldr	r1, [pc, #128]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	4a19      	ldr	r2, [pc, #100]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a6e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6e4:	e00f      	b.n	800a706 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d106      	bne.n	800a6fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6ec:	4b15      	ldr	r3, [pc, #84]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f0:	4a14      	ldr	r2, [pc, #80]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6f8:	e005      	b.n	800a706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6fa:	4b12      	ldr	r3, [pc, #72]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fe:	4a11      	ldr	r2, [pc, #68]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a706:	4b0f      	ldr	r3, [pc, #60]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a0e      	ldr	r2, [pc, #56]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a70c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a712:	f7f7 fb95 	bl	8001e40 <HAL_GetTick>
 800a716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a718:	e008      	b.n	800a72c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a71a:	f7f7 fb91 	bl	8001e40 <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	2b02      	cmp	r3, #2
 800a726:	d901      	bls.n	800a72c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a728:	2303      	movs	r3, #3
 800a72a:	e006      	b.n	800a73a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <RCCEx_PLL3_Config+0x15c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d0f0      	beq.n	800a71a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	58024400 	.word	0x58024400
 800a748:	ffff0007 	.word	0xffff0007

0800a74c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e049      	b.n	800a7f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7f6 ffa2 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f000 fae0 	bl	800ad50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d001      	beq.n	800a814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e054      	b.n	800a8be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a26      	ldr	r2, [pc, #152]	@ (800a8cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d022      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a83e:	d01d      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a22      	ldr	r2, [pc, #136]	@ (800a8d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d018      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a21      	ldr	r2, [pc, #132]	@ (800a8d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d013      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d00e      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a1e      	ldr	r2, [pc, #120]	@ (800a8dc <HAL_TIM_Base_Start_IT+0xe0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d009      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x80>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d115      	bne.n	800a8a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689a      	ldr	r2, [r3, #8]
 800a882:	4b19      	ldr	r3, [pc, #100]	@ (800a8e8 <HAL_TIM_Base_Start_IT+0xec>)
 800a884:	4013      	ands	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b06      	cmp	r3, #6
 800a88c:	d015      	beq.n	800a8ba <HAL_TIM_Base_Start_IT+0xbe>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a894:	d011      	beq.n	800a8ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f042 0201 	orr.w	r2, r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a6:	e008      	b.n	800a8ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0201 	orr.w	r2, r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e000      	b.n	800a8bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40010400 	.word	0x40010400
 800a8e0:	40001800 	.word	0x40001800
 800a8e4:	40014000 	.word	0x40014000
 800a8e8:	00010007 	.word	0x00010007

0800a8ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d020      	beq.n	800a950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01b      	beq.n	800a950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f06f 0202 	mvn.w	r2, #2
 800a920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f9ec 	bl	800ad14 <HAL_TIM_IC_CaptureCallback>
 800a93c:	e005      	b.n	800a94a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f9de 	bl	800ad00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f9ef 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d020      	beq.n	800a99c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01b      	beq.n	800a99c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0204 	mvn.w	r2, #4
 800a96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2202      	movs	r2, #2
 800a972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f9c6 	bl	800ad14 <HAL_TIM_IC_CaptureCallback>
 800a988:	e005      	b.n	800a996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f9b8 	bl	800ad00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f9c9 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d020      	beq.n	800a9e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f003 0308 	and.w	r3, r3, #8
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d01b      	beq.n	800a9e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0208 	mvn.w	r2, #8
 800a9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2204      	movs	r2, #4
 800a9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f9a0 	bl	800ad14 <HAL_TIM_IC_CaptureCallback>
 800a9d4:	e005      	b.n	800a9e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f992 	bl	800ad00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f9a3 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d020      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f003 0310 	and.w	r3, r3, #16
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01b      	beq.n	800aa34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0210 	mvn.w	r2, #16
 800aa04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2208      	movs	r2, #8
 800aa0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f97a 	bl	800ad14 <HAL_TIM_IC_CaptureCallback>
 800aa20:	e005      	b.n	800aa2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f96c 	bl	800ad00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f97d 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00c      	beq.n	800aa58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f06f 0201 	mvn.w	r2, #1
 800aa50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f94a 	bl	800acec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d104      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00c      	beq.n	800aa86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d007      	beq.n	800aa86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fb41 	bl	800b108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aaa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fb39 	bl	800b11c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00c      	beq.n	800aace <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f937 	bl	800ad3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f003 0320 	and.w	r3, r3, #32
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00c      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f003 0320 	and.w	r3, r3, #32
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d007      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f06f 0220 	mvn.w	r2, #32
 800aaea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fb01 	bl	800b0f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaf2:	bf00      	nop
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_TIM_ConfigClockSource+0x1c>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e0dc      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x1d6>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	4b6a      	ldr	r3, [pc, #424]	@ (800acdc <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a64      	ldr	r2, [pc, #400]	@ (800ace0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	f000 80a9 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab54:	4a62      	ldr	r2, [pc, #392]	@ (800ace0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	f200 80ae 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab5c:	4a61      	ldr	r2, [pc, #388]	@ (800ace4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	f000 80a1 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab64:	4a5f      	ldr	r2, [pc, #380]	@ (800ace4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	f200 80a6 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab6c:	4a5e      	ldr	r2, [pc, #376]	@ (800ace8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	f000 8099 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab74:	4a5c      	ldr	r2, [pc, #368]	@ (800ace8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	f200 809e 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab80:	f000 8091 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab88:	f200 8096 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab90:	f000 8089 	beq.w	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ab94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab98:	f200 808e 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ab9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aba0:	d03e      	beq.n	800ac20 <HAL_TIM_ConfigClockSource+0x124>
 800aba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aba6:	f200 8087 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abae:	f000 8086 	beq.w	800acbe <HAL_TIM_ConfigClockSource+0x1c2>
 800abb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abb6:	d87f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abb8:	2b70      	cmp	r3, #112	@ 0x70
 800abba:	d01a      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0xf6>
 800abbc:	2b70      	cmp	r3, #112	@ 0x70
 800abbe:	d87b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abc0:	2b60      	cmp	r3, #96	@ 0x60
 800abc2:	d050      	beq.n	800ac66 <HAL_TIM_ConfigClockSource+0x16a>
 800abc4:	2b60      	cmp	r3, #96	@ 0x60
 800abc6:	d877      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abc8:	2b50      	cmp	r3, #80	@ 0x50
 800abca:	d03c      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x14a>
 800abcc:	2b50      	cmp	r3, #80	@ 0x50
 800abce:	d873      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abd0:	2b40      	cmp	r3, #64	@ 0x40
 800abd2:	d058      	beq.n	800ac86 <HAL_TIM_ConfigClockSource+0x18a>
 800abd4:	2b40      	cmp	r3, #64	@ 0x40
 800abd6:	d86f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abd8:	2b30      	cmp	r3, #48	@ 0x30
 800abda:	d064      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800abdc:	2b30      	cmp	r3, #48	@ 0x30
 800abde:	d86b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d060      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d867      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05c      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800abec:	2b10      	cmp	r3, #16
 800abee:	d05a      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800abf0:	e062      	b.n	800acb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac02:	f000 f9c9 	bl	800af98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ac14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	609a      	str	r2, [r3, #8]
      break;
 800ac1e:	e04f      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac30:	f000 f9b2 	bl	800af98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac42:	609a      	str	r2, [r3, #8]
      break;
 800ac44:	e03c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac52:	461a      	mov	r2, r3
 800ac54:	f000 f922 	bl	800ae9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2150      	movs	r1, #80	@ 0x50
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f97c 	bl	800af5c <TIM_ITRx_SetConfig>
      break;
 800ac64:	e02c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac72:	461a      	mov	r2, r3
 800ac74:	f000 f941 	bl	800aefa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2160      	movs	r1, #96	@ 0x60
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f96c 	bl	800af5c <TIM_ITRx_SetConfig>
      break;
 800ac84:	e01c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac92:	461a      	mov	r2, r3
 800ac94:	f000 f902 	bl	800ae9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2140      	movs	r1, #64	@ 0x40
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f95c 	bl	800af5c <TIM_ITRx_SetConfig>
      break;
 800aca4:	e00c      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f000 f953 	bl	800af5c <TIM_ITRx_SetConfig>
      break;
 800acb6:	e003      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	e000      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800acbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	ffceff88 	.word	0xffceff88
 800ace0:	00100040 	.word	0x00100040
 800ace4:	00100030 	.word	0x00100030
 800ace8:	00100020 	.word	0x00100020

0800acec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a46      	ldr	r2, [pc, #280]	@ (800ae7c <TIM_Base_SetConfig+0x12c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d013      	beq.n	800ad90 <TIM_Base_SetConfig+0x40>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad6e:	d00f      	beq.n	800ad90 <TIM_Base_SetConfig+0x40>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a43      	ldr	r2, [pc, #268]	@ (800ae80 <TIM_Base_SetConfig+0x130>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d00b      	beq.n	800ad90 <TIM_Base_SetConfig+0x40>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a42      	ldr	r2, [pc, #264]	@ (800ae84 <TIM_Base_SetConfig+0x134>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d007      	beq.n	800ad90 <TIM_Base_SetConfig+0x40>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a41      	ldr	r2, [pc, #260]	@ (800ae88 <TIM_Base_SetConfig+0x138>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d003      	beq.n	800ad90 <TIM_Base_SetConfig+0x40>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a40      	ldr	r2, [pc, #256]	@ (800ae8c <TIM_Base_SetConfig+0x13c>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d108      	bne.n	800ada2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a35      	ldr	r2, [pc, #212]	@ (800ae7c <TIM_Base_SetConfig+0x12c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d01f      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adb0:	d01b      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a32      	ldr	r2, [pc, #200]	@ (800ae80 <TIM_Base_SetConfig+0x130>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d017      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a31      	ldr	r2, [pc, #196]	@ (800ae84 <TIM_Base_SetConfig+0x134>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d013      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a30      	ldr	r2, [pc, #192]	@ (800ae88 <TIM_Base_SetConfig+0x138>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00f      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a2f      	ldr	r2, [pc, #188]	@ (800ae8c <TIM_Base_SetConfig+0x13c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00b      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a2e      	ldr	r2, [pc, #184]	@ (800ae90 <TIM_Base_SetConfig+0x140>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d007      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a2d      	ldr	r2, [pc, #180]	@ (800ae94 <TIM_Base_SetConfig+0x144>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <TIM_Base_SetConfig+0x9a>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a2c      	ldr	r2, [pc, #176]	@ (800ae98 <TIM_Base_SetConfig+0x148>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d108      	bne.n	800adfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a16      	ldr	r2, [pc, #88]	@ (800ae7c <TIM_Base_SetConfig+0x12c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0xf8>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a18      	ldr	r2, [pc, #96]	@ (800ae8c <TIM_Base_SetConfig+0x13c>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0xf8>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a17      	ldr	r2, [pc, #92]	@ (800ae90 <TIM_Base_SetConfig+0x140>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0xf8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a16      	ldr	r2, [pc, #88]	@ (800ae94 <TIM_Base_SetConfig+0x144>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0xf8>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a15      	ldr	r2, [pc, #84]	@ (800ae98 <TIM_Base_SetConfig+0x148>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d103      	bne.n	800ae50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d105      	bne.n	800ae6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f023 0201 	bic.w	r2, r3, #1
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	611a      	str	r2, [r3, #16]
  }
}
 800ae6e:	bf00      	nop
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	40000400 	.word	0x40000400
 800ae84:	40000800 	.word	0x40000800
 800ae88:	40000c00 	.word	0x40000c00
 800ae8c:	40010400 	.word	0x40010400
 800ae90:	40014000 	.word	0x40014000
 800ae94:	40014400 	.word	0x40014400
 800ae98:	40014800 	.word	0x40014800

0800ae9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	f023 0201 	bic.w	r2, r3, #1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f023 030a 	bic.w	r3, r3, #10
 800aed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	4313      	orrs	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b087      	sub	sp, #28
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	f023 0210 	bic.w	r2, r3, #16
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	031b      	lsls	r3, r3, #12
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	4313      	orrs	r3, r2
 800af40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	621a      	str	r2, [r3, #32]
}
 800af4e:	bf00      	nop
 800af50:	371c      	adds	r7, #28
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
	...

0800af5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <TIM_ITRx_SetConfig+0x38>)
 800af70:	4013      	ands	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4313      	orrs	r3, r2
 800af7a:	f043 0307 	orr.w	r3, r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	ffcfff8f 	.word	0xffcfff8f

0800af98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	021a      	lsls	r2, r3, #8
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afec:	2302      	movs	r3, #2
 800afee:	e06d      	b.n	800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a30      	ldr	r2, [pc, #192]	@ (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d004      	beq.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a2f      	ldr	r2, [pc, #188]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d108      	bne.n	800b036 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b02a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a20      	ldr	r2, [pc, #128]	@ (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d022      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b062:	d01d      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d018      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d013      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d00e      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a15      	ldr	r2, [pc, #84]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d009      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a16      	ldr	r2, [pc, #88]	@ (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d004      	beq.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a15      	ldr	r2, [pc, #84]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d10c      	bne.n	800b0ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	40010000 	.word	0x40010000
 800b0dc:	40010400 	.word	0x40010400
 800b0e0:	40000400 	.word	0x40000400
 800b0e4:	40000800 	.word	0x40000800
 800b0e8:	40000c00 	.word	0x40000c00
 800b0ec:	40001800 	.word	0x40001800
 800b0f0:	40014000 	.word	0x40014000

0800b0f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <memset>:
 800b130:	4402      	add	r2, r0
 800b132:	4603      	mov	r3, r0
 800b134:	4293      	cmp	r3, r2
 800b136:	d100      	bne.n	800b13a <memset+0xa>
 800b138:	4770      	bx	lr
 800b13a:	f803 1b01 	strb.w	r1, [r3], #1
 800b13e:	e7f9      	b.n	800b134 <memset+0x4>

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4d0d      	ldr	r5, [pc, #52]	@ (800b178 <__libc_init_array+0x38>)
 800b144:	4c0d      	ldr	r4, [pc, #52]	@ (800b17c <__libc_init_array+0x3c>)
 800b146:	1b64      	subs	r4, r4, r5
 800b148:	10a4      	asrs	r4, r4, #2
 800b14a:	2600      	movs	r6, #0
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	4d0b      	ldr	r5, [pc, #44]	@ (800b180 <__libc_init_array+0x40>)
 800b152:	4c0c      	ldr	r4, [pc, #48]	@ (800b184 <__libc_init_array+0x44>)
 800b154:	f000 f826 	bl	800b1a4 <_init>
 800b158:	1b64      	subs	r4, r4, r5
 800b15a:	10a4      	asrs	r4, r4, #2
 800b15c:	2600      	movs	r6, #0
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f855 3b04 	ldr.w	r3, [r5], #4
 800b168:	4798      	blx	r3
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b172:	4798      	blx	r3
 800b174:	3601      	adds	r6, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800b230 	.word	0x0800b230
 800b17c:	0800b230 	.word	0x0800b230
 800b180:	0800b230 	.word	0x0800b230
 800b184:	0800b234 	.word	0x0800b234

0800b188 <memcpy>:
 800b188:	440a      	add	r2, r1
 800b18a:	4291      	cmp	r1, r2
 800b18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b190:	d100      	bne.n	800b194 <memcpy+0xc>
 800b192:	4770      	bx	lr
 800b194:	b510      	push	{r4, lr}
 800b196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	d1f9      	bne.n	800b196 <memcpy+0xe>
 800b1a2:	bd10      	pop	{r4, pc}

0800b1a4 <_init>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <_fini>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr


SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080091f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000037c  24000010  08009208  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400038c  08009208  0002038c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015247  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026c8  00000000  00000000  000352c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001230  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e12  00000000  00000000  00038bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f09  00000000  00000000  000399d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016e68  00000000  00000000  0006b8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d547  00000000  00000000  00082743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004fd0  00000000  00000000  001cfc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009174 	.word	0x08009174

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08009174 	.word	0x08009174

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f001 f80e 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f826 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 fbb8 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 80002fc:	f000 fb96 	bl	8000a2c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000300:	f000 fa0c 	bl	800071c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000304:	f000 fa6e 	bl	80007e4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000308:	f000 fad0 	bl	80008ac <MX_I2C1_Init>
  MX_I2C3_Init();
 800030c:	f000 fb0e 	bl	800092c <MX_I2C3_Init>
  MX_ADC1_Init();
 8000310:	f000 f88e 	bl	8000430 <MX_ADC1_Init>
  MX_I2C4_Init();
 8000314:	f000 fb4a 	bl	80009ac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <main+0x50>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	461a      	mov	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <main+0x54>)
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <main+0x50>)
 8000322:	f001 fbed 	bl	8001b00 <HAL_ADC_Start_DMA>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <main+0x44>
 800032c:	f000 fc12 	bl	8000b54 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f001 f87e 	bl	8001434 <HAL_Delay>
 8000338:	e7fa      	b.n	8000330 <main+0x44>
 800033a:	bf00      	nop
 800033c:	2400002c 	.word	0x2400002c
 8000340:	24000344 	.word	0x24000344

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b09c      	sub	sp, #112	; 0x70
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800034e:	224c      	movs	r2, #76	; 0x4c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f008 fed4 	bl	8009100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2220      	movs	r2, #32
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f008 fece 	bl	8009100 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <SystemClock_Config+0xe4>)
 8000366:	f04f 32ff 	mov.w	r2, #4294967295
 800036a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800036e:	2002      	movs	r0, #2
 8000370:	f005 fada 	bl	8005928 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000374:	2300      	movs	r3, #0
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <SystemClock_Config+0xe8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a2b      	ldr	r2, [pc, #172]	; (800042c <SystemClock_Config+0xe8>)
 800037e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b29      	ldr	r3, [pc, #164]	; (800042c <SystemClock_Config+0xe8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000390:	bf00      	nop
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <SystemClock_Config+0xe8>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800039e:	d1f8      	bne.n	8000392 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a0:	2302      	movs	r3, #2
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003a8:	2340      	movs	r3, #64	; 0x40
 80003aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003b4:	2304      	movs	r3, #4
 80003b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003b8:	2308      	movs	r3, #8
 80003ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003bc:	2302      	movs	r3, #2
 80003be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003c0:	2303      	movs	r3, #3
 80003c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003c8:	230c      	movs	r3, #12
 80003ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d8:	4618      	mov	r0, r3
 80003da:	f005 fadf 	bl	800599c <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003e4:	f000 fbb6 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	233f      	movs	r3, #63	; 0x3f
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000404:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fef6 	bl	8006200 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800041a:	f000 fb9b 	bl	8000b54 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3770      	adds	r7, #112	; 0x70
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	58024400 	.word	0x58024400
 800042c:	58024800 	.word	0x58024800

08000430 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000436:	f107 031c 	add.w	r3, r7, #28
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	463b      	mov	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
 8000450:	615a      	str	r2, [r3, #20]
 8000452:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000454:	4b9f      	ldr	r3, [pc, #636]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000456:	4aa0      	ldr	r2, [pc, #640]	; (80006d8 <MX_ADC1_Init+0x2a8>)
 8000458:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800045a:	4b9e      	ldr	r3, [pc, #632]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800045c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000462:	4b9c      	ldr	r3, [pc, #624]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000464:	2208      	movs	r2, #8
 8000466:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000468:	4b9a      	ldr	r3, [pc, #616]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800046a:	2201      	movs	r2, #1
 800046c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046e:	4b99      	ldr	r3, [pc, #612]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000470:	2204      	movs	r2, #4
 8000472:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000474:	4b97      	ldr	r3, [pc, #604]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000476:	2200      	movs	r2, #0
 8000478:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800047a:	4b96      	ldr	r3, [pc, #600]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800047c:	2201      	movs	r2, #1
 800047e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 8000480:	4b94      	ldr	r3, [pc, #592]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000482:	2210      	movs	r2, #16
 8000484:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000486:	4b93      	ldr	r3, [pc, #588]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000488:	2200      	movs	r2, #0
 800048a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800048c:	4b91      	ldr	r3, [pc, #580]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000492:	4b90      	ldr	r3, [pc, #576]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000494:	2200      	movs	r2, #0
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000498:	4b8e      	ldr	r3, [pc, #568]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800049a:	2203      	movs	r2, #3
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800049e:	4b8d      	ldr	r3, [pc, #564]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004a4:	4b8b      	ldr	r3, [pc, #556]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004aa:	4b8a      	ldr	r3, [pc, #552]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004b2:	4888      	ldr	r0, [pc, #544]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80004b4:	f001 f9ca 	bl	800184c <HAL_ADC_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80004be:	f000 fb49 	bl	8000b54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	4619      	mov	r1, r3
 80004cc:	4881      	ldr	r0, [pc, #516]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80004ce:	f002 f8c9 	bl	8002664 <HAL_ADCEx_MultiModeConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80004d8:	f000 fb3c 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004dc:	4b7f      	ldr	r3, [pc, #508]	; (80006dc <MX_ADC1_Init+0x2ac>)
 80004de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e0:	2306      	movs	r3, #6
 80004e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80004e4:	2306      	movs	r3, #6
 80004e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80004ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ee:	2304      	movs	r3, #4
 80004f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fa:	463b      	mov	r3, r7
 80004fc:	4619      	mov	r1, r3
 80004fe:	4875      	ldr	r0, [pc, #468]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000500:	f001 fbc6 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800050a:	f000 fb23 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800050e:	4b74      	ldr	r3, [pc, #464]	; (80006e0 <MX_ADC1_Init+0x2b0>)
 8000510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000512:	230c      	movs	r3, #12
 8000514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	486e      	ldr	r0, [pc, #440]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800051c:	f001 fbb8 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000526:	f000 fb15 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800052a:	4b6e      	ldr	r3, [pc, #440]	; (80006e4 <MX_ADC1_Init+0x2b4>)
 800052c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800052e:	2312      	movs	r3, #18
 8000530:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	4619      	mov	r1, r3
 8000536:	4867      	ldr	r0, [pc, #412]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000538:	f001 fbaa 	bl	8001c90 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000542:	f000 fb07 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000546:	4b68      	ldr	r3, [pc, #416]	; (80006e8 <MX_ADC1_Init+0x2b8>)
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800054a:	2318      	movs	r3, #24
 800054c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	4860      	ldr	r0, [pc, #384]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000554:	f001 fb9c 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800055e:	f000 faf9 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000562:	4b62      	ldr	r3, [pc, #392]	; (80006ec <MX_ADC1_Init+0x2bc>)
 8000564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	4858      	ldr	r0, [pc, #352]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000572:	f001 fb8d 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800057c:	f000 faea 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000580:	4b5b      	ldr	r3, [pc, #364]	; (80006f0 <MX_ADC1_Init+0x2c0>)
 8000582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000584:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000588:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4619      	mov	r1, r3
 800058e:	4851      	ldr	r0, [pc, #324]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000590:	f001 fb7e 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800059a:	f000 fadb 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800059e:	4b55      	ldr	r3, [pc, #340]	; (80006f4 <MX_ADC1_Init+0x2c4>)
 80005a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005a2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80005a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4849      	ldr	r0, [pc, #292]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80005ae:	f001 fb6f 	bl	8001c90 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80005b8:	f000 facc 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005bc:	4b4e      	ldr	r3, [pc, #312]	; (80006f8 <MX_ADC1_Init+0x2c8>)
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005c0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80005c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4842      	ldr	r0, [pc, #264]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80005cc:	f001 fb60 	bl	8001c90 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80005d6:	f000 fabd 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005da:	4b48      	ldr	r3, [pc, #288]	; (80006fc <MX_ADC1_Init+0x2cc>)
 80005dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80005de:	f44f 738c 	mov.w	r3, #280	; 0x118
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	483a      	ldr	r0, [pc, #232]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80005ea:	f001 fb51 	bl	8001c90 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80005f4:	f000 faae 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <MX_ADC1_Init+0x2d0>)
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80005fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4833      	ldr	r0, [pc, #204]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000608:	f001 fb42 	bl	8001c90 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8000612:	f000 fa9f 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <MX_ADC1_Init+0x2d4>)
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800061a:	f240 2306 	movw	r3, #518	; 0x206
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000626:	f001 fb33 	bl	8001c90 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 8000630:	f000 fa90 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MX_ADC1_Init+0x2d8>)
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000638:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800063c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4619      	mov	r1, r3
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000644:	f001 fb24 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 800064e:	f000 fa81 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MX_ADC1_Init+0x2dc>)
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000656:	f240 2312 	movw	r3, #530	; 0x212
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000662:	f001 fb15 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 800066c:	f000 fa72 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_ADC1_Init+0x2e0>)
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000674:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 8000680:	f001 fb06 	bl	8001c90 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 800068a:	f000 fa63 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_ADC1_Init+0x2e4>)
 8000690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 800069e:	f001 faf7 	bl	8001c90 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 80006a8:	f000 fa54 	bl	8000b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ADC1_Init+0x2e8>)
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 80006b0:	f240 3306 	movw	r3, #774	; 0x306
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0x2a4>)
 80006bc:	f001 fae8 	bl	8001c90 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 80006c6:	f000 fa45 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2400002c 	.word	0x2400002c
 80006d8:	40022000 	.word	0x40022000
 80006dc:	0c900008 	.word	0x0c900008
 80006e0:	10c00010 	.word	0x10c00010
 80006e4:	14f00020 	.word	0x14f00020
 80006e8:	1d500080 	.word	0x1d500080
 80006ec:	21800100 	.word	0x21800100
 80006f0:	25b00200 	.word	0x25b00200
 80006f4:	2a000400 	.word	0x2a000400
 80006f8:	2e300800 	.word	0x2e300800
 80006fc:	32601000 	.word	0x32601000
 8000700:	36902000 	.word	0x36902000
 8000704:	3ac04000 	.word	0x3ac04000
 8000708:	3ef08000 	.word	0x3ef08000
 800070c:	43210000 	.word	0x43210000
 8000710:	47520000 	.word	0x47520000
 8000714:	4b840000 	.word	0x4b840000
 8000718:	4fb80000 	.word	0x4fb80000

0800071c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000720:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <MX_FDCAN1_Init+0xc4>)
 8000724:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000746:	2210      	movs	r2, #16
 8000748:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800074c:	2201      	movs	r2, #1
 800074e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000752:	2202      	movs	r2, #2
 8000754:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000758:	2202      	movs	r2, #2
 800075a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800075e:	2201      	movs	r2, #1
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000764:	2201      	movs	r2, #1
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800076a:	2201      	movs	r2, #1
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000770:	2201      	movs	r2, #1
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800078e:	2204      	movs	r2, #4
 8000790:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 800079a:	2204      	movs	r2, #4
 800079c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_FDCAN1_Init+0xc0>)
 80007ca:	f004 fa71 	bl	8004cb0 <HAL_FDCAN_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007d4:	f000 f9be 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000108 	.word	0x24000108
 80007e0:	4000a000 	.word	0x4000a000

080007e4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <MX_FDCAN2_Init+0xc4>)
 80007ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800080e:	2210      	movs	r2, #16
 8000810:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000814:	2201      	movs	r2, #1
 8000816:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800081a:	2202      	movs	r2, #2
 800081c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000820:	2202      	movs	r2, #2
 8000822:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000826:	2201      	movs	r2, #1
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000856:	2204      	movs	r2, #4
 8000858:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000862:	2204      	movs	r2, #4
 8000864:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 800088c:	2204      	movs	r2, #4
 800088e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_FDCAN2_Init+0xc0>)
 8000892:	f004 fa0d 	bl	8004cb0 <HAL_FDCAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800089c:	f000 f95a 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	240001a8 	.word	0x240001a8
 80008a8:	4000a400 	.word	0x4000a400

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_I2C1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_I2C1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_I2C1_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_I2C1_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_I2C1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <MX_I2C1_Init+0x74>)
 80008e8:	f004 fef6 	bl	80056d8 <HAL_I2C_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 f92f 	bl	8000b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_I2C1_Init+0x74>)
 80008fa:	f004 ff7d 	bl	80057f8 <HAL_I2CEx_ConfigAnalogFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 f926 	bl	8000b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_I2C1_Init+0x74>)
 800090c:	f004 ffbf 	bl	800588e <HAL_I2CEx_ConfigDigitalFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 f91d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000248 	.word	0x24000248
 8000924:	40005400 	.word	0x40005400
 8000928:	00707cbb 	.word	0x00707cbb

0800092c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <MX_I2C3_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <MX_I2C3_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_I2C3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_I2C3_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C3_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <MX_I2C3_Init+0x74>)
 8000968:	f004 feb6 	bl	80056d8 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f8ef 	bl	8000b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <MX_I2C3_Init+0x74>)
 800097a:	f004 ff3d 	bl	80057f8 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f8e6 	bl	8000b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_I2C3_Init+0x74>)
 800098c:	f004 ff7f 	bl	800588e <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f8dd 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2400029c 	.word	0x2400029c
 80009a4:	40005c00 	.word	0x40005c00
 80009a8:	00707cbb 	.word	0x00707cbb

080009ac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C4_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C4_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009e8:	f004 fe76 	bl	80056d8 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 f8af 	bl	8000b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C4_Init+0x74>)
 80009fa:	f004 fefd 	bl	80057f8 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 f8a6 	bl	8000b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C4_Init+0x74>)
 8000a0c:	f004 ff3f 	bl	800588e <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f89d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	240002f0 	.word	0x240002f0
 8000a24:	58001c00 	.word	0x58001c00
 8000a28:	00707cbb 	.word	0x00707cbb

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a34:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	200b      	movs	r0, #11
 8000a56:	f001 ff7c 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a5a:	200b      	movs	r0, #11
 8000a5c:	f001 ff93 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58024400 	.word	0x58024400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000a92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_GPIO_Init+0x8c>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	58024400 	.word	0x58024400

08000afc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	uint8_t ADC1_size = sizeof(ADC1Data)/sizeof(ADC1Data[0]);
 8000b04:	2310      	movs	r3, #16
 8000b06:	72fb      	strb	r3, [r7, #11]
	if(hadc->Instance == ADC1){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d114      	bne.n	8000b3c <HAL_ADC_ConvCpltCallback+0x40>
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e00b      	b.n	8000b30 <HAL_ADC_ConvCpltCallback+0x34>
			all_raw_data[j] = ADC1Data[j];
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <HAL_ADC_ConvCpltCallback+0x50>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b20:	b299      	uxth	r1, r3
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion -1 ;j++){
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	1e5a      	subs	r2, r3, #1
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8ed      	bhi.n	8000b18 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	24000344 	.word	0x24000344
 8000b50:	24000364 	.word	0x24000364

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_MspInit+0x30>)
 8000b68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b6c:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x30>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x30>)
 8000b78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	58024400 	.word	0x58024400

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0bc      	sub	sp, #240	; 0xf0
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 faa3 	bl	8009100 <memset>
  if(hadc->Instance==ADC1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a62      	ldr	r2, [pc, #392]	; (8000d48 <HAL_ADC_MspInit+0x1b4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f040 80bc 	bne.w	8000d3e <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 32;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000be6:	23c0      	movs	r3, #192	; 0xc0
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fe75 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000c08:	f7ff ffa4 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c12:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c1e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c30:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3a:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6c:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c76:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <HAL_ADC_MspInit+0x1b8>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c84:	233f      	movs	r3, #63	; 0x3f
 8000c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	482c      	ldr	r0, [pc, #176]	; (8000d50 <HAL_ADC_MspInit+0x1bc>)
 8000c9e:	f004 fb6b 	bl	8005378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ca2:	23ff      	movs	r3, #255	; 0xff
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4826      	ldr	r0, [pc, #152]	; (8000d54 <HAL_ADC_MspInit+0x1c0>)
 8000cbc:	f004 fb5c 	bl	8005378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481f      	ldr	r0, [pc, #124]	; (8000d58 <HAL_ADC_MspInit+0x1c4>)
 8000cda:	f004 fb4d 	bl	8005378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_ADC_MspInit+0x1cc>)
 8000ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000ce6:	2209      	movs	r2, #9
 8000ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d24:	f001 fe4a 	bl	80029bc <HAL_DMA_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8000d2e:	f7ff ff11 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d36:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_ADC_MspInit+0x1c8>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	37f0      	adds	r7, #240	; 0xf0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020800 	.word	0x58020800
 8000d54:	58020000 	.word	0x58020000
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	24000090 	.word	0x24000090
 8000d60:	40020010 	.word	0x40020010

08000d64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0bc      	sub	sp, #240	; 0xf0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	22c0      	movs	r2, #192	; 0xc0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f008 f9bb 	bl	8009100 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a57      	ldr	r2, [pc, #348]	; (8000eec <HAL_FDCAN_MspInit+0x188>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d151      	bne.n	8000e38 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 fd9d 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000db8:	f7ff fecc 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000dbc:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000dc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10e      	bne.n	8000dec <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000dd0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000dd4:	4a47      	ldr	r2, [pc, #284]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dda:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000de0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000dee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dfc:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000dfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e24:	2309      	movs	r3, #9
 8000e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4831      	ldr	r0, [pc, #196]	; (8000ef8 <HAL_FDCAN_MspInit+0x194>)
 8000e32:	f004 faa1 	bl	8005378 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000e36:	e055      	b.n	8000ee4 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <HAL_FDCAN_MspInit+0x198>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d150      	bne.n	8000ee4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fd46 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8000e66:	f7ff fe75 	bl	8000b54 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_FDCAN_MspInit+0x18c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10e      	bne.n	8000e9a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000e7e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000e8e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_FDCAN_MspInit+0x190>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <HAL_FDCAN_MspInit+0x19c>)
 8000ee0:	f004 fa4a 	bl	8005378 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	37f0      	adds	r7, #240	; 0xf0
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	4000a000 	.word	0x4000a000
 8000ef0:	24000384 	.word	0x24000384
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020000 	.word	0x58020000
 8000efc:	4000a400 	.word	0x4000a400
 8000f00:	58020400 	.word	0x58020400

08000f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0c0      	sub	sp, #256	; 0x100
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f20:	22c0      	movs	r2, #192	; 0xc0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 f8eb 	bl	8009100 <memset>
  if(hi2c->Instance==I2C1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a86      	ldr	r2, [pc, #536]	; (8001148 <HAL_I2C_MspInit+0x244>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d146      	bne.n	8000fc2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f34:	f04f 0208 	mov.w	r2, #8
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 fcce 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f56:	f7ff fdfd 	bl	8000b54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b7c      	ldr	r3, [pc, #496]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000f5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f60:	4a7a      	ldr	r2, [pc, #488]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f6a:	4b78      	ldr	r3, [pc, #480]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000f6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f78:	23c0      	movs	r3, #192	; 0xc0
 8000f7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	486c      	ldr	r0, [pc, #432]	; (8001150 <HAL_I2C_MspInit+0x24c>)
 8000f9e:	f004 f9eb 	bl	8005378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000fa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fa8:	4a68      	ldr	r2, [pc, #416]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fb2:	4b66      	ldr	r3, [pc, #408]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000fb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000fc0:	e0bd      	b.n	800113e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a63      	ldr	r2, [pc, #396]	; (8001154 <HAL_I2C_MspInit+0x250>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d16c      	bne.n	80010a6 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000fcc:	f04f 0208 	mov.w	r2, #8
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fc82 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000fee:	f7ff fdb1 	bl	8000b54 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b56      	ldr	r3, [pc, #344]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff8:	4a54      	ldr	r2, [pc, #336]	; (800114c <HAL_I2C_MspInit+0x248>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b4e      	ldr	r3, [pc, #312]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001016:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001036:	2312      	movs	r3, #18
 8001038:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001048:	2304      	movs	r3, #4
 800104a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001052:	4619      	mov	r1, r3
 8001054:	4840      	ldr	r0, [pc, #256]	; (8001158 <HAL_I2C_MspInit+0x254>)
 8001056:	f004 f98f 	bl	8005378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001074:	2304      	movs	r3, #4
 8001076:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800107e:	4619      	mov	r1, r3
 8001080:	4836      	ldr	r0, [pc, #216]	; (800115c <HAL_I2C_MspInit+0x258>)
 8001082:	f004 f979 	bl	8005378 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001088:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <HAL_I2C_MspInit+0x248>)
 800108e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001092:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001098:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800109c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
}
 80010a4:	e04b      	b.n	800113e <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <HAL_I2C_MspInit+0x25c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d146      	bne.n	800113e <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80010b0:	f04f 0210 	mov.w	r2, #16
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fc10 	bl	80068ec <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80010d2:	f7ff fd3f 	bl	8000b54 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_I2C_MspInit+0x248>)
 80010d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_I2C_MspInit+0x248>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_I2C_MspInit+0x248>)
 80010e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fc:	2312      	movs	r3, #18
 80010fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800110e:	2306      	movs	r3, #6
 8001110:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <HAL_I2C_MspInit+0x24c>)
 800111c:	f004 f92c 	bl	8005378 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001122:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_I2C_MspInit+0x248>)
 8001132:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	bf00      	nop
 8001140:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	58024400 	.word	0x58024400
 8001150:	58020400 	.word	0x58020400
 8001154:	40005c00 	.word	0x40005c00
 8001158:	58020800 	.word	0x58020800
 800115c:	58020000 	.word	0x58020000
 8001160:	58001c00 	.word	0x58001c00

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f920 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Stream0_IRQHandler+0x10>)
 80011be:	f002 f9f5 	bl	80035ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000090 	.word	0x24000090

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <SystemInit+0xd0>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a31      	ldr	r2, [pc, #196]	; (800129c <SystemInit+0xd0>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <SystemInit+0xd4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d807      	bhi.n	80011fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <SystemInit+0xd4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 030f 	bic.w	r3, r3, #15
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <SystemInit+0xd4>)
 80011f6:	f043 0303 	orr.w	r3, r3, #3
 80011fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <SystemInit+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <SystemInit+0xd8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <SystemInit+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <SystemInit+0xd8>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4924      	ldr	r1, [pc, #144]	; (80012a4 <SystemInit+0xd8>)
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <SystemInit+0xdc>)
 8001216:	4013      	ands	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <SystemInit+0xd4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <SystemInit+0xd4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 030f 	bic.w	r3, r3, #15
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SystemInit+0xd4>)
 8001230:	f043 0303 	orr.w	r3, r3, #3
 8001234:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <SystemInit+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <SystemInit+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <SystemInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <SystemInit+0xd8>)
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <SystemInit+0xe0>)
 800124c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <SystemInit+0xd8>)
 8001250:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <SystemInit+0xe4>)
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <SystemInit+0xd8>)
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <SystemInit+0xe8>)
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <SystemInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <SystemInit+0xd8>)
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <SystemInit+0xe8>)
 8001264:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <SystemInit+0xd8>)
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <SystemInit+0xd8>)
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <SystemInit+0xe8>)
 8001270:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <SystemInit+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SystemInit+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <SystemInit+0xd8>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <SystemInit+0xd8>)
 8001286:	2200      	movs	r2, #0
 8001288:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <SystemInit+0xec>)
 800128c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001290:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	52002000 	.word	0x52002000
 80012a4:	58024400 	.word	0x58024400
 80012a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012ac:	02020200 	.word	0x02020200
 80012b0:	01ff0000 	.word	0x01ff0000
 80012b4:	01010280 	.word	0x01010280
 80012b8:	52004000 	.word	0x52004000

080012bc <Reset_Handler>:
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0xe>
 80012c0:	f7ff ff84 	bl	80011cc <SystemInit>
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
 80012ca:	2300      	movs	r3, #0
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:
 80012ce:	58d4      	ldr	r4, [r2, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:
 80012d4:	18c4      	adds	r4, r0, r3
 80012d6:	428c      	cmp	r4, r1
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
 80012de:	2300      	movs	r3, #0
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:
 80012e6:	42a2      	cmp	r2, r4
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>
 80012ea:	f007 ff11 	bl	8009110 <__libc_init_array>
 80012ee:	f7fe fffd 	bl	80002ec <main>
 80012f2:	4770      	bx	lr
 80012f4:	24100000 	.word	0x24100000
 80012f8:	24000000 	.word	0x24000000
 80012fc:	24000010 	.word	0x24000010
 8001300:	080091f8 	.word	0x080091f8
 8001304:	24000010 	.word	0x24000010
 8001308:	2400038c 	.word	0x2400038c

0800130c <ADC_IRQHandler>:
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001316:	2003      	movs	r0, #3
 8001318:	f001 fb10 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800131c:	f005 f926 	bl	800656c <HAL_RCC_GetSysClockFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <HAL_Init+0x6c>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_Init+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_Init+0x6c>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x70>)
 8001352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f814 	bl	8001388 <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e002      	b.n	8001370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fbf9 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	080091d8 	.word	0x080091d8
 8001380:	24000004 	.word	0x24000004
 8001384:	24000000 	.word	0x24000000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_InitTick+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e021      	b.n	80013e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x64>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0x60>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 faf5 	bl	80029a2 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f001 fabf 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x68>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2400000c 	.word	0x2400000c
 80013ec:	24000000 	.word	0x24000000
 80013f0:	24000008 	.word	0x24000008

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2400000c 	.word	0x2400000c
 8001418:	24000388 	.word	0x24000388

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	24000388 	.word	0x24000388

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2400000c 	.word	0x2400000c

0800147c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	611a      	str	r2, [r3, #16]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001556:	b480      	push	{r7}
 8001558:	b087      	sub	sp, #28
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3360      	adds	r3, #96	; 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
  }
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	211f      	movs	r1, #31
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 011f 	and.w	r1, r3, #31
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f023 0203 	bic.w	r2, r3, #3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3314      	adds	r3, #20
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0e5b      	lsrs	r3, r3, #25
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2107      	movs	r1, #7
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	0d1b      	lsrs	r3, r3, #20
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0318 	and.w	r3, r3, #24
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016ac:	40d9      	lsrs	r1, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	400b      	ands	r3, r1
 80016b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016b6:	431a      	orrs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	000fffff 	.word	0x000fffff

080016d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <LL_ADC_DisableDeepPowerDown+0x20>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6093      	str	r3, [r2, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	5fffffc0 	.word	0x5fffffc0

08001710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001724:	d101      	bne.n	800172a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <LL_ADC_EnableInternalRegulator+0x24>)
 8001746:	4013      	ands	r3, r2
 8001748:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	6fffffc0 	.word	0x6fffffc0

08001760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LL_ADC_Enable+0x24>)
 8001796:	4013      	ands	r3, r2
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	7fffffc0 	.word	0x7fffffc0

080017b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_IsEnabled+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_IsEnabled+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_ADC_REG_StartConversion+0x24>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	f043 0204 	orr.w	r2, r3, #4
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	7fffffc0 	.word	0x7fffffc0

08001800 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b04      	cmp	r3, #4
 8001812:	d101      	bne.n	8001818 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b08      	cmp	r3, #8
 8001838:	d101      	bne.n	800183e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e138      	b.n	8001ad8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff f98d 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff3f 	bl	8001710 <LL_ADC_IsDeepPowerDownEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff25 	bl	80016ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff5a 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff3e 	bl	8001738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018bc:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_ADC_Init+0x294>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	4a88      	ldr	r2, [pc, #544]	; (8001ae4 <HAL_ADC_Init+0x298>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	3301      	adds	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ce:	e002      	b.n	80018d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff3d 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff77 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001912:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 80d2 	bne.w	8001ac6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 80ce 	bne.w	8001ac6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001932:	f043 0202 	orr.w	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff36 	bl	80017b0 <LL_ADC_IsEnabled>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d110      	bne.n	800196c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800194a:	4867      	ldr	r0, [pc, #412]	; (8001ae8 <HAL_ADC_Init+0x29c>)
 800194c:	f7ff ff30 	bl	80017b0 <LL_ADC_IsEnabled>
 8001950:	4604      	mov	r4, r0
 8001952:	4866      	ldr	r0, [pc, #408]	; (8001aec <HAL_ADC_Init+0x2a0>)
 8001954:	f7ff ff2c 	bl	80017b0 <LL_ADC_IsEnabled>
 8001958:	4603      	mov	r3, r0
 800195a:	4323      	orrs	r3, r4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4619      	mov	r1, r3
 8001966:	4862      	ldr	r0, [pc, #392]	; (8001af0 <HAL_ADC_Init+0x2a4>)
 8001968:	f7ff fd88 	bl	800147c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7d5b      	ldrb	r3, [r3, #21]
 8001970:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001976:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800197c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7f1b      	ldrb	r3, [r3, #28]
 8001982:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7f1b      	ldrb	r3, [r3, #28]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	3b01      	subs	r3, #1
 8001996:	045b      	lsls	r3, r3, #17
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_ADC_Init+0x2a8>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	69b9      	ldr	r1, [r7, #24]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff14 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 80019d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff21 	bl	8001826 <LL_ADC_INJ_IsConversionOngoing>
 80019e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d14a      	bne.n	8001a82 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d147      	bne.n	8001a82 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7d1b      	ldrb	r3, [r3, #20]
 80019f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_ADC_Init+0x2ac>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d11b      	bne.n	8001a56 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_ADC_Init+0x2b0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a32:	3a01      	subs	r2, #1
 8001a34:	0411      	lsls	r1, r2, #16
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a46:	430a      	orrs	r2, r1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	e007      	b.n	8001a66 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fcfd 	bl	800247c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	f023 010f 	bic.w	r1, r3, #15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	e007      	b.n	8001ab4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020f 	bic.w	r2, r2, #15
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac4:	e007      	b.n	8001ad6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	24000000 	.word	0x24000000
 8001ae4:	053e2d63 	.word	0x053e2d63
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40022100 	.word	0x40022100
 8001af0:	40022300 	.word	0x40022300
 8001af4:	fff0c003 	.word	0xfff0c003
 8001af8:	ffffbffc 	.word	0xffffbffc
 8001afc:	fc00f81e 	.word	0xfc00f81e

08001b00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b0c:	484f      	ldr	r0, [pc, #316]	; (8001c4c <HAL_ADC_Start_DMA+0x14c>)
 8001b0e:	f7ff fddf 	bl	80016d0 <LL_ADC_GetMultimode>
 8001b12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fe71 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 808c 	bne.w	8001c3e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_Start_DMA+0x34>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e087      	b.n	8001c44 <HAL_ADC_Start_DMA+0x144>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d170      	bne.n	8001c30 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb84 	bl	800225c <ADC_Enable>
 8001b54:	4603      	mov	r3, r0
 8001b56:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d163      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_ADC_Start_DMA+0x150>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_ADC_Start_DMA+0x154>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_Start_DMA+0x7e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_Start_DMA+0x80>
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_ADC_Start_DMA+0x158>)
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d002      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f023 0206 	bic.w	r2, r3, #6
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_ADC_Start_DMA+0x15c>)
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <HAL_ADC_Start_DMA+0x160>)
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <HAL_ADC_Start_DMA+0x164>)
 8001bd0:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	221c      	movs	r2, #28
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0210 	orr.w	r2, r2, #16
 8001bf0:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7ff fd04 	bl	800160a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3340      	adds	r3, #64	; 0x40
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f001 fa61 	bl	80030d8 <HAL_DMA_Start_IT>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fdda 	bl	80017d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c24:	e00d      	b.n	8001c42 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c2e:	e008      	b.n	8001c42 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c3c:	e001      	b.n	8001c42 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022300 	.word	0x40022300
 8001c50:	fffff0fe 	.word	0xfffff0fe
 8001c54:	40022100 	.word	0x40022100
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	08002355 	.word	0x08002355
 8001c60:	0800242d 	.word	0x0800242d
 8001c64:	08002449 	.word	0x08002449

08001c68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b0a1      	sub	sp, #132	; 0x84
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a9a      	ldr	r2, [pc, #616]	; (8001f14 <HAL_ADC_ConfigChannel+0x284>)
 8001caa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x2a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e2bc      	b.n	8002234 <HAL_ADC_ConfigChannel+0x5a4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fd9a 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 82a1 	bne.w	8002216 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d108      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x62>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	e016      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x90>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d02:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	69d1      	ldr	r1, [r2, #28]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f7ff fc39 	bl	80015b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fd5b 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001d4a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fd68 	bl	8001826 <LL_ADC_INJ_IsConversionOngoing>
 8001d56:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80a0 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 809c 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f7ff fc5b 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x110>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	e00a      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x126>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d027      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6919      	ldr	r1, [r3, #16]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dce:	f7ff fb89 	bl	80014e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x158>
 8001de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001de6:	e000      	b.n	8001dea <HAL_ADC_ConfigChannel+0x15a>
 8001de8:	2300      	movs	r3, #0
 8001dea:	461a      	mov	r2, r3
 8001dec:	f7ff fbb3 	bl	8001556 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x176>
 8001e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e04:	e000      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x178>
 8001e06:	2300      	movs	r3, #0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f7ff fb8b 	bl	8001524 <LL_ADC_SetDataRightShift>
 8001e0e:	e047      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e56:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e7a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e9e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fc83 	bl	80017b0 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 81bb 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fbe2 	bl	8001688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <HAL_ADC_ConfigChannel+0x284>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 8130 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x268>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e01b      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x2a0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e005      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x290>
 8001f14:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	bf94      	ite	ls
 8001f2a:	2301      	movls	r3, #1
 8001f2c:	2300      	movhi	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d079      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x2c0>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	3301      	adds	r3, #1
 8001f48:	069b      	lsls	r3, r3, #26
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4e:	e015      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x2ec>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f60:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x30c>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	e017      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x33c>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x362>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	e018      	b.n	8002024 <HAL_ADC_ConfigChannel+0x394>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002024:	430b      	orrs	r3, r1
 8002026:	e07e      	b.n	8002126 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x3b4>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002042:	e015      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3e0>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x400>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	e017      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x430>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	61bb      	str	r3, [r7, #24]
  return result;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	ea42 0103 	orr.w	r1, r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x45c>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	3b1e      	subs	r3, #30
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ea:	e01b      	b.n	8002124 <HAL_ADC_ConfigChannel+0x494>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	60fb      	str	r3, [r7, #12]
  return result;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	3b1e      	subs	r3, #30
 800211e:	051b      	lsls	r3, r3, #20
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	430b      	orrs	r3, r1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6892      	ldr	r2, [r2, #8]
 800212a:	4619      	mov	r1, r3
 800212c:	f7ff fa80 	bl	8001630 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da77      	bge.n	8002228 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002138:	4840      	ldr	r0, [pc, #256]	; (800223c <HAL_ADC_ConfigChannel+0x5ac>)
 800213a:	f7ff f9c5 	bl	80014c8 <LL_ADC_GetCommonPathInternalCh>
 800213e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002140:	483f      	ldr	r0, [pc, #252]	; (8002240 <HAL_ADC_ConfigChannel+0x5b0>)
 8002142:	f7ff fb35 	bl	80017b0 <LL_ADC_IsEnabled>
 8002146:	4604      	mov	r4, r0
 8002148:	483e      	ldr	r0, [pc, #248]	; (8002244 <HAL_ADC_ConfigChannel+0x5b4>)
 800214a:	f7ff fb31 	bl	80017b0 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	4323      	orrs	r3, r4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d155      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_ADC_ConfigChannel+0x5b8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d122      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x516>
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11d      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a35      	ldr	r2, [pc, #212]	; (8002244 <HAL_ADC_ConfigChannel+0x5b4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d159      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217a:	4619      	mov	r1, r3
 800217c:	482f      	ldr	r0, [pc, #188]	; (800223c <HAL_ADC_ConfigChannel+0x5ac>)
 800217e:	f7ff f990 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_ADC_ConfigChannel+0x5bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	4a31      	ldr	r2, [pc, #196]	; (8002250 <HAL_ADC_ConfigChannel+0x5c0>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	3301      	adds	r3, #1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002196:	e002      	b.n	800219e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021a4:	e040      	b.n	8002228 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_ADC_ConfigChannel+0x5c4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x544>
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <HAL_ADC_ConfigChannel+0x5b4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d131      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80021c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	4619      	mov	r1, r3
 80021cc:	481b      	ldr	r0, [pc, #108]	; (800223c <HAL_ADC_ConfigChannel+0x5ac>)
 80021ce:	f7ff f968 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d2:	e029      	b.n	8002228 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_ADC_ConfigChannel+0x5c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d124      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x598>
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11f      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <HAL_ADC_ConfigChannel+0x5b4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f8:	4619      	mov	r1, r3
 80021fa:	4810      	ldr	r0, [pc, #64]	; (800223c <HAL_ADC_ConfigChannel+0x5ac>)
 80021fc:	f7ff f951 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
 8002200:	e012      	b.n	8002228 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002214:	e008      	b.n	8002228 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002230:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002234:	4618      	mov	r0, r3
 8002236:	3784      	adds	r7, #132	; 0x84
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	40022300 	.word	0x40022300
 8002240:	40022000 	.word	0x40022000
 8002244:	40022100 	.word	0x40022100
 8002248:	cb840000 	.word	0xcb840000
 800224c:	24000000 	.word	0x24000000
 8002250:	053e2d63 	.word	0x053e2d63
 8002254:	bac04000 	.word	0xbac04000
 8002258:	cfb80000 	.word	0xcfb80000

0800225c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff faa1 	bl	80017b0 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d161      	bne.n	8002338 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <ADC_Enable+0xe8>)
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e04d      	b.n	800233a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa70 	bl	8001788 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f8b8 	bl	800141c <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <ADC_Enable+0xec>)
 80022b0:	f7ff fa0e 	bl	80016d0 <LL_ADC_GetMultimode>
 80022b4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <ADC_Enable+0xf0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d002      	beq.n	80022c6 <ADC_Enable+0x6a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	e000      	b.n	80022c8 <ADC_Enable+0x6c>
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <ADC_Enable+0xf4>)
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d02c      	beq.n	800232a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d130      	bne.n	8002338 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d6:	e028      	b.n	800232a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fa67 	bl	80017b0 <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fa4b 	bl	8001788 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022f2:	f7ff f893 	bl	800141c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d914      	bls.n	800232a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d00d      	beq.n	800232a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e007      	b.n	800233a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d1cf      	bne.n	80022d8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	8000003f 	.word	0x8000003f
 8002348:	40022300 	.word	0x40022300
 800234c:	40022100 	.word	0x40022100
 8002350:	40022000 	.word	0x40022000

08002354 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800236a:	2b00      	cmp	r3, #0
 800236c:	d14b      	bne.n	8002406 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f8fd 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12b      	bne.n	80023fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11f      	bne.n	80023fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
 80023ca:	e018      	b.n	80023fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d111      	bne.n	80023fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7fe fb7c 	bl	8000afc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002404:	e00e      	b.n	8002424 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fc32 	bl	8001c7c <HAL_ADC_ErrorCallback>
}
 8002418:	e004      	b.n	8002424 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fc14 	bl	8001c68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff fc04 	bl	8001c7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <ADC_ConfigureBoostMode+0x18c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002490:	f004 f9e6 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 8002494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800249e:	d010      	beq.n	80024c2 <ADC_ConfigureBoostMode+0x46>
 80024a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024a4:	d873      	bhi.n	800258e <ADC_ConfigureBoostMode+0x112>
 80024a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024aa:	d002      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x36>
 80024ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b0:	d16d      	bne.n	800258e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
        break;
 80024c0:	e068      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	60fb      	str	r3, [r7, #12]
        break;
 80024c8:	e064      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	f005 fbc9 	bl	8007c68 <HAL_RCCEx_GetPeriphCLKFreq>
 80024d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024e0:	d051      	beq.n	8002586 <ADC_ConfigureBoostMode+0x10a>
 80024e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024e6:	d854      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 80024e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024ec:	d047      	beq.n	800257e <ADC_ConfigureBoostMode+0x102>
 80024ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024f2:	d84e      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 80024f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024f8:	d03d      	beq.n	8002576 <ADC_ConfigureBoostMode+0xfa>
 80024fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024fe:	d848      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002504:	d033      	beq.n	800256e <ADC_ConfigureBoostMode+0xf2>
 8002506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800250a:	d842      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 800250c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002510:	d029      	beq.n	8002566 <ADC_ConfigureBoostMode+0xea>
 8002512:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002516:	d83c      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002518:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800251c:	d01a      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800251e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002522:	d836      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002524:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002528:	d014      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800252a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800252e:	d830      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002534:	d00e      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 8002536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253a:	d82a      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 800253c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002540:	d008      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 8002542:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002546:	d824      	bhi.n	8002592 <ADC_ConfigureBoostMode+0x116>
 8002548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800254c:	d002      	beq.n	8002554 <ADC_ConfigureBoostMode+0xd8>
 800254e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002552:	d11e      	bne.n	8002592 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	60fb      	str	r3, [r7, #12]
        break;
 8002564:	e016      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
        break;
 800256c:	e012      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	60fb      	str	r3, [r7, #12]
        break;
 8002574:	e00e      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	60fb      	str	r3, [r7, #12]
        break;
 800257c:	e00a      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
        break;
 8002584:	e006      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	60fb      	str	r3, [r7, #12]
        break;
 800258c:	e002      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
        break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002592:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <ADC_ConfigureBoostMode+0x190>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d808      	bhi.n	80025b4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025b0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025b2:	e025      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <ADC_ConfigureBoostMode+0x194>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d80a      	bhi.n	80025d2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	e016      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <ADC_ConfigureBoostMode+0x198>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d80a      	bhi.n	80025f0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	e007      	b.n	8002600 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40022300 	.word	0x40022300
 800260c:	005f5e10 	.word	0x005f5e10
 8002610:	00bebc20 	.word	0x00bebc20
 8002614:	017d7840 	.word	0x017d7840

08002618 <LL_ADC_IsEnabled>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b09f      	sub	sp, #124	; 0x7c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e080      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3d      	ldr	r2, [pc, #244]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800269c:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e001      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e05f      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb9 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffb3 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d141      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13e      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002702:	4822      	ldr	r0, [pc, #136]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002704:	f7ff ff88 	bl	8002618 <LL_ADC_IsEnabled>
 8002708:	4604      	mov	r4, r0
 800270a:	4821      	ldr	r0, [pc, #132]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800270c:	f7ff ff84 	bl	8002618 <LL_ADC_IsEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	4323      	orrs	r3, r4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d12e      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6811      	ldr	r1, [r2, #0]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	430a      	orrs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002730:	e021      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800273a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002740:	f7ff ff6a 	bl	8002618 <LL_ADC_IsEnabled>
 8002744:	4604      	mov	r4, r0
 8002746:	4812      	ldr	r0, [pc, #72]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002748:	f7ff ff66 	bl	8002618 <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	4323      	orrs	r3, r4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800275a:	4013      	ands	r3, r2
 800275c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800275e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002760:	e009      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002774:	e000      	b.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002776:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002784:	4618      	mov	r0, r3
 8002786:	377c      	adds	r7, #124	; 0x7c
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	40022100 	.word	0x40022100
 8002794:	40022300 	.word	0x40022300
 8002798:	fffff0e0 	.word	0xfffff0e0

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <__NVIC_SetPriorityGrouping+0x40>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x40>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00
 80027e0:	05fa0000 	.word	0x05fa0000

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff40 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff90 	bl	8002890 <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5f 	bl	800283c <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff33 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa4 	bl	80028f8 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7fe fd2a 	bl	800141c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e37d      	b.n	80030d0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a66      	ldr	r2, [pc, #408]	; (8002b74 <HAL_DMA_Init+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04a      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <HAL_DMA_Init+0x1bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d045      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a63      	ldr	r2, [pc, #396]	; (8002b7c <HAL_DMA_Init+0x1c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d040      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a62      	ldr	r2, [pc, #392]	; (8002b80 <HAL_DMA_Init+0x1c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d03b      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a60      	ldr	r2, [pc, #384]	; (8002b84 <HAL_DMA_Init+0x1c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d036      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5f      	ldr	r2, [pc, #380]	; (8002b88 <HAL_DMA_Init+0x1cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5d      	ldr	r2, [pc, #372]	; (8002b8c <HAL_DMA_Init+0x1d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02c      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5c      	ldr	r2, [pc, #368]	; (8002b90 <HAL_DMA_Init+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5a      	ldr	r2, [pc, #360]	; (8002b94 <HAL_DMA_Init+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a59      	ldr	r2, [pc, #356]	; (8002b98 <HAL_DMA_Init+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01d      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_DMA_Init+0x1e0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a56      	ldr	r2, [pc, #344]	; (8002ba0 <HAL_DMA_Init+0x1e4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <HAL_DMA_Init+0x1e8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a53      	ldr	r2, [pc, #332]	; (8002ba8 <HAL_DMA_Init+0x1ec>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a51      	ldr	r2, [pc, #324]	; (8002bac <HAL_DMA_Init+0x1f0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_Init+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a50      	ldr	r2, [pc, #320]	; (8002bb0 <HAL_DMA_Init+0x1f4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_DMA_Init+0xbc>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_DMA_Init+0xbe>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 813c 	beq.w	8002cf8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a37      	ldr	r2, [pc, #220]	; (8002b74 <HAL_DMA_Init+0x1b8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_DMA_Init+0x1bc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a34      	ldr	r2, [pc, #208]	; (8002b7c <HAL_DMA_Init+0x1c0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a33      	ldr	r2, [pc, #204]	; (8002b80 <HAL_DMA_Init+0x1c4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a31      	ldr	r2, [pc, #196]	; (8002b84 <HAL_DMA_Init+0x1c8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_DMA_Init+0x1cc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <HAL_DMA_Init+0x1d0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <HAL_DMA_Init+0x1d4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <HAL_DMA_Init+0x1d8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <HAL_DMA_Init+0x1dc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_DMA_Init+0x1e0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_DMA_Init+0x1e4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <HAL_DMA_Init+0x1e8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_DMA_Init+0x1ec>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_DMA_Init+0x1f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Init+0x174>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <HAL_DMA_Init+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <HAL_DMA_Init+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_DMA_Init+0x196>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b52:	e02f      	b.n	8002bb4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b54:	f7fe fc62 	bl	800141c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d928      	bls.n	8002bb4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e2ad      	b.n	80030d0 <HAL_DMA_Init+0x714>
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1c8      	bne.n	8002b54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_DMA_Init+0x3e0>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002bda:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4313      	orrs	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b28      	cmp	r3, #40	; 0x28
 8002c1e:	d903      	bls.n	8002c28 <HAL_DMA_Init+0x26c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b2e      	cmp	r3, #46	; 0x2e
 8002c26:	d91f      	bls.n	8002c68 <HAL_DMA_Init+0x2ac>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c2e:	d903      	bls.n	8002c38 <HAL_DMA_Init+0x27c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b42      	cmp	r3, #66	; 0x42
 8002c36:	d917      	bls.n	8002c68 <HAL_DMA_Init+0x2ac>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b46      	cmp	r3, #70	; 0x46
 8002c3e:	d903      	bls.n	8002c48 <HAL_DMA_Init+0x28c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b48      	cmp	r3, #72	; 0x48
 8002c46:	d90f      	bls.n	8002c68 <HAL_DMA_Init+0x2ac>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b4e      	cmp	r3, #78	; 0x4e
 8002c4e:	d903      	bls.n	8002c58 <HAL_DMA_Init+0x29c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b52      	cmp	r3, #82	; 0x52
 8002c56:	d907      	bls.n	8002c68 <HAL_DMA_Init+0x2ac>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b73      	cmp	r3, #115	; 0x73
 8002c5e:	d905      	bls.n	8002c6c <HAL_DMA_Init+0x2b0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b77      	cmp	r3, #119	; 0x77
 8002c66:	d801      	bhi.n	8002c6c <HAL_DMA_Init+0x2b0>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_DMA_Init+0x2b2>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c78:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d117      	bne.n	8002cd4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f001 fe70 	bl	800499c <DMA_CheckFifoParam>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e1fd      	b.n	80030d0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 fdab 	bl	8004838 <DMA_CalcBaseAndBitshift>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	223f      	movs	r2, #63	; 0x3f
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	e0fd      	b.n	8002ef4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_DMA_Init+0x3e4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_DMA_Init+0x3e8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_DMA_Init+0x3ec>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_DMA_Init+0x3f0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_DMA_Init+0x3f4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_DMA_Init+0x3f8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_DMA_Init+0x3fc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_DMA_Init+0x400>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_DMA_Init+0x404>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_DMA_Init+0x408>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_DMA_Init+0x40c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_DMA_Init+0x410>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_DMA_Init+0x414>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_DMA_Init+0x418>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_DMA_Init+0x41c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Init+0x3dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <HAL_DMA_Init+0x420>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d123      	bne.n	8002de0 <HAL_DMA_Init+0x424>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e022      	b.n	8002de2 <HAL_DMA_Init+0x426>
 8002d9c:	fe10803f 	.word	0xfe10803f
 8002da0:	48022c08 	.word	0x48022c08
 8002da4:	48022c1c 	.word	0x48022c1c
 8002da8:	48022c30 	.word	0x48022c30
 8002dac:	48022c44 	.word	0x48022c44
 8002db0:	48022c58 	.word	0x48022c58
 8002db4:	48022c6c 	.word	0x48022c6c
 8002db8:	48022c80 	.word	0x48022c80
 8002dbc:	48022c94 	.word	0x48022c94
 8002dc0:	58025408 	.word	0x58025408
 8002dc4:	5802541c 	.word	0x5802541c
 8002dc8:	58025430 	.word	0x58025430
 8002dcc:	58025444 	.word	0x58025444
 8002dd0:	58025458 	.word	0x58025458
 8002dd4:	5802546c 	.word	0x5802546c
 8002dd8:	58025480 	.word	0x58025480
 8002ddc:	58025494 	.word	0x58025494
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d07d      	beq.n	8002ee2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_DMA_Init+0x62c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d021      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7d      	ldr	r2, [pc, #500]	; (8002fec <HAL_DMA_Init+0x630>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01c      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <HAL_DMA_Init+0x634>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d017      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_DMA_Init+0x638>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d012      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a79      	ldr	r2, [pc, #484]	; (8002ff8 <HAL_DMA_Init+0x63c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a77      	ldr	r2, [pc, #476]	; (8002ffc <HAL_DMA_Init+0x640>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d008      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_DMA_Init+0x644>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_Init+0x478>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a74      	ldr	r2, [pc, #464]	; (8003004 <HAL_DMA_Init+0x648>)
 8002e32:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	; (8003008 <HAL_DMA_Init+0x64c>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d008      	beq.n	8002e6e <HAL_DMA_Init+0x4b2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d102      	bne.n	8002e6a <HAL_DMA_Init+0x4ae>
 8002e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e68:	e002      	b.n	8002e70 <HAL_DMA_Init+0x4b4>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_DMA_Init+0x4b4>
 8002e6e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68d2      	ldr	r2, [r2, #12]
 8002e74:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e76:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e7e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e86:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e8e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e9e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b55      	ldr	r3, [pc, #340]	; (800300c <HAL_DMA_Init+0x650>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a55      	ldr	r2, [pc, #340]	; (8003010 <HAL_DMA_Init+0x654>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f001 fcb6 	bl	8004838 <DMA_CalcBaseAndBitshift>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	e008      	b.n	8002ef4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2240      	movs	r2, #64	; 0x40
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2203      	movs	r2, #3
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0ed      	b.n	80030d0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_DMA_Init+0x658>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d072      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_DMA_Init+0x65c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d06d      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_DMA_Init+0x660>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d068      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a42      	ldr	r2, [pc, #264]	; (8003020 <HAL_DMA_Init+0x664>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d063      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a40      	ldr	r2, [pc, #256]	; (8003024 <HAL_DMA_Init+0x668>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d05e      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a3f      	ldr	r2, [pc, #252]	; (8003028 <HAL_DMA_Init+0x66c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d059      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3d      	ldr	r2, [pc, #244]	; (800302c <HAL_DMA_Init+0x670>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d054      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3c      	ldr	r2, [pc, #240]	; (8003030 <HAL_DMA_Init+0x674>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04f      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_DMA_Init+0x678>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d04a      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a39      	ldr	r2, [pc, #228]	; (8003038 <HAL_DMA_Init+0x67c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d045      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_DMA_Init+0x680>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d040      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a36      	ldr	r2, [pc, #216]	; (8003040 <HAL_DMA_Init+0x684>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d03b      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_DMA_Init+0x688>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <HAL_DMA_Init+0x68c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d031      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a31      	ldr	r2, [pc, #196]	; (800304c <HAL_DMA_Init+0x690>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02c      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_DMA_Init+0x694>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d027      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_DMA_Init+0x62c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_DMA_Init+0x630>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_DMA_Init+0x634>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_DMA_Init+0x638>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_DMA_Init+0x63c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <HAL_DMA_Init+0x640>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_DMA_Init+0x644>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_DMA_Init+0x628>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_DMA_Init+0x648>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d137      	bne.n	8003054 <HAL_DMA_Init+0x698>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e036      	b.n	8003056 <HAL_DMA_Init+0x69a>
 8002fe8:	58025408 	.word	0x58025408
 8002fec:	5802541c 	.word	0x5802541c
 8002ff0:	58025430 	.word	0x58025430
 8002ff4:	58025444 	.word	0x58025444
 8002ff8:	58025458 	.word	0x58025458
 8002ffc:	5802546c 	.word	0x5802546c
 8003000:	58025480 	.word	0x58025480
 8003004:	58025494 	.word	0x58025494
 8003008:	fffe000f 	.word	0xfffe000f
 800300c:	a7fdabf8 	.word	0xa7fdabf8
 8003010:	cccccccd 	.word	0xcccccccd
 8003014:	40020010 	.word	0x40020010
 8003018:	40020028 	.word	0x40020028
 800301c:	40020040 	.word	0x40020040
 8003020:	40020058 	.word	0x40020058
 8003024:	40020070 	.word	0x40020070
 8003028:	40020088 	.word	0x40020088
 800302c:	400200a0 	.word	0x400200a0
 8003030:	400200b8 	.word	0x400200b8
 8003034:	40020410 	.word	0x40020410
 8003038:	40020428 	.word	0x40020428
 800303c:	40020440 	.word	0x40020440
 8003040:	40020458 	.word	0x40020458
 8003044:	40020470 	.word	0x40020470
 8003048:	40020488 	.word	0x40020488
 800304c:	400204a0 	.word	0x400204a0
 8003050:	400204b8 	.word	0x400204b8
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d032      	beq.n	80030c0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 fd1a 	bl	8004a94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d102      	bne.n	800306e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003082:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <HAL_DMA_Init+0x6f2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d80c      	bhi.n	80030ae <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f001 fd97 	bl	8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	e008      	b.n	80030c0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e226      	b.n	8003542 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Start_IT+0x2a>
 80030fe:	2302      	movs	r3, #2
 8003100:	e21f      	b.n	8003542 <HAL_DMA_Start_IT+0x46a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	f040 820a 	bne.w	800352c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a68      	ldr	r2, [pc, #416]	; (80032cc <HAL_DMA_Start_IT+0x1f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d04a      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_DMA_Start_IT+0x1f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d045      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <HAL_DMA_Start_IT+0x1fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d040      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_DMA_Start_IT+0x200>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d03b      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a62      	ldr	r2, [pc, #392]	; (80032dc <HAL_DMA_Start_IT+0x204>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d036      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a60      	ldr	r2, [pc, #384]	; (80032e0 <HAL_DMA_Start_IT+0x208>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d031      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5f      	ldr	r2, [pc, #380]	; (80032e4 <HAL_DMA_Start_IT+0x20c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d02c      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5d      	ldr	r2, [pc, #372]	; (80032e8 <HAL_DMA_Start_IT+0x210>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d027      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5c      	ldr	r2, [pc, #368]	; (80032ec <HAL_DMA_Start_IT+0x214>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_DMA_Start_IT+0x218>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01d      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <HAL_DMA_Start_IT+0x21c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_DMA_Start_IT+0x220>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_DMA_Start_IT+0x224>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a54      	ldr	r2, [pc, #336]	; (8003300 <HAL_DMA_Start_IT+0x228>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_DMA_Start_IT+0x22c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_Start_IT+0xee>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a51      	ldr	r2, [pc, #324]	; (8003308 <HAL_DMA_Start_IT+0x230>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <HAL_DMA_Start_IT+0x100>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e007      	b.n	80031e8 <HAL_DMA_Start_IT+0x110>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f001 f93e 	bl	8004470 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_DMA_Start_IT+0x1f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04a      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <HAL_DMA_Start_IT+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d045      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <HAL_DMA_Start_IT+0x1fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <HAL_DMA_Start_IT+0x200>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d03b      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <HAL_DMA_Start_IT+0x204>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d036      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_DMA_Start_IT+0x208>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <HAL_DMA_Start_IT+0x20c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <HAL_DMA_Start_IT+0x210>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d027      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_DMA_Start_IT+0x214>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_DMA_Start_IT+0x218>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01d      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_DMA_Start_IT+0x21c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_DMA_Start_IT+0x220>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_DMA_Start_IT+0x224>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_DMA_Start_IT+0x228>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_DMA_Start_IT+0x22c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Start_IT+0x1bc>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_DMA_Start_IT+0x230>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_DMA_Start_IT+0x1c0>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_DMA_Start_IT+0x1c2>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 021e 	bic.w	r2, r3, #30
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0216 	orr.w	r2, r2, #22
 80032b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03e      	beq.n	8003338 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0208 	orr.w	r2, r2, #8
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e035      	b.n	8003338 <HAL_DMA_Start_IT+0x260>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 020e 	bic.w	r2, r3, #14
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 020a 	orr.w	r2, r2, #10
 800331e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0204 	orr.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a83      	ldr	r2, [pc, #524]	; (800354c <HAL_DMA_Start_IT+0x474>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d072      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a82      	ldr	r2, [pc, #520]	; (8003550 <HAL_DMA_Start_IT+0x478>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d06d      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a80      	ldr	r2, [pc, #512]	; (8003554 <HAL_DMA_Start_IT+0x47c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d068      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7f      	ldr	r2, [pc, #508]	; (8003558 <HAL_DMA_Start_IT+0x480>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d063      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7d      	ldr	r2, [pc, #500]	; (800355c <HAL_DMA_Start_IT+0x484>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d05e      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7c      	ldr	r2, [pc, #496]	; (8003560 <HAL_DMA_Start_IT+0x488>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d059      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <HAL_DMA_Start_IT+0x48c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d054      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a79      	ldr	r2, [pc, #484]	; (8003568 <HAL_DMA_Start_IT+0x490>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04f      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a77      	ldr	r2, [pc, #476]	; (800356c <HAL_DMA_Start_IT+0x494>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a76      	ldr	r2, [pc, #472]	; (8003570 <HAL_DMA_Start_IT+0x498>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a74      	ldr	r2, [pc, #464]	; (8003574 <HAL_DMA_Start_IT+0x49c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a73      	ldr	r2, [pc, #460]	; (8003578 <HAL_DMA_Start_IT+0x4a0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a71      	ldr	r2, [pc, #452]	; (800357c <HAL_DMA_Start_IT+0x4a4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a70      	ldr	r2, [pc, #448]	; (8003580 <HAL_DMA_Start_IT+0x4a8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_DMA_Start_IT+0x4ac>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6d      	ldr	r2, [pc, #436]	; (8003588 <HAL_DMA_Start_IT+0x4b0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_DMA_Start_IT+0x4b4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6a      	ldr	r2, [pc, #424]	; (8003590 <HAL_DMA_Start_IT+0x4b8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_DMA_Start_IT+0x4bc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <HAL_DMA_Start_IT+0x4c0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_DMA_Start_IT+0x4c4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <HAL_DMA_Start_IT+0x4c8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a62      	ldr	r2, [pc, #392]	; (80035a4 <HAL_DMA_Start_IT+0x4cc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Start_IT+0x350>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <HAL_DMA_Start_IT+0x4d0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_DMA_Start_IT+0x354>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_DMA_Start_IT+0x356>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01a      	beq.n	8003468 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003466:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a37      	ldr	r2, [pc, #220]	; (800354c <HAL_DMA_Start_IT+0x474>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d04a      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a36      	ldr	r2, [pc, #216]	; (8003550 <HAL_DMA_Start_IT+0x478>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d045      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a34      	ldr	r2, [pc, #208]	; (8003554 <HAL_DMA_Start_IT+0x47c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d040      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a33      	ldr	r2, [pc, #204]	; (8003558 <HAL_DMA_Start_IT+0x480>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d03b      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a31      	ldr	r2, [pc, #196]	; (800355c <HAL_DMA_Start_IT+0x484>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d036      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_DMA_Start_IT+0x488>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d031      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2e      	ldr	r2, [pc, #184]	; (8003564 <HAL_DMA_Start_IT+0x48c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02c      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <HAL_DMA_Start_IT+0x490>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d027      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2b      	ldr	r2, [pc, #172]	; (800356c <HAL_DMA_Start_IT+0x494>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d022      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_DMA_Start_IT+0x498>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d01d      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a28      	ldr	r2, [pc, #160]	; (8003574 <HAL_DMA_Start_IT+0x49c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a27      	ldr	r2, [pc, #156]	; (8003578 <HAL_DMA_Start_IT+0x4a0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <HAL_DMA_Start_IT+0x4a4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_DMA_Start_IT+0x4a8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_DMA_Start_IT+0x4ac>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_DMA_Start_IT+0x430>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_DMA_Start_IT+0x4b0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <HAL_DMA_Start_IT+0x442>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e012      	b.n	8003540 <HAL_DMA_Start_IT+0x468>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e009      	b.n	8003540 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003532:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	58025408 	.word	0x58025408
 8003590:	5802541c 	.word	0x5802541c
 8003594:	58025430 	.word	0x58025430
 8003598:	58025444 	.word	0x58025444
 800359c:	58025458 	.word	0x58025458
 80035a0:	5802546c 	.word	0x5802546c
 80035a4:	58025480 	.word	0x58025480
 80035a8:	58025494 	.word	0x58025494

080035ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035b8:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_DMA_IRQHandler+0x1ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_DMA_IRQHandler+0x1b0>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a9b      	lsrs	r3, r3, #10
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5f      	ldr	r2, [pc, #380]	; (8003760 <HAL_DMA_IRQHandler+0x1b4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04a      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <HAL_DMA_IRQHandler+0x1b8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d045      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <HAL_DMA_IRQHandler+0x1bc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d040      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5a      	ldr	r2, [pc, #360]	; (800376c <HAL_DMA_IRQHandler+0x1c0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d03b      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a59      	ldr	r2, [pc, #356]	; (8003770 <HAL_DMA_IRQHandler+0x1c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d036      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a57      	ldr	r2, [pc, #348]	; (8003774 <HAL_DMA_IRQHandler+0x1c8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d031      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a56      	ldr	r2, [pc, #344]	; (8003778 <HAL_DMA_IRQHandler+0x1cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d02c      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_DMA_IRQHandler+0x1d0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d027      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_DMA_IRQHandler+0x1d4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_DMA_IRQHandler+0x1d8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01d      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_DMA_IRQHandler+0x1dc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4e      	ldr	r2, [pc, #312]	; (800378c <HAL_DMA_IRQHandler+0x1e0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4d      	ldr	r2, [pc, #308]	; (8003790 <HAL_DMA_IRQHandler+0x1e4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4b      	ldr	r2, [pc, #300]	; (8003794 <HAL_DMA_IRQHandler+0x1e8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4a      	ldr	r2, [pc, #296]	; (8003798 <HAL_DMA_IRQHandler+0x1ec>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_DMA_IRQHandler+0xd2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a48      	ldr	r2, [pc, #288]	; (800379c <HAL_DMA_IRQHandler+0x1f0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_DMA_IRQHandler+0xd6>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_DMA_IRQHandler+0xd8>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 842b 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80a2 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <HAL_DMA_IRQHandler+0x1b4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d04a      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <HAL_DMA_IRQHandler+0x1b8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d045      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_DMA_IRQHandler+0x1bc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d040      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2a      	ldr	r2, [pc, #168]	; (800376c <HAL_DMA_IRQHandler+0x1c0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d03b      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a28      	ldr	r2, [pc, #160]	; (8003770 <HAL_DMA_IRQHandler+0x1c4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d036      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_DMA_IRQHandler+0x1c8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d031      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_DMA_IRQHandler+0x1cc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02c      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a24      	ldr	r2, [pc, #144]	; (800377c <HAL_DMA_IRQHandler+0x1d0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d027      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_DMA_IRQHandler+0x1d4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_DMA_IRQHandler+0x1d8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d01d      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_DMA_IRQHandler+0x1dc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_DMA_IRQHandler+0x1e0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_DMA_IRQHandler+0x1e4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_DMA_IRQHandler+0x1e8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_DMA_IRQHandler+0x1ec>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_DMA_IRQHandler+0x194>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_DMA_IRQHandler+0x1f0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d12f      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x1f4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e02e      	b.n	80037b4 <HAL_DMA_IRQHandler+0x208>
 8003756:	bf00      	nop
 8003758:	24000000 	.word	0x24000000
 800375c:	1b4e81b5 	.word	0x1b4e81b5
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2208      	movs	r2, #8
 80037d2:	409a      	lsls	r2, r3
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d06e      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <HAL_DMA_IRQHandler+0x3f8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_DMA_IRQHandler+0x3fc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a66      	ldr	r2, [pc, #408]	; (80039ac <HAL_DMA_IRQHandler+0x400>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a64      	ldr	r2, [pc, #400]	; (80039b0 <HAL_DMA_IRQHandler+0x404>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_DMA_IRQHandler+0x408>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a61      	ldr	r2, [pc, #388]	; (80039b8 <HAL_DMA_IRQHandler+0x40c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a60      	ldr	r2, [pc, #384]	; (80039bc <HAL_DMA_IRQHandler+0x410>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_DMA_IRQHandler+0x414>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5d      	ldr	r2, [pc, #372]	; (80039c4 <HAL_DMA_IRQHandler+0x418>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5b      	ldr	r2, [pc, #364]	; (80039c8 <HAL_DMA_IRQHandler+0x41c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_DMA_IRQHandler+0x420>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_DMA_IRQHandler+0x424>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a57      	ldr	r2, [pc, #348]	; (80039d4 <HAL_DMA_IRQHandler+0x428>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a55      	ldr	r2, [pc, #340]	; (80039d8 <HAL_DMA_IRQHandler+0x42c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a54      	ldr	r2, [pc, #336]	; (80039dc <HAL_DMA_IRQHandler+0x430>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_IRQHandler+0x2ee>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_DMA_IRQHandler+0x434>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10a      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x304>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e003      	b.n	80038b8 <HAL_DMA_IRQHandler+0x30c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0202 	orr.w	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2204      	movs	r2, #4
 80038e2:	409a      	lsls	r2, r3
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 808f 	beq.w	8003a0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <HAL_DMA_IRQHandler+0x3f8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d04a      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_DMA_IRQHandler+0x3fc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d045      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a29      	ldr	r2, [pc, #164]	; (80039ac <HAL_DMA_IRQHandler+0x400>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d040      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <HAL_DMA_IRQHandler+0x404>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d03b      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_DMA_IRQHandler+0x408>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d036      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_DMA_IRQHandler+0x40c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d031      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_DMA_IRQHandler+0x410>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d02c      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <HAL_DMA_IRQHandler+0x414>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d027      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_IRQHandler+0x418>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d022      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_DMA_IRQHandler+0x41c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01d      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_DMA_IRQHandler+0x420>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d018      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_DMA_IRQHandler+0x424>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_DMA_IRQHandler+0x428>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_DMA_IRQHandler+0x42c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_DMA_IRQHandler+0x430>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_DMA_IRQHandler+0x3e2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <HAL_DMA_IRQHandler+0x434>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12a      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x438>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e023      	b.n	80039ec <HAL_DMA_IRQHandler+0x440>
 80039a4:	40020010 	.word	0x40020010
 80039a8:	40020028 	.word	0x40020028
 80039ac:	40020040 	.word	0x40020040
 80039b0:	40020058 	.word	0x40020058
 80039b4:	40020070 	.word	0x40020070
 80039b8:	40020088 	.word	0x40020088
 80039bc:	400200a0 	.word	0x400200a0
 80039c0:	400200b8 	.word	0x400200b8
 80039c4:	40020410 	.word	0x40020410
 80039c8:	40020428 	.word	0x40020428
 80039cc:	40020440 	.word	0x40020440
 80039d0:	40020458 	.word	0x40020458
 80039d4:	40020470 	.word	0x40020470
 80039d8:	40020488 	.word	0x40020488
 80039dc:	400204a0 	.word	0x400204a0
 80039e0:	400204b8 	.word	0x400204b8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2204      	movs	r2, #4
 80039fa:	409a      	lsls	r2, r3
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0204 	orr.w	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2210      	movs	r2, #16
 8003a16:	409a      	lsls	r2, r3
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a6 	beq.w	8003b6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a85      	ldr	r2, [pc, #532]	; (8003c3c <HAL_DMA_IRQHandler+0x690>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d04a      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a83      	ldr	r2, [pc, #524]	; (8003c40 <HAL_DMA_IRQHandler+0x694>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d045      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a82      	ldr	r2, [pc, #520]	; (8003c44 <HAL_DMA_IRQHandler+0x698>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d040      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_DMA_IRQHandler+0x69c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d03b      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <HAL_DMA_IRQHandler+0x6a0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d036      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7d      	ldr	r2, [pc, #500]	; (8003c50 <HAL_DMA_IRQHandler+0x6a4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d031      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_DMA_IRQHandler+0x6a8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d02c      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <HAL_DMA_IRQHandler+0x6ac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d027      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <HAL_DMA_IRQHandler+0x6b0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <HAL_DMA_IRQHandler+0x6b4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01d      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <HAL_DMA_IRQHandler+0x6b8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a74      	ldr	r2, [pc, #464]	; (8003c68 <HAL_DMA_IRQHandler+0x6bc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_DMA_IRQHandler+0x6c0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a71      	ldr	r2, [pc, #452]	; (8003c70 <HAL_DMA_IRQHandler+0x6c4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_DMA_IRQHandler+0x6c8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x516>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_DMA_IRQHandler+0x6cc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x52c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e009      	b.n	8003aec <HAL_DMA_IRQHandler+0x540>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d03e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2210      	movs	r2, #16
 8003afa:	409a      	lsls	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d024      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
 8003b2c:	e01f      	b.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e016      	b.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d107      	bne.n	8003b5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2220      	movs	r2, #32
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8110 	beq.w	8003da4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2c      	ldr	r2, [pc, #176]	; (8003c3c <HAL_DMA_IRQHandler+0x690>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d04a      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_DMA_IRQHandler+0x694>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d045      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <HAL_DMA_IRQHandler+0x698>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d040      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <HAL_DMA_IRQHandler+0x69c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d03b      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <HAL_DMA_IRQHandler+0x6a0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d036      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <HAL_DMA_IRQHandler+0x6a4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d031      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <HAL_DMA_IRQHandler+0x6a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d02c      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_DMA_IRQHandler+0x6ac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d027      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_DMA_IRQHandler+0x6b0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d022      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_DMA_IRQHandler+0x6b4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d01d      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_DMA_IRQHandler+0x6b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d018      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_DMA_IRQHandler+0x6bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_DMA_IRQHandler+0x6c0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_DMA_IRQHandler+0x6c4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_DMA_IRQHandler+0x6c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x678>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_DMA_IRQHandler+0x6cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d12b      	bne.n	8003c7c <HAL_DMA_IRQHandler+0x6d0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e02a      	b.n	8003c90 <HAL_DMA_IRQHandler+0x6e4>
 8003c3a:	bf00      	nop
 8003c3c:	40020010 	.word	0x40020010
 8003c40:	40020028 	.word	0x40020028
 8003c44:	40020040 	.word	0x40020040
 8003c48:	40020058 	.word	0x40020058
 8003c4c:	40020070 	.word	0x40020070
 8003c50:	40020088 	.word	0x40020088
 8003c54:	400200a0 	.word	0x400200a0
 8003c58:	400200b8 	.word	0x400200b8
 8003c5c:	40020410 	.word	0x40020410
 8003c60:	40020428 	.word	0x40020428
 8003c64:	40020440 	.word	0x40020440
 8003c68:	40020458 	.word	0x40020458
 8003c6c:	40020470 	.word	0x40020470
 8003c70:	40020488 	.word	0x40020488
 8003c74:	400204a0 	.word	0x400204a0
 8003c78:	400204b8 	.word	0x400204b8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8087 	beq.w	8003da4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d139      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0216 	bic.w	r2, r2, #22
 8003cc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x736>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0208 	bic.w	r2, r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	223f      	movs	r2, #63	; 0x3f
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8382 	beq.w	8004420 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
          }
          return;
 8003d24:	e37c      	b.n	8004420 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d108      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02c      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
 8003d52:	e027      	b.n	8003da4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d023      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e01e      	b.n	8003da4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0210 	bic.w	r2, r2, #16
 8003d82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 833e 	beq.w	800442a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8088 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a89      	ldr	r2, [pc, #548]	; (8003ff0 <HAL_DMA_IRQHandler+0xa44>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d04a      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a88      	ldr	r2, [pc, #544]	; (8003ff4 <HAL_DMA_IRQHandler+0xa48>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d045      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a86      	ldr	r2, [pc, #536]	; (8003ff8 <HAL_DMA_IRQHandler+0xa4c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d040      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a85      	ldr	r2, [pc, #532]	; (8003ffc <HAL_DMA_IRQHandler+0xa50>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d03b      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a83      	ldr	r2, [pc, #524]	; (8004000 <HAL_DMA_IRQHandler+0xa54>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d036      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a82      	ldr	r2, [pc, #520]	; (8004004 <HAL_DMA_IRQHandler+0xa58>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d031      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a80      	ldr	r2, [pc, #512]	; (8004008 <HAL_DMA_IRQHandler+0xa5c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02c      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7f      	ldr	r2, [pc, #508]	; (800400c <HAL_DMA_IRQHandler+0xa60>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d027      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7d      	ldr	r2, [pc, #500]	; (8004010 <HAL_DMA_IRQHandler+0xa64>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7c      	ldr	r2, [pc, #496]	; (8004014 <HAL_DMA_IRQHandler+0xa68>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a7a      	ldr	r2, [pc, #488]	; (8004018 <HAL_DMA_IRQHandler+0xa6c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a79      	ldr	r2, [pc, #484]	; (800401c <HAL_DMA_IRQHandler+0xa70>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a77      	ldr	r2, [pc, #476]	; (8004020 <HAL_DMA_IRQHandler+0xa74>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a76      	ldr	r2, [pc, #472]	; (8004024 <HAL_DMA_IRQHandler+0xa78>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a74      	ldr	r2, [pc, #464]	; (8004028 <HAL_DMA_IRQHandler+0xa7c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x8b8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a73      	ldr	r2, [pc, #460]	; (800402c <HAL_DMA_IRQHandler+0xa80>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <HAL_DMA_IRQHandler+0x8ca>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e007      	b.n	8003e86 <HAL_DMA_IRQHandler+0x8da>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d307      	bcc.n	8003ea2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f2      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x8da>
 8003ea0:	e000      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ea2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003eba:	e003      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 82aa 	beq.w	800442a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e2a4      	b.n	800442a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_DMA_IRQHandler+0xa84>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a51      	ldr	r2, [pc, #324]	; (8004034 <HAL_DMA_IRQHandler+0xa88>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d045      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <HAL_DMA_IRQHandler+0xa8c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d040      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4e      	ldr	r2, [pc, #312]	; (800403c <HAL_DMA_IRQHandler+0xa90>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d03b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4c      	ldr	r2, [pc, #304]	; (8004040 <HAL_DMA_IRQHandler+0xa94>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d036      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4b      	ldr	r2, [pc, #300]	; (8004044 <HAL_DMA_IRQHandler+0xa98>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d031      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a49      	ldr	r2, [pc, #292]	; (8004048 <HAL_DMA_IRQHandler+0xa9c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d02c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a48      	ldr	r2, [pc, #288]	; (800404c <HAL_DMA_IRQHandler+0xaa0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d027      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a46      	ldr	r2, [pc, #280]	; (8004050 <HAL_DMA_IRQHandler+0xaa4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d022      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a45      	ldr	r2, [pc, #276]	; (8004054 <HAL_DMA_IRQHandler+0xaa8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01d      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a43      	ldr	r2, [pc, #268]	; (8004058 <HAL_DMA_IRQHandler+0xaac>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d018      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a42      	ldr	r2, [pc, #264]	; (800405c <HAL_DMA_IRQHandler+0xab0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a40      	ldr	r2, [pc, #256]	; (8004060 <HAL_DMA_IRQHandler+0xab4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <HAL_DMA_IRQHandler+0xab8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <HAL_DMA_IRQHandler+0xabc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x9d4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <HAL_DMA_IRQHandler+0xac0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x9d8>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_DMA_IRQHandler+0x9da>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 824f 	beq.w	800442a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80dd 	beq.w	8004164 <HAL_DMA_IRQHandler+0xbb8>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80d7 	beq.w	8004164 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d059      	beq.n	8004084 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d14a      	bne.n	8004070 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8220 	beq.w	8004424 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fec:	e21a      	b.n	8004424 <HAL_DMA_IRQHandler+0xe78>
 8003fee:	bf00      	nop
 8003ff0:	40020010 	.word	0x40020010
 8003ff4:	40020028 	.word	0x40020028
 8003ff8:	40020040 	.word	0x40020040
 8003ffc:	40020058 	.word	0x40020058
 8004000:	40020070 	.word	0x40020070
 8004004:	40020088 	.word	0x40020088
 8004008:	400200a0 	.word	0x400200a0
 800400c:	400200b8 	.word	0x400200b8
 8004010:	40020410 	.word	0x40020410
 8004014:	40020428 	.word	0x40020428
 8004018:	40020440 	.word	0x40020440
 800401c:	40020458 	.word	0x40020458
 8004020:	40020470 	.word	0x40020470
 8004024:	40020488 	.word	0x40020488
 8004028:	400204a0 	.word	0x400204a0
 800402c:	400204b8 	.word	0x400204b8
 8004030:	48022c08 	.word	0x48022c08
 8004034:	48022c1c 	.word	0x48022c1c
 8004038:	48022c30 	.word	0x48022c30
 800403c:	48022c44 	.word	0x48022c44
 8004040:	48022c58 	.word	0x48022c58
 8004044:	48022c6c 	.word	0x48022c6c
 8004048:	48022c80 	.word	0x48022c80
 800404c:	48022c94 	.word	0x48022c94
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 81d5 	beq.w	8004424 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004082:	e1cf      	b.n	8004424 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d160      	bne.n	8004150 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7f      	ldr	r2, [pc, #508]	; (8004290 <HAL_DMA_IRQHandler+0xce4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d04a      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a7d      	ldr	r2, [pc, #500]	; (8004294 <HAL_DMA_IRQHandler+0xce8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d045      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7c      	ldr	r2, [pc, #496]	; (8004298 <HAL_DMA_IRQHandler+0xcec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d040      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7a      	ldr	r2, [pc, #488]	; (800429c <HAL_DMA_IRQHandler+0xcf0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03b      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a79      	ldr	r2, [pc, #484]	; (80042a0 <HAL_DMA_IRQHandler+0xcf4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d036      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a77      	ldr	r2, [pc, #476]	; (80042a4 <HAL_DMA_IRQHandler+0xcf8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d031      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <HAL_DMA_IRQHandler+0xcfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d02c      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	; (80042ac <HAL_DMA_IRQHandler+0xd00>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	; (80042b0 <HAL_DMA_IRQHandler+0xd04>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a71      	ldr	r2, [pc, #452]	; (80042b4 <HAL_DMA_IRQHandler+0xd08>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a70      	ldr	r2, [pc, #448]	; (80042b8 <HAL_DMA_IRQHandler+0xd0c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	; (80042bc <HAL_DMA_IRQHandler+0xd10>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6d      	ldr	r2, [pc, #436]	; (80042c0 <HAL_DMA_IRQHandler+0xd14>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6b      	ldr	r2, [pc, #428]	; (80042c4 <HAL_DMA_IRQHandler+0xd18>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_DMA_IRQHandler+0xd1c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_DMA_IRQHandler+0xb82>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a68      	ldr	r2, [pc, #416]	; (80042cc <HAL_DMA_IRQHandler+0xd20>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d108      	bne.n	8004140 <HAL_DMA_IRQHandler+0xb94>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0208 	bic.w	r2, r2, #8
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e007      	b.n	8004150 <HAL_DMA_IRQHandler+0xba4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0204 	bic.w	r2, r2, #4
 800414e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8165 	beq.w	8004424 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004162:	e15f      	b.n	8004424 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2202      	movs	r2, #2
 800416e:	409a      	lsls	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80c5 	beq.w	8004304 <HAL_DMA_IRQHandler+0xd58>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80bf 	beq.w	8004304 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2202      	movs	r2, #2
 8004190:	409a      	lsls	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 813a 	beq.w	8004428 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041bc:	e134      	b.n	8004428 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8130 	beq.w	8004428 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d0:	e12a      	b.n	8004428 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 8089 	bne.w	80042f0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <HAL_DMA_IRQHandler+0xce4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d04a      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <HAL_DMA_IRQHandler+0xce8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d045      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <HAL_DMA_IRQHandler+0xcec>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d040      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_DMA_IRQHandler+0xcf0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d03b      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <HAL_DMA_IRQHandler+0xcf4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d036      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_DMA_IRQHandler+0xcf8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d031      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <HAL_DMA_IRQHandler+0xcfc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d02c      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a20      	ldr	r2, [pc, #128]	; (80042ac <HAL_DMA_IRQHandler+0xd00>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d027      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_DMA_IRQHandler+0xd04>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_DMA_IRQHandler+0xd08>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <HAL_DMA_IRQHandler+0xd0c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_DMA_IRQHandler+0xd10>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_DMA_IRQHandler+0xd14>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_DMA_IRQHandler+0xd18>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_DMA_IRQHandler+0xd1c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_DMA_IRQHandler+0xcd2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_DMA_IRQHandler+0xd20>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d128      	bne.n	80042d0 <HAL_DMA_IRQHandler+0xd24>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0214 	bic.w	r2, r2, #20
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e027      	b.n	80042e0 <HAL_DMA_IRQHandler+0xd34>
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020a 	bic.w	r2, r2, #10
 80042de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8097 	beq.w	8004428 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004302:	e091      	b.n	8004428 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2208      	movs	r2, #8
 800430e:	409a      	lsls	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8088 	beq.w	800442a <HAL_DMA_IRQHandler+0xe7e>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8082 	beq.w	800442a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a41      	ldr	r2, [pc, #260]	; (8004430 <HAL_DMA_IRQHandler+0xe84>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04a      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3f      	ldr	r2, [pc, #252]	; (8004434 <HAL_DMA_IRQHandler+0xe88>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d045      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <HAL_DMA_IRQHandler+0xe8c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d040      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_DMA_IRQHandler+0xe90>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d03b      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_DMA_IRQHandler+0xe94>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d036      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a39      	ldr	r2, [pc, #228]	; (8004444 <HAL_DMA_IRQHandler+0xe98>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d031      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <HAL_DMA_IRQHandler+0xe9c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d02c      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a36      	ldr	r2, [pc, #216]	; (800444c <HAL_DMA_IRQHandler+0xea0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d027      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a35      	ldr	r2, [pc, #212]	; (8004450 <HAL_DMA_IRQHandler+0xea4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a33      	ldr	r2, [pc, #204]	; (8004454 <HAL_DMA_IRQHandler+0xea8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01d      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a32      	ldr	r2, [pc, #200]	; (8004458 <HAL_DMA_IRQHandler+0xeac>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a30      	ldr	r2, [pc, #192]	; (800445c <HAL_DMA_IRQHandler+0xeb0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <HAL_DMA_IRQHandler+0xeb4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2d      	ldr	r2, [pc, #180]	; (8004464 <HAL_DMA_IRQHandler+0xeb8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <HAL_DMA_IRQHandler+0xebc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xe1a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2a      	ldr	r2, [pc, #168]	; (800446c <HAL_DMA_IRQHandler+0xec0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <HAL_DMA_IRQHandler+0xe2c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 021c 	bic.w	r2, r2, #28
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_DMA_IRQHandler+0xe3c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 020e 	bic.w	r2, r2, #14
 80043e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
 800441e:	e004      	b.n	800442a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004420:	bf00      	nop
 8004422:	e002      	b.n	800442a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004428:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40020010 	.word	0x40020010
 8004434:	40020028 	.word	0x40020028
 8004438:	40020040 	.word	0x40020040
 800443c:	40020058 	.word	0x40020058
 8004440:	40020070 	.word	0x40020070
 8004444:	40020088 	.word	0x40020088
 8004448:	400200a0 	.word	0x400200a0
 800444c:	400200b8 	.word	0x400200b8
 8004450:	40020410 	.word	0x40020410
 8004454:	40020428 	.word	0x40020428
 8004458:	40020440 	.word	0x40020440
 800445c:	40020458 	.word	0x40020458
 8004460:	40020470 	.word	0x40020470
 8004464:	40020488 	.word	0x40020488
 8004468:	400204a0 	.word	0x400204a0
 800446c:	400204b8 	.word	0x400204b8

08004470 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7f      	ldr	r2, [pc, #508]	; (800468c <DMA_SetConfig+0x21c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d072      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a7d      	ldr	r2, [pc, #500]	; (8004690 <DMA_SetConfig+0x220>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d06d      	beq.n	800457a <DMA_SetConfig+0x10a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <DMA_SetConfig+0x224>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d068      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7a      	ldr	r2, [pc, #488]	; (8004698 <DMA_SetConfig+0x228>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d063      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a79      	ldr	r2, [pc, #484]	; (800469c <DMA_SetConfig+0x22c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d05e      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a77      	ldr	r2, [pc, #476]	; (80046a0 <DMA_SetConfig+0x230>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d059      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a76      	ldr	r2, [pc, #472]	; (80046a4 <DMA_SetConfig+0x234>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d054      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	; (80046a8 <DMA_SetConfig+0x238>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d04f      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	; (80046ac <DMA_SetConfig+0x23c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04a      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a71      	ldr	r2, [pc, #452]	; (80046b0 <DMA_SetConfig+0x240>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d045      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a70      	ldr	r2, [pc, #448]	; (80046b4 <DMA_SetConfig+0x244>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d040      	beq.n	800457a <DMA_SetConfig+0x10a>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <DMA_SetConfig+0x248>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d03b      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	; (80046bc <DMA_SetConfig+0x24c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d036      	beq.n	800457a <DMA_SetConfig+0x10a>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	; (80046c0 <DMA_SetConfig+0x250>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d031      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6a      	ldr	r2, [pc, #424]	; (80046c4 <DMA_SetConfig+0x254>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	; (80046c8 <DMA_SetConfig+0x258>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d027      	beq.n	800457a <DMA_SetConfig+0x10a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a67      	ldr	r2, [pc, #412]	; (80046cc <DMA_SetConfig+0x25c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <DMA_SetConfig+0x260>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <DMA_SetConfig+0x10a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a64      	ldr	r2, [pc, #400]	; (80046d4 <DMA_SetConfig+0x264>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a62      	ldr	r2, [pc, #392]	; (80046d8 <DMA_SetConfig+0x268>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a61      	ldr	r2, [pc, #388]	; (80046dc <DMA_SetConfig+0x26c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <DMA_SetConfig+0x10a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5f      	ldr	r2, [pc, #380]	; (80046e0 <DMA_SetConfig+0x270>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5e      	ldr	r2, [pc, #376]	; (80046e4 <DMA_SetConfig+0x274>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <DMA_SetConfig+0x10a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5c      	ldr	r2, [pc, #368]	; (80046e8 <DMA_SetConfig+0x278>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <DMA_SetConfig+0x10e>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <DMA_SetConfig+0x110>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800458c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800459e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a39      	ldr	r2, [pc, #228]	; (800468c <DMA_SetConfig+0x21c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d04a      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a38      	ldr	r2, [pc, #224]	; (8004690 <DMA_SetConfig+0x220>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d045      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a36      	ldr	r2, [pc, #216]	; (8004694 <DMA_SetConfig+0x224>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d040      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a35      	ldr	r2, [pc, #212]	; (8004698 <DMA_SetConfig+0x228>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d03b      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a33      	ldr	r2, [pc, #204]	; (800469c <DMA_SetConfig+0x22c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a32      	ldr	r2, [pc, #200]	; (80046a0 <DMA_SetConfig+0x230>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d031      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a30      	ldr	r2, [pc, #192]	; (80046a4 <DMA_SetConfig+0x234>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d02c      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <DMA_SetConfig+0x238>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	; (80046ac <DMA_SetConfig+0x23c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <DMA_SetConfig+0x240>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <DMA_SetConfig+0x244>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <DMA_SetConfig+0x248>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a27      	ldr	r2, [pc, #156]	; (80046bc <DMA_SetConfig+0x24c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <DMA_SetConfig+0x250>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <DMA_SetConfig+0x254>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <DMA_SetConfig+0x1d0>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <DMA_SetConfig+0x258>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <DMA_SetConfig+0x1d4>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <DMA_SetConfig+0x1d6>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d059      	beq.n	80046fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	223f      	movs	r2, #63	; 0x3f
 8004654:	409a      	lsls	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004668:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d138      	bne.n	80046ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800468a:	e0ae      	b.n	80047ea <DMA_SetConfig+0x37a>
 800468c:	40020010 	.word	0x40020010
 8004690:	40020028 	.word	0x40020028
 8004694:	40020040 	.word	0x40020040
 8004698:	40020058 	.word	0x40020058
 800469c:	40020070 	.word	0x40020070
 80046a0:	40020088 	.word	0x40020088
 80046a4:	400200a0 	.word	0x400200a0
 80046a8:	400200b8 	.word	0x400200b8
 80046ac:	40020410 	.word	0x40020410
 80046b0:	40020428 	.word	0x40020428
 80046b4:	40020440 	.word	0x40020440
 80046b8:	40020458 	.word	0x40020458
 80046bc:	40020470 	.word	0x40020470
 80046c0:	40020488 	.word	0x40020488
 80046c4:	400204a0 	.word	0x400204a0
 80046c8:	400204b8 	.word	0x400204b8
 80046cc:	58025408 	.word	0x58025408
 80046d0:	5802541c 	.word	0x5802541c
 80046d4:	58025430 	.word	0x58025430
 80046d8:	58025444 	.word	0x58025444
 80046dc:	58025458 	.word	0x58025458
 80046e0:	5802546c 	.word	0x5802546c
 80046e4:	58025480 	.word	0x58025480
 80046e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
}
 80046fc:	e075      	b.n	80047ea <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <DMA_SetConfig+0x388>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04a      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <DMA_SetConfig+0x38c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d045      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <DMA_SetConfig+0x390>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d040      	beq.n	800479e <DMA_SetConfig+0x32e>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a38      	ldr	r2, [pc, #224]	; (8004804 <DMA_SetConfig+0x394>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d03b      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a37      	ldr	r2, [pc, #220]	; (8004808 <DMA_SetConfig+0x398>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d036      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a35      	ldr	r2, [pc, #212]	; (800480c <DMA_SetConfig+0x39c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d031      	beq.n	800479e <DMA_SetConfig+0x32e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <DMA_SetConfig+0x3a0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d02c      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a32      	ldr	r2, [pc, #200]	; (8004814 <DMA_SetConfig+0x3a4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d027      	beq.n	800479e <DMA_SetConfig+0x32e>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a31      	ldr	r2, [pc, #196]	; (8004818 <DMA_SetConfig+0x3a8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <DMA_SetConfig+0x3ac>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01d      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <DMA_SetConfig+0x3b0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <DMA_SetConfig+0x32e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <DMA_SetConfig+0x3b4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <DMA_SetConfig+0x3b8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <DMA_SetConfig+0x3bc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <DMA_SetConfig+0x32e>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	; (8004830 <DMA_SetConfig+0x3c0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <DMA_SetConfig+0x32e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a26      	ldr	r2, [pc, #152]	; (8004834 <DMA_SetConfig+0x3c4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <DMA_SetConfig+0x332>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <DMA_SetConfig+0x334>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d108      	bne.n	80047da <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	60da      	str	r2, [r3, #12]
}
 80047d8:	e007      	b.n	80047ea <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	48022c08 	.word	0x48022c08
 80047fc:	48022c1c 	.word	0x48022c1c
 8004800:	48022c30 	.word	0x48022c30
 8004804:	48022c44 	.word	0x48022c44
 8004808:	48022c58 	.word	0x48022c58
 800480c:	48022c6c 	.word	0x48022c6c
 8004810:	48022c80 	.word	0x48022c80
 8004814:	48022c94 	.word	0x48022c94
 8004818:	58025408 	.word	0x58025408
 800481c:	5802541c 	.word	0x5802541c
 8004820:	58025430 	.word	0x58025430
 8004824:	58025444 	.word	0x58025444
 8004828:	58025458 	.word	0x58025458
 800482c:	5802546c 	.word	0x5802546c
 8004830:	58025480 	.word	0x58025480
 8004834:	58025494 	.word	0x58025494

08004838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a42      	ldr	r2, [pc, #264]	; (8004950 <DMA_CalcBaseAndBitshift+0x118>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d04a      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <DMA_CalcBaseAndBitshift+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d045      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <DMA_CalcBaseAndBitshift+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d040      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3e      	ldr	r2, [pc, #248]	; (800495c <DMA_CalcBaseAndBitshift+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d03b      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <DMA_CalcBaseAndBitshift+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d036      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <DMA_CalcBaseAndBitshift+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d031      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a39      	ldr	r2, [pc, #228]	; (8004968 <DMA_CalcBaseAndBitshift+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02c      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a38      	ldr	r2, [pc, #224]	; (800496c <DMA_CalcBaseAndBitshift+0x134>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d027      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a36      	ldr	r2, [pc, #216]	; (8004970 <DMA_CalcBaseAndBitshift+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d022      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a35      	ldr	r2, [pc, #212]	; (8004974 <DMA_CalcBaseAndBitshift+0x13c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d01d      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a33      	ldr	r2, [pc, #204]	; (8004978 <DMA_CalcBaseAndBitshift+0x140>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a32      	ldr	r2, [pc, #200]	; (800497c <DMA_CalcBaseAndBitshift+0x144>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <DMA_CalcBaseAndBitshift+0x148>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <DMA_CalcBaseAndBitshift+0x14c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <DMA_CalcBaseAndBitshift+0x150>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xa8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2c      	ldr	r2, [pc, #176]	; (800498c <DMA_CalcBaseAndBitshift+0x154>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <DMA_CalcBaseAndBitshift+0xac>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <DMA_CalcBaseAndBitshift+0xae>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3b10      	subs	r3, #16
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <DMA_CalcBaseAndBitshift+0x158>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <DMA_CalcBaseAndBitshift+0x15c>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d908      	bls.n	8004924 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <DMA_CalcBaseAndBitshift+0x160>)
 800491a:	4013      	ands	r3, r2
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	659a      	str	r2, [r3, #88]	; 0x58
 8004922:	e00d      	b.n	8004940 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <DMA_CalcBaseAndBitshift+0x160>)
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6593      	str	r3, [r2, #88]	; 0x58
 8004932:	e005      	b.n	8004940 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40020010 	.word	0x40020010
 8004954:	40020028 	.word	0x40020028
 8004958:	40020040 	.word	0x40020040
 800495c:	40020058 	.word	0x40020058
 8004960:	40020070 	.word	0x40020070
 8004964:	40020088 	.word	0x40020088
 8004968:	400200a0 	.word	0x400200a0
 800496c:	400200b8 	.word	0x400200b8
 8004970:	40020410 	.word	0x40020410
 8004974:	40020428 	.word	0x40020428
 8004978:	40020440 	.word	0x40020440
 800497c:	40020458 	.word	0x40020458
 8004980:	40020470 	.word	0x40020470
 8004984:	40020488 	.word	0x40020488
 8004988:	400204a0 	.word	0x400204a0
 800498c:	400204b8 	.word	0x400204b8
 8004990:	aaaaaaab 	.word	0xaaaaaaab
 8004994:	080091e8 	.word	0x080091e8
 8004998:	fffffc00 	.word	0xfffffc00

0800499c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d120      	bne.n	80049f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d858      	bhi.n	8004a6a <DMA_CheckFifoParam+0xce>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <DMA_CheckFifoParam+0x24>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e3 	.word	0x080049e3
 80049c8:	080049d1 	.word	0x080049d1
 80049cc:	08004a6b 	.word	0x08004a6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d048      	beq.n	8004a6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049e0:	e045      	b.n	8004a6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ea:	d142      	bne.n	8004a72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049f0:	e03f      	b.n	8004a72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d123      	bne.n	8004a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d838      	bhi.n	8004a76 <DMA_CheckFifoParam+0xda>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <DMA_CheckFifoParam+0x70>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a23 	.word	0x08004a23
 8004a14:	08004a1d 	.word	0x08004a1d
 8004a18:	08004a35 	.word	0x08004a35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a20:	e030      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d025      	beq.n	8004a7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a32:	e022      	b.n	8004a7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a3c:	d11f      	bne.n	8004a7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a42:	e01c      	b.n	8004a7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d902      	bls.n	8004a52 <DMA_CheckFifoParam+0xb6>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d003      	beq.n	8004a58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a50:	e018      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
        break;
 8004a56:	e015      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
    break;
 8004a68:	e00b      	b.n	8004a82 <DMA_CheckFifoParam+0xe6>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e00a      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a6e:	bf00      	nop
 8004a70:	e008      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a72:	bf00      	nop
 8004a74:	e006      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
        break;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <DMA_CheckFifoParam+0xe8>
    break;
 8004a82:	bf00      	nop
    }
  }

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop

08004a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a36      	ldr	r2, [pc, #216]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a35      	ldr	r2, [pc, #212]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01a      	beq.n	8004b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3b08      	subs	r3, #8
 8004b04:	4a28      	ldr	r2, [pc, #160]	; (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4b26      	ldr	r3, [pc, #152]	; (8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2201      	movs	r2, #1
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b30:	e024      	b.n	8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	3b10      	subs	r3, #16
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d806      	bhi.n	8004b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d902      	bls.n	8004b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3308      	adds	r3, #8
 8004b58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2201      	movs	r2, #1
 8004b76:	409a      	lsls	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	58025408 	.word	0x58025408
 8004b8c:	5802541c 	.word	0x5802541c
 8004b90:	58025430 	.word	0x58025430
 8004b94:	58025444 	.word	0x58025444
 8004b98:	58025458 	.word	0x58025458
 8004b9c:	5802546c 	.word	0x5802546c
 8004ba0:	58025480 	.word	0x58025480
 8004ba4:	58025494 	.word	0x58025494
 8004ba8:	cccccccd 	.word	0xcccccccd
 8004bac:	16009600 	.word	0x16009600
 8004bb0:	58025880 	.word	0x58025880
 8004bb4:	aaaaaaab 	.word	0xaaaaaaab
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	4002040f 	.word	0x4002040f
 8004bc0:	10008200 	.word	0x10008200
 8004bc4:	40020880 	.word	0x40020880

08004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04a      	beq.n	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d847      	bhi.n	8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d022      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01d      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70
 8004c52:	e009      	b.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	58025408 	.word	0x58025408
 8004c84:	5802541c 	.word	0x5802541c
 8004c88:	58025430 	.word	0x58025430
 8004c8c:	58025444 	.word	0x58025444
 8004c90:	58025458 	.word	0x58025458
 8004c94:	5802546c 	.word	0x5802546c
 8004c98:	58025480 	.word	0x58025480
 8004c9c:	58025494 	.word	0x58025494
 8004ca0:	1600963f 	.word	0x1600963f
 8004ca4:	58025940 	.word	0x58025940
 8004ca8:	1000823f 	.word	0x1000823f
 8004cac:	40020940 	.word	0x40020940

08004cb0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b098      	sub	sp, #96	; 0x60
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004cb8:	4a84      	ldr	r2, [pc, #528]	; (8004ecc <HAL_FDCAN_Init+0x21c>)
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	224c      	movs	r2, #76	; 0x4c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f004 fa48 	bl	8009158 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1c6      	b.n	8005060 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	; (8004ed0 <HAL_FDCAN_Init+0x220>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d106      	bne.n	8004cea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc f830 	bl	8000d64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0210 	bic.w	r2, r2, #16
 8004d12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d14:	f7fc fb82 	bl	800141c <HAL_GetTick>
 8004d18:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d1a:	e014      	b.n	8004d46 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d1c:	f7fc fb7e 	bl	800141c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b0a      	cmp	r3, #10
 8004d28:	d90d      	bls.n	8004d46 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e18c      	b.n	8005060 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d0e3      	beq.n	8004d1c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d64:	f7fc fb5a 	bl	800141c <HAL_GetTick>
 8004d68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d6a:	e014      	b.n	8004d96 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d6c:	f7fc fb56 	bl	800141c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b0a      	cmp	r3, #10
 8004d78:	d90d      	bls.n	8004d96 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e164      	b.n	8005060 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0e3      	beq.n	8004d6c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0202 	orr.w	r2, r2, #2
 8004db2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7c1b      	ldrb	r3, [r3, #16]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d108      	bne.n	8004dce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dca:	619a      	str	r2, [r3, #24]
 8004dcc:	e007      	b.n	8004dde <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ddc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7c5b      	ldrb	r3, [r3, #17]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df4:	619a      	str	r2, [r3, #24]
 8004df6:	e007      	b.n	8004e08 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e06:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7c9b      	ldrb	r3, [r3, #18]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e1e:	619a      	str	r2, [r3, #24]
 8004e20:	e007      	b.n	8004e32 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e30:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004e56:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0210 	bic.w	r2, r2, #16
 8004e66:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0204 	orr.w	r2, r2, #4
 8004e7e:	619a      	str	r2, [r3, #24]
 8004e80:	e030      	b.n	8004ee4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02c      	beq.n	8004ee4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d020      	beq.n	8004ed4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ea0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0210 	orr.w	r2, r2, #16
 8004eb0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d114      	bne.n	8004ee4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0220 	orr.w	r2, r2, #32
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e00b      	b.n	8004ee4 <HAL_FDCAN_Init+0x234>
 8004ecc:	0800918c 	.word	0x0800918c
 8004ed0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004efc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f0c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f0e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f18:	d115      	bne.n	8004f46 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	3b01      	subs	r3, #1
 8004f26:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f28:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004f42:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f44:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6c:	4413      	add	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004f7a:	f023 0107 	bic.w	r1, r3, #7
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	3360      	adds	r3, #96	; 0x60
 8004f86:	443b      	add	r3, r7
 8004f88:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004fa6:	f023 0107 	bic.w	r1, r3, #7
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3360      	adds	r3, #96	; 0x60
 8004fb2:	443b      	add	r3, r7
 8004fb4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004fd2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	3360      	adds	r3, #96	; 0x60
 8004fde:	443b      	add	r3, r7
 8004fe0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004fe4:	011a      	lsls	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005000:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	3360      	adds	r3, #96	; 0x60
 800500c:	443b      	add	r3, r7
 800500e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a11      	ldr	r2, [pc, #68]	; (8005068 <HAL_FDCAN_Init+0x3b8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d107      	bne.n	8005038 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f022 0203 	bic.w	r2, r2, #3
 8005036:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f80b 	bl	800506c <FDCAN_CalcultateRamBlockAddresses>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800505c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005060:	4618      	mov	r0, r3
 8005062:	3760      	adds	r7, #96	; 0x60
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	4000a000 	.word	0x4000a000

0800506c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005082:	4ba7      	ldr	r3, [pc, #668]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005084:	4013      	ands	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	0091      	lsls	r1, r2, #2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	430b      	orrs	r3, r1
 8005090:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	041a      	lsls	r2, r3, #16
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	4413      	add	r3, r2
 80050b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050c2:	4b97      	ldr	r3, [pc, #604]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	0091      	lsls	r1, r2, #2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	430b      	orrs	r3, r1
 80050d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005104:	4b86      	ldr	r3, [pc, #536]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	0091      	lsls	r1, r2, #2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	430b      	orrs	r3, r1
 8005112:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800511e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	041a      	lsls	r2, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4413      	add	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800514c:	4b74      	ldr	r3, [pc, #464]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800514e:	4013      	ands	r3, r2
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	0091      	lsls	r1, r2, #2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	430b      	orrs	r3, r1
 800515a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005166:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	041a      	lsls	r2, r3, #16
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005194:	4b62      	ldr	r3, [pc, #392]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	0091      	lsls	r1, r2, #2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4413      	add	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80051c0:	4b57      	ldr	r3, [pc, #348]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	0091      	lsls	r1, r2, #2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	430b      	orrs	r3, r1
 80051ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051da:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	041a      	lsls	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4413      	add	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005204:	4013      	ands	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	0091      	lsls	r1, r2, #2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	430b      	orrs	r3, r1
 8005210:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800521c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005224:	041a      	lsls	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005238:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005240:	061a      	lsls	r2, r3, #24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005252:	4413      	add	r3, r2
 8005254:	009a      	lsls	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d915      	bls.n	8005348 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800531c:	e006      	b.n	800532c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800531e:	bf00      	nop
 8005320:	ffff0003 	.word	0xffff0003
 8005324:	10002b00 	.word	0x10002b00
 8005328:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2203      	movs	r2, #3
 8005340:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e010      	b.n	800536a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e005      	b.n	800535c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3304      	adds	r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	d3f3      	bcc.n	8005350 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop

08005378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005378:	b480      	push	{r7}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005386:	4b89      	ldr	r3, [pc, #548]	; (80055ac <HAL_GPIO_Init+0x234>)
 8005388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800538a:	e194      	b.n	80056b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2101      	movs	r1, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8186 	beq.w	80056b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d005      	beq.n	80053bc <HAL_GPIO_Init+0x44>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d130      	bne.n	800541e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	2203      	movs	r2, #3
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053f2:	2201      	movs	r2, #1
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0201 	and.w	r2, r3, #1
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b03      	cmp	r3, #3
 8005428:	d017      	beq.n	800545a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d123      	bne.n	80054ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	08da      	lsrs	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3208      	adds	r2, #8
 800546e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	220f      	movs	r2, #15
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	08da      	lsrs	r2, r3, #3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3208      	adds	r2, #8
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2203      	movs	r2, #3
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0203 	and.w	r2, r3, #3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80e0 	beq.w	80056b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f0:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_GPIO_Init+0x238>)
 80054f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80054f6:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <HAL_GPIO_Init+0x238>)
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <HAL_GPIO_Init+0x238>)
 8005502:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550e:	4a29      	ldr	r2, [pc, #164]	; (80055b4 <HAL_GPIO_Init+0x23c>)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <HAL_GPIO_Init+0x240>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d052      	beq.n	80055e0 <HAL_GPIO_Init+0x268>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1f      	ldr	r2, [pc, #124]	; (80055bc <HAL_GPIO_Init+0x244>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_GPIO_Init+0x22e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_GPIO_Init+0x248>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d02b      	beq.n	80055a2 <HAL_GPIO_Init+0x22a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_GPIO_Init+0x24c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d025      	beq.n	800559e <HAL_GPIO_Init+0x226>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <HAL_GPIO_Init+0x250>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <HAL_GPIO_Init+0x222>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_GPIO_Init+0x254>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d019      	beq.n	8005596 <HAL_GPIO_Init+0x21e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <HAL_GPIO_Init+0x258>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_GPIO_Init+0x21a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <HAL_GPIO_Init+0x25c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00d      	beq.n	800558e <HAL_GPIO_Init+0x216>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_GPIO_Init+0x260>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <HAL_GPIO_Init+0x212>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a17      	ldr	r2, [pc, #92]	; (80055dc <HAL_GPIO_Init+0x264>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_GPIO_Init+0x20e>
 8005582:	2309      	movs	r3, #9
 8005584:	e02d      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005586:	230a      	movs	r3, #10
 8005588:	e02b      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800558a:	2308      	movs	r3, #8
 800558c:	e029      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800558e:	2307      	movs	r3, #7
 8005590:	e027      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005592:	2306      	movs	r3, #6
 8005594:	e025      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005596:	2305      	movs	r3, #5
 8005598:	e023      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800559a:	2304      	movs	r3, #4
 800559c:	e021      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800559e:	2303      	movs	r3, #3
 80055a0:	e01f      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e01d      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e01b      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055aa:	bf00      	nop
 80055ac:	58000080 	.word	0x58000080
 80055b0:	58024400 	.word	0x58024400
 80055b4:	58000400 	.word	0x58000400
 80055b8:	58020000 	.word	0x58020000
 80055bc:	58020400 	.word	0x58020400
 80055c0:	58020800 	.word	0x58020800
 80055c4:	58020c00 	.word	0x58020c00
 80055c8:	58021000 	.word	0x58021000
 80055cc:	58021400 	.word	0x58021400
 80055d0:	58021800 	.word	0x58021800
 80055d4:	58021c00 	.word	0x58021c00
 80055d8:	58022000 	.word	0x58022000
 80055dc:	58022400 	.word	0x58022400
 80055e0:	2300      	movs	r3, #0
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	f002 0203 	and.w	r2, r2, #3
 80055e8:	0092      	lsls	r2, r2, #2
 80055ea:	4093      	lsls	r3, r2
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f2:	4938      	ldr	r1, [pc, #224]	; (80056d4 <HAL_GPIO_Init+0x35c>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800562e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f ae63 	bne.w	800538c <HAL_GPIO_Init+0x14>
  }
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	3724      	adds	r7, #36	; 0x24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	58000400 	.word	0x58000400

080056d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e07f      	b.n	80057ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb fc00 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	e006      	b.n	8005760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800575e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d104      	bne.n	8005772 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_I2C_Init+0x11c>)
 800577e:	430b      	orrs	r3, r1
 8005780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	02008000 	.word	0x02008000

080057f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b20      	cmp	r3, #32
 800580c:	d138      	bne.n	8005880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005818:	2302      	movs	r3, #2
 800581a:	e032      	b.n	8005882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800584a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d139      	bne.n	8005918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e033      	b.n	800591a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	; 0x24
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_PWREx_ConfigSupply+0x70>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d00a      	beq.n	8005952 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800593c:	4b16      	ldr	r3, [pc, #88]	; (8005998 <HAL_PWREx_ConfigSupply+0x70>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e01f      	b.n	800598e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e01d      	b.n	800598e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005952:	4b11      	ldr	r3, [pc, #68]	; (8005998 <HAL_PWREx_ConfigSupply+0x70>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f023 0207 	bic.w	r2, r3, #7
 800595a:	490f      	ldr	r1, [pc, #60]	; (8005998 <HAL_PWREx_ConfigSupply+0x70>)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4313      	orrs	r3, r2
 8005960:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005962:	f7fb fd5b 	bl	800141c <HAL_GetTick>
 8005966:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005968:	e009      	b.n	800597e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800596a:	f7fb fd57 	bl	800141c <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005978:	d901      	bls.n	800597e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e007      	b.n	800598e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HAL_PWREx_ConfigSupply+0x70>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	d1ee      	bne.n	800596a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	58024800 	.word	0x58024800

0800599c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f000 bc1f 	b.w	80061ee <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80b3 	beq.w	8005b24 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059be:	4b95      	ldr	r3, [pc, #596]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059c8:	4b92      	ldr	r3, [pc, #584]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d007      	beq.n	80059e4 <HAL_RCC_OscConfig+0x48>
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	2b18      	cmp	r3, #24
 80059d8:	d112      	bne.n	8005a00 <HAL_RCC_OscConfig+0x64>
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8098 	beq.w	8005b22 <HAL_RCC_OscConfig+0x186>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8093 	bne.w	8005b22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e3f6      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d106      	bne.n	8005a18 <HAL_RCC_OscConfig+0x7c>
 8005a0a:	4b82      	ldr	r3, [pc, #520]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a81      	ldr	r2, [pc, #516]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e058      	b.n	8005aca <HAL_RCC_OscConfig+0x12e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d112      	bne.n	8005a46 <HAL_RCC_OscConfig+0xaa>
 8005a20:	4b7c      	ldr	r3, [pc, #496]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7b      	ldr	r2, [pc, #492]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b79      	ldr	r3, [pc, #484]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a78      	ldr	r2, [pc, #480]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a75      	ldr	r2, [pc, #468]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e041      	b.n	8005aca <HAL_RCC_OscConfig+0x12e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a4e:	d112      	bne.n	8005a76 <HAL_RCC_OscConfig+0xda>
 8005a50:	4b70      	ldr	r3, [pc, #448]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6f      	ldr	r2, [pc, #444]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b6d      	ldr	r3, [pc, #436]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a6c      	ldr	r2, [pc, #432]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a69      	ldr	r2, [pc, #420]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e029      	b.n	8005aca <HAL_RCC_OscConfig+0x12e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005a7e:	d112      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
 8005a80:	4b64      	ldr	r3, [pc, #400]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a63      	ldr	r2, [pc, #396]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b61      	ldr	r3, [pc, #388]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a60      	ldr	r2, [pc, #384]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4b5e      	ldr	r3, [pc, #376]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5d      	ldr	r2, [pc, #372]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e011      	b.n	8005aca <HAL_RCC_OscConfig+0x12e>
 8005aa6:	4b5b      	ldr	r3, [pc, #364]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a5a      	ldr	r2, [pc, #360]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b58      	ldr	r3, [pc, #352]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a57      	ldr	r2, [pc, #348]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b55      	ldr	r3, [pc, #340]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a54      	ldr	r2, [pc, #336]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005ac4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ac8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d013      	beq.n	8005afa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad2:	f7fb fca3 	bl	800141c <HAL_GetTick>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ada:	f7fb fc9f 	bl	800141c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b64      	cmp	r3, #100	; 0x64
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e380      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aec:	4b49      	ldr	r3, [pc, #292]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x13e>
 8005af8:	e014      	b.n	8005b24 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fb fc8f 	bl	800141c <HAL_GetTick>
 8005afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b02:	f7fb fc8b 	bl	800141c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b64      	cmp	r3, #100	; 0x64
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e36c      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b14:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x166>
 8005b20:	e000      	b.n	8005b24 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 808c 	beq.w	8005c4a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b32:	4b38      	ldr	r3, [pc, #224]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b3a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b3c:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_RCC_OscConfig+0x1bc>
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b18      	cmp	r3, #24
 8005b4c:	d137      	bne.n	8005bbe <HAL_RCC_OscConfig+0x222>
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d132      	bne.n	8005bbe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b58:	4b2e      	ldr	r3, [pc, #184]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_OscConfig+0x1d4>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e33e      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f023 0219 	bic.w	r2, r3, #25
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4925      	ldr	r1, [pc, #148]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b82:	f7fb fc4b 	bl	800141c <HAL_GetTick>
 8005b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8a:	f7fb fc47 	bl	800141c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e328      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	4917      	ldr	r1, [pc, #92]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bbc:	e045      	b.n	8005c4a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d028      	beq.n	8005c18 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0219 	bic.w	r2, r3, #25
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	4910      	ldr	r1, [pc, #64]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fb fc20 	bl	800141c <HAL_GetTick>
 8005bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be0:	f7fb fc1c 	bl	800141c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e2fd      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	061b      	lsls	r3, r3, #24
 8005c0c:	4901      	ldr	r1, [pc, #4]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	604b      	str	r3, [r1, #4]
 8005c12:	e01a      	b.n	8005c4a <HAL_RCC_OscConfig+0x2ae>
 8005c14:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c18:	4b97      	ldr	r3, [pc, #604]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a96      	ldr	r2, [pc, #600]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fb fbfa 	bl	800141c <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c2c:	f7fb fbf6 	bl	800141c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e2d7      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c3e:	4b8e      	ldr	r3, [pc, #568]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d06a      	beq.n	8005d2c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c56:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c60:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d007      	beq.n	8005c7c <HAL_RCC_OscConfig+0x2e0>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b18      	cmp	r3, #24
 8005c70:	d11b      	bne.n	8005caa <HAL_RCC_OscConfig+0x30e>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d116      	bne.n	8005caa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c7c:	4b7e      	ldr	r3, [pc, #504]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_OscConfig+0x2f8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d001      	beq.n	8005c94 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e2ac      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c94:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	061b      	lsls	r3, r3, #24
 8005ca2:	4975      	ldr	r1, [pc, #468]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ca8:	e040      	b.n	8005d2c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d023      	beq.n	8005cfa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cb2:	4b71      	ldr	r3, [pc, #452]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a70      	ldr	r2, [pc, #448]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fb fbad 	bl	800141c <HAL_GetTick>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cc6:	f7fb fba9 	bl	800141c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e28a      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cd8:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ce4:	4b64      	ldr	r3, [pc, #400]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	4961      	ldr	r1, [pc, #388]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60cb      	str	r3, [r1, #12]
 8005cf8:	e018      	b.n	8005d2c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a5e      	ldr	r2, [pc, #376]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fb fb89 	bl	800141c <HAL_GetTick>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d0e:	f7fb fb85 	bl	800141c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e266      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d20:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d036      	beq.n	8005da6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d019      	beq.n	8005d74 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d40:	4b4d      	ldr	r3, [pc, #308]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d44:	4a4c      	ldr	r2, [pc, #304]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4c:	f7fb fb66 	bl	800141c <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d54:	f7fb fb62 	bl	800141c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e243      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0x3b8>
 8005d72:	e018      	b.n	8005da6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d78:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fb fb4c 	bl	800141c <HAL_GetTick>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d88:	f7fb fb48 	bl	800141c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e229      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d036      	beq.n	8005e20 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d019      	beq.n	8005dee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dba:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2e      	ldr	r2, [pc, #184]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dc6:	f7fb fb29 	bl	800141c <HAL_GetTick>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dce:	f7fb fb25 	bl	800141c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e206      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005de0:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0x432>
 8005dec:	e018      	b.n	8005e20 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dee:	4b22      	ldr	r3, [pc, #136]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dfa:	f7fb fb0f 	bl	800141c <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e02:	f7fb fb0b 	bl	800141c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1ec      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e14:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f0      	bne.n	8005e02 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80af 	beq.w	8005f8c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <HAL_RCC_OscConfig+0x4e0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <HAL_RCC_OscConfig+0x4e0>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e3a:	f7fb faef 	bl	800141c <HAL_GetTick>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fb faeb 	bl	800141c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b64      	cmp	r3, #100	; 0x64
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e1cc      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_OscConfig+0x4e0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4e4>
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a02      	ldr	r2, [pc, #8]	; (8005e78 <HAL_RCC_OscConfig+0x4dc>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e05b      	b.n	8005f2e <HAL_RCC_OscConfig+0x592>
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	58024800 	.word	0x58024800
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d112      	bne.n	8005eae <HAL_RCC_OscConfig+0x512>
 8005e88:	4b9d      	ldr	r3, [pc, #628]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a9c      	ldr	r2, [pc, #624]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	4b9a      	ldr	r3, [pc, #616]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a99      	ldr	r2, [pc, #612]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	4b97      	ldr	r3, [pc, #604]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a96      	ldr	r2, [pc, #600]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	e03f      	b.n	8005f2e <HAL_RCC_OscConfig+0x592>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d112      	bne.n	8005edc <HAL_RCC_OscConfig+0x540>
 8005eb6:	4b92      	ldr	r3, [pc, #584]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4a91      	ldr	r2, [pc, #580]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec2:	4b8f      	ldr	r3, [pc, #572]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	4a8e      	ldr	r2, [pc, #568]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ece:	4b8c      	ldr	r3, [pc, #560]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a8b      	ldr	r2, [pc, #556]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	e028      	b.n	8005f2e <HAL_RCC_OscConfig+0x592>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b85      	cmp	r3, #133	; 0x85
 8005ee2:	d112      	bne.n	8005f0a <HAL_RCC_OscConfig+0x56e>
 8005ee4:	4b86      	ldr	r3, [pc, #536]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a85      	ldr	r2, [pc, #532]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005eea:	f043 0304 	orr.w	r3, r3, #4
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	4b83      	ldr	r3, [pc, #524]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a82      	ldr	r2, [pc, #520]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
 8005efc:	4b80      	ldr	r3, [pc, #512]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	4a7f      	ldr	r2, [pc, #508]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	; 0x70
 8005f08:	e011      	b.n	8005f2e <HAL_RCC_OscConfig+0x592>
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0e:	4a7c      	ldr	r2, [pc, #496]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70
 8005f16:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a79      	ldr	r2, [pc, #484]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
 8005f22:	4b77      	ldr	r3, [pc, #476]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a76      	ldr	r2, [pc, #472]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d015      	beq.n	8005f62 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fb fa71 	bl	800141c <HAL_GetTick>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fb fa6d 	bl	800141c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e14c      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ee      	beq.n	8005f3e <HAL_RCC_OscConfig+0x5a2>
 8005f60:	e014      	b.n	8005f8c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fb fa5b 	bl	800141c <HAL_GetTick>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fb fa57 	bl	800141c <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e136      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f80:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ee      	bne.n	8005f6a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 812b 	beq.w	80061ec <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f96:	4b5a      	ldr	r3, [pc, #360]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f9e:	2b18      	cmp	r3, #24
 8005fa0:	f000 80bb 	beq.w	800611a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	f040 8095 	bne.w	80060d8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fae:	4b54      	ldr	r3, [pc, #336]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a53      	ldr	r2, [pc, #332]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fb fa2f 	bl	800141c <HAL_GetTick>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc2:	f7fb fa2b 	bl	800141c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e10c      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd4:	4b4a      	ldr	r3, [pc, #296]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f0      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fe0:	4b47      	ldr	r3, [pc, #284]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe4:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_OscConfig+0x768>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ff0:	0112      	lsls	r2, r2, #4
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	4942      	ldr	r1, [pc, #264]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	628b      	str	r3, [r1, #40]	; 0x28
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	3b01      	subs	r3, #1
 8006000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	3b01      	subs	r3, #1
 800600a:	025b      	lsls	r3, r3, #9
 800600c:	b29b      	uxth	r3, r3
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	3b01      	subs	r3, #1
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	3b01      	subs	r3, #1
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800602a:	4935      	ldr	r1, [pc, #212]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800602c:	4313      	orrs	r3, r2
 800602e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006030:	4b33      	ldr	r3, [pc, #204]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a32      	ldr	r2, [pc, #200]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800603c:	4b30      	ldr	r3, [pc, #192]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800603e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006040:	4b31      	ldr	r3, [pc, #196]	; (8006108 <HAL_RCC_OscConfig+0x76c>)
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006048:	00d2      	lsls	r2, r2, #3
 800604a:	492d      	ldr	r1, [pc, #180]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800604c:	4313      	orrs	r3, r2
 800604e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f023 020c 	bic.w	r2, r3, #12
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	4928      	ldr	r1, [pc, #160]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800605e:	4313      	orrs	r3, r2
 8006060:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f023 0202 	bic.w	r2, r3, #2
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	4924      	ldr	r1, [pc, #144]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006070:	4313      	orrs	r3, r2
 8006072:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006074:	4b22      	ldr	r3, [pc, #136]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	4a21      	ldr	r2, [pc, #132]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800607a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800608c:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 8006092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fb f9b4 	bl	800141c <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fb f9b0 	bl	800141c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e091      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x71c>
 80060d6:	e089      	b.n	80061ec <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d8:	4b09      	ldr	r3, [pc, #36]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <HAL_RCC_OscConfig+0x764>)
 80060de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fb f99a 	bl	800141c <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ea:	e00f      	b.n	800610c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fb f996 	bl	800141c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d908      	bls.n	800610c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e077      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
 80060fe:	bf00      	nop
 8006100:	58024400 	.word	0x58024400
 8006104:	fffffc0c 	.word	0xfffffc0c
 8006108:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800610c:	4b3a      	ldr	r3, [pc, #232]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e9      	bne.n	80060ec <HAL_RCC_OscConfig+0x750>
 8006118:	e068      	b.n	80061ec <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b01      	cmp	r3, #1
 800612c:	d031      	beq.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f003 0203 	and.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d12a      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006148:	429a      	cmp	r2, r3
 800614a:	d122      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d11a      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	0a5b      	lsrs	r3, r3, #9
 8006160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d111      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d108      	bne.n	8006192 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0e1b      	lsrs	r3, r3, #24
 8006184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800618e:	429a      	cmp	r2, r3
 8006190:	d001      	beq.n	8006196 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e02b      	b.n	80061ee <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061a0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d01f      	beq.n	80061ec <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061b8:	f7fb f930 	bl	800141c <HAL_GetTick>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061be:	bf00      	nop
 80061c0:	f7fb f92c 	bl	800141c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d0f9      	beq.n	80061c0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <HAL_RCC_OscConfig+0x860>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061d8:	00d2      	lsls	r2, r2, #3
 80061da:	4907      	ldr	r1, [pc, #28]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <HAL_RCC_OscConfig+0x85c>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	ffff0007 	.word	0xffff0007

08006200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e19c      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006214:	4b8a      	ldr	r3, [pc, #552]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d910      	bls.n	8006244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b87      	ldr	r3, [pc, #540]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 020f 	bic.w	r2, r3, #15
 800622a:	4985      	ldr	r1, [pc, #532]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b83      	ldr	r3, [pc, #524]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e184      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	4b7b      	ldr	r3, [pc, #492]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800625c:	429a      	cmp	r2, r3
 800625e:	d908      	bls.n	8006272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006260:	4b78      	ldr	r3, [pc, #480]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4975      	ldr	r1, [pc, #468]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800626e:	4313      	orrs	r3, r2
 8006270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	4b70      	ldr	r3, [pc, #448]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800628a:	429a      	cmp	r2, r3
 800628c:	d908      	bls.n	80062a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800628e:	4b6d      	ldr	r3, [pc, #436]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	496a      	ldr	r1, [pc, #424]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800629c:	4313      	orrs	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d010      	beq.n	80062ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d908      	bls.n	80062ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062bc:	4b61      	ldr	r3, [pc, #388]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	495e      	ldr	r1, [pc, #376]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d908      	bls.n	80062fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062ea:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4953      	ldr	r1, [pc, #332]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f023 020f 	bic.w	r2, r3, #15
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4947      	ldr	r1, [pc, #284]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d055      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	4940      	ldr	r1, [pc, #256]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006344:	4313      	orrs	r3, r2
 8006346:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d107      	bne.n	8006360 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006350:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d121      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0f6      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d107      	bne.n	8006378 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006368:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d115      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0ea      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d107      	bne.n	8006390 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006380:	4b30      	ldr	r3, [pc, #192]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0de      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006390:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0d6      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f023 0207 	bic.w	r2, r3, #7
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4925      	ldr	r1, [pc, #148]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fb f833 	bl	800141c <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ba:	f7fb f82f 	bl	800141c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0be      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d0:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	429a      	cmp	r2, r3
 80063e0:	d1eb      	bne.n	80063ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	4b14      	ldr	r3, [pc, #80]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d208      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f023 020f 	bic.w	r2, r3, #15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	490e      	ldr	r1, [pc, #56]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800640c:	4313      	orrs	r3, r2
 800640e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d214      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 020f 	bic.w	r2, r3, #15
 8006426:	4906      	ldr	r1, [pc, #24]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e086      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
 8006440:	52002000 	.word	0x52002000
 8006444:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d010      	beq.n	8006476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006460:	429a      	cmp	r2, r3
 8006462:	d208      	bcs.n	8006476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006464:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	4939      	ldr	r1, [pc, #228]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006472:	4313      	orrs	r3, r2
 8006474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800648e:	429a      	cmp	r2, r3
 8006490:	d208      	bcs.n	80064a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006492:	4b31      	ldr	r3, [pc, #196]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	492e      	ldr	r1, [pc, #184]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064bc:	429a      	cmp	r2, r3
 80064be:	d208      	bcs.n	80064d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	4922      	ldr	r1, [pc, #136]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d208      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4917      	ldr	r1, [pc, #92]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006500:	f000 f834 	bl	800656c <HAL_RCC_GetSysClockFreq>
 8006504:	4602      	mov	r2, r0
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	4912      	ldr	r1, [pc, #72]	; (800655c <HAL_RCC_ClockConfig+0x35c>)
 8006512:	5ccb      	ldrb	r3, [r1, r3]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800651e:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_RCC_ClockConfig+0x35c>)
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
 8006534:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <HAL_RCC_ClockConfig+0x360>)
 8006536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_RCC_ClockConfig+0x364>)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <HAL_RCC_ClockConfig+0x368>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fa ff20 	bl	8001388 <HAL_InitTick>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	58024400 	.word	0x58024400
 800655c:	080091d8 	.word	0x080091d8
 8006560:	24000004 	.word	0x24000004
 8006564:	24000000 	.word	0x24000000
 8006568:	24000008 	.word	0x24000008

0800656c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006572:	4bb3      	ldr	r3, [pc, #716]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657a:	2b18      	cmp	r3, #24
 800657c:	f200 8155 	bhi.w	800682a <HAL_RCC_GetSysClockFreq+0x2be>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065ed 	.word	0x080065ed
 800658c:	0800682b 	.word	0x0800682b
 8006590:	0800682b 	.word	0x0800682b
 8006594:	0800682b 	.word	0x0800682b
 8006598:	0800682b 	.word	0x0800682b
 800659c:	0800682b 	.word	0x0800682b
 80065a0:	0800682b 	.word	0x0800682b
 80065a4:	0800682b 	.word	0x0800682b
 80065a8:	08006613 	.word	0x08006613
 80065ac:	0800682b 	.word	0x0800682b
 80065b0:	0800682b 	.word	0x0800682b
 80065b4:	0800682b 	.word	0x0800682b
 80065b8:	0800682b 	.word	0x0800682b
 80065bc:	0800682b 	.word	0x0800682b
 80065c0:	0800682b 	.word	0x0800682b
 80065c4:	0800682b 	.word	0x0800682b
 80065c8:	08006619 	.word	0x08006619
 80065cc:	0800682b 	.word	0x0800682b
 80065d0:	0800682b 	.word	0x0800682b
 80065d4:	0800682b 	.word	0x0800682b
 80065d8:	0800682b 	.word	0x0800682b
 80065dc:	0800682b 	.word	0x0800682b
 80065e0:	0800682b 	.word	0x0800682b
 80065e4:	0800682b 	.word	0x0800682b
 80065e8:	0800661f 	.word	0x0800661f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b94      	ldr	r3, [pc, #592]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f8:	4b91      	ldr	r3, [pc, #580]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a90      	ldr	r2, [pc, #576]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800660a:	e111      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800660c:	4b8d      	ldr	r3, [pc, #564]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800660e:	61bb      	str	r3, [r7, #24]
      break;
 8006610:	e10e      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006612:	4b8d      	ldr	r3, [pc, #564]	; (8006848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006614:	61bb      	str	r3, [r7, #24]
      break;
 8006616:	e10b      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006618:	4b8c      	ldr	r3, [pc, #560]	; (800684c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800661a:	61bb      	str	r3, [r7, #24]
      break;
 800661c:	e108      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006628:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006632:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006634:	4b82      	ldr	r3, [pc, #520]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800663e:	4b80      	ldr	r3, [pc, #512]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	08db      	lsrs	r3, r3, #3
 8006644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80e1 	beq.w	8006824 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b02      	cmp	r3, #2
 8006666:	f000 8083 	beq.w	8006770 <HAL_RCC_GetSysClockFreq+0x204>
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b02      	cmp	r3, #2
 800666e:	f200 80a1 	bhi.w	80067b4 <HAL_RCC_GetSysClockFreq+0x248>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x114>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d056      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x1c0>
 800667e:	e099      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006680:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02d      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800668c:	4b6c      	ldr	r3, [pc, #432]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	4a6b      	ldr	r2, [pc, #428]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b62      	ldr	r3, [pc, #392]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066e6:	e087      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fa:	4b51      	ldr	r3, [pc, #324]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670a:	ed97 6a02 	vldr	s12, [r7, #8]
 800670e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800671e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800672a:	e065      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800673a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673e:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006752:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800676e:	e043      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800685c <HAL_RCC_GetSysClockFreq+0x2f0>
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006792:	ed97 6a02 	vldr	s12, [r7, #8]
 8006796:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800679a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067b2:	e021      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	0a5b      	lsrs	r3, r3, #9
 80067fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006802:	3301      	adds	r3, #1
 8006804:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006810:	edd7 6a07 	vldr	s13, [r7, #28]
 8006814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681c:	ee17 3a90 	vmov	r3, s15
 8006820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006822:	e005      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
      break;
 8006828:	e002      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800682c:	61bb      	str	r3, [r7, #24]
      break;
 800682e:	bf00      	nop
  }

  return sysclockfreq;
 8006830:	69bb      	ldr	r3, [r7, #24]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	016e3600 	.word	0x016e3600
 8006850:	46000000 	.word	0x46000000
 8006854:	4c742400 	.word	0x4c742400
 8006858:	4a742400 	.word	0x4a742400
 800685c:	4bb71b00 	.word	0x4bb71b00

08006860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006866:	f7ff fe81 	bl	800656c <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490f      	ldr	r1, [pc, #60]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800688e:	5cd3      	ldrb	r3, [r2, r3]
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800689c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800689e:	4a07      	ldr	r2, [pc, #28]	; (80068bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	58024400 	.word	0x58024400
 80068b4:	080091d8 	.word	0x080091d8
 80068b8:	24000004 	.word	0x24000004
 80068bc:	24000000 	.word	0x24000000

080068c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80068c4:	f7ff ffcc 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	4904      	ldr	r1, [pc, #16]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068d6:	5ccb      	ldrb	r3, [r1, r3]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024400 	.word	0x58024400
 80068e8:	080091d8 	.word	0x080091d8

080068ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f0:	b0c8      	sub	sp, #288	; 0x120
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006910:	2500      	movs	r5, #0
 8006912:	ea54 0305 	orrs.w	r3, r4, r5
 8006916:	d049      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006922:	d02f      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006928:	d828      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800692a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692e:	d01a      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006934:	d822      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d007      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006940:	e01c      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006942:	4ba7      	ldr	r3, [pc, #668]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	4aa6      	ldr	r2, [pc, #664]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800694e:	e01a      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006954:	3308      	adds	r3, #8
 8006956:	2102      	movs	r1, #2
 8006958:	4618      	mov	r0, r3
 800695a:	f002 fa6d 	bl	8008e38 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006964:	e00f      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800696a:	3328      	adds	r3, #40	; 0x28
 800696c:	2102      	movs	r1, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f002 fb14 	bl	8008f9c <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800697a:	e004      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800698e:	4b94      	ldr	r3, [pc, #592]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006992:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699c:	4a90      	ldr	r2, [pc, #576]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	6513      	str	r3, [r2, #80]	; 0x50
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80069b8:	f04f 0900 	mov.w	r9, #0
 80069bc:	ea58 0309 	orrs.w	r3, r8, r9
 80069c0:	d047      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d82a      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069e9 	.word	0x080069e9
 80069d8:	080069f7 	.word	0x080069f7
 80069dc:	08006a0d 	.word	0x08006a0d
 80069e0:	08006a2b 	.word	0x08006a2b
 80069e4:	08006a2b 	.word	0x08006a2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e8:	4b7d      	ldr	r3, [pc, #500]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	4a7c      	ldr	r2, [pc, #496]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069f4:	e01a      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fa:	3308      	adds	r3, #8
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f002 fa1a 	bl	8008e38 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e00f      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a10:	3328      	adds	r3, #40	; 0x28
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f002 fac1 	bl	8008f9c <RCCEx_PLL3_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a20:	e004      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a34:	4b6a      	ldr	r3, [pc, #424]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	f023 0107 	bic.w	r1, r3, #7
 8006a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	4a67      	ldr	r2, [pc, #412]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6513      	str	r3, [r2, #80]	; 0x50
 8006a48:	e003      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006a5e:	f04f 0b00 	mov.w	fp, #0
 8006a62:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a66:	d054      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a72:	d036      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006a74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a78:	d82f      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7e:	d032      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a84:	d829      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a86:	2bc0      	cmp	r3, #192	; 0xc0
 8006a88:	d02f      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a8c:	d825      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d018      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d821      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d007      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006a9e:	e01c      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	4a4e      	ldr	r2, [pc, #312]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006aac:	e01e      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 f9be 	bl	8008e38 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006ac2:	e013      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac8:	3328      	adds	r3, #40	; 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f002 fa65 	bl	8008f9c <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006ad8:	e008      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006af4:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6513      	str	r3, [r2, #80]	; 0x50
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006b1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b22:	2300      	movs	r3, #0
 8006b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	d05c      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b3c:	d03b      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b3e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b42:	d834      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b48:	d037      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4e:	d82e      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006b50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b54:	d033      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b5a:	d828      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	d01a      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b66:	d822      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d007      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006b72:	e01c      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006b80:	e01e      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b86:	3308      	adds	r3, #8
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f002 f954 	bl	8008e38 <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006b96:	e013      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9c:	3328      	adds	r3, #40	; 0x28
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f002 f9fb 	bl	8008f9c <RCCEx_PLL3_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006bac:	e008      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10d      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bcc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd6:	4a02      	ldr	r2, [pc, #8]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6513      	str	r3, [r2, #80]	; 0x50
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006be8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d03a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	2b30      	cmp	r3, #48	; 0x30
 8006c14:	d01f      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006c16:	2b30      	cmp	r3, #48	; 0x30
 8006c18:	d819      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d00c      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d815      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d019      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d111      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2a:	4bae      	ldr	r3, [pc, #696]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	4aad      	ldr	r2, [pc, #692]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c36:	e011      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	2102      	movs	r1, #2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f002 f8f9 	bl	8008e38 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c4c:	e006      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c54:	e002      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c64:	4b9f      	ldr	r3, [pc, #636]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c68:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	4a9c      	ldr	r2, [pc, #624]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c92:	2300      	movs	r3, #0
 8006c94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d051      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cac:	d035      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb2:	d82e      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cb8:	d031      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006cba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cbe:	d828      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc4:	d01a      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cca:	d822      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd4:	d007      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006cd6:	e01c      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd8:	4b82      	ldr	r3, [pc, #520]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	4a81      	ldr	r2, [pc, #516]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ce4:	e01c      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cea:	3308      	adds	r3, #8
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f002 f8a2 	bl	8008e38 <RCCEx_PLL2_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cfa:	e011      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d00:	3328      	adds	r3, #40	; 0x28
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f002 f949 	bl	8008f9c <RCCEx_PLL3_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d10:	e006      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d28:	4b6e      	ldr	r3, [pc, #440]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d36:	4a6b      	ldr	r2, [pc, #428]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6513      	str	r3, [r2, #80]	; 0x50
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d56:	2300      	movs	r3, #0
 8006d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006d60:	460b      	mov	r3, r1
 8006d62:	4313      	orrs	r3, r2
 8006d64:	d053      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d70:	d033      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d76:	d82c      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d7c:	d02f      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d82:	d826      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d88:	d02b      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d8e:	d820      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d94:	d012      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9a:	d81a      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d115      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006daa:	3308      	adds	r3, #8
 8006dac:	2101      	movs	r1, #1
 8006dae:	4618      	mov	r0, r3
 8006db0:	f002 f842 	bl	8008e38 <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dba:	e015      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc0:	3328      	adds	r3, #40	; 0x28
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f002 f8e9 	bl	8008f9c <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dd0:	e00a      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006dda:	bf00      	nop
 8006ddc:	e004      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006df0:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfe:	4a39      	ldr	r2, [pc, #228]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e00:	430b      	orrs	r3, r1
 8006e02:	6513      	str	r3, [r2, #80]	; 0x50
 8006e04:	e003      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	d060      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e36:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006e3a:	d039      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006e3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006e40:	d832      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e46:	d035      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e4c:	d82c      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e52:	d031      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e58:	d826      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e64:	d820      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6a:	d012      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e70:	d81a      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d024      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e7a:	d115      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e80:	3308      	adds	r3, #8
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 ffd7 	bl	8008e38 <RCCEx_PLL2_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e90:	e017      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e96:	3328      	adds	r3, #40	; 0x28
 8006e98:	2101      	movs	r1, #1
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f002 f87e 	bl	8008f9c <RCCEx_PLL3_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ea6:	e00c      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006eae:	e008      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb0:	bf00      	nop
 8006eb2:	e006      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb4:	bf00      	nop
 8006eb6:	e004      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ece:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eda:	4a02      	ldr	r2, [pc, #8]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6593      	str	r3, [r2, #88]	; 0x58
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	d037      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1a:	d00e      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f20:	d816      	bhi.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d018      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f2a:	d111      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2c:	4bc4      	ldr	r3, [pc, #784]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4ac3      	ldr	r2, [pc, #780]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f38:	e00f      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3e:	3308      	adds	r3, #8
 8006f40:	2101      	movs	r1, #1
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 ff78 	bl	8008e38 <RCCEx_PLL2_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f4e:	e004      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f62:	4bb7      	ldr	r3, [pc, #732]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f66:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f70:	4ab3      	ldr	r2, [pc, #716]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6513      	str	r3, [r2, #80]	; 0x50
 8006f76:	e003      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d039      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d81c      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fed 	.word	0x08006fed
 8006fb4:	08006fc1 	.word	0x08006fc1
 8006fb8:	08006fcf 	.word	0x08006fcf
 8006fbc:	08006fed 	.word	0x08006fed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b9f      	ldr	r3, [pc, #636]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a9e      	ldr	r2, [pc, #632]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fcc:	e00f      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 ff2e 	bl	8008e38 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fe2:	e004      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ff6:	4b92      	ldr	r3, [pc, #584]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	f023 0103 	bic.w	r1, r3, #3
 8006ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	4a8e      	ldr	r2, [pc, #568]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007006:	430b      	orrs	r3, r1
 8007008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800700a:	e003      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007010:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007024:	2300      	movs	r3, #0
 8007026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800702a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800702e:	460b      	mov	r3, r1
 8007030:	4313      	orrs	r3, r2
 8007032:	f000 8099 	beq.w	8007168 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007036:	4b83      	ldr	r3, [pc, #524]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a82      	ldr	r2, [pc, #520]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800703c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007042:	f7fa f9eb 	bl	800141c <HAL_GetTick>
 8007046:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800704a:	e00b      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704c:	f7fa f9e6 	bl	800141c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b64      	cmp	r3, #100	; 0x64
 800705a:	d903      	bls.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007062:	e005      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007064:	4b77      	ldr	r3, [pc, #476]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0ed      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d173      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007078:	4b71      	ldr	r3, [pc, #452]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800707a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800707c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007084:	4053      	eors	r3, r2
 8007086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708a:	2b00      	cmp	r3, #0
 800708c:	d015      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800708e:	4b6c      	ldr	r3, [pc, #432]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800709a:	4b69      	ldr	r3, [pc, #420]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a68      	ldr	r2, [pc, #416]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070a6:	4b66      	ldr	r3, [pc, #408]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a65      	ldr	r2, [pc, #404]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070b2:	4a63      	ldr	r2, [pc, #396]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d118      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fa f9a8 	bl	800141c <HAL_GetTick>
 80070cc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d0:	e00d      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d2:	f7fa f9a3 	bl	800141c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	f241 3388 	movw	r3, #5000	; 0x1388
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d903      	bls.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80070ec:	e005      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ee:	4b54      	ldr	r3, [pc, #336]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0eb      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80070fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d129      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800710a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007112:	d10e      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007114:	4b4a      	ldr	r3, [pc, #296]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800711c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007124:	091a      	lsrs	r2, r3, #4
 8007126:	4b48      	ldr	r3, [pc, #288]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007128:	4013      	ands	r3, r2
 800712a:	4a45      	ldr	r2, [pc, #276]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6113      	str	r3, [r2, #16]
 8007130:	e005      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007132:	4b43      	ldr	r3, [pc, #268]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	4a42      	ldr	r2, [pc, #264]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007138:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800713c:	6113      	str	r3, [r2, #16]
 800713e:	4b40      	ldr	r3, [pc, #256]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007140:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800714a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714e:	4a3c      	ldr	r2, [pc, #240]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007150:	430b      	orrs	r3, r1
 8007152:	6713      	str	r3, [r2, #112]	; 0x70
 8007154:	e008      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007156:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800715a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007164:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 0301 	and.w	r3, r2, #1
 8007174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800717e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	f000 8090 	beq.w	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800718a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	2b28      	cmp	r3, #40	; 0x28
 8007194:	d870      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	08007281 	.word	0x08007281
 80071a0:	08007279 	.word	0x08007279
 80071a4:	08007279 	.word	0x08007279
 80071a8:	08007279 	.word	0x08007279
 80071ac:	08007279 	.word	0x08007279
 80071b0:	08007279 	.word	0x08007279
 80071b4:	08007279 	.word	0x08007279
 80071b8:	08007279 	.word	0x08007279
 80071bc:	0800724d 	.word	0x0800724d
 80071c0:	08007279 	.word	0x08007279
 80071c4:	08007279 	.word	0x08007279
 80071c8:	08007279 	.word	0x08007279
 80071cc:	08007279 	.word	0x08007279
 80071d0:	08007279 	.word	0x08007279
 80071d4:	08007279 	.word	0x08007279
 80071d8:	08007279 	.word	0x08007279
 80071dc:	08007263 	.word	0x08007263
 80071e0:	08007279 	.word	0x08007279
 80071e4:	08007279 	.word	0x08007279
 80071e8:	08007279 	.word	0x08007279
 80071ec:	08007279 	.word	0x08007279
 80071f0:	08007279 	.word	0x08007279
 80071f4:	08007279 	.word	0x08007279
 80071f8:	08007279 	.word	0x08007279
 80071fc:	08007281 	.word	0x08007281
 8007200:	08007279 	.word	0x08007279
 8007204:	08007279 	.word	0x08007279
 8007208:	08007279 	.word	0x08007279
 800720c:	08007279 	.word	0x08007279
 8007210:	08007279 	.word	0x08007279
 8007214:	08007279 	.word	0x08007279
 8007218:	08007279 	.word	0x08007279
 800721c:	08007281 	.word	0x08007281
 8007220:	08007279 	.word	0x08007279
 8007224:	08007279 	.word	0x08007279
 8007228:	08007279 	.word	0x08007279
 800722c:	08007279 	.word	0x08007279
 8007230:	08007279 	.word	0x08007279
 8007234:	08007279 	.word	0x08007279
 8007238:	08007279 	.word	0x08007279
 800723c:	08007281 	.word	0x08007281
 8007240:	58024400 	.word	0x58024400
 8007244:	58024800 	.word	0x58024800
 8007248:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800724c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007250:	3308      	adds	r3, #8
 8007252:	2101      	movs	r1, #1
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fdef 	bl	8008e38 <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007260:	e00f      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007266:	3328      	adds	r3, #40	; 0x28
 8007268:	2101      	movs	r1, #1
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fe96 	bl	8008f9c <RCCEx_PLL3_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007276:	e004      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007282:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800728a:	4bc0      	ldr	r3, [pc, #768]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800728c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729a:	4abc      	ldr	r2, [pc, #752]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800729c:	430b      	orrs	r3, r1
 800729e:	6553      	str	r3, [r2, #84]	; 0x54
 80072a0:	e003      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	f002 0302 	and.w	r3, r2, #2
 80072b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ba:	2300      	movs	r3, #0
 80072bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80072c4:	460b      	mov	r3, r1
 80072c6:	4313      	orrs	r3, r2
 80072c8:	d043      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80072ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d2:	2b05      	cmp	r3, #5
 80072d4:	d824      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80072d6:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007329 	.word	0x08007329
 80072e0:	080072f5 	.word	0x080072f5
 80072e4:	0800730b 	.word	0x0800730b
 80072e8:	08007329 	.word	0x08007329
 80072ec:	08007329 	.word	0x08007329
 80072f0:	08007329 	.word	0x08007329
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f8:	3308      	adds	r3, #8
 80072fa:	2101      	movs	r1, #1
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 fd9b 	bl	8008e38 <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007308:	e00f      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800730a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730e:	3328      	adds	r3, #40	; 0x28
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fe42 	bl	8008f9c <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800731e:	e004      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007332:	4b96      	ldr	r3, [pc, #600]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f023 0107 	bic.w	r1, r3, #7
 800733a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007342:	4a92      	ldr	r2, [pc, #584]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007344:	430b      	orrs	r3, r1
 8007346:	6553      	str	r3, [r2, #84]	; 0x54
 8007348:	e003      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800734e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f002 0304 	and.w	r3, r2, #4
 800735e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007362:	2300      	movs	r3, #0
 8007364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007368:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800736c:	460b      	mov	r3, r1
 800736e:	4313      	orrs	r3, r2
 8007370:	d043      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800737a:	2b05      	cmp	r3, #5
 800737c:	d824      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073d1 	.word	0x080073d1
 8007388:	0800739d 	.word	0x0800739d
 800738c:	080073b3 	.word	0x080073b3
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d1 	.word	0x080073d1
 8007398:	080073d1 	.word	0x080073d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800739c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a0:	3308      	adds	r3, #8
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fd47 	bl	8008e38 <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073b6:	3328      	adds	r3, #40	; 0x28
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fdee 	bl	8008f9c <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073da:	4b6c      	ldr	r3, [pc, #432]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073de:	f023 0107 	bic.w	r1, r3, #7
 80073e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ea:	4a68      	ldr	r2, [pc, #416]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6593      	str	r3, [r2, #88]	; 0x58
 80073f0:	e003      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f002 0320 	and.w	r3, r2, #32
 8007406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800740a:	2300      	movs	r3, #0
 800740c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007414:	460b      	mov	r3, r1
 8007416:	4313      	orrs	r3, r2
 8007418:	d055      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007426:	d033      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800742c:	d82c      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007432:	d02f      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007438:	d826      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800743a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800743e:	d02b      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007444:	d820      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800744a:	d012      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d81a      	bhi.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d022      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745a:	d115      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800745c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007460:	3308      	adds	r3, #8
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fce7 	bl	8008e38 <RCCEx_PLL2_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007470:	e015      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007476:	3328      	adds	r3, #40	; 0x28
 8007478:	2102      	movs	r1, #2
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fd8e 	bl	8008f9c <RCCEx_PLL3_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007486:	e00a      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800748e:	e006      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007490:	bf00      	nop
 8007492:	e004      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007494:	bf00      	nop
 8007496:	e002      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007498:	bf00      	nop
 800749a:	e000      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800749c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074a6:	4b39      	ldr	r3, [pc, #228]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b6:	4a35      	ldr	r2, [pc, #212]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	6553      	str	r3, [r2, #84]	; 0x54
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80074d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d058      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074f2:	d033      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80074f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074f8:	d82c      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fe:	d02f      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007504:	d826      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800750a:	d02b      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800750c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007510:	d820      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007516:	d012      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751c:	d81a      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d022      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007526:	d115      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752c:	3308      	adds	r3, #8
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fc81 	bl	8008e38 <RCCEx_PLL2_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800753c:	e015      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007542:	3328      	adds	r3, #40	; 0x28
 8007544:	2102      	movs	r1, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fd28 	bl	8008f9c <RCCEx_PLL3_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007552:	e00a      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800755a:	e006      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800755c:	bf00      	nop
 800755e:	e004      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007560:	bf00      	nop
 8007562:	e002      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007564:	bf00      	nop
 8007566:	e000      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10e      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007572:	4b06      	ldr	r3, [pc, #24]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007576:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800757a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007582:	4a02      	ldr	r2, [pc, #8]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007584:	430b      	orrs	r3, r1
 8007586:	6593      	str	r3, [r2, #88]	; 0x58
 8007588:	e006      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800758a:	bf00      	nop
 800758c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007594:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	d055      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075c4:	d033      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80075c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075ca:	d82c      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	d02f      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80075d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d6:	d826      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80075d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075dc:	d02b      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80075de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075e2:	d820      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80075e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e8:	d012      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80075ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ee:	d81a      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d022      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80075f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f8:	d115      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075fe:	3308      	adds	r3, #8
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fc18 	bl	8008e38 <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800760e:	e015      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007614:	3328      	adds	r3, #40	; 0x28
 8007616:	2102      	movs	r1, #2
 8007618:	4618      	mov	r0, r3
 800761a:	f001 fcbf 	bl	8008f9c <RCCEx_PLL3_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007624:	e00a      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800762c:	e006      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800762e:	bf00      	nop
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800763a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007644:	4ba1      	ldr	r3, [pc, #644]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800764c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007650:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007654:	4a9d      	ldr	r2, [pc, #628]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007656:	430b      	orrs	r3, r1
 8007658:	6593      	str	r3, [r2, #88]	; 0x58
 800765a:	e003      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007660:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f002 0308 	and.w	r3, r2, #8
 8007670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800767a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800767e:	460b      	mov	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	d01e      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007690:	d10c      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007696:	3328      	adds	r3, #40	; 0x28
 8007698:	2102      	movs	r1, #2
 800769a:	4618      	mov	r0, r3
 800769c:	f001 fc7e 	bl	8008f9c <RCCEx_PLL3_Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076ac:	4b87      	ldr	r3, [pc, #540]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076bc:	4a83      	ldr	r2, [pc, #524]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f002 0310 	and.w	r3, r2, #16
 80076ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d01e      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80076e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ee:	d10c      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f4:	3328      	adds	r3, #40	; 0x28
 80076f6:	2102      	movs	r1, #2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fc4f 	bl	8008f9c <RCCEx_PLL3_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800770a:	4b70      	ldr	r3, [pc, #448]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800771a:	4a6c      	ldr	r2, [pc, #432]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800772c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007730:	2300      	movs	r3, #0
 8007732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007736:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800773a:	460b      	mov	r3, r1
 800773c:	4313      	orrs	r3, r2
 800773e:	d03e      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800774c:	d022      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800774e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007752:	d81b      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d00b      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800775e:	e015      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007764:	3308      	adds	r3, #8
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fb65 	bl	8008e38 <RCCEx_PLL2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007774:	e00f      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777a:	3328      	adds	r3, #40	; 0x28
 800777c:	2102      	movs	r1, #2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fc0c 	bl	8008f9c <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800778a:	e004      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007792:	e000      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007796:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10b      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800779e:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077ae:	4a47      	ldr	r2, [pc, #284]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6593      	str	r3, [r2, #88]	; 0x58
 80077b4:	e003      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80077cc:	2300      	movs	r3, #0
 80077ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80077d4:	460b      	mov	r3, r1
 80077d6:	4313      	orrs	r3, r2
 80077d8:	d03b      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80077da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e6:	d01f      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80077e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077ec:	d818      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80077ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f2:	d003      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80077f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f8:	d007      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80077fa:	e011      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fc:	4b33      	ldr	r3, [pc, #204]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a32      	ldr	r2, [pc, #200]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780e:	3328      	adds	r3, #40	; 0x28
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fbc2 	bl	8008f9c <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007832:	4b26      	ldr	r3, [pc, #152]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007836:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800783a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	4a22      	ldr	r2, [pc, #136]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6553      	str	r3, [r2, #84]	; 0x54
 8007848:	e003      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800784e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800785e:	673b      	str	r3, [r7, #112]	; 0x70
 8007860:	2300      	movs	r3, #0
 8007862:	677b      	str	r3, [r7, #116]	; 0x74
 8007864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007868:	460b      	mov	r3, r1
 800786a:	4313      	orrs	r3, r2
 800786c:	d034      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800786e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787c:	d007      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800787e:	e011      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800788c:	e00e      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800788e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007892:	3308      	adds	r3, #8
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 face 	bl	8008e38 <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10d      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	4a02      	ldr	r2, [pc, #8]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078c4:	430b      	orrs	r3, r1
 80078c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078c8:	e006      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80078ca:	bf00      	nop
 80078cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80078e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e6:	2300      	movs	r3, #0
 80078e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80078ee:	460b      	mov	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	d00c      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f8:	3328      	adds	r3, #40	; 0x28
 80078fa:	2102      	movs	r1, #2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fb4d 	bl	8008f9c <RCCEx_PLL3_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800790e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800791a:	663b      	str	r3, [r7, #96]	; 0x60
 800791c:	2300      	movs	r3, #0
 800791e:	667b      	str	r3, [r7, #100]	; 0x64
 8007920:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007924:	460b      	mov	r3, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d038      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800792a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007936:	d018      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793c:	d811      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007942:	d014      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007948:	d80b      	bhi.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d011      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800794e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007952:	d106      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4bc3      	ldr	r3, [pc, #780]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4ac2      	ldr	r2, [pc, #776]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007960:	e008      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007968:	e004      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800797c:	4bb9      	ldr	r3, [pc, #740]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800797e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007980:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798c:	4ab5      	ldr	r2, [pc, #724]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6553      	str	r3, [r2, #84]	; 0x54
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007998:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800799c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079aa:	2300      	movs	r3, #0
 80079ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80079b2:	460b      	mov	r3, r1
 80079b4:	4313      	orrs	r3, r2
 80079b6:	d009      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079b8:	4baa      	ldr	r3, [pc, #680]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c6:	4aa7      	ldr	r2, [pc, #668]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80079d8:	653b      	str	r3, [r7, #80]	; 0x50
 80079da:	2300      	movs	r3, #0
 80079dc:	657b      	str	r3, [r7, #84]	; 0x54
 80079de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079e8:	4b9e      	ldr	r3, [pc, #632]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80079f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a9b      	ldr	r2, [pc, #620]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80079fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a12:	460b      	mov	r3, r1
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007a18:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a26:	4a8f      	ldr	r2, [pc, #572]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a38:	643b      	str	r3, [r7, #64]	; 0x40
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a42:	460b      	mov	r3, r1
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d00e      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a48:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	4a85      	ldr	r2, [pc, #532]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a52:	6113      	str	r3, [r2, #16]
 8007a54:	4b83      	ldr	r3, [pc, #524]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a56:	6919      	ldr	r1, [r3, #16]
 8007a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a60:	4a80      	ldr	r2, [pc, #512]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a74:	2300      	movs	r3, #0
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a82:	4b78      	ldr	r3, [pc, #480]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	4a74      	ldr	r2, [pc, #464]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a92:	430b      	orrs	r3, r1
 8007a94:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007aac:	460b      	mov	r3, r1
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ac2:	4a68      	ldr	r2, [pc, #416]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ada:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d011      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f9a3 	bl	8008e38 <RCCEx_PLL2_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007af8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	2100      	movs	r1, #0
 8007b12:	6239      	str	r1, [r7, #32]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d011      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f983 	bl	8008e38 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	2100      	movs	r1, #0
 8007b52:	61b9      	str	r1, [r7, #24]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d011      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b68:	3308      	adds	r3, #8
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f963 	bl	8008e38 <RCCEx_PLL2_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	2100      	movs	r1, #0
 8007b92:	6139      	str	r1, [r7, #16]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d011      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba8:	3328      	adds	r3, #40	; 0x28
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 f9f5 	bl	8008f9c <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007bb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d011      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be8:	3328      	adds	r3, #40	; 0x28
 8007bea:	2101      	movs	r1, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 f9d5 	bl	8008f9c <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	2100      	movs	r1, #0
 8007c12:	6039      	str	r1, [r7, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	607b      	str	r3, [r7, #4]
 8007c1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d011      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c28:	3328      	adds	r3, #40	; 0x28
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 f9b5 	bl	8008f9c <RCCEx_PLL3_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007c38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007c48:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400

08007c68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b090      	sub	sp, #64	; 0x40
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	f040 8094 	bne.w	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007c80:	4b97      	ldr	r3, [pc, #604]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	f200 8087 	bhi.w	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007cfd 	.word	0x08007cfd
 8007ca4:	08007d99 	.word	0x08007d99
 8007ca8:	08007d25 	.word	0x08007d25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cac:	4b8c      	ldr	r3, [pc, #560]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cb8:	d108      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 ff68 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc8:	f000 bc97 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	f000 bc93 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd4:	4b82      	ldr	r3, [pc, #520]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce0:	d108      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce2:	f107 0318 	add.w	r3, r7, #24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fcac 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf0:	f000 bc83 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf8:	f000 bc7f 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cfc:	4b78      	ldr	r3, [pc, #480]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d08:	d108      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fdec 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d18:	f000 bc6f 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d20:	f000 bc6b 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b6e      	ldr	r3, [pc, #440]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d2e:	4b6c      	ldr	r3, [pc, #432]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d10c      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d40:	4b67      	ldr	r3, [pc, #412]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	4a66      	ldr	r2, [pc, #408]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d52:	e01f      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d54:	4b62      	ldr	r3, [pc, #392]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d60:	d106      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d68:	d102      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d6a:	4b5f      	ldr	r3, [pc, #380]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d70:	4b5b      	ldr	r3, [pc, #364]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d84:	d102      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d86:	4b59      	ldr	r3, [pc, #356]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d90:	f000 bc33 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d94:	f000 bc31 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d98:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9c:	f000 bc2d 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da4:	f000 bc29 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007db0:	430b      	orrs	r3, r1
 8007db2:	f040 809f 	bne.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007db6:	4b4a      	ldr	r3, [pc, #296]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	d04d      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	f200 8084 	bhi.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2bc0      	cmp	r3, #192	; 0xc0
 8007dd6:	d07d      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2bc0      	cmp	r3, #192	; 0xc0
 8007ddc:	d87d      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d02d      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2b80      	cmp	r3, #128	; 0x80
 8007de8:	d877      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d012      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007df6:	e070      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007df8:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e04:	d107      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fec2 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e14:	e3f1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1a:	e3ee      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e1c:	4b30      	ldr	r3, [pc, #192]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e28:	d107      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2a:	f107 0318 	add.w	r3, r7, #24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fc08 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e38:	e3df      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e3e:	e3dc      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e40:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d107      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4e:	f107 030c 	add.w	r3, r7, #12
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fd4a 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5c:	e3cd      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e62:	e3ca      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e64:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d10c      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e92:	e01e      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ea8:	d102      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eae:	e010      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d102      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eca:	e002      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ed0:	e393      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ed2:	e392      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e38f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ede:	e38c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	003d0900 	.word	0x003d0900
 8007eec:	016e3600 	.word	0x016e3600
 8007ef0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007efc:	430b      	orrs	r3, r1
 8007efe:	f040 809c 	bne.w	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007f02:	4b9e      	ldr	r3, [pc, #632]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007f0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d054      	beq.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1a:	f200 808b 	bhi.w	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f24:	f000 8083 	beq.w	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f2e:	f200 8081 	bhi.w	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f38:	d02f      	beq.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f40:	d878      	bhi.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4e:	d012      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007f50:	e070      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f52:	4b8a      	ldr	r3, [pc, #552]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f5e:	d107      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fe15 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f6e:	e344      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f74:	e341      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f76:	4b81      	ldr	r3, [pc, #516]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f82:	d107      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f84:	f107 0318 	add.w	r3, r7, #24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fb5b 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f92:	e332      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f98:	e32f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f9a:	4b78      	ldr	r3, [pc, #480]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa6:	d107      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa8:	f107 030c 	add.w	r3, r7, #12
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fc9d 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb6:	e320      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbc:	e31d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fbe:	4b6f      	ldr	r3, [pc, #444]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc8:	4b6c      	ldr	r3, [pc, #432]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d10c      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fda:	4b68      	ldr	r3, [pc, #416]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	08db      	lsrs	r3, r3, #3
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	4a66      	ldr	r2, [pc, #408]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fec:	e01e      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fee:	4b63      	ldr	r3, [pc, #396]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffa:	d106      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008002:	d102      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008004:	4b5f      	ldr	r3, [pc, #380]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008008:	e010      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800800a:	4b5c      	ldr	r3, [pc, #368]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008016:	d106      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801e:	d102      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008020:	4b59      	ldr	r3, [pc, #356]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008024:	e002      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800802a:	e2e6      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800802c:	e2e5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800802e:	4b57      	ldr	r3, [pc, #348]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008032:	e2e2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008038:	e2df      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800803a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008042:	430b      	orrs	r3, r1
 8008044:	f040 80a7 	bne.w	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008048:	4b4c      	ldr	r3, [pc, #304]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008050:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008058:	d055      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008060:	f200 8096 	bhi.w	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800806a:	f000 8084 	beq.w	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008074:	f200 808c 	bhi.w	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800807e:	d030      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008086:	f200 8083 	bhi.w	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d012      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008098:	e07a      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800809a:	4b38      	ldr	r3, [pc, #224]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a6:	d107      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fd71 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b6:	e2a0      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080bc:	e29d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080be:	4b2f      	ldr	r3, [pc, #188]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ca:	d107      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080cc:	f107 0318 	add.w	r3, r7, #24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fab7 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080da:	e28e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e0:	e28b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080e2:	4b26      	ldr	r3, [pc, #152]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fbf9 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	e27c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008104:	e279      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800810e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008110:	4b1a      	ldr	r3, [pc, #104]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b04      	cmp	r3, #4
 800811a:	d10c      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800811c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	08db      	lsrs	r3, r3, #3
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	4a14      	ldr	r2, [pc, #80]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800812e:	fa22 f303 	lsr.w	r3, r2, r3
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008134:	e01e      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008142:	d106      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800814a:	d102      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008150:	e010      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815e:	d106      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008166:	d102      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800816c:	e002      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008172:	e242      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008174:	e241      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817a:	e23e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800817c:	58024400 	.word	0x58024400
 8008180:	03d09000 	.word	0x03d09000
 8008184:	003d0900 	.word	0x003d0900
 8008188:	016e3600 	.word	0x016e3600
 800818c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008194:	e231      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800819a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800819e:	430b      	orrs	r3, r1
 80081a0:	f040 8085 	bne.w	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081a4:	4b9c      	ldr	r3, [pc, #624]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081b4:	d06b      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081bc:	d874      	bhi.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081c4:	d056      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081cc:	d86c      	bhi.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081d4:	d03b      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081dc:	d864      	bhi.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e4:	d021      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ec:	d85c      	bhi.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fa:	d004      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80081fc:	e054      	b.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80081fe:	f7fe fb5f 	bl	80068c0 <HAL_RCC_GetPCLK1Freq>
 8008202:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008204:	e1f9      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008206:	4b84      	ldr	r3, [pc, #528]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008212:	d107      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008214:	f107 0318 	add.w	r3, r7, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fa13 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008222:	e1ea      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008228:	e1e7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800822a:	4b7b      	ldr	r3, [pc, #492]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008236:	d107      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fb55 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008246:	e1d8      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824c:	e1d5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800824e:	4b72      	ldr	r3, [pc, #456]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b04      	cmp	r3, #4
 8008258:	d109      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800825a:	4b6f      	ldr	r3, [pc, #444]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	08db      	lsrs	r3, r3, #3
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	4a6d      	ldr	r2, [pc, #436]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008266:	fa22 f303 	lsr.w	r3, r2, r3
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826c:	e1c5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008272:	e1c2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008274:	4b68      	ldr	r3, [pc, #416]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008280:	d102      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008282:	4b67      	ldr	r3, [pc, #412]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008286:	e1b8      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828c:	e1b5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800828e:	4b62      	ldr	r3, [pc, #392]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800829a:	d102      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800829c:	4b61      	ldr	r3, [pc, #388]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a0:	e1ab      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a6:	e1a8      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ac:	e1a5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80082b6:	430b      	orrs	r3, r1
 80082b8:	d173      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80082ba:	4b57      	ldr	r3, [pc, #348]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ca:	d02f      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d2:	d863      	bhi.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e0:	d012      	beq.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80082e2:	e05b      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082e4:	4b4c      	ldr	r3, [pc, #304]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082f0:	d107      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f9a4 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008300:	e17b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008306:	e178      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008308:	4b43      	ldr	r3, [pc, #268]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008314:	d107      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fae6 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008324:	e169      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832a:	e166      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800832c:	4b3a      	ldr	r3, [pc, #232]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800832e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008334:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008336:	4b38      	ldr	r3, [pc, #224]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b04      	cmp	r3, #4
 8008340:	d10c      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008348:	4b33      	ldr	r3, [pc, #204]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	08db      	lsrs	r3, r3, #3
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	4a32      	ldr	r2, [pc, #200]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008354:	fa22 f303 	lsr.w	r3, r2, r3
 8008358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800835a:	e01e      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800835c:	4b2e      	ldr	r3, [pc, #184]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008368:	d106      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008370:	d102      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008372:	4b2b      	ldr	r3, [pc, #172]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008376:	e010      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008378:	4b27      	ldr	r3, [pc, #156]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008384:	d106      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838c:	d102      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800838e:	4b25      	ldr	r3, [pc, #148]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008392:	e002      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008398:	e12f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800839a:	e12e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a0:	e12b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80083aa:	430b      	orrs	r3, r1
 80083ac:	d13c      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c4:	d012      	beq.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80083c6:	e023      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083c8:	4b13      	ldr	r3, [pc, #76]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083d4:	d107      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fbda 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e4:	e109      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ea:	e106      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f8:	d107      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fa:	f107 0318 	add.w	r3, r7, #24
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f920 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008408:	e0f7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840e:	e0f4      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008414:	e0f1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
 800841c:	03d09000 	.word	0x03d09000
 8008420:	003d0900 	.word	0x003d0900
 8008424:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008430:	430b      	orrs	r3, r1
 8008432:	f040 8091 	bne.w	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008436:	4b73      	ldr	r3, [pc, #460]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008446:	f000 8081 	beq.w	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008450:	d87f      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008458:	d06b      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008460:	d877      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008468:	d056      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008470:	d86f      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008478:	d03b      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008480:	d867      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008488:	d021      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008490:	d85f      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800849e:	d004      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80084a0:	e057      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084a2:	f000 f8b9 	bl	8008618 <HAL_RCCEx_GetD3PCLK1Freq>
 80084a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084a8:	e0a7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084aa:	4b56      	ldr	r3, [pc, #344]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b8:	f107 0318 	add.w	r3, r7, #24
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f8c1 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c6:	e098      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084cc:	e095      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ce:	4b4d      	ldr	r3, [pc, #308]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fa03 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e086      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e083      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084f2:	4b44      	ldr	r3, [pc, #272]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d109      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084fe:	4b41      	ldr	r3, [pc, #260]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a3f      	ldr	r2, [pc, #252]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	e073      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008516:	e070      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008518:	4b3a      	ldr	r3, [pc, #232]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008524:	d102      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008526:	4b39      	ldr	r3, [pc, #228]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852a:	e066      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008530:	e063      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008532:	4b34      	ldr	r3, [pc, #208]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853e:	d102      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008540:	4b33      	ldr	r3, [pc, #204]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008544:	e059      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854a:	e056      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800854c:	4b31      	ldr	r3, [pc, #196]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008550:	e053      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008556:	e050      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008560:	430b      	orrs	r3, r1
 8008562:	d148      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d02a      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857c:	d838      	bhi.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858a:	d00d      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800858c:	e030      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859a:	d102      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800859c:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a0:	e02b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a6:	e028      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085a8:	4b16      	ldr	r3, [pc, #88]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 faea 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c4:	e019      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ca:	e016      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085da:	f107 0318 	add.w	r3, r7, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f830 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e8:	e007      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ee:	e004      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f4:	e001      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80085fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3740      	adds	r7, #64	; 0x40
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	58024400 	.word	0x58024400
 8008608:	03d09000 	.word	0x03d09000
 800860c:	003d0900 	.word	0x003d0900
 8008610:	016e3600 	.word	0x016e3600
 8008614:	00bb8000 	.word	0x00bb8000

08008618 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800861c:	f7fe f920 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 8008620:	4602      	mov	r2, r0
 8008622:	4b06      	ldr	r3, [pc, #24]	; (800863c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	091b      	lsrs	r3, r3, #4
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	4904      	ldr	r1, [pc, #16]	; (8008640 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800862e:	5ccb      	ldrb	r3, [r1, r3]
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008638:	4618      	mov	r0, r3
 800863a:	bd80      	pop	{r7, pc}
 800863c:	58024400 	.word	0x58024400
 8008640:	080091d8 	.word	0x080091d8

08008644 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	; 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800864c:	4ba1      	ldr	r3, [pc, #644]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008656:	4b9f      	ldr	r3, [pc, #636]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	0b1b      	lsrs	r3, r3, #12
 800865c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008660:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008662:	4b9c      	ldr	r3, [pc, #624]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800866e:	4b99      	ldr	r3, [pc, #612]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8111 	beq.w	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b02      	cmp	r3, #2
 8008696:	f000 8083 	beq.w	80087a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b02      	cmp	r3, #2
 800869e:	f200 80a1 	bhi.w	80087e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d056      	beq.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086ae:	e099      	b.n	80087e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b0:	4b88      	ldr	r3, [pc, #544]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02d      	beq.n	8008718 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086bc:	4b85      	ldr	r3, [pc, #532]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	08db      	lsrs	r3, r3, #3
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	4a84      	ldr	r2, [pc, #528]	; (80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e6:	4b7b      	ldr	r3, [pc, #492]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008716:	e087      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b6a      	ldr	r3, [pc, #424]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a03 	vldr	s12, [r7, #12]
 800873e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875a:	e065      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800876a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876e:	4b59      	ldr	r3, [pc, #356]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008782:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800879e:	e043      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	4b48      	ldr	r3, [pc, #288]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e2:	e021      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b37      	ldr	r3, [pc, #220]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a03 	vldr	s12, [r7, #12]
 800880a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008826:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008828:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	0a5b      	lsrs	r3, r3, #9
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008856:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	0c1b      	lsrs	r3, r3, #16
 800885c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800886c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008870:	edd7 6a07 	vldr	s13, [r7, #28]
 8008874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887c:	ee17 2a90 	vmov	r2, s15
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	0e1b      	lsrs	r3, r3, #24
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800889a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889e:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088aa:	ee17 2a90 	vmov	r2, s15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088b2:	e008      	b.n	80088c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	609a      	str	r2, [r3, #8]
}
 80088c6:	bf00      	nop
 80088c8:	3724      	adds	r7, #36	; 0x24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	58024400 	.word	0x58024400
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	46000000 	.word	0x46000000
 80088e0:	4c742400 	.word	0x4c742400
 80088e4:	4a742400 	.word	0x4a742400
 80088e8:	4bb71b00 	.word	0x4bb71b00

080088ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b089      	sub	sp, #36	; 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f4:	4ba1      	ldr	r3, [pc, #644]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088fe:	4b9f      	ldr	r3, [pc, #636]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	0d1b      	lsrs	r3, r3, #20
 8008904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008908:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800890a:	4b9c      	ldr	r3, [pc, #624]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008916:	4b99      	ldr	r3, [pc, #612]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8111 	beq.w	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f000 8083 	beq.w	8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b02      	cmp	r3, #2
 8008946:	f200 80a1 	bhi.w	8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d056      	beq.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008956:	e099      	b.n	8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008958:	4b88      	ldr	r3, [pc, #544]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02d      	beq.n	80089c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008964:	4b85      	ldr	r3, [pc, #532]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	4a84      	ldr	r2, [pc, #528]	; (8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b7b      	ldr	r3, [pc, #492]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089be:	e087      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b6a      	ldr	r3, [pc, #424]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a02:	e065      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a46:	e043      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b48      	ldr	r3, [pc, #288]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8a:	e021      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	4b37      	ldr	r3, [pc, #220]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ace:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ad0:	4b2a      	ldr	r3, [pc, #168]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	0a5b      	lsrs	r3, r3, #9
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af6:	ee17 2a90 	vmov	r2, s15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008afe:	4b1f      	ldr	r3, [pc, #124]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b24:	ee17 2a90 	vmov	r2, s15
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	0e1b      	lsrs	r3, r3, #24
 8008b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b52:	ee17 2a90 	vmov	r2, s15
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b5a:	e008      	b.n	8008b6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
}
 8008b6e:	bf00      	nop
 8008b70:	3724      	adds	r7, #36	; 0x24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	03d09000 	.word	0x03d09000
 8008b84:	46000000 	.word	0x46000000
 8008b88:	4c742400 	.word	0x4c742400
 8008b8c:	4a742400 	.word	0x4a742400
 8008b90:	4bb71b00 	.word	0x4bb71b00

08008b94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b089      	sub	sp, #36	; 0x24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b9c:	4ba0      	ldr	r3, [pc, #640]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ba6:	4b9e      	ldr	r3, [pc, #632]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bb2:	4b9b      	ldr	r3, [pc, #620]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bbc:	4b98      	ldr	r3, [pc, #608]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc0:	08db      	lsrs	r3, r3, #3
 8008bc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 8111 	beq.w	8008e02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	f000 8083 	beq.w	8008cee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	f200 80a1 	bhi.w	8008d32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d056      	beq.n	8008caa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008bfc:	e099      	b.n	8008d32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfe:	4b88      	ldr	r3, [pc, #544]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d02d      	beq.n	8008c66 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c0a:	4b85      	ldr	r3, [pc, #532]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	4a83      	ldr	r2, [pc, #524]	; (8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c34:	4b7a      	ldr	r3, [pc, #488]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c48:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c60:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c64:	e087      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c78:	4b69      	ldr	r3, [pc, #420]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ca8:	e065      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	ee07 3a90 	vmov	s15, r3
 8008cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbc:	4b58      	ldr	r3, [pc, #352]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cec:	e043      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d00:	4b47      	ldr	r3, [pc, #284]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d30:	e021      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d44:	4b36      	ldr	r3, [pc, #216]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d76:	4b2a      	ldr	r3, [pc, #168]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	0a5b      	lsrs	r3, r3, #9
 8008d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d9c:	ee17 2a90 	vmov	r2, s15
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dca:	ee17 2a90 	vmov	r2, s15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dd2:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	0e1b      	lsrs	r3, r3, #24
 8008dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df8:	ee17 2a90 	vmov	r2, s15
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e00:	e008      	b.n	8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
}
 8008e14:	bf00      	nop
 8008e16:	3724      	adds	r7, #36	; 0x24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	58024400 	.word	0x58024400
 8008e24:	03d09000 	.word	0x03d09000
 8008e28:	46000000 	.word	0x46000000
 8008e2c:	4c742400 	.word	0x4c742400
 8008e30:	4a742400 	.word	0x4a742400
 8008e34:	4bb71b00 	.word	0x4bb71b00

08008e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e46:	4b53      	ldr	r3, [pc, #332]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d101      	bne.n	8008e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e099      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e56:	4b4f      	ldr	r3, [pc, #316]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a4e      	ldr	r2, [pc, #312]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e62:	f7f8 fadb 	bl	800141c <HAL_GetTick>
 8008e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e68:	e008      	b.n	8008e7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e6a:	f7f8 fad7 	bl	800141c <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d901      	bls.n	8008e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e086      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e7c:	4b45      	ldr	r3, [pc, #276]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f0      	bne.n	8008e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	031b      	lsls	r3, r3, #12
 8008e96:	493f      	ldr	r1, [pc, #252]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	025b      	lsls	r3, r3, #9
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	061b      	lsls	r3, r3, #24
 8008ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ecc:	4931      	ldr	r1, [pc, #196]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ed2:	4b30      	ldr	r3, [pc, #192]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	492d      	ldr	r1, [pc, #180]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ee4:	4b2b      	ldr	r3, [pc, #172]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	f023 0220 	bic.w	r2, r3, #32
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	4928      	ldr	r1, [pc, #160]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ef6:	4b27      	ldr	r3, [pc, #156]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f02:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f06:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <RCCEx_PLL2_Config+0x160>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	69d2      	ldr	r2, [r2, #28]
 8008f0e:	00d2      	lsls	r2, r2, #3
 8008f10:	4920      	ldr	r1, [pc, #128]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f16:	4b1f      	ldr	r3, [pc, #124]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	f043 0310 	orr.w	r3, r3, #16
 8008f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f28:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	4a19      	ldr	r2, [pc, #100]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f34:	e00f      	b.n	8008f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d106      	bne.n	8008f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f3c:	4b15      	ldr	r3, [pc, #84]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	4a14      	ldr	r2, [pc, #80]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f48:	e005      	b.n	8008f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	4a11      	ldr	r2, [pc, #68]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f56:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a0e      	ldr	r2, [pc, #56]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f62:	f7f8 fa5b 	bl	800141c <HAL_GetTick>
 8008f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f68:	e008      	b.n	8008f7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f6a:	f7f8 fa57 	bl	800141c <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	58024400 	.word	0x58024400
 8008f98:	ffff0007 	.word	0xffff0007

08008f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008faa:	4b53      	ldr	r3, [pc, #332]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d101      	bne.n	8008fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e099      	b.n	80090ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fba:	4b4f      	ldr	r3, [pc, #316]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a4e      	ldr	r2, [pc, #312]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fc6:	f7f8 fa29 	bl	800141c <HAL_GetTick>
 8008fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fcc:	e008      	b.n	8008fe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fce:	f7f8 fa25 	bl	800141c <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d901      	bls.n	8008fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e086      	b.n	80090ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fe0:	4b45      	ldr	r3, [pc, #276]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1f0      	bne.n	8008fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fec:	4b42      	ldr	r3, [pc, #264]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	051b      	lsls	r3, r3, #20
 8008ffa:	493f      	ldr	r1, [pc, #252]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	3b01      	subs	r3, #1
 8009006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	3b01      	subs	r3, #1
 8009010:	025b      	lsls	r3, r3, #9
 8009012:	b29b      	uxth	r3, r3
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	041b      	lsls	r3, r3, #16
 800901e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	3b01      	subs	r3, #1
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009030:	4931      	ldr	r1, [pc, #196]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009032:	4313      	orrs	r3, r2
 8009034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009036:	4b30      	ldr	r3, [pc, #192]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	492d      	ldr	r1, [pc, #180]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009048:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	4928      	ldr	r1, [pc, #160]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800905a:	4b27      	ldr	r3, [pc, #156]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009066:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906a:	4b24      	ldr	r3, [pc, #144]	; (80090fc <RCCEx_PLL3_Config+0x160>)
 800906c:	4013      	ands	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	69d2      	ldr	r2, [r2, #28]
 8009072:	00d2      	lsls	r2, r2, #3
 8009074:	4920      	ldr	r1, [pc, #128]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009076:	4313      	orrs	r3, r2
 8009078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800907a:	4b1f      	ldr	r3, [pc, #124]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4a1e      	ldr	r2, [pc, #120]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	4a19      	ldr	r2, [pc, #100]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009098:	e00f      	b.n	80090ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d106      	bne.n	80090ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090a0:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	4a14      	ldr	r2, [pc, #80]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090ac:	e005      	b.n	80090ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ae:	4b12      	ldr	r3, [pc, #72]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	4a11      	ldr	r2, [pc, #68]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a0e      	ldr	r2, [pc, #56]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7f8 f9a9 	bl	800141c <HAL_GetTick>
 80090ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090cc:	e008      	b.n	80090e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ce:	f7f8 f9a5 	bl	800141c <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e006      	b.n	80090ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0f0      	beq.n	80090ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
 80090fc:	ffff0007 	.word	0xffff0007

08009100 <memset>:
 8009100:	4402      	add	r2, r0
 8009102:	4603      	mov	r3, r0
 8009104:	4293      	cmp	r3, r2
 8009106:	d100      	bne.n	800910a <memset+0xa>
 8009108:	4770      	bx	lr
 800910a:	f803 1b01 	strb.w	r1, [r3], #1
 800910e:	e7f9      	b.n	8009104 <memset+0x4>

08009110 <__libc_init_array>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4d0d      	ldr	r5, [pc, #52]	; (8009148 <__libc_init_array+0x38>)
 8009114:	4c0d      	ldr	r4, [pc, #52]	; (800914c <__libc_init_array+0x3c>)
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	2600      	movs	r6, #0
 800911c:	42a6      	cmp	r6, r4
 800911e:	d109      	bne.n	8009134 <__libc_init_array+0x24>
 8009120:	4d0b      	ldr	r5, [pc, #44]	; (8009150 <__libc_init_array+0x40>)
 8009122:	4c0c      	ldr	r4, [pc, #48]	; (8009154 <__libc_init_array+0x44>)
 8009124:	f000 f826 	bl	8009174 <_init>
 8009128:	1b64      	subs	r4, r4, r5
 800912a:	10a4      	asrs	r4, r4, #2
 800912c:	2600      	movs	r6, #0
 800912e:	42a6      	cmp	r6, r4
 8009130:	d105      	bne.n	800913e <__libc_init_array+0x2e>
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	f855 3b04 	ldr.w	r3, [r5], #4
 8009138:	4798      	blx	r3
 800913a:	3601      	adds	r6, #1
 800913c:	e7ee      	b.n	800911c <__libc_init_array+0xc>
 800913e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009142:	4798      	blx	r3
 8009144:	3601      	adds	r6, #1
 8009146:	e7f2      	b.n	800912e <__libc_init_array+0x1e>
 8009148:	080091f0 	.word	0x080091f0
 800914c:	080091f0 	.word	0x080091f0
 8009150:	080091f0 	.word	0x080091f0
 8009154:	080091f4 	.word	0x080091f4

08009158 <memcpy>:
 8009158:	440a      	add	r2, r1
 800915a:	4291      	cmp	r1, r2
 800915c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009160:	d100      	bne.n	8009164 <memcpy+0xc>
 8009162:	4770      	bx	lr
 8009164:	b510      	push	{r4, lr}
 8009166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916e:	4291      	cmp	r1, r2
 8009170:	d1f9      	bne.n	8009166 <memcpy+0xe>
 8009172:	bd10      	pop	{r4, pc}

08009174 <_init>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr

08009180 <_fini>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	bf00      	nop
 8009184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009186:	bc08      	pop	{r3}
 8009188:	469e      	mov	lr, r3
 800918a:	4770      	bx	lr

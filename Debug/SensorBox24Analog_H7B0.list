
SensorBox24Analog_H7B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac90  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800af3c  0800af3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800afb0  0800afb0  0000bfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800afb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  24000010  0800afc8  0000c010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400093c  0800afc8  0000c93c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c86a  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003091  00000000  00000000  000288a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018d8  00000000  00000000  0002b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001363  00000000  00000000  0002d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003408e  00000000  00000000  0002e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f714  00000000  00000000  00062602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a846  00000000  00000000  00081d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc55c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006d80  00000000  00000000  001dc5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800af24 	.word	0x0800af24

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800af24 	.word	0x0800af24

080002ec <Config_Setup>:
#include "config.h"

#define ID 1


void Config_Setup(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
#if ID == 1
    Config_1();
 80002f0:	f000 f802 	bl	80002f8 <Config_1>
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Config_1>:

void Config_1(void) {
 80002f8:	b490      	push	{r4, r7}
 80002fa:	b09a      	sub	sp, #104	@ 0x68
 80002fc:	af00      	add	r7, sp, #0

	//initialize the sensors
	for (int i = 0; i < 16; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	667b      	str	r3, [r7, #100]	@ 0x64
 8000302:	e026      	b.n	8000352 <Config_1+0x5a>
		sensors[i].transfer_function = TF_3V3;
 8000304:	4a68      	ldr	r2, [pc, #416]	@ (80004a8 <Config_1+0x1b0>)
 8000306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000308:	011b      	lsls	r3, r3, #4
 800030a:	4413      	add	r3, r2
 800030c:	4a67      	ldr	r2, [pc, #412]	@ (80004ac <Config_1+0x1b4>)
 800030e:	601a      	str	r2, [r3, #0]
		sensors[i].CAN_ID = 0;
 8000310:	4a65      	ldr	r2, [pc, #404]	@ (80004a8 <Config_1+0x1b0>)
 8000312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	4413      	add	r3, r2
 8000318:	3304      	adds	r3, #4
 800031a:	2200      	movs	r2, #0
 800031c:	801a      	strh	r2, [r3, #0]
		sensors[i].CAN_interval = 100;
 800031e:	4a62      	ldr	r2, [pc, #392]	@ (80004a8 <Config_1+0x1b0>)
 8000320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	4413      	add	r3, r2
 8000326:	3306      	adds	r3, #6
 8000328:	2264      	movs	r2, #100	@ 0x64
 800032a:	801a      	strh	r2, [r3, #0]
		sensors[i].averages = 0;
 800032c:	4a5e      	ldr	r2, [pc, #376]	@ (80004a8 <Config_1+0x1b0>)
 800032e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	4413      	add	r3, r2
 8000334:	3308      	adds	r3, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		sensors[i].pin = i;
 800033a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800033c:	b2d9      	uxtb	r1, r3
 800033e:	4a5a      	ldr	r2, [pc, #360]	@ (80004a8 <Config_1+0x1b0>)
 8000340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	4413      	add	r3, r2
 8000346:	330c      	adds	r3, #12
 8000348:	460a      	mov	r2, r1
 800034a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 800034c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800034e:	3301      	adds	r3, #1
 8000350:	667b      	str	r3, [r7, #100]	@ 0x64
 8000352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000354:	2b0f      	cmp	r3, #15
 8000356:	ddd5      	ble.n	8000304 <Config_1+0xc>
	}

	// Sensor definitions
	Sensor APPS1 = {TF_APPS, 1, 100, 0, V24_in1};
 8000358:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	4b52      	ldr	r3, [pc, #328]	@ (80004b0 <Config_1+0x1b8>)
 8000368:	657b      	str	r3, [r7, #84]	@ 0x54
 800036a:	2301      	movs	r3, #1
 800036c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000370:	2364      	movs	r3, #100	@ 0x64
 8000372:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	Sensor APPS2 = {TF_APPS, 2, 100, 0, V5_in0};
 8000376:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	4b4a      	ldr	r3, [pc, #296]	@ (80004b0 <Config_1+0x1b8>)
 8000386:	647b      	str	r3, [r7, #68]	@ 0x44
 8000388:	2302      	movs	r3, #2
 800038a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800038e:	2364      	movs	r3, #100	@ 0x64
 8000390:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8000394:	230b      	movs	r3, #11
 8000396:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 800039a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <Config_1+0x1bc>)
 80003aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80003ac:	2303      	movs	r3, #3
 80003ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80003b0:	2364      	movs	r3, #100	@ 0x64
 80003b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80003b4:	230d      	movs	r3, #13
 80003b6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in3};
 80003ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	4b3b      	ldr	r3, [pc, #236]	@ (80004b8 <Config_1+0x1c0>)
 80003ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80003cc:	230c      	movs	r3, #12
 80003ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80003d0:	2364      	movs	r3, #100	@ 0x64
 80003d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80003d4:	230c      	movs	r3, #12
 80003d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in4};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <Config_1+0x1c0>)
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	230d      	movs	r3, #13
 80003ee:	833b      	strh	r3, [r7, #24]
 80003f0:	2364      	movs	r3, #100	@ 0x64
 80003f2:	837b      	strh	r3, [r7, #26]
 80003f4:	2309      	movs	r3, #9
 80003f6:	f887 3020 	strb.w	r3, [r7, #32]
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in5};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <Config_1+0x1c0>)
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	230e      	movs	r3, #14
 800040c:	813b      	strh	r3, [r7, #8]
 800040e:	2364      	movs	r3, #100	@ 0x64
 8000410:	817b      	strh	r3, [r7, #10]
 8000412:	2308      	movs	r3, #8
 8000414:	743b      	strb	r3, [r7, #16]

    sensors[APPS1.pin] = APPS1;
 8000416:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800041a:	4a23      	ldr	r2, [pc, #140]	@ (80004a8 <Config_1+0x1b0>)
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	4413      	add	r3, r2
 8000420:	461c      	mov	r4, r3
 8000422:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[APPS2.pin] = APPS2;
 800042c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000430:	4a1d      	ldr	r2, [pc, #116]	@ (80004a8 <Config_1+0x1b0>)
 8000432:	011b      	lsls	r3, r3, #4
 8000434:	4413      	add	r3, r2
 8000436:	461c      	mov	r4, r3
 8000438:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800043c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensors[BPPS.pin] = BPPS;
 8000442:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000446:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <Config_1+0x1b0>)
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	461c      	mov	r4, r3
 800044e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN1.pin] = BTN1;
 8000458:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800045c:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <Config_1+0x1b0>)
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	461c      	mov	r4, r3
 8000464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800046a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN2.pin] = BTN2;
 800046e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000472:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <Config_1+0x1b0>)
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	4413      	add	r3, r2
 8000478:	461c      	mov	r4, r3
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sensors[BTN3.pin] = BTN3;
 8000484:	7c3b      	ldrb	r3, [r7, #16]
 8000486:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <Config_1+0x1b0>)
 8000488:	011b      	lsls	r3, r3, #4
 800048a:	4413      	add	r3, r2
 800048c:	461c      	mov	r4, r3
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	

    CAN_interval = 100;
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <Config_1+0x1c4>)
 8000498:	2264      	movs	r2, #100	@ 0x64
 800049a:	801a      	strh	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3768      	adds	r7, #104	@ 0x68
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc90      	pop	{r4, r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	240003a0 	.word	0x240003a0
 80004ac:	08001961 	.word	0x08001961
 80004b0:	080019d9 	.word	0x080019d9
 80004b4:	0800199d 	.word	0x0800199d
 80004b8:	08001a15 	.word	0x08001a15
 80004bc:	240008c2 	.word	0x240008c2

080004c0 <CanSend>:

uint8_t TxData[8];
uint8_t RxData[8];


void CanSend(uint8_t *TxData){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004c8:	e001      	b.n	80004ce <CanSend+0xe>
		Error_Handler();
 80004ca:	f000 fe2b 	bl	8001124 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <CanSend+0x34>)
 80004d0:	f005 fb70 	bl	8005bb4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d007      	beq.n	80004ea <CanSend+0x2a>
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4906      	ldr	r1, [pc, #24]	@ (80004f8 <CanSend+0x38>)
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <CanSend+0x34>)
 80004e0:	f005 f9a1 	bl	8005826 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1ef      	bne.n	80004ca <CanSend+0xa>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	24000118 	.word	0x24000118
 80004f8:	240008e8 	.word	0x240008e8

080004fc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d017      	beq.n	8000540 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000514:	2140      	movs	r1, #64	@ 0x40
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f005 f9e0 	bl	80058dc <HAL_FDCAN_GetRxMessage>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000522:	f000 fdff 	bl	8001124 <Error_Handler>
 8000526:	e001      	b.n	800052c <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000528:	f000 f860 	bl	80005ec <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f005 fb51 	bl	8005bd8 <HAL_FDCAN_ActivateNotification>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 800053c:	f000 fdf2 	bl	8001124 <Error_Handler>
		}
	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	24000034 	.word	0x24000034
 800054c:	2400090c 	.word	0x2400090c

08000550 <print>:



void print(uint16_t select){
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
		//uint16_t Data = TF_Select(1,averages[select],transfer_functions[select]);
		sensors[select].data = sensors[select].transfer_function(1,sensors[select].averages);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	4a20      	ldr	r2, [pc, #128]	@ (80005e0 <print+0x90>)
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	4413      	add	r3, r2
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	88fa      	ldrh	r2, [r7, #6]
 8000566:	491e      	ldr	r1, [pc, #120]	@ (80005e0 <print+0x90>)
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	440a      	add	r2, r1
 800056c:	3208      	adds	r2, #8
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	88fc      	ldrh	r4, [r7, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	2001      	movs	r0, #1
 8000576:	4798      	blx	r3
 8000578:	4603      	mov	r3, r0
 800057a:	4619      	mov	r1, r3
 800057c:	4a18      	ldr	r2, [pc, #96]	@ (80005e0 <print+0x90>)
 800057e:	0123      	lsls	r3, r4, #4
 8000580:	4413      	add	r3, r2
 8000582:	330e      	adds	r3, #14
 8000584:	460a      	mov	r2, r1
 8000586:	801a      	strh	r2, [r3, #0]
		TxData[0] = sensors[select].data;
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4a15      	ldr	r2, [pc, #84]	@ (80005e0 <print+0x90>)
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	4413      	add	r3, r2
 8000590:	330e      	adds	r3, #14
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <print+0x94>)
 8000598:	701a      	strb	r2, [r3, #0]
		TxData[1] = sensors[select].data >> 8;
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <print+0x90>)
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	330e      	adds	r3, #14
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <print+0x94>)
 80005ae:	705a      	strb	r2, [r3, #1]
		TxHeader.Identifier = sensors[select].CAN_ID;
 80005b0:	88fb      	ldrh	r3, [r7, #6]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <print+0x90>)
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	4413      	add	r3, r2
 80005b8:	3304      	adds	r3, #4
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <print+0x98>)
 80005c0:	601a      	str	r2, [r3, #0]

		if(sensors[select].CAN_ID)
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <print+0x90>)
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	4413      	add	r3, r2
 80005ca:	3304      	adds	r3, #4
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <print+0x88>
			CanSend(TxData);
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <print+0x94>)
 80005d4:	f7ff ff74 	bl	80004c0 <CanSend>
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	240003a0 	.word	0x240003a0
 80005e4:	2400002c 	.word	0x2400002c
 80005e8:	240008e8 	.word	0x240008e8

080005ec <decode>:

void decode(){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	switch(TxData[0]){
	
	}
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000602:	f001 fa57 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f87b 	bl	8000700 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Config_Setup();
 800060a:	f7ff fe6f 	bl	80002ec <Config_Setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fc95 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000612:	f000 fc73 	bl	8000efc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000616:	f000 fa57 	bl	8000ac8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800061a:	f000 fadb 	bl	8000bd4 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 800061e:	f000 fb5f 	bl	8000ce0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000622:	f000 fb9d 	bl	8000d60 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000626:	f000 f8d9 	bl	80007dc <MX_ADC1_Init>
  MX_I2C4_Init();
 800062a:	f000 fbd9 	bl	8000de0 <MX_I2C4_Init>
  MX_TIM3_Init();
 800062e:	f000 fc17 	bl	8000e60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 8000632:	482a      	ldr	r0, [pc, #168]	@ (80006dc <main+0xe0>)
 8000634:	f009 ffa2 	bl	800a57c <HAL_TIM_Base_Start_IT>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <main+0x46>
 800063e:	f000 fd71 	bl	8001124 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <main+0xe4>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	461a      	mov	r2, r3
 8000648:	4926      	ldr	r1, [pc, #152]	@ (80006e4 <main+0xe8>)
 800064a:	4825      	ldr	r0, [pc, #148]	@ (80006e0 <main+0xe4>)
 800064c:	f001 fe06 	bl	800225c <HAL_ADC_Start_DMA>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0x5e>
 8000656:	f000 fd65 	bl	8001124 <Error_Handler>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 800065a:	4823      	ldr	r0, [pc, #140]	@ (80006e8 <main+0xec>)
 800065c:	f005 f8b8 	bl	80057d0 <HAL_FDCAN_Start>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <main+0x70>
 8000666:	f000 fd5d 	bl	8001124 <Error_Handler>
 800066a:	e008      	b.n	800067e <main+0x82>
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000672:	481e      	ldr	r0, [pc, #120]	@ (80006ec <main+0xf0>)
 8000674:	f006 f9d6 	bl	8006a24 <HAL_GPIO_WritePin>
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <main+0xf4>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	4819      	ldr	r0, [pc, #100]	@ (80006e8 <main+0xec>)
 8000684:	f005 faa8 	bl	8005bd8 <HAL_FDCAN_ActivateNotification>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0x96>
 800068e:	f000 fd49 	bl	8001124 <Error_Handler>


  uint8_t counter = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0xf4>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d1fb      	bne.n	8000696 <main+0x9a>
		  if(millis % CAN_interval == 0){
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <main+0xf8>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <main+0xfc>)
 80006a4:	8812      	ldrh	r2, [r2, #0]
 80006a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80006aa:	fb01 f202 	mul.w	r2, r1, r2
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1ef      	bne.n	8000696 <main+0x9a>
			  print(counter);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff48 	bl	8000550 <print>
			  counter++;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	3301      	adds	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
			  if(counter == 16){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b10      	cmp	r3, #16
 80006ca:	d1e4      	bne.n	8000696 <main+0x9a>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80006cc:	2140      	movs	r1, #64	@ 0x40
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <main+0x100>)
 80006d0:	f006 f9c1 	bl	8006a56 <HAL_GPIO_TogglePin>
				  counter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 80006d8:	e7dd      	b.n	8000696 <main+0x9a>
 80006da:	bf00      	nop
 80006dc:	24000354 	.word	0x24000354
 80006e0:	2400003c 	.word	0x2400003c
 80006e4:	240004a0 	.word	0x240004a0
 80006e8:	24000118 	.word	0x24000118
 80006ec:	58020400 	.word	0x58020400
 80006f0:	240008e6 	.word	0x240008e6
 80006f4:	240008e4 	.word	0x240008e4
 80006f8:	240008c2 	.word	0x240008c2
 80006fc:	58020800 	.word	0x58020800

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	224c      	movs	r2, #76	@ 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00a fbce 	bl	800aeb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00a fbc8 	bl	800aeb0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000720:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <SystemClock_Config+0xd4>)
 8000722:	f04f 32ff 	mov.w	r2, #4294967295
 8000726:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072a:	2002      	movs	r0, #2
 800072c:	f006 fae2 	bl	8006cf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <SystemClock_Config+0xd8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <SystemClock_Config+0xd8>)
 800073a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemClock_Config+0xd8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	bf00      	nop
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800075a:	d1f8      	bne.n	800074e <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <SystemClock_Config+0xd4>)
 800075e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	4a1b      	ldr	r2, [pc, #108]	@ (80007d4 <SystemClock_Config+0xd4>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800076c:	2303      	movs	r3, #3
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000776:	2301      	movs	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077a:	2340      	movs	r3, #64	@ 0x40
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4618      	mov	r0, r3
 8000788:	f006 faee 	bl	8006d68 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000792:	f000 fcc7 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	233f      	movs	r3, #63	@ 0x3f
 8000798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007aa:	2340      	movs	r3, #64	@ 0x40
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b4:	2340      	movs	r3, #64	@ 0x40
 80007b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2102      	movs	r1, #2
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 ff05 	bl	80075cc <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c8:	f000 fcac 	bl	8001124 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	@ 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58024800 	.word	0x58024800

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000800:	4b9f      	ldr	r3, [pc, #636]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000802:	4aa0      	ldr	r2, [pc, #640]	@ (8000a84 <MX_ADC1_Init+0x2a8>)
 8000804:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000806:	4b9e      	ldr	r3, [pc, #632]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000808:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080e:	4b9c      	ldr	r3, [pc, #624]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000810:	2208      	movs	r2, #8
 8000812:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000814:	4b9a      	ldr	r3, [pc, #616]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000816:	2201      	movs	r2, #1
 8000818:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081a:	4b99      	ldr	r3, [pc, #612]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800081c:	2204      	movs	r2, #4
 800081e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000820:	4b97      	ldr	r3, [pc, #604]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000822:	2200      	movs	r2, #0
 8000824:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000826:	4b96      	ldr	r3, [pc, #600]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000828:	2201      	movs	r2, #1
 800082a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 16;
 800082c:	4b94      	ldr	r3, [pc, #592]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800082e:	2210      	movs	r2, #16
 8000830:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b93      	ldr	r3, [pc, #588]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b91      	ldr	r3, [pc, #580]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083e:	4b90      	ldr	r3, [pc, #576]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000844:	4b8e      	ldr	r3, [pc, #568]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000846:	2203      	movs	r2, #3
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084a:	4b8d      	ldr	r3, [pc, #564]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000850:	4b8b      	ldr	r3, [pc, #556]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000852:	2200      	movs	r2, #0
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000856:	4b8a      	ldr	r3, [pc, #552]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085e:	4888      	ldr	r0, [pc, #544]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000860:	f001 fba2 	bl	8001fa8 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800086a:	f000 fc5b 	bl	8001124 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4881      	ldr	r0, [pc, #516]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800087a:	f002 faa5 	bl	8002dc8 <HAL_ADCEx_MultiModeConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000884:	f000 fc4e 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000888:	4b7f      	ldr	r3, [pc, #508]	@ (8000a88 <MX_ADC1_Init+0x2ac>)
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088c:	2306      	movs	r3, #6
 800088e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000890:	2307      	movs	r3, #7
 8000892:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000894:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000898:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089a:	2304      	movs	r3, #4
 800089c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4875      	ldr	r0, [pc, #468]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80008ac:	f001 fd9e 	bl	80023ec <HAL_ADC_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008b6:	f000 fc35 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ba:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <MX_ADC1_Init+0x2b0>)
 80008bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008be:	230c      	movs	r3, #12
 80008c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	486e      	ldr	r0, [pc, #440]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80008c8:	f001 fd90 	bl	80023ec <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80008d2:	f000 fc27 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008d6:	4b6e      	ldr	r3, [pc, #440]	@ (8000a90 <MX_ADC1_Init+0x2b4>)
 80008d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008da:	2312      	movs	r3, #18
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4867      	ldr	r0, [pc, #412]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80008e4:	f001 fd82 	bl	80023ec <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80008ee:	f000 fc19 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008f2:	4b68      	ldr	r3, [pc, #416]	@ (8000a94 <MX_ADC1_Init+0x2b8>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008f6:	2318      	movs	r3, #24
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4860      	ldr	r0, [pc, #384]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000900:	f001 fd74 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800090a:	f000 fc0b 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800090e:	4b62      	ldr	r3, [pc, #392]	@ (8000a98 <MX_ADC1_Init+0x2bc>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4858      	ldr	r0, [pc, #352]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800091e:	f001 fd65 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000928:	f000 fbfc 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800092c:	4b5b      	ldr	r3, [pc, #364]	@ (8000a9c <MX_ADC1_Init+0x2c0>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000930:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4851      	ldr	r0, [pc, #324]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800093c:	f001 fd56 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000946:	f000 fbed 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800094a:	4b55      	ldr	r3, [pc, #340]	@ (8000aa0 <MX_ADC1_Init+0x2c4>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800094e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4849      	ldr	r0, [pc, #292]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 800095a:	f001 fd47 	bl	80023ec <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000964:	f000 fbde 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <MX_ADC1_Init+0x2c8>)
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800096c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4842      	ldr	r0, [pc, #264]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000978:	f001 fd38 	bl	80023ec <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8000982:	f000 fbcf 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000986:	4b48      	ldr	r3, [pc, #288]	@ (8000aa8 <MX_ADC1_Init+0x2cc>)
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800098a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800098e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000996:	f001 fd29 	bl	80023ec <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80009a0:	f000 fbc0 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009a4:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <MX_ADC1_Init+0x2d0>)
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80009a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4833      	ldr	r0, [pc, #204]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80009b4:	f001 fd1a 	bl	80023ec <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 80009be:	f000 fbb1 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <MX_ADC1_Init+0x2d4>)
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80009c6:	f240 2306 	movw	r3, #518	@ 0x206
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80009d2:	f001 fd0b 	bl	80023ec <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x204>
  {
    Error_Handler();
 80009dc:	f000 fba2 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009e0:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <MX_ADC1_Init+0x2d8>)
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80009e4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4824      	ldr	r0, [pc, #144]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 80009f0:	f001 fcfc 	bl	80023ec <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x222>
  {
    Error_Handler();
 80009fa:	f000 fb93 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80009fe:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <MX_ADC1_Init+0x2dc>)
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a02:	f240 2312 	movw	r3, #530	@ 0x212
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000a0e:	f001 fced 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x240>
  {
    Error_Handler();
 8000a18:	f000 fb84 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0x2e0>)
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8000a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000a2c:	f001 fcde 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0x25e>
  {
    Error_Handler();
 8000a36:	f000 fb75 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_ADC1_Init+0x2e4>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000a4a:	f001 fccf 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x27c>
  {
    Error_Handler();
 8000a54:	f000 fb66 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_ADC1_Init+0x2e8>)
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000a5c:	f240 3306 	movw	r3, #774	@ 0x306
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_ADC1_Init+0x2a4>)
 8000a68:	f001 fcc0 	bl	80023ec <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x29a>
  {
    Error_Handler();
 8000a72:	f000 fb57 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2400003c 	.word	0x2400003c
 8000a84:	40022000 	.word	0x40022000
 8000a88:	0c900008 	.word	0x0c900008
 8000a8c:	10c00010 	.word	0x10c00010
 8000a90:	14f00020 	.word	0x14f00020
 8000a94:	1d500080 	.word	0x1d500080
 8000a98:	21800100 	.word	0x21800100
 8000a9c:	25b00200 	.word	0x25b00200
 8000aa0:	2a000400 	.word	0x2a000400
 8000aa4:	2e300800 	.word	0x2e300800
 8000aa8:	32601000 	.word	0x32601000
 8000aac:	36902000 	.word	0x36902000
 8000ab0:	3ac04000 	.word	0x3ac04000
 8000ab4:	3ef08000 	.word	0x3ef08000
 8000ab8:	43210000 	.word	0x43210000
 8000abc:	47520000 	.word	0x47520000
 8000ac0:	4b840000 	.word	0x4b840000
 8000ac4:	4fb80000 	.word	0x4fb80000

08000ac8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000acc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000ace:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc8 <MX_FDCAN1_Init+0x100>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000ade:	4b39      	ldr	r3, [pc, #228]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ae4:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aea:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000af0:	4b34      	ldr	r3, [pc, #208]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000af6:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 22;
 8000afc:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000afe:	2216      	movs	r2, #22
 8000b00:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b02:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 28;
 8000b26:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b28:	221c      	movs	r2, #28
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <MX_FDCAN1_Init+0xfc>)
 8000b76:	f004 fc4d 	bl	8005414 <HAL_FDCAN_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b80:	f000 fad0 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_FDCAN1_Init+0x104>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000b8c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_FDCAN1_Init+0x108>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	24000118 	.word	0x24000118
 8000bc8:	4000a000 	.word	0x4000a000
 8000bcc:	240008c4 	.word	0x240008c4
 8000bd0:	240008e8 	.word	0x240008e8

08000bd4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bda:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd4 <MX_FDCAN2_Init+0x100>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 22;
 8000c08:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c0a:	2216      	movs	r2, #22
 8000c0c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c46:	2204      	movs	r2, #4
 8000c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <MX_FDCAN2_Init+0xfc>)
 8000c82:	f004 fbc7 	bl	8005414 <HAL_FDCAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c8c:	f000 fa4a 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  TxHeader.Identifier = CAN_ID[0];
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_FDCAN2_Init+0x104>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000c98:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 2;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <MX_FDCAN2_Init+0x108>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240001b8 	.word	0x240001b8
 8000cd4:	4000a400 	.word	0x4000a400
 8000cd8:	240008c4 	.word	0x240008c4
 8000cdc:	240008e8 	.word	0x240008e8

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <MX_I2C1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <MX_I2C1_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d1c:	f005 feb6 	bl	8006a8c <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 f9fd 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d2e:	f005 ff49 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 f9f4 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d40:	f005 ff8b 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f9eb 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000258 	.word	0x24000258
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	00707cbb 	.word	0x00707cbb

08000d60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <MX_I2C3_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <MX_I2C3_Init+0x7c>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000d9c:	f005 fe76 	bl	8006a8c <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 f9bd 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000dae:	f005 ff09 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 f9b4 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_I2C3_Init+0x74>)
 8000dc0:	f005 ff4b 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 f9ab 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	240002ac 	.word	0x240002ac
 8000dd8:	40005c00 	.word	0x40005c00
 8000ddc:	00707cbb 	.word	0x00707cbb

08000de0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e58 <MX_I2C4_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <MX_I2C4_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e1c:	f005 fe36 	bl	8006a8c <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 f97d 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e2e:	f005 fec9 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 f974 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_I2C4_Init+0x74>)
 8000e40:	f005 ff0b 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f96b 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000300 	.word	0x24000300
 8000e58:	58001c00 	.word	0x58001c00
 8000e5c:	00707cbb 	.word	0x00707cbb

08000e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000e80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef8 <MX_TIM3_Init+0x98>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000e86:	223f      	movs	r2, #63	@ 0x3f
 8000e88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000e92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000ea6:	f009 fb11 	bl	800a4cc <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f000 f938 	bl	8001124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000ec2:	f009 fcdb 	bl	800a87c <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ecc:	f000 f92a 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_TIM3_Init+0x94>)
 8000ede:	f009 ff3b 	bl	800ad58 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f91c 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000354 	.word	0x24000354
 8000ef8:	40000400 	.word	0x40000400

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <MX_DMA_Init+0x3c>)
 8000f04:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <MX_DMA_Init+0x3c>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_DMA_Init+0x3c>)
 8000f14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	200b      	movs	r0, #11
 8000f26:	f002 f8c6 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f2a:	200b      	movs	r0, #11
 8000f2c:	f002 f8dd 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f58:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f62:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f94:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <MX_GPIO_Init+0xe8>)
 8000fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd0:	4815      	ldr	r0, [pc, #84]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000fd2:	f005 fd27 	bl	8006a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2140      	movs	r1, #64	@ 0x40
 8000fda:	4814      	ldr	r0, [pc, #80]	@ (800102c <MX_GPIO_Init+0xf0>)
 8000fdc:	f005 fd22 	bl	8006a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <MX_GPIO_Init+0xec>)
 8000ffa:	f005 fb63 	bl	80066c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_GPIO_Init+0xf0>)
 8001016:	f005 fb55 	bl	80066c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	@ 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58024400 	.word	0x58024400
 8001028:	58020400 	.word	0x58020400
 800102c:	58020800 	.word	0x58020800

08001030 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a34      	ldr	r2, [pc, #208]	@ (8001110 <HAL_ADC_ConvCpltCallback+0xe0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d15f      	bne.n	8001102 <HAL_ADC_ConvCpltCallback+0xd2>
		if(AVE_POS < ROLLING_AVE){
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b1f      	cmp	r3, #31
 8001048:	d806      	bhi.n	8001058 <HAL_ADC_ConvCpltCallback+0x28>
			AVE_POS++;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e03b      	b.n	80010d0 <HAL_ADC_ConvCpltCallback+0xa0>
		}
		else{
			AVE_POS = 0;
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e030      	b.n	80010c6 <HAL_ADC_ConvCpltCallback+0x96>
				for(int z = 0; z < ROLLING_AVE;z++){
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e027      	b.n	80010ba <HAL_ADC_ConvCpltCallback+0x8a>
					if(z == 0){
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <HAL_ADC_ConvCpltCallback+0x5a>
						//averages[i] = all_raw_data[i][0];
            sensors[i].averages = all_raw_data[i][0];
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4a27      	ldr	r2, [pc, #156]	@ (800111c <HAL_ADC_ConvCpltCallback+0xec>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	3308      	adds	r3, #8
 8001086:	6019      	str	r1, [r3, #0]
 8001088:	e014      	b.n	80010b4 <HAL_ADC_ConvCpltCallback+0x84>
					}else{
						//averages[i]=(averages[i] + all_raw_data[i][z])/2;
            sensors[i].averages = (sensors[i].averages + all_raw_data[i][z])/2;
 800108a:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_ADC_ConvCpltCallback+0xec>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	3308      	adds	r3, #8
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4820      	ldr	r0, [pc, #128]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	0151      	lsls	r1, r2, #5
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	440a      	add	r2, r1
 80010a0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80010a4:	4413      	add	r3, r2
 80010a6:	085a      	lsrs	r2, r3, #1
 80010a8:	491c      	ldr	r1, [pc, #112]	@ (800111c <HAL_ADC_ConvCpltCallback+0xec>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	440b      	add	r3, r1
 80010b0:	3308      	adds	r3, #8
 80010b2:	601a      	str	r2, [r3, #0]
				for(int z = 0; z < ROLLING_AVE;z++){
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	3301      	adds	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b1f      	cmp	r3, #31
 80010be:	ddd4      	ble.n	800106a <HAL_ADC_ConvCpltCallback+0x3a>
			for(int i = 0; i < hadc->Init.NbrOfConversion;i++){
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699a      	ldr	r2, [r3, #24]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8c9      	bhi.n	8001064 <HAL_ADC_ConvCpltCallback+0x34>
					}
				}
			}
		}
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e010      	b.n	80010f8 <HAL_ADC_ConvCpltCallback+0xc8>
			all_raw_data[j][AVE_POS-1] = ADC1Data[j];
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_ADC_ConvCpltCallback+0xe4>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3b01      	subs	r3, #1
 80010dc:	4910      	ldr	r1, [pc, #64]	@ (8001120 <HAL_ADC_ConvCpltCallback+0xf0>)
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <HAL_ADC_ConvCpltCallback+0xe8>)
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	0152      	lsls	r2, r2, #5
 80010ea:	4413      	add	r3, r2
 80010ec:	4602      	mov	r2, r0
 80010ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < hadc->Init.NbrOfConversion;j++){
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d8e9      	bhi.n	80010d6 <HAL_ADC_ConvCpltCallback+0xa6>
		}
	}
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000
 8001114:	240008c0 	.word	0x240008c0
 8001118:	240004c0 	.word	0x240004c0
 800111c:	240003a0 	.word	0x240003a0
 8001120:	240004a0 	.word	0x240004a0

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_MspInit+0x3c>)
 8001138:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_MspInit+0x3c>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_MspInit+0x3c>)
 8001148:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2005      	movs	r0, #5
 800115a:	f001 ffac 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800115e:	2005      	movs	r0, #5
 8001160:	f001 ffc3 	bl	80030ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58024400 	.word	0x58024400

08001170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0bc      	sub	sp, #240	@ 0xf0
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	22c0      	movs	r2, #192	@ 0xc0
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fe8d 	bl	800aeb0 <memset>
  if(hadc->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a62      	ldr	r2, [pc, #392]	@ (8001324 <HAL_ADC_MspInit+0x1b4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f040 80bc 	bne.w	800131a <HAL_ADC_MspInit+0x1aa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 80011b2:	2320      	movs	r3, #32
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80011b6:	2308      	movs	r3, #8
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 25;
 80011ba:	2319      	movs	r3, #25
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011c2:	23c0      	movs	r3, #192	@ 0xc0
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fd6d 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80011e4:	f7ff ff9e 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 80011ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80011f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 80011fa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b48      	ldr	r3, [pc, #288]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001208:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800120c:	4a46      	ldr	r2, [pc, #280]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001216:	4b44      	ldr	r3, [pc, #272]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b40      	ldr	r3, [pc, #256]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001226:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800122a:	4a3f      	ldr	r2, [pc, #252]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001234:	4b3c      	ldr	r3, [pc, #240]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001236:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001244:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001248:	4a37      	ldr	r2, [pc, #220]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001252:	4b35      	ldr	r3, [pc, #212]	@ (8001328 <HAL_ADC_MspInit+0x1b8>)
 8001254:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001260:	233f      	movs	r3, #63	@ 0x3f
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001276:	4619      	mov	r1, r3
 8001278:	482c      	ldr	r0, [pc, #176]	@ (800132c <HAL_ADC_MspInit+0x1bc>)
 800127a:	f005 fa23 	bl	80066c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800127e:	23ff      	movs	r3, #255	@ 0xff
 8001280:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001294:	4619      	mov	r1, r3
 8001296:	4826      	ldr	r0, [pc, #152]	@ (8001330 <HAL_ADC_MspInit+0x1c0>)
 8001298:	f005 fa14 	bl	80066c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b2:	4619      	mov	r1, r3
 80012b4:	481f      	ldr	r0, [pc, #124]	@ (8001334 <HAL_ADC_MspInit+0x1c4>)
 80012b6:	f005 fa05 	bl	80066c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012bc:	4a1f      	ldr	r2, [pc, #124]	@ (800133c <HAL_ADC_MspInit+0x1cc>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012c2:	2209      	movs	r2, #9
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 8001300:	f001 ff0e 	bl	8003120 <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 800130a:	f7ff ff0b 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 8001312:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001314:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_ADC_MspInit+0x1c8>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	37f0      	adds	r7, #240	@ 0xf0
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000
 8001328:	58024400 	.word	0x58024400
 800132c:	58020800 	.word	0x58020800
 8001330:	58020000 	.word	0x58020000
 8001334:	58020400 	.word	0x58020400
 8001338:	240000a0 	.word	0x240000a0
 800133c:	40020010 	.word	0x40020010

08001340 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0bc      	sub	sp, #240	@ 0xf0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	22c0      	movs	r2, #192	@ 0xc0
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f009 fda5 	bl	800aeb0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_FDCAN_MspInit+0x194>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d158      	bne.n	8001422 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f006 fc96 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001392:	f7ff fec7 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a4e      	ldr	r2, [pc, #312]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 800139e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10e      	bne.n	80013c6 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013aa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ae:	4a4b      	ldr	r2, [pc, #300]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013b8:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013ba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013cc:	4a43      	ldr	r2, [pc, #268]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013d6:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 80013d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80013fe:	2309      	movs	r3, #9
 8001400:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001408:	4619      	mov	r1, r3
 800140a:	4835      	ldr	r0, [pc, #212]	@ (80014e0 <HAL_FDCAN_MspInit+0x1a0>)
 800140c:	f005 f95a 	bl	80066c4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2013      	movs	r0, #19
 8001416:	f001 fe4e 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800141a:	2013      	movs	r0, #19
 800141c:	f001 fe65 	bl	80030ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001420:	e054      	b.n	80014cc <HAL_FDCAN_MspInit+0x18c>
  else if(hfdcan->Instance==FDCAN2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2f      	ldr	r2, [pc, #188]	@ (80014e4 <HAL_FDCAN_MspInit+0x1a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d14f      	bne.n	80014cc <HAL_FDCAN_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800142c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fc38 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_FDCAN_MspInit+0x112>
      Error_Handler();
 800144e:	f7ff fe69 	bl	8001124 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 800145a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_FDCAN_MspInit+0x198>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10e      	bne.n	8001482 <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 8001466:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001470:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 8001476:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 8001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_FDCAN_MspInit+0x19c>)
 8001494:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80014ba:	2309      	movs	r3, #9
 80014bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c4:	4619      	mov	r1, r3
 80014c6:	4808      	ldr	r0, [pc, #32]	@ (80014e8 <HAL_FDCAN_MspInit+0x1a8>)
 80014c8:	f005 f8fc 	bl	80066c4 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	37f0      	adds	r7, #240	@ 0xf0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	4000a000 	.word	0x4000a000
 80014d8:	24000934 	.word	0x24000934
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58020000 	.word	0x58020000
 80014e4:	4000a400 	.word	0x4000a400
 80014e8:	58020400 	.word	0x58020400

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0c0      	sub	sp, #256	@ 0x100
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001508:	22c0      	movs	r2, #192	@ 0xc0
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f009 fccf 	bl	800aeb0 <memset>
  if(hi2c->Instance==I2C1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a86      	ldr	r2, [pc, #536]	@ (8001730 <HAL_I2C_MspInit+0x244>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d146      	bne.n	80015aa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800151c:	f04f 0208 	mov.w	r2, #8
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fbc0 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800153e:	f7ff fdf1 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001544:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001548:	4a7a      	ldr	r2, [pc, #488]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001552:	4b78      	ldr	r3, [pc, #480]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001554:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001560:	23c0      	movs	r3, #192	@ 0xc0
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001566:	2312      	movs	r3, #18
 8001568:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001578:	2304      	movs	r3, #4
 800157a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001582:	4619      	mov	r1, r3
 8001584:	486c      	ldr	r0, [pc, #432]	@ (8001738 <HAL_I2C_MspInit+0x24c>)
 8001586:	f005 f89d 	bl	80066c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158a:	4b6a      	ldr	r3, [pc, #424]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800158c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001590:	4a68      	ldr	r2, [pc, #416]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001592:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001596:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800159a:	4b66      	ldr	r3, [pc, #408]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800159c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a4:	623b      	str	r3, [r7, #32]
 80015a6:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015a8:	e0bd      	b.n	8001726 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a63      	ldr	r2, [pc, #396]	@ (800173c <HAL_I2C_MspInit+0x250>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d16c      	bne.n	800168e <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015b4:	f04f 0208 	mov.w	r2, #8
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 fb74 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80015d6:	f7ff fda5 	bl	8001124 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80015dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015e0:	4a54      	ldr	r2, [pc, #336]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015ea:	4b52      	ldr	r3, [pc, #328]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80015ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80015fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800160a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001630:	2304      	movs	r3, #4
 8001632:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800163a:	4619      	mov	r1, r3
 800163c:	4840      	ldr	r0, [pc, #256]	@ (8001740 <HAL_I2C_MspInit+0x254>)
 800163e:	f005 f841 	bl	80066c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800165c:	2304      	movs	r3, #4
 800165e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001666:	4619      	mov	r1, r3
 8001668:	4836      	ldr	r0, [pc, #216]	@ (8001744 <HAL_I2C_MspInit+0x258>)
 800166a:	f005 f82b 	bl	80066c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001670:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001674:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800167a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001680:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697b      	ldr	r3, [r7, #20]
}
 800168c:	e04b      	b.n	8001726 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2d      	ldr	r2, [pc, #180]	@ (8001748 <HAL_I2C_MspInit+0x25c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d146      	bne.n	8001726 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001698:	f04f 0210 	mov.w	r2, #16
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ae:	4618      	mov	r0, r3
 80016b0:	f006 fb02 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80016ba:	f7ff fd33 	bl	8001124 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80016c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 80016d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e4:	2312      	movs	r3, #18
 80016e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80016f6:	2306      	movs	r3, #6
 80016f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	@ (8001738 <HAL_I2C_MspInit+0x24c>)
 8001704:	f004 ffde 	bl	80066c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800170a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001714:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_I2C_MspInit+0x248>)
 800171a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	bf00      	nop
 8001728:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	58024400 	.word	0x58024400
 8001738:	58020400 	.word	0x58020400
 800173c:	40005c00 	.word	0x40005c00
 8001740:	58020800 	.word	0x58020800
 8001744:	58020000 	.word	0x58020000
 8001748:	58001c00 	.word	0x58001c00

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_TIM_Base_MspInit+0x48>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d116      	bne.n	800178c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001760:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001764:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_TIM_Base_MspInit+0x4c>)
 8001770:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	201d      	movs	r0, #29
 8001782:	f001 fc98 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001786:	201d      	movs	r0, #29
 8001788:	f001 fcaf 	bl	80030ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40000400 	.word	0x40000400
 8001798:	58024400 	.word	0x58024400

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f9d1 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA1_Stream0_IRQHandler+0x10>)
 800180e:	f002 fa7f 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	240000a0 	.word	0x240000a0

0800181c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <FDCAN1_IT0_IRQHandler+0x10>)
 8001822:	f004 fa53 	bl	8005ccc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000118 	.word	0x24000118

08001830 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <TIM3_IRQHandler+0x2c>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <TIM3_IRQHandler+0x2c>)
 800183e:	801a      	strh	r2, [r3, #0]
	if(millis == 1000){
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <TIM3_IRQHandler+0x2c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001848:	d102      	bne.n	8001850 <TIM3_IRQHandler+0x20>
		CAN_enable = 1;
 800184a:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <TIM3_IRQHandler+0x30>)
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001850:	4804      	ldr	r0, [pc, #16]	@ (8001864 <TIM3_IRQHandler+0x34>)
 8001852:	f008 ff0b 	bl	800a66c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	240008e4 	.word	0x240008e4
 8001860:	240008e6 	.word	0x240008e6
 8001864:	24000354 	.word	0x24000354

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <SystemInit+0xd8>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	4a33      	ldr	r2, [pc, #204]	@ (8001940 <SystemInit+0xd8>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800187c:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <SystemInit+0xdc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	2b02      	cmp	r3, #2
 8001886:	d807      	bhi.n	8001898 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001888:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <SystemInit+0xdc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 030f 	bic.w	r3, r3, #15
 8001890:	4a2c      	ldr	r2, [pc, #176]	@ (8001944 <SystemInit+0xdc>)
 8001892:	f043 0303 	orr.w	r3, r3, #3
 8001896:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <SystemInit+0xe0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <SystemInit+0xe0>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a4:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <SystemInit+0xe0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <SystemInit+0xe0>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4926      	ldr	r1, [pc, #152]	@ (8001948 <SystemInit+0xe0>)
 80018b0:	4b26      	ldr	r3, [pc, #152]	@ (800194c <SystemInit+0xe4>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018b6:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <SystemInit+0xdc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <SystemInit+0xdc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 030f 	bic.w	r3, r3, #15
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <SystemInit+0xdc>)
 80018cc:	f043 0303 	orr.w	r3, r3, #3
 80018d0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <SystemInit+0xe0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <SystemInit+0xe0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <SystemInit+0xe0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <SystemInit+0xe0>)
 80018e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <SystemInit+0xe8>)
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ea:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <SystemInit+0xe0>)
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <SystemInit+0xec>)
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <SystemInit+0xe0>)
 80018f2:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <SystemInit+0xf0>)
 80018f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018f6:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <SystemInit+0xe0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <SystemInit+0xe0>)
 80018fe:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <SystemInit+0xf0>)
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <SystemInit+0xe0>)
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <SystemInit+0xe0>)
 800190a:	4a13      	ldr	r2, [pc, #76]	@ (8001958 <SystemInit+0xf0>)
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <SystemInit+0xe0>)
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <SystemInit+0xe0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <SystemInit+0xe0>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800191e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <SystemInit+0xe0>)
 8001922:	2200      	movs	r2, #0
 8001924:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <SystemInit+0xf4>)
 8001928:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800192c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SystemInit+0xd8>)
 8001930:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001934:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	52002000 	.word	0x52002000
 8001948:	58024400 	.word	0x58024400
 800194c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001950:	02020200 	.word	0x02020200
 8001954:	01ff0000 	.word	0x01ff0000
 8001958:	01010280 	.word	0x01010280
 800195c:	52004000 	.word	0x52004000

08001960 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw){
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
	uint16_t max_volt = 3300;
 800196c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001970:	81fb      	strh	r3, [r7, #14]

	uint16_t voltage = raw*max_volt / 4095;
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <TF_3V3+0x38>)
 800197c:	fba3 1302 	umull	r1, r3, r3, r2
 8001980:	1ad2      	subs	r2, r2, r3
 8001982:	0852      	lsrs	r2, r2, #1
 8001984:	4413      	add	r3, r2
 8001986:	0adb      	lsrs	r3, r3, #11
 8001988:	81bb      	strh	r3, [r7, #12]
	return voltage;
 800198a:	89bb      	ldrh	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	00100101 	.word	0x00100101

0800199c <TF_BPPS>:
	uint16_t max_volt = 24000;

	uint16_t voltage = raw*max_volt / 4095;
	return voltage;
}
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw){ //brake pedal position sensor
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
	uint16_t max_brake_pres = 200;
 80019a8:	23c8      	movs	r3, #200	@ 0xc8
 80019aa:	81fb      	strh	r3, [r7, #14]

	uint16_t brake_pres = raw*max_brake_pres / 4095;
 80019ac:	89fb      	ldrh	r3, [r7, #14]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	fb03 f202 	mul.w	r2, r3, r2
 80019b4:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <TF_BPPS+0x38>)
 80019b6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	4413      	add	r3, r2
 80019c0:	0adb      	lsrs	r3, r3, #11
 80019c2:	81bb      	strh	r3, [r7, #12]
	return brake_pres;
 80019c4:	89bb      	ldrh	r3, [r7, #12]

}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	00100101 	.word	0x00100101

080019d8 <TF_APPS>:
uint16_t TF_APPS(uint8_t bytes, uint32_t raw){
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
	uint16_t max_pos = 100; //in percent
 80019e4:	2364      	movs	r3, #100	@ 0x64
 80019e6:	81fb      	strh	r3, [r7, #14]

	uint16_t apps = raw*max_pos / 4095;
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	fb03 f202 	mul.w	r2, r3, r2
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <TF_APPS+0x38>)
 80019f2:	fba3 1302 	umull	r1, r3, r3, r2
 80019f6:	1ad2      	subs	r2, r2, r3
 80019f8:	0852      	lsrs	r2, r2, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	0adb      	lsrs	r3, r3, #11
 80019fe:	81bb      	strh	r3, [r7, #12]
	return apps;
 8001a00:	89bb      	ldrh	r3, [r7, #12]

}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	00100101 	.word	0x00100101

08001a14 <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw){
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
		uint16_t max_volt = 5000;
 8001a20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a24:	81fb      	strh	r3, [r7, #14]

		uint16_t voltage = raw*max_volt / 4095;
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <TF_BTN+0x48>)
 8001a30:	fba3 1302 	umull	r1, r3, r3, r2
 8001a34:	1ad2      	subs	r2, r2, r3
 8001a36:	0852      	lsrs	r2, r2, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	0adb      	lsrs	r3, r3, #11
 8001a3c:	81bb      	strh	r3, [r7, #12]

		if(voltage < 3000)
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d801      	bhi.n	8001a4c <TF_BTN+0x38>
			return 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <TF_BTN+0x3a>
		else
			return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	00100101 	.word	0x00100101

08001a60 <Reset_Handler>:
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a98 <LoopFillZerobss+0xe>
 8001a64:	f7ff ff00 	bl	8001868 <SystemInit>
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <LoopFillZerobss+0x12>)
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <LoopFillZerobss+0x16>)
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <LoopFillZerobss+0x1a>)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:
 8001a72:	58d4      	ldr	r4, [r2, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:
 8001a78:	18c4      	adds	r4, r0, r3
 8001a7a:	428c      	cmp	r4, r1
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <LoopFillZerobss+0x1e>)
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <LoopFillZerobss+0x22>)
 8001a82:	2300      	movs	r3, #0
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:
 8001a8a:	42a2      	cmp	r2, r4
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>
 8001a8e:	f009 fa17 	bl	800aec0 <__libc_init_array>
 8001a92:	f7fe fdb3 	bl	80005fc <main>
 8001a96:	4770      	bx	lr
 8001a98:	24100000 	.word	0x24100000
 8001a9c:	24000000 	.word	0x24000000
 8001aa0:	24000010 	.word	0x24000010
 8001aa4:	0800afb8 	.word	0x0800afb8
 8001aa8:	24000010 	.word	0x24000010
 8001aac:	2400093c 	.word	0x2400093c

08001ab0 <ADC_IRQHandler>:
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f001 faf0 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ac0:	f005 ff3a 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_Init+0x68>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	4913      	ldr	r1, [pc, #76]	@ (8001b20 <HAL_Init+0x6c>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_Init+0x68>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_Init+0x6c>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_Init+0x70>)
 8001af6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001af8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b28 <HAL_Init+0x74>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f814 	bl	8001b2c <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e002      	b.n	8001b14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0e:	f7ff fb0f 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	0800af88 	.word	0x0800af88
 8001b24:	24000004 	.word	0x24000004
 8001b28:	24000000 	.word	0x24000000

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_InitTick+0x60>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e021      	b.n	8001b84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_InitTick+0x64>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_InitTick+0x60>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fad5 	bl	8003106 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f001 fa9f 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x68>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2400000c 	.word	0x2400000c
 8001b90:	24000000 	.word	0x24000000
 8001b94:	24000008 	.word	0x24000008

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2400000c 	.word	0x2400000c
 8001bbc:	24000938 	.word	0x24000938

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	24000938 	.word	0x24000938

08001bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	@ 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
  }
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b087      	sub	sp, #28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3330      	adds	r3, #48	@ 0x30
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	211f      	movs	r1, #31
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	f003 011f 	and.w	r1, r3, #31
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f023 0203 	bic.w	r2, r3, #3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3314      	adds	r3, #20
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0e5b      	lsrs	r3, r3, #25
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	0d1b      	lsrs	r3, r3, #20
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2107      	movs	r1, #7
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0d1b      	lsrs	r3, r3, #20
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0318 	and.w	r3, r3, #24
 8001e06:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e08:	40d9      	lsrs	r1, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e12:	431a      	orrs	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	000fffff 	.word	0x000fffff

08001e2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 031f 	and.w	r3, r3, #31
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6093      	str	r3, [r2, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	5fffffc0 	.word	0x5fffffc0

08001e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	6fffffc0 	.word	0x6fffffc0

08001ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <LL_ADC_Enable+0x24>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	7fffffc0 	.word	0x7fffffc0

08001f0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_IsEnabled+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_IsEnabled+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <LL_ADC_REG_StartConversion+0x24>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	f043 0204 	orr.w	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	7fffffc0 	.word	0x7fffffc0

08001f5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e138      	b.n	8002234 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff f8cd 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff3f 	bl	8001e6c <LL_ADC_IsDeepPowerDownEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff25 	bl	8001e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff5a 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d114      	bne.n	8002038 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff3e 	bl	8001e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002018:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_ADC_Init+0x294>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	4a88      	ldr	r2, [pc, #544]	@ (8002240 <HAL_ADC_Init+0x298>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800202a:	e002      	b.n	8002032 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3b01      	subs	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff3d 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff77 	bl	8001f5c <LL_ADC_REG_IsConversionOngoing>
 800206e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 80d2 	bne.w	8002222 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80ce 	bne.w	8002222 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff36 	bl	8001f0c <LL_ADC_IsEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d110      	bne.n	80020c8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a6:	4867      	ldr	r0, [pc, #412]	@ (8002244 <HAL_ADC_Init+0x29c>)
 80020a8:	f7ff ff30 	bl	8001f0c <LL_ADC_IsEnabled>
 80020ac:	4604      	mov	r4, r0
 80020ae:	4866      	ldr	r0, [pc, #408]	@ (8002248 <HAL_ADC_Init+0x2a0>)
 80020b0:	f7ff ff2c 	bl	8001f0c <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4323      	orrs	r3, r4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4862      	ldr	r0, [pc, #392]	@ (800224c <HAL_ADC_Init+0x2a4>)
 80020c4:	f7ff fd88 	bl	8001bd8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7d5b      	ldrb	r3, [r3, #21]
 80020cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80020d8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7f1b      	ldrb	r3, [r3, #28]
 80020de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7f1b      	ldrb	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	045b      	lsls	r3, r3, #17
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4b4c      	ldr	r3, [pc, #304]	@ (8002250 <HAL_ADC_Init+0x2a8>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	69b9      	ldr	r1, [r7, #24]
 8002126:	430b      	orrs	r3, r1
 8002128:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff14 	bl	8001f5c <LL_ADC_REG_IsConversionOngoing>
 8002134:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff21 	bl	8001f82 <LL_ADC_INJ_IsConversionOngoing>
 8002140:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d14a      	bne.n	80021de <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d147      	bne.n	80021de <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7d1b      	ldrb	r3, [r3, #20]
 8002152:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b3c      	ldr	r3, [pc, #240]	@ (8002254 <HAL_ADC_Init+0x2ac>)
 8002164:	4013      	ands	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	430b      	orrs	r3, r1
 800216e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11b      	bne.n	80021b2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_ADC_Init+0x2b0>)
 8002188:	4013      	ands	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800218e:	3a01      	subs	r2, #1
 8002190:	0411      	lsls	r1, r2, #16
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002196:	4311      	orrs	r1, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800219c:	4311      	orrs	r1, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021a2:	430a      	orrs	r2, r1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fd01 	bl	8002be0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10c      	bne.n	8002200 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	f023 010f 	bic.w	r1, r3, #15
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80021fe:	e007      	b.n	8002210 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020f 	bic.w	r2, r2, #15
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f023 0303 	bic.w	r3, r3, #3
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002220:	e007      	b.n	8002232 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002232:	7ffb      	ldrb	r3, [r7, #31]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3724      	adds	r7, #36	@ 0x24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	24000000 	.word	0x24000000
 8002240:	053e2d63 	.word	0x053e2d63
 8002244:	40022000 	.word	0x40022000
 8002248:	40022100 	.word	0x40022100
 800224c:	40022300 	.word	0x40022300
 8002250:	fff0c003 	.word	0xfff0c003
 8002254:	ffffbffc 	.word	0xffffbffc
 8002258:	fc00f81e 	.word	0xfc00f81e

0800225c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002268:	484f      	ldr	r0, [pc, #316]	@ (80023a8 <HAL_ADC_Start_DMA+0x14c>)
 800226a:	f7ff fddf 	bl	8001e2c <LL_ADC_GetMultimode>
 800226e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe71 	bl	8001f5c <LL_ADC_REG_IsConversionOngoing>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 808c 	bne.w	800239a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADC_Start_DMA+0x34>
 800228c:	2302      	movs	r3, #2
 800228e:	e087      	b.n	80023a0 <HAL_ADC_Start_DMA+0x144>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d170      	bne.n	800238c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fb88 	bl	80029c0 <ADC_Enable>
 80022b0:	4603      	mov	r3, r0
 80022b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d163      	bne.n	8002382 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_ADC_Start_DMA+0x150>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a38      	ldr	r2, [pc, #224]	@ (80023b0 <HAL_ADC_Start_DMA+0x154>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d002      	beq.n	80022da <HAL_ADC_Start_DMA+0x7e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e000      	b.n	80022dc <HAL_ADC_Start_DMA+0x80>
 80022da:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_ADC_Start_DMA+0x158>)
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	f023 0206 	bic.w	r2, r3, #6
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	659a      	str	r2, [r3, #88]	@ 0x58
 800230e:	e002      	b.n	8002316 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	4a27      	ldr	r2, [pc, #156]	@ (80023b8 <HAL_ADC_Start_DMA+0x15c>)
 800231c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a26      	ldr	r2, [pc, #152]	@ (80023bc <HAL_ADC_Start_DMA+0x160>)
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	4a25      	ldr	r2, [pc, #148]	@ (80023c0 <HAL_ADC_Start_DMA+0x164>)
 800232c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	221c      	movs	r2, #28
 8002334:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0210 	orr.w	r2, r2, #16
 800234c:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f7ff fd04 	bl	8001d66 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3340      	adds	r3, #64	@ 0x40
 8002368:	4619      	mov	r1, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f001 fa65 	bl	800383c <HAL_DMA_Start_IT>
 8002372:	4603      	mov	r3, r0
 8002374:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fdda 	bl	8001f34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002380:	e00d      	b.n	800239e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800238a:	e008      	b.n	800239e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002398:	e001      	b.n	800239e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800239e:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40022300 	.word	0x40022300
 80023ac:	fffff0fe 	.word	0xfffff0fe
 80023b0:	40022100 	.word	0x40022100
 80023b4:	40022000 	.word	0x40022000
 80023b8:	08002ab9 	.word	0x08002ab9
 80023bc:	08002b91 	.word	0x08002b91
 80023c0:	08002bad 	.word	0x08002bad

080023c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b0a1      	sub	sp, #132	@ 0x84
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a95      	ldr	r2, [pc, #596]	@ (800265c <HAL_ADC_ConfigChannel+0x270>)
 8002406:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x2a>
 8002412:	2302      	movs	r3, #2
 8002414:	e2c0      	b.n	8002998 <HAL_ADC_ConfigChannel+0x5ac>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd9a 	bl	8001f5c <LL_ADC_REG_IsConversionOngoing>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 82a5 	bne.w	800297a <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db2c      	blt.n	8002492 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x6a>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2201      	movs	r2, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	e016      	b.n	8002484 <HAL_ADC_ConfigChannel+0x98>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002466:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e003      	b.n	800247a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2201      	movs	r2, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	69d1      	ldr	r1, [r2, #28]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	430b      	orrs	r3, r1
 8002490:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	f7ff fc35 	bl	8001d0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fd57 	bl	8001f5c <LL_ADC_REG_IsConversionOngoing>
 80024ae:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fd64 	bl	8001f82 <LL_ADC_INJ_IsConversionOngoing>
 80024ba:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 80a0 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 809c 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	461a      	mov	r2, r3
 80024da:	f7ff fc57 	bl	8001d8c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x118>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	e00a      	b.n	800251a <HAL_ADC_ConfigChannel+0x12e>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d027      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002532:	f7ff fb85 	bl	8001c40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6919      	ldr	r1, [r3, #16]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7e5b      	ldrb	r3, [r3, #25]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_ADC_ConfigChannel+0x160>
 8002546:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800254a:	e000      	b.n	800254e <HAL_ADC_ConfigChannel+0x162>
 800254c:	2300      	movs	r3, #0
 800254e:	461a      	mov	r2, r3
 8002550:	f7ff fbaf 	bl	8001cb2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6919      	ldr	r1, [r3, #16]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7e1b      	ldrb	r3, [r3, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_ADC_ConfigChannel+0x17e>
 8002564:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x180>
 800256a:	2300      	movs	r3, #0
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff fb87 	bl	8001c80 <LL_ADC_SetDataRightShift>
 8002572:	e047      	b.n	8002604 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	069b      	lsls	r3, r3, #26
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	069b      	lsls	r3, r3, #26
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002602:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fc7f 	bl	8001f0c <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 81bb 	bne.w	800298c <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	461a      	mov	r2, r3
 8002624:	f7ff fbde 	bl	8001de4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <HAL_ADC_ConfigChannel+0x270>)
 800262e:	4293      	cmp	r3, r2
 8002630:	f040 8130 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x274>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2b09      	cmp	r3, #9
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e01b      	b.n	8002694 <HAL_ADC_ConfigChannel+0x2a8>
 800265c:	47ff0000 	.word	0x47ff0000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800266e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 800267c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b09      	cmp	r3, #9
 800268c:	bf94      	ite	ls
 800268e:	2301      	movls	r3, #1
 8002690:	2300      	movhi	r3, #0
 8002692:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x2c8>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	069b      	lsls	r3, r3, #26
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b2:	e015      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x2f4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 80026d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x314>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	e017      	b.n	8002730 <HAL_ADC_ConfigChannel+0x344>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800270e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e003      	b.n	8002724 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800271c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	ea42 0103 	orr.w	r1, r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x36a>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	051b      	lsls	r3, r3, #20
 8002754:	e018      	b.n	8002788 <HAL_ADC_ConfigChannel+0x39c>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002788:	430b      	orrs	r3, r1
 800278a:	e07e      	b.n	800288a <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x3bc>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	069b      	lsls	r3, r3, #26
 80027a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a6:	e015      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x3e8>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 80027c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x408>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	3301      	adds	r3, #1
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	e017      	b.n	8002824 <HAL_ADC_ConfigChannel+0x438>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	61bb      	str	r3, [r7, #24]
  return result;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	ea42 0103 	orr.w	r1, r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x464>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	3b1e      	subs	r3, #30
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800284e:	e01b      	b.n	8002888 <HAL_ADC_ConfigChannel+0x49c>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	60fb      	str	r3, [r7, #12]
  return result;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e003      	b.n	8002874 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f003 021f 	and.w	r2, r3, #31
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	3b1e      	subs	r3, #30
 8002882:	051b      	lsls	r3, r3, #20
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002888:	430b      	orrs	r3, r1
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6892      	ldr	r2, [r2, #8]
 800288e:	4619      	mov	r1, r3
 8002890:	f7ff fa7c 	bl	8001d8c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	da77      	bge.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289c:	4840      	ldr	r0, [pc, #256]	@ (80029a0 <HAL_ADC_ConfigChannel+0x5b4>)
 800289e:	f7ff f9c1 	bl	8001c24 <LL_ADC_GetCommonPathInternalCh>
 80028a2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a4:	483f      	ldr	r0, [pc, #252]	@ (80029a4 <HAL_ADC_ConfigChannel+0x5b8>)
 80028a6:	f7ff fb31 	bl	8001f0c <LL_ADC_IsEnabled>
 80028aa:	4604      	mov	r4, r0
 80028ac:	483e      	ldr	r0, [pc, #248]	@ (80029a8 <HAL_ADC_ConfigChannel+0x5bc>)
 80028ae:	f7ff fb2d 	bl	8001f0c <LL_ADC_IsEnabled>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4323      	orrs	r3, r4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d155      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3b      	ldr	r2, [pc, #236]	@ (80029ac <HAL_ADC_ConfigChannel+0x5c0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d122      	bne.n	800290a <HAL_ADC_ConfigChannel+0x51e>
 80028c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a35      	ldr	r2, [pc, #212]	@ (80029a8 <HAL_ADC_ConfigChannel+0x5bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d159      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80028d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028de:	4619      	mov	r1, r3
 80028e0:	482f      	ldr	r0, [pc, #188]	@ (80029a0 <HAL_ADC_ConfigChannel+0x5b4>)
 80028e2:	f7ff f98c 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028e6:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <HAL_ADC_ConfigChannel+0x5c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <HAL_ADC_ConfigChannel+0x5c8>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	3301      	adds	r3, #1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028fa:	e002      	b.n	8002902 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002908:	e040      	b.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2a      	ldr	r2, [pc, #168]	@ (80029b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x54c>
 8002914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d131      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292e:	4619      	mov	r1, r3
 8002930:	481b      	ldr	r0, [pc, #108]	@ (80029a0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002932:	f7ff f964 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002936:	e029      	b.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_ADC_ConfigChannel+0x5d0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d124      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
 8002942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11f      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11a      	bne.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800295c:	4619      	mov	r1, r3
 800295e:	4810      	ldr	r0, [pc, #64]	@ (80029a0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002960:	f7ff f94d 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
 8002964:	e012      	b.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002978:	e008      	b.n	800298c <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002994:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002998:	4618      	mov	r0, r3
 800299a:	3784      	adds	r7, #132	@ 0x84
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	40022300 	.word	0x40022300
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40022100 	.word	0x40022100
 80029ac:	cb840000 	.word	0xcb840000
 80029b0:	24000000 	.word	0x24000000
 80029b4:	053e2d63 	.word	0x053e2d63
 80029b8:	bac04000 	.word	0xbac04000
 80029bc:	cfb80000 	.word	0xcfb80000

080029c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fa9d 	bl	8001f0c <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d161      	bne.n	8002a9c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <ADC_Enable+0xe8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e04d      	b.n	8002a9e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa6c 	bl	8001ee4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a0c:	f7ff f8d8 	bl	8001bc0 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a12:	4826      	ldr	r0, [pc, #152]	@ (8002aac <ADC_Enable+0xec>)
 8002a14:	f7ff fa0a 	bl	8001e2c <LL_ADC_GetMultimode>
 8002a18:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	@ (8002ab0 <ADC_Enable+0xf0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d002      	beq.n	8002a2a <ADC_Enable+0x6a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	e000      	b.n	8002a2c <ADC_Enable+0x6c>
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <ADC_Enable+0xf4>)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d130      	bne.n	8002a9c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a3a:	e028      	b.n	8002a8e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa63 	bl	8001f0c <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fa47 	bl	8001ee4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a56:	f7ff f8b3 	bl	8001bc0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d914      	bls.n	8002a8e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d00d      	beq.n	8002a8e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d1cf      	bne.n	8002a3c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	8000003f 	.word	0x8000003f
 8002aac:	40022300 	.word	0x40022300
 8002ab0:	40022100 	.word	0x40022100
 8002ab4:	40022000 	.word	0x40022000

08002ab8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d14b      	bne.n	8002b6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d021      	beq.n	8002b30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f8f9 	bl	8001ce8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d032      	beq.n	8002b62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d12b      	bne.n	8002b62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b2e:	e018      	b.n	8002b62 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d111      	bne.n	8002b62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7fe fa64 	bl	8001030 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b68:	e00e      	b.n	8002b88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7ff fc2e 	bl	80023d8 <HAL_ADC_ErrorCallback>
}
 8002b7c:	e004      	b.n	8002b88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fc10 	bl	80023c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff fc00 	bl	80023d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002be8:	4b60      	ldr	r3, [pc, #384]	@ (8002d6c <ADC_ConfigureBoostMode+0x18c>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01c      	beq.n	8002c2e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bf4:	f005 f81a 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8002bf8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c02:	d010      	beq.n	8002c26 <ADC_ConfigureBoostMode+0x46>
 8002c04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c08:	d873      	bhi.n	8002cf2 <ADC_ConfigureBoostMode+0x112>
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0e:	d002      	beq.n	8002c16 <ADC_ConfigureBoostMode+0x36>
 8002c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c14:	d16d      	bne.n	8002cf2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
        break;
 8002c24:	e068      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
        break;
 8002c2c:	e064      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c2e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f006 f9fd 	bl	8009034 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c44:	d051      	beq.n	8002cea <ADC_ConfigureBoostMode+0x10a>
 8002c46:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c4a:	d854      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c4c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c50:	d047      	beq.n	8002ce2 <ADC_ConfigureBoostMode+0x102>
 8002c52:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c56:	d84e      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c58:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c5c:	d03d      	beq.n	8002cda <ADC_ConfigureBoostMode+0xfa>
 8002c5e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c62:	d848      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c68:	d033      	beq.n	8002cd2 <ADC_ConfigureBoostMode+0xf2>
 8002c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c6e:	d842      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c70:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c74:	d029      	beq.n	8002cca <ADC_ConfigureBoostMode+0xea>
 8002c76:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c7a:	d83c      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c7c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c80:	d01a      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c86:	d836      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c88:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c8c:	d014      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c8e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c92:	d830      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c98:	d00e      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9e:	d82a      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002ca0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca4:	d008      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002ca6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002caa:	d824      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002cac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cb0:	d002      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002cb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cb6:	d11e      	bne.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
        break;
 8002cc8:	e016      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
        break;
 8002cd0:	e012      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	60fb      	str	r3, [r7, #12]
        break;
 8002cd8:	e00e      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	60fb      	str	r3, [r7, #12]
        break;
 8002ce0:	e00a      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	09db      	lsrs	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
        break;
 8002ce8:	e006      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
        break;
 8002cf0:	e002      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002cf6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <ADC_ConfigureBoostMode+0x190>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d808      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d14:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d16:	e025      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	@ (8002d74 <ADC_ConfigureBoostMode+0x194>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d80a      	bhi.n	8002d36 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	e016      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <ADC_ConfigureBoostMode+0x198>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d80a      	bhi.n	8002d54 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	e007      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40022300 	.word	0x40022300
 8002d70:	005f5e10 	.word	0x005f5e10
 8002d74:	00bebc20 	.word	0x00bebc20
 8002d78:	017d7840 	.word	0x017d7840

08002d7c <LL_ADC_IsEnabled>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_IsEnabled+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_IsEnabled+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d101      	bne.n	8002dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b09f      	sub	sp, #124	@ 0x7c
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e080      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e00:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	e001      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e05f      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffb9 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ffb3 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d141      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13e      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e64:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e66:	4822      	ldr	r0, [pc, #136]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e68:	f7ff ff88 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4821      	ldr	r0, [pc, #132]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e70:	f7ff ff84 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d12e      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	e021      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	4813      	ldr	r0, [pc, #76]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ea4:	f7ff ff6a 	bl	8002d7c <LL_ADC_IsEnabled>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4812      	ldr	r0, [pc, #72]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eac:	f7ff ff66 	bl	8002d7c <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4323      	orrs	r3, r4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d110      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ec2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec4:	e009      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ed8:	e000      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	377c      	adds	r7, #124	@ 0x7c
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022100 	.word	0x40022100
 8002ef8:	40022300 	.word	0x40022300
 8002efc:	fffff0e0 	.word	0xfffff0e0

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	05fa0000 	.word	0x05fa0000

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	@ (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff8e 	bl	8002fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff29 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff40 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff90 	bl	8002ff4 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5f 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff33 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa4 	bl	800305c <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7fe fd4a 	bl	8001bc0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e37d      	b.n	8003834 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a66      	ldr	r2, [pc, #408]	@ (80032d8 <HAL_DMA_Init+0x1b8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d04a      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <HAL_DMA_Init+0x1bc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d045      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a63      	ldr	r2, [pc, #396]	@ (80032e0 <HAL_DMA_Init+0x1c0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d040      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a62      	ldr	r2, [pc, #392]	@ (80032e4 <HAL_DMA_Init+0x1c4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03b      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a60      	ldr	r2, [pc, #384]	@ (80032e8 <HAL_DMA_Init+0x1c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5f      	ldr	r2, [pc, #380]	@ (80032ec <HAL_DMA_Init+0x1cc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d031      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5d      	ldr	r2, [pc, #372]	@ (80032f0 <HAL_DMA_Init+0x1d0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5c      	ldr	r2, [pc, #368]	@ (80032f4 <HAL_DMA_Init+0x1d4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d027      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5a      	ldr	r2, [pc, #360]	@ (80032f8 <HAL_DMA_Init+0x1d8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a59      	ldr	r2, [pc, #356]	@ (80032fc <HAL_DMA_Init+0x1dc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01d      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a57      	ldr	r2, [pc, #348]	@ (8003300 <HAL_DMA_Init+0x1e0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d018      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a56      	ldr	r2, [pc, #344]	@ (8003304 <HAL_DMA_Init+0x1e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a54      	ldr	r2, [pc, #336]	@ (8003308 <HAL_DMA_Init+0x1e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a53      	ldr	r2, [pc, #332]	@ (800330c <HAL_DMA_Init+0x1ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a51      	ldr	r2, [pc, #324]	@ (8003310 <HAL_DMA_Init+0x1f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a50      	ldr	r2, [pc, #320]	@ (8003314 <HAL_DMA_Init+0x1f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Init+0xbc>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_DMA_Init+0xbe>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 813c 	beq.w	800345c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a37      	ldr	r2, [pc, #220]	@ (80032d8 <HAL_DMA_Init+0x1b8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04a      	beq.n	8003294 <HAL_DMA_Init+0x174>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a36      	ldr	r2, [pc, #216]	@ (80032dc <HAL_DMA_Init+0x1bc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d045      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a34      	ldr	r2, [pc, #208]	@ (80032e0 <HAL_DMA_Init+0x1c0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a33      	ldr	r2, [pc, #204]	@ (80032e4 <HAL_DMA_Init+0x1c4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d03b      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a31      	ldr	r2, [pc, #196]	@ (80032e8 <HAL_DMA_Init+0x1c8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d036      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a30      	ldr	r2, [pc, #192]	@ (80032ec <HAL_DMA_Init+0x1cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2e      	ldr	r2, [pc, #184]	@ (80032f0 <HAL_DMA_Init+0x1d0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2d      	ldr	r2, [pc, #180]	@ (80032f4 <HAL_DMA_Init+0x1d4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d027      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2b      	ldr	r2, [pc, #172]	@ (80032f8 <HAL_DMA_Init+0x1d8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2a      	ldr	r2, [pc, #168]	@ (80032fc <HAL_DMA_Init+0x1dc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01d      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a28      	ldr	r2, [pc, #160]	@ (8003300 <HAL_DMA_Init+0x1e0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a27      	ldr	r2, [pc, #156]	@ (8003304 <HAL_DMA_Init+0x1e4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a25      	ldr	r2, [pc, #148]	@ (8003308 <HAL_DMA_Init+0x1e8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a24      	ldr	r2, [pc, #144]	@ (800330c <HAL_DMA_Init+0x1ec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <HAL_DMA_Init+0x1f0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a21      	ldr	r2, [pc, #132]	@ (8003314 <HAL_DMA_Init+0x1f4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <HAL_DMA_Init+0x186>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e007      	b.n	80032b6 <HAL_DMA_Init+0x196>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032b6:	e02f      	b.n	8003318 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b8:	f7fe fc82 	bl	8001bc0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d928      	bls.n	8003318 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e2ad      	b.n	8003834 <HAL_DMA_Init+0x714>
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1c8      	bne.n	80032b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4b73      	ldr	r3, [pc, #460]	@ (8003500 <HAL_DMA_Init+0x3e0>)
 8003332:	4013      	ands	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800333e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	2b04      	cmp	r3, #4
 800336a:	d107      	bne.n	800337c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	4313      	orrs	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b28      	cmp	r3, #40	@ 0x28
 8003382:	d903      	bls.n	800338c <HAL_DMA_Init+0x26c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b2e      	cmp	r3, #46	@ 0x2e
 800338a:	d91f      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b3e      	cmp	r3, #62	@ 0x3e
 8003392:	d903      	bls.n	800339c <HAL_DMA_Init+0x27c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b42      	cmp	r3, #66	@ 0x42
 800339a:	d917      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b46      	cmp	r3, #70	@ 0x46
 80033a2:	d903      	bls.n	80033ac <HAL_DMA_Init+0x28c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b48      	cmp	r3, #72	@ 0x48
 80033aa:	d90f      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b4e      	cmp	r3, #78	@ 0x4e
 80033b2:	d903      	bls.n	80033bc <HAL_DMA_Init+0x29c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b52      	cmp	r3, #82	@ 0x52
 80033ba:	d907      	bls.n	80033cc <HAL_DMA_Init+0x2ac>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b73      	cmp	r3, #115	@ 0x73
 80033c2:	d905      	bls.n	80033d0 <HAL_DMA_Init+0x2b0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b77      	cmp	r3, #119	@ 0x77
 80033ca:	d801      	bhi.n	80033d0 <HAL_DMA_Init+0x2b0>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_DMA_Init+0x2b2>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0307 	bic.w	r3, r3, #7
 80033f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	2b04      	cmp	r3, #4
 8003406:	d117      	bne.n	8003438 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 fe70 	bl	8005100 <DMA_CheckFifoParam>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2240      	movs	r2, #64	@ 0x40
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e1fd      	b.n	8003834 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fdab 	bl	8004f9c <DMA_CalcBaseAndBitshift>
 8003446:	4603      	mov	r3, r0
 8003448:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	223f      	movs	r2, #63	@ 0x3f
 8003454:	409a      	lsls	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	e0fd      	b.n	8003658 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	@ (8003504 <HAL_DMA_Init+0x3e4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d04a      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	@ (8003508 <HAL_DMA_Init+0x3e8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d045      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	@ (800350c <HAL_DMA_Init+0x3ec>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d040      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <HAL_DMA_Init+0x3f0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d03b      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	@ (8003514 <HAL_DMA_Init+0x3f4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d036      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	@ (8003518 <HAL_DMA_Init+0x3f8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d031      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <HAL_DMA_Init+0x3fc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02c      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003520 <HAL_DMA_Init+0x400>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d027      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <HAL_DMA_Init+0x404>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d022      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_DMA_Init+0x408>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01d      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_DMA_Init+0x40c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d018      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	@ (8003530 <HAL_DMA_Init+0x410>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <HAL_DMA_Init+0x414>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a15      	ldr	r2, [pc, #84]	@ (8003538 <HAL_DMA_Init+0x418>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a13      	ldr	r2, [pc, #76]	@ (800353c <HAL_DMA_Init+0x41c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_Init+0x3dc>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_DMA_Init+0x420>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d123      	bne.n	8003544 <HAL_DMA_Init+0x424>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e022      	b.n	8003546 <HAL_DMA_Init+0x426>
 8003500:	fe10803f 	.word	0xfe10803f
 8003504:	48022c08 	.word	0x48022c08
 8003508:	48022c1c 	.word	0x48022c1c
 800350c:	48022c30 	.word	0x48022c30
 8003510:	48022c44 	.word	0x48022c44
 8003514:	48022c58 	.word	0x48022c58
 8003518:	48022c6c 	.word	0x48022c6c
 800351c:	48022c80 	.word	0x48022c80
 8003520:	48022c94 	.word	0x48022c94
 8003524:	58025408 	.word	0x58025408
 8003528:	5802541c 	.word	0x5802541c
 800352c:	58025430 	.word	0x58025430
 8003530:	58025444 	.word	0x58025444
 8003534:	58025458 	.word	0x58025458
 8003538:	5802546c 	.word	0x5802546c
 800353c:	58025480 	.word	0x58025480
 8003540:	58025494 	.word	0x58025494
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d07d      	beq.n	8003646 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7f      	ldr	r2, [pc, #508]	@ (800374c <HAL_DMA_Init+0x62c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d021      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7d      	ldr	r2, [pc, #500]	@ (8003750 <HAL_DMA_Init+0x630>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01c      	beq.n	8003598 <HAL_DMA_Init+0x478>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7c      	ldr	r2, [pc, #496]	@ (8003754 <HAL_DMA_Init+0x634>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d017      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a7a      	ldr	r2, [pc, #488]	@ (8003758 <HAL_DMA_Init+0x638>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d012      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a79      	ldr	r2, [pc, #484]	@ (800375c <HAL_DMA_Init+0x63c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00d      	beq.n	8003598 <HAL_DMA_Init+0x478>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a77      	ldr	r2, [pc, #476]	@ (8003760 <HAL_DMA_Init+0x640>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a76      	ldr	r2, [pc, #472]	@ (8003764 <HAL_DMA_Init+0x644>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_DMA_Init+0x478>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a74      	ldr	r2, [pc, #464]	@ (8003768 <HAL_DMA_Init+0x648>)
 8003596:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4b6e      	ldr	r3, [pc, #440]	@ (800376c <HAL_DMA_Init+0x64c>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Init+0x4b2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b80      	cmp	r3, #128	@ 0x80
 80035c6:	d102      	bne.n	80035ce <HAL_DMA_Init+0x4ae>
 80035c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035cc:	e002      	b.n	80035d4 <HAL_DMA_Init+0x4b4>
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_DMA_Init+0x4b4>
 80035d2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68d2      	ldr	r2, [r2, #12]
 80035d8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003602:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <HAL_DMA_Init+0x650>)
 800361a:	4413      	add	r3, r2
 800361c:	4a55      	ldr	r2, [pc, #340]	@ (8003774 <HAL_DMA_Init+0x654>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f001 fcb6 	bl	8004f9c <DMA_CalcBaseAndBitshift>
 8003630:	4603      	mov	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2201      	movs	r2, #1
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e008      	b.n	8003658 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2240      	movs	r2, #64	@ 0x40
 800364a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2203      	movs	r2, #3
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0ed      	b.n	8003834 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a46      	ldr	r2, [pc, #280]	@ (8003778 <HAL_DMA_Init+0x658>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d072      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a45      	ldr	r2, [pc, #276]	@ (800377c <HAL_DMA_Init+0x65c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d06d      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a43      	ldr	r2, [pc, #268]	@ (8003780 <HAL_DMA_Init+0x660>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d068      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <HAL_DMA_Init+0x664>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d063      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a40      	ldr	r2, [pc, #256]	@ (8003788 <HAL_DMA_Init+0x668>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d05e      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3f      	ldr	r2, [pc, #252]	@ (800378c <HAL_DMA_Init+0x66c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d059      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3d      	ldr	r2, [pc, #244]	@ (8003790 <HAL_DMA_Init+0x670>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d054      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003794 <HAL_DMA_Init+0x674>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04f      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003798 <HAL_DMA_Init+0x678>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d04a      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a39      	ldr	r2, [pc, #228]	@ (800379c <HAL_DMA_Init+0x67c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d045      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a37      	ldr	r2, [pc, #220]	@ (80037a0 <HAL_DMA_Init+0x680>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d040      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a36      	ldr	r2, [pc, #216]	@ (80037a4 <HAL_DMA_Init+0x684>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d03b      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <HAL_DMA_Init+0x688>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d036      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <HAL_DMA_Init+0x68c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d031      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a31      	ldr	r2, [pc, #196]	@ (80037b0 <HAL_DMA_Init+0x690>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02c      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a30      	ldr	r2, [pc, #192]	@ (80037b4 <HAL_DMA_Init+0x694>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d027      	beq.n	8003748 <HAL_DMA_Init+0x628>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	@ (800374c <HAL_DMA_Init+0x62c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <HAL_DMA_Init+0x630>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d01d      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a10      	ldr	r2, [pc, #64]	@ (8003754 <HAL_DMA_Init+0x634>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a0f      	ldr	r2, [pc, #60]	@ (8003758 <HAL_DMA_Init+0x638>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0d      	ldr	r2, [pc, #52]	@ (800375c <HAL_DMA_Init+0x63c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0c      	ldr	r2, [pc, #48]	@ (8003760 <HAL_DMA_Init+0x640>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_DMA_Init+0x628>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <HAL_DMA_Init+0x644>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_DMA_Init+0x628>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <HAL_DMA_Init+0x648>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d137      	bne.n	80037b8 <HAL_DMA_Init+0x698>
 8003748:	2301      	movs	r3, #1
 800374a:	e036      	b.n	80037ba <HAL_DMA_Init+0x69a>
 800374c:	58025408 	.word	0x58025408
 8003750:	5802541c 	.word	0x5802541c
 8003754:	58025430 	.word	0x58025430
 8003758:	58025444 	.word	0x58025444
 800375c:	58025458 	.word	0x58025458
 8003760:	5802546c 	.word	0x5802546c
 8003764:	58025480 	.word	0x58025480
 8003768:	58025494 	.word	0x58025494
 800376c:	fffe000f 	.word	0xfffe000f
 8003770:	a7fdabf8 	.word	0xa7fdabf8
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d032      	beq.n	8003824 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 fd1a 	bl	80051f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d102      	bne.n	80037d2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037e6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_DMA_Init+0x6f2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d80c      	bhi.n	8003812 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f001 fd97 	bl	800532c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	e008      	b.n	8003824 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e226      	b.n	8003ca6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Start_IT+0x2a>
 8003862:	2302      	movs	r3, #2
 8003864:	e21f      	b.n	8003ca6 <HAL_DMA_Start_IT+0x46a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 820a 	bne.w	8003c90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a68      	ldr	r2, [pc, #416]	@ (8003a30 <HAL_DMA_Start_IT+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a66      	ldr	r2, [pc, #408]	@ (8003a34 <HAL_DMA_Start_IT+0x1f8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a65      	ldr	r2, [pc, #404]	@ (8003a38 <HAL_DMA_Start_IT+0x1fc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a63      	ldr	r2, [pc, #396]	@ (8003a3c <HAL_DMA_Start_IT+0x200>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a62      	ldr	r2, [pc, #392]	@ (8003a40 <HAL_DMA_Start_IT+0x204>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a60      	ldr	r2, [pc, #384]	@ (8003a44 <HAL_DMA_Start_IT+0x208>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003a48 <HAL_DMA_Start_IT+0x20c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a4c <HAL_DMA_Start_IT+0x210>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <HAL_DMA_Start_IT+0x214>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a54 <HAL_DMA_Start_IT+0x218>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a59      	ldr	r2, [pc, #356]	@ (8003a58 <HAL_DMA_Start_IT+0x21c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a57      	ldr	r2, [pc, #348]	@ (8003a5c <HAL_DMA_Start_IT+0x220>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a56      	ldr	r2, [pc, #344]	@ (8003a60 <HAL_DMA_Start_IT+0x224>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a54      	ldr	r2, [pc, #336]	@ (8003a64 <HAL_DMA_Start_IT+0x228>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a53      	ldr	r2, [pc, #332]	@ (8003a68 <HAL_DMA_Start_IT+0x22c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <HAL_DMA_Start_IT+0x230>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <HAL_DMA_Start_IT+0x100>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e007      	b.n	800394c <HAL_DMA_Start_IT+0x110>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f001 f93e 	bl	8004bd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a34      	ldr	r2, [pc, #208]	@ (8003a30 <HAL_DMA_Start_IT+0x1f4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a33      	ldr	r2, [pc, #204]	@ (8003a34 <HAL_DMA_Start_IT+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a31      	ldr	r2, [pc, #196]	@ (8003a38 <HAL_DMA_Start_IT+0x1fc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <HAL_DMA_Start_IT+0x200>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2e      	ldr	r2, [pc, #184]	@ (8003a40 <HAL_DMA_Start_IT+0x204>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2d      	ldr	r2, [pc, #180]	@ (8003a44 <HAL_DMA_Start_IT+0x208>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2b      	ldr	r2, [pc, #172]	@ (8003a48 <HAL_DMA_Start_IT+0x20c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a4c <HAL_DMA_Start_IT+0x210>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <HAL_DMA_Start_IT+0x214>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a27      	ldr	r2, [pc, #156]	@ (8003a54 <HAL_DMA_Start_IT+0x218>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a25      	ldr	r2, [pc, #148]	@ (8003a58 <HAL_DMA_Start_IT+0x21c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a24      	ldr	r2, [pc, #144]	@ (8003a5c <HAL_DMA_Start_IT+0x220>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	@ (8003a60 <HAL_DMA_Start_IT+0x224>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <HAL_DMA_Start_IT+0x228>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <HAL_DMA_Start_IT+0x22c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <HAL_DMA_Start_IT+0x230>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Start_IT+0x1c0>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_DMA_Start_IT+0x1c2>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 021e 	bic.w	r2, r3, #30
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0216 	orr.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03e      	beq.n	8003a9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e035      	b.n	8003a9c <HAL_DMA_Start_IT+0x260>
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020e 	bic.w	r2, r3, #14
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 020a 	orr.w	r2, r2, #10
 8003a82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0204 	orr.w	r2, r2, #4
 8003a9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a83      	ldr	r2, [pc, #524]	@ (8003cb0 <HAL_DMA_Start_IT+0x474>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d072      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a82      	ldr	r2, [pc, #520]	@ (8003cb4 <HAL_DMA_Start_IT+0x478>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d06d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a80      	ldr	r2, [pc, #512]	@ (8003cb8 <HAL_DMA_Start_IT+0x47c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d068      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7f      	ldr	r2, [pc, #508]	@ (8003cbc <HAL_DMA_Start_IT+0x480>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d063      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc0 <HAL_DMA_Start_IT+0x484>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d05e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc4 <HAL_DMA_Start_IT+0x488>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d059      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7a      	ldr	r2, [pc, #488]	@ (8003cc8 <HAL_DMA_Start_IT+0x48c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d054      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a79      	ldr	r2, [pc, #484]	@ (8003ccc <HAL_DMA_Start_IT+0x490>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04f      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a77      	ldr	r2, [pc, #476]	@ (8003cd0 <HAL_DMA_Start_IT+0x494>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a76      	ldr	r2, [pc, #472]	@ (8003cd4 <HAL_DMA_Start_IT+0x498>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a74      	ldr	r2, [pc, #464]	@ (8003cd8 <HAL_DMA_Start_IT+0x49c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	@ (8003cdc <HAL_DMA_Start_IT+0x4a0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a71      	ldr	r2, [pc, #452]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a70      	ldr	r2, [pc, #448]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ce8 <HAL_DMA_Start_IT+0x4ac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6d      	ldr	r2, [pc, #436]	@ (8003cec <HAL_DMA_Start_IT+0x4b0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf0 <HAL_DMA_Start_IT+0x4b4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <HAL_DMA_Start_IT+0x4b8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a68      	ldr	r2, [pc, #416]	@ (8003cf8 <HAL_DMA_Start_IT+0x4bc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a67      	ldr	r2, [pc, #412]	@ (8003cfc <HAL_DMA_Start_IT+0x4c0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a65      	ldr	r2, [pc, #404]	@ (8003d00 <HAL_DMA_Start_IT+0x4c4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a64      	ldr	r2, [pc, #400]	@ (8003d04 <HAL_DMA_Start_IT+0x4c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a62      	ldr	r2, [pc, #392]	@ (8003d08 <HAL_DMA_Start_IT+0x4cc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a61      	ldr	r2, [pc, #388]	@ (8003d0c <HAL_DMA_Start_IT+0x4d0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Start_IT+0x354>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_Start_IT+0x356>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01a      	beq.n	8003bcc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a37      	ldr	r2, [pc, #220]	@ (8003cb0 <HAL_DMA_Start_IT+0x474>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04a      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a36      	ldr	r2, [pc, #216]	@ (8003cb4 <HAL_DMA_Start_IT+0x478>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d045      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a34      	ldr	r2, [pc, #208]	@ (8003cb8 <HAL_DMA_Start_IT+0x47c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d040      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a33      	ldr	r2, [pc, #204]	@ (8003cbc <HAL_DMA_Start_IT+0x480>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03b      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a31      	ldr	r2, [pc, #196]	@ (8003cc0 <HAL_DMA_Start_IT+0x484>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d036      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a30      	ldr	r2, [pc, #192]	@ (8003cc4 <HAL_DMA_Start_IT+0x488>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc8 <HAL_DMA_Start_IT+0x48c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02c      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2d      	ldr	r2, [pc, #180]	@ (8003ccc <HAL_DMA_Start_IT+0x490>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d027      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd0 <HAL_DMA_Start_IT+0x494>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd4 <HAL_DMA_Start_IT+0x498>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a28      	ldr	r2, [pc, #160]	@ (8003cd8 <HAL_DMA_Start_IT+0x49c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a27      	ldr	r2, [pc, #156]	@ (8003cdc <HAL_DMA_Start_IT+0x4a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a25      	ldr	r2, [pc, #148]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a24      	ldr	r2, [pc, #144]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ce8 <HAL_DMA_Start_IT+0x4ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <HAL_DMA_Start_IT+0x4b0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <HAL_DMA_Start_IT+0x442>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e012      	b.n	8003ca4 <HAL_DMA_Start_IT+0x468>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e009      	b.n	8003ca4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	58025408 	.word	0x58025408
 8003cf4:	5802541c 	.word	0x5802541c
 8003cf8:	58025430 	.word	0x58025430
 8003cfc:	58025444 	.word	0x58025444
 8003d00:	58025458 	.word	0x58025458
 8003d04:	5802546c 	.word	0x5802546c
 8003d08:	58025480 	.word	0x58025480
 8003d0c:	58025494 	.word	0x58025494

08003d10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d1c:	4b67      	ldr	r3, [pc, #412]	@ (8003ebc <HAL_DMA_IRQHandler+0x1ac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a67      	ldr	r2, [pc, #412]	@ (8003ec0 <HAL_DMA_IRQHandler+0x1b0>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5f      	ldr	r2, [pc, #380]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1b4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d04a      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1b8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d045      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ecc <HAL_DMA_IRQHandler+0x1bc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d040      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a5a      	ldr	r2, [pc, #360]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1c0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d03b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a59      	ldr	r2, [pc, #356]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1c4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d036      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a57      	ldr	r2, [pc, #348]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1c8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a56      	ldr	r2, [pc, #344]	@ (8003edc <HAL_DMA_IRQHandler+0x1cc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d02c      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a54      	ldr	r2, [pc, #336]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1d0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d027      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a53      	ldr	r2, [pc, #332]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1d4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a51      	ldr	r2, [pc, #324]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1d8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a50      	ldr	r2, [pc, #320]	@ (8003eec <HAL_DMA_IRQHandler+0x1dc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1e0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4d      	ldr	r2, [pc, #308]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1e4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1e8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003efc <HAL_DMA_IRQHandler+0x1ec>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a48      	ldr	r2, [pc, #288]	@ (8003f00 <HAL_DMA_IRQHandler+0x1f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_IRQHandler+0xd6>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_DMA_IRQHandler+0xd8>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 842b 	beq.w	8004644 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2208      	movs	r2, #8
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a2 	beq.w	8003f48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ecc <HAL_DMA_IRQHandler+0x1bc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1c0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a28      	ldr	r2, [pc, #160]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1c4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a25      	ldr	r2, [pc, #148]	@ (8003edc <HAL_DMA_IRQHandler+0x1cc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1d0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1d4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1d8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_DMA_IRQHandler+0x1dc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1e0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1e4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1e8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <HAL_DMA_IRQHandler+0x1ec>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <HAL_DMA_IRQHandler+0x1f0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d12f      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x1f4>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e02e      	b.n	8003f18 <HAL_DMA_IRQHandler+0x208>
 8003eba:	bf00      	nop
 8003ebc:	24000000 	.word	0x24000000
 8003ec0:	1b4e81b5 	.word	0x1b4e81b5
 8003ec4:	40020010 	.word	0x40020010
 8003ec8:	40020028 	.word	0x40020028
 8003ecc:	40020040 	.word	0x40020040
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	40020070 	.word	0x40020070
 8003ed8:	40020088 	.word	0x40020088
 8003edc:	400200a0 	.word	0x400200a0
 8003ee0:	400200b8 	.word	0x400200b8
 8003ee4:	40020410 	.word	0x40020410
 8003ee8:	40020428 	.word	0x40020428
 8003eec:	40020440 	.word	0x40020440
 8003ef0:	40020458 	.word	0x40020458
 8003ef4:	40020470 	.word	0x40020470
 8003ef8:	40020488 	.word	0x40020488
 8003efc:	400204a0 	.word	0x400204a0
 8003f00:	400204b8 	.word	0x400204b8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2208      	movs	r2, #8
 8003f36:	409a      	lsls	r2, r3
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d06e      	beq.n	800403c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a69      	ldr	r2, [pc, #420]	@ (8004108 <HAL_DMA_IRQHandler+0x3f8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d04a      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a67      	ldr	r2, [pc, #412]	@ (800410c <HAL_DMA_IRQHandler+0x3fc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d045      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a66      	ldr	r2, [pc, #408]	@ (8004110 <HAL_DMA_IRQHandler+0x400>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d040      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a64      	ldr	r2, [pc, #400]	@ (8004114 <HAL_DMA_IRQHandler+0x404>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d03b      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a63      	ldr	r2, [pc, #396]	@ (8004118 <HAL_DMA_IRQHandler+0x408>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d036      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a61      	ldr	r2, [pc, #388]	@ (800411c <HAL_DMA_IRQHandler+0x40c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d031      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a60      	ldr	r2, [pc, #384]	@ (8004120 <HAL_DMA_IRQHandler+0x410>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d02c      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8004124 <HAL_DMA_IRQHandler+0x414>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d027      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8004128 <HAL_DMA_IRQHandler+0x418>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800412c <HAL_DMA_IRQHandler+0x41c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8004130 <HAL_DMA_IRQHandler+0x420>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <HAL_DMA_IRQHandler+0x424>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a57      	ldr	r2, [pc, #348]	@ (8004138 <HAL_DMA_IRQHandler+0x428>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a55      	ldr	r2, [pc, #340]	@ (800413c <HAL_DMA_IRQHandler+0x42c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a54      	ldr	r2, [pc, #336]	@ (8004140 <HAL_DMA_IRQHandler+0x430>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	@ (8004144 <HAL_DMA_IRQHandler+0x434>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10a      	bne.n	8004014 <HAL_DMA_IRQHandler+0x304>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e003      	b.n	800401c <HAL_DMA_IRQHandler+0x30c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0202 	orr.w	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2204      	movs	r2, #4
 8004046:	409a      	lsls	r2, r3
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 808f 	beq.w	8004170 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2c      	ldr	r2, [pc, #176]	@ (8004108 <HAL_DMA_IRQHandler+0x3f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04a      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <HAL_DMA_IRQHandler+0x3fc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d045      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a29      	ldr	r2, [pc, #164]	@ (8004110 <HAL_DMA_IRQHandler+0x400>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a27      	ldr	r2, [pc, #156]	@ (8004114 <HAL_DMA_IRQHandler+0x404>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d03b      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a26      	ldr	r2, [pc, #152]	@ (8004118 <HAL_DMA_IRQHandler+0x408>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d036      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a24      	ldr	r2, [pc, #144]	@ (800411c <HAL_DMA_IRQHandler+0x40c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d031      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <HAL_DMA_IRQHandler+0x410>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d02c      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_DMA_IRQHandler+0x414>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a20      	ldr	r2, [pc, #128]	@ (8004128 <HAL_DMA_IRQHandler+0x418>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <HAL_DMA_IRQHandler+0x41c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004130 <HAL_DMA_IRQHandler+0x420>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <HAL_DMA_IRQHandler+0x424>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004138 <HAL_DMA_IRQHandler+0x428>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <HAL_DMA_IRQHandler+0x42c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <HAL_DMA_IRQHandler+0x430>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <HAL_DMA_IRQHandler+0x434>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d12a      	bne.n	8004148 <HAL_DMA_IRQHandler+0x438>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e023      	b.n	8004150 <HAL_DMA_IRQHandler+0x440>
 8004108:	40020010 	.word	0x40020010
 800410c:	40020028 	.word	0x40020028
 8004110:	40020040 	.word	0x40020040
 8004114:	40020058 	.word	0x40020058
 8004118:	40020070 	.word	0x40020070
 800411c:	40020088 	.word	0x40020088
 8004120:	400200a0 	.word	0x400200a0
 8004124:	400200b8 	.word	0x400200b8
 8004128:	40020410 	.word	0x40020410
 800412c:	40020428 	.word	0x40020428
 8004130:	40020440 	.word	0x40020440
 8004134:	40020458 	.word	0x40020458
 8004138:	40020470 	.word	0x40020470
 800413c:	40020488 	.word	0x40020488
 8004140:	400204a0 	.word	0x400204a0
 8004144:	400204b8 	.word	0x400204b8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2204      	movs	r2, #4
 800415e:	409a      	lsls	r2, r3
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	f043 0204 	orr.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2210      	movs	r2, #16
 800417a:	409a      	lsls	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a6 	beq.w	80042d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a85      	ldr	r2, [pc, #532]	@ (80043a0 <HAL_DMA_IRQHandler+0x690>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a83      	ldr	r2, [pc, #524]	@ (80043a4 <HAL_DMA_IRQHandler+0x694>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	@ (80043a8 <HAL_DMA_IRQHandler+0x698>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a80      	ldr	r2, [pc, #512]	@ (80043ac <HAL_DMA_IRQHandler+0x69c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7f      	ldr	r2, [pc, #508]	@ (80043b0 <HAL_DMA_IRQHandler+0x6a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7d      	ldr	r2, [pc, #500]	@ (80043b4 <HAL_DMA_IRQHandler+0x6a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7c      	ldr	r2, [pc, #496]	@ (80043b8 <HAL_DMA_IRQHandler+0x6a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7a      	ldr	r2, [pc, #488]	@ (80043bc <HAL_DMA_IRQHandler+0x6ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	@ (80043c0 <HAL_DMA_IRQHandler+0x6b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	@ (80043c4 <HAL_DMA_IRQHandler+0x6b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a76      	ldr	r2, [pc, #472]	@ (80043c8 <HAL_DMA_IRQHandler+0x6b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a74      	ldr	r2, [pc, #464]	@ (80043cc <HAL_DMA_IRQHandler+0x6bc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a73      	ldr	r2, [pc, #460]	@ (80043d0 <HAL_DMA_IRQHandler+0x6c0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	@ (80043d4 <HAL_DMA_IRQHandler+0x6c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a70      	ldr	r2, [pc, #448]	@ (80043d8 <HAL_DMA_IRQHandler+0x6c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	@ (80043dc <HAL_DMA_IRQHandler+0x6cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d10a      	bne.n	800423c <HAL_DMA_IRQHandler+0x52c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e009      	b.n	8004250 <HAL_DMA_IRQHandler+0x540>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	bf14      	ite	ne
 800424a:	2301      	movne	r3, #1
 800424c:	2300      	moveq	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03e      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2210      	movs	r2, #16
 800425e:	409a      	lsls	r2, r3
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d018      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d024      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
 8004290:	e01f      	b.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01b      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e016      	b.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0208 	bic.w	r2, r2, #8
 80042c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2220      	movs	r2, #32
 80042dc:	409a      	lsls	r2, r3
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8110 	beq.w	8004508 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2c      	ldr	r2, [pc, #176]	@ (80043a0 <HAL_DMA_IRQHandler+0x690>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2b      	ldr	r2, [pc, #172]	@ (80043a4 <HAL_DMA_IRQHandler+0x694>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a29      	ldr	r2, [pc, #164]	@ (80043a8 <HAL_DMA_IRQHandler+0x698>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <HAL_DMA_IRQHandler+0x69c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a26      	ldr	r2, [pc, #152]	@ (80043b0 <HAL_DMA_IRQHandler+0x6a0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a25      	ldr	r2, [pc, #148]	@ (80043b4 <HAL_DMA_IRQHandler+0x6a4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a23      	ldr	r2, [pc, #140]	@ (80043b8 <HAL_DMA_IRQHandler+0x6a8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a22      	ldr	r2, [pc, #136]	@ (80043bc <HAL_DMA_IRQHandler+0x6ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a20      	ldr	r2, [pc, #128]	@ (80043c0 <HAL_DMA_IRQHandler+0x6b0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <HAL_DMA_IRQHandler+0x6b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <HAL_DMA_IRQHandler+0x6b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1c      	ldr	r2, [pc, #112]	@ (80043cc <HAL_DMA_IRQHandler+0x6bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1a      	ldr	r2, [pc, #104]	@ (80043d0 <HAL_DMA_IRQHandler+0x6c0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a19      	ldr	r2, [pc, #100]	@ (80043d4 <HAL_DMA_IRQHandler+0x6c4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_DMA_IRQHandler+0x6c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_DMA_IRQHandler+0x6cc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d12b      	bne.n	80043e0 <HAL_DMA_IRQHandler+0x6d0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e02a      	b.n	80043f4 <HAL_DMA_IRQHandler+0x6e4>
 800439e:	bf00      	nop
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8087 	beq.w	8004508 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2220      	movs	r2, #32
 8004404:	409a      	lsls	r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b04      	cmp	r3, #4
 8004414:	d139      	bne.n	800448a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0216 	bic.w	r2, r2, #22
 8004424:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004434:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_DMA_IRQHandler+0x736>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0208 	bic.w	r2, r2, #8
 8004454:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	223f      	movs	r2, #63	@ 0x3f
 8004460:	409a      	lsls	r2, r3
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8382 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
          }
          return;
 8004488:	e37c      	b.n	8004b84 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d018      	beq.n	80044ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02c      	beq.n	8004508 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 80044b6:	e027      	b.n	8004508 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d023      	beq.n	8004508 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e01e      	b.n	8004508 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10f      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 833e 	beq.w	8004b8e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8088 	beq.w	8004630 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2204      	movs	r2, #4
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a89      	ldr	r2, [pc, #548]	@ (8004754 <HAL_DMA_IRQHandler+0xa44>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04a      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a88      	ldr	r2, [pc, #544]	@ (8004758 <HAL_DMA_IRQHandler+0xa48>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d045      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a86      	ldr	r2, [pc, #536]	@ (800475c <HAL_DMA_IRQHandler+0xa4c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d040      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a85      	ldr	r2, [pc, #532]	@ (8004760 <HAL_DMA_IRQHandler+0xa50>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d03b      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a83      	ldr	r2, [pc, #524]	@ (8004764 <HAL_DMA_IRQHandler+0xa54>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d036      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a82      	ldr	r2, [pc, #520]	@ (8004768 <HAL_DMA_IRQHandler+0xa58>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d031      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a80      	ldr	r2, [pc, #512]	@ (800476c <HAL_DMA_IRQHandler+0xa5c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02c      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7f      	ldr	r2, [pc, #508]	@ (8004770 <HAL_DMA_IRQHandler+0xa60>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d027      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7d      	ldr	r2, [pc, #500]	@ (8004774 <HAL_DMA_IRQHandler+0xa64>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7c      	ldr	r2, [pc, #496]	@ (8004778 <HAL_DMA_IRQHandler+0xa68>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d01d      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a7a      	ldr	r2, [pc, #488]	@ (800477c <HAL_DMA_IRQHandler+0xa6c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a79      	ldr	r2, [pc, #484]	@ (8004780 <HAL_DMA_IRQHandler+0xa70>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a77      	ldr	r2, [pc, #476]	@ (8004784 <HAL_DMA_IRQHandler+0xa74>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a76      	ldr	r2, [pc, #472]	@ (8004788 <HAL_DMA_IRQHandler+0xa78>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a74      	ldr	r2, [pc, #464]	@ (800478c <HAL_DMA_IRQHandler+0xa7c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a73      	ldr	r2, [pc, #460]	@ (8004790 <HAL_DMA_IRQHandler+0xa80>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <HAL_DMA_IRQHandler+0x8ca>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e007      	b.n	80045ea <HAL_DMA_IRQHandler+0x8da>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d307      	bcc.n	8004606 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f2      	bne.n	80045ea <HAL_DMA_IRQHandler+0x8da>
 8004604:	e000      	b.n	8004608 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004606:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2203      	movs	r2, #3
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800461e:	e003      	b.n	8004628 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 82aa 	beq.w	8004b8e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	e2a4      	b.n	8004b8e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a52      	ldr	r2, [pc, #328]	@ (8004794 <HAL_DMA_IRQHandler+0xa84>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d04a      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a51      	ldr	r2, [pc, #324]	@ (8004798 <HAL_DMA_IRQHandler+0xa88>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d045      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a4f      	ldr	r2, [pc, #316]	@ (800479c <HAL_DMA_IRQHandler+0xa8c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d040      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4e      	ldr	r2, [pc, #312]	@ (80047a0 <HAL_DMA_IRQHandler+0xa90>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d03b      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4c      	ldr	r2, [pc, #304]	@ (80047a4 <HAL_DMA_IRQHandler+0xa94>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d036      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4b      	ldr	r2, [pc, #300]	@ (80047a8 <HAL_DMA_IRQHandler+0xa98>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d031      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a49      	ldr	r2, [pc, #292]	@ (80047ac <HAL_DMA_IRQHandler+0xa9c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d02c      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a48      	ldr	r2, [pc, #288]	@ (80047b0 <HAL_DMA_IRQHandler+0xaa0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d027      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a46      	ldr	r2, [pc, #280]	@ (80047b4 <HAL_DMA_IRQHandler+0xaa4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d022      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a45      	ldr	r2, [pc, #276]	@ (80047b8 <HAL_DMA_IRQHandler+0xaa8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d01d      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a43      	ldr	r2, [pc, #268]	@ (80047bc <HAL_DMA_IRQHandler+0xaac>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d018      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a42      	ldr	r2, [pc, #264]	@ (80047c0 <HAL_DMA_IRQHandler+0xab0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a40      	ldr	r2, [pc, #256]	@ (80047c4 <HAL_DMA_IRQHandler+0xab4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	@ (80047c8 <HAL_DMA_IRQHandler+0xab8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d009      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3d      	ldr	r2, [pc, #244]	@ (80047cc <HAL_DMA_IRQHandler+0xabc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x9d4>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3c      	ldr	r2, [pc, #240]	@ (80047d0 <HAL_DMA_IRQHandler+0xac0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x9d8>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_DMA_IRQHandler+0x9da>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 824f 	beq.w	8004b8e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2204      	movs	r2, #4
 8004702:	409a      	lsls	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80dd 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xbb8>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80d7 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2204      	movs	r2, #4
 8004724:	409a      	lsls	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d059      	beq.n	80047e8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d14a      	bne.n	80047d4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8220 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004750:	e21a      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe78>
 8004752:	bf00      	nop
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
 8004794:	48022c08 	.word	0x48022c08
 8004798:	48022c1c 	.word	0x48022c1c
 800479c:	48022c30 	.word	0x48022c30
 80047a0:	48022c44 	.word	0x48022c44
 80047a4:	48022c58 	.word	0x48022c58
 80047a8:	48022c6c 	.word	0x48022c6c
 80047ac:	48022c80 	.word	0x48022c80
 80047b0:	48022c94 	.word	0x48022c94
 80047b4:	58025408 	.word	0x58025408
 80047b8:	5802541c 	.word	0x5802541c
 80047bc:	58025430 	.word	0x58025430
 80047c0:	58025444 	.word	0x58025444
 80047c4:	58025458 	.word	0x58025458
 80047c8:	5802546c 	.word	0x5802546c
 80047cc:	58025480 	.word	0x58025480
 80047d0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 81d5 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e6:	e1cf      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d160      	bne.n	80048b4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a7f      	ldr	r2, [pc, #508]	@ (80049f4 <HAL_DMA_IRQHandler+0xce4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04a      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a7d      	ldr	r2, [pc, #500]	@ (80049f8 <HAL_DMA_IRQHandler+0xce8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d045      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7c      	ldr	r2, [pc, #496]	@ (80049fc <HAL_DMA_IRQHandler+0xcec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d040      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7a      	ldr	r2, [pc, #488]	@ (8004a00 <HAL_DMA_IRQHandler+0xcf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d03b      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a79      	ldr	r2, [pc, #484]	@ (8004a04 <HAL_DMA_IRQHandler+0xcf4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d036      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a77      	ldr	r2, [pc, #476]	@ (8004a08 <HAL_DMA_IRQHandler+0xcf8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d031      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a76      	ldr	r2, [pc, #472]	@ (8004a0c <HAL_DMA_IRQHandler+0xcfc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02c      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a74      	ldr	r2, [pc, #464]	@ (8004a10 <HAL_DMA_IRQHandler+0xd00>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d027      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a73      	ldr	r2, [pc, #460]	@ (8004a14 <HAL_DMA_IRQHandler+0xd04>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d022      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a71      	ldr	r2, [pc, #452]	@ (8004a18 <HAL_DMA_IRQHandler+0xd08>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a70      	ldr	r2, [pc, #448]	@ (8004a1c <HAL_DMA_IRQHandler+0xd0c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d018      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6e      	ldr	r2, [pc, #440]	@ (8004a20 <HAL_DMA_IRQHandler+0xd10>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a24 <HAL_DMA_IRQHandler+0xd14>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	@ (8004a28 <HAL_DMA_IRQHandler+0xd18>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6a      	ldr	r2, [pc, #424]	@ (8004a2c <HAL_DMA_IRQHandler+0xd1c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_DMA_IRQHandler+0xb82>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	@ (8004a30 <HAL_DMA_IRQHandler+0xd20>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_DMA_IRQHandler+0xb94>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0208 	bic.w	r2, r2, #8
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e007      	b.n	80048b4 <HAL_DMA_IRQHandler+0xba4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8165 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c6:	e15f      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2202      	movs	r2, #2
 80048d2:	409a      	lsls	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80c5 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xd58>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80bf 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2202      	movs	r2, #2
 80048f4:	409a      	lsls	r2, r3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 813a 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004920:	e134      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8130 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004934:	e12a      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 8089 	bne.w	8004a54 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2b      	ldr	r2, [pc, #172]	@ (80049f4 <HAL_DMA_IRQHandler+0xce4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04a      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a29      	ldr	r2, [pc, #164]	@ (80049f8 <HAL_DMA_IRQHandler+0xce8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d045      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a28      	ldr	r2, [pc, #160]	@ (80049fc <HAL_DMA_IRQHandler+0xcec>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a26      	ldr	r2, [pc, #152]	@ (8004a00 <HAL_DMA_IRQHandler+0xcf0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d03b      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a25      	ldr	r2, [pc, #148]	@ (8004a04 <HAL_DMA_IRQHandler+0xcf4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_DMA_IRQHandler+0xcf8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d031      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a22      	ldr	r2, [pc, #136]	@ (8004a0c <HAL_DMA_IRQHandler+0xcfc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <HAL_DMA_IRQHandler+0xd00>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <HAL_DMA_IRQHandler+0xd04>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <HAL_DMA_IRQHandler+0xd08>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <HAL_DMA_IRQHandler+0xd0c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a20 <HAL_DMA_IRQHandler+0xd10>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a19      	ldr	r2, [pc, #100]	@ (8004a24 <HAL_DMA_IRQHandler+0xd14>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_DMA_IRQHandler+0xd18>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <HAL_DMA_IRQHandler+0xd1c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xcd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	@ (8004a30 <HAL_DMA_IRQHandler+0xd20>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d128      	bne.n	8004a34 <HAL_DMA_IRQHandler+0xd24>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0214 	bic.w	r2, r2, #20
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e027      	b.n	8004a44 <HAL_DMA_IRQHandler+0xd34>
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 020a 	bic.w	r2, r2, #10
 8004a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8097 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a66:	e091      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2208      	movs	r2, #8
 8004a72:	409a      	lsls	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8088 	beq.w	8004b8e <HAL_DMA_IRQHandler+0xe7e>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8082 	beq.w	8004b8e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a41      	ldr	r2, [pc, #260]	@ (8004b94 <HAL_DMA_IRQHandler+0xe84>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d04a      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3f      	ldr	r2, [pc, #252]	@ (8004b98 <HAL_DMA_IRQHandler+0xe88>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d045      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8004b9c <HAL_DMA_IRQHandler+0xe8c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d040      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba0 <HAL_DMA_IRQHandler+0xe90>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d03b      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba4 <HAL_DMA_IRQHandler+0xe94>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d036      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a39      	ldr	r2, [pc, #228]	@ (8004ba8 <HAL_DMA_IRQHandler+0xe98>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a38      	ldr	r2, [pc, #224]	@ (8004bac <HAL_DMA_IRQHandler+0xe9c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d02c      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a36      	ldr	r2, [pc, #216]	@ (8004bb0 <HAL_DMA_IRQHandler+0xea0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d027      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a35      	ldr	r2, [pc, #212]	@ (8004bb4 <HAL_DMA_IRQHandler+0xea4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a33      	ldr	r2, [pc, #204]	@ (8004bb8 <HAL_DMA_IRQHandler+0xea8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a32      	ldr	r2, [pc, #200]	@ (8004bbc <HAL_DMA_IRQHandler+0xeac>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a30      	ldr	r2, [pc, #192]	@ (8004bc0 <HAL_DMA_IRQHandler+0xeb0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc4 <HAL_DMA_IRQHandler+0xeb4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <HAL_DMA_IRQHandler+0xeb8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bcc <HAL_DMA_IRQHandler+0xebc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_DMA_IRQHandler+0xe1a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd0 <HAL_DMA_IRQHandler+0xec0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <HAL_DMA_IRQHandler+0xe2c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 021c 	bic.w	r2, r2, #28
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e007      	b.n	8004b4c <HAL_DMA_IRQHandler+0xe3c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 020e 	bic.w	r2, r2, #14
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
 8004b82:	e004      	b.n	8004b8e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b8e:	3728      	adds	r7, #40	@ 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8

08004bd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7f      	ldr	r2, [pc, #508]	@ (8004df0 <DMA_SetConfig+0x21c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d072      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8004df4 <DMA_SetConfig+0x220>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d06d      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7c      	ldr	r2, [pc, #496]	@ (8004df8 <DMA_SetConfig+0x224>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d068      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7a      	ldr	r2, [pc, #488]	@ (8004dfc <DMA_SetConfig+0x228>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d063      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a79      	ldr	r2, [pc, #484]	@ (8004e00 <DMA_SetConfig+0x22c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d05e      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a77      	ldr	r2, [pc, #476]	@ (8004e04 <DMA_SetConfig+0x230>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d059      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a76      	ldr	r2, [pc, #472]	@ (8004e08 <DMA_SetConfig+0x234>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d054      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a74      	ldr	r2, [pc, #464]	@ (8004e0c <DMA_SetConfig+0x238>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d04f      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a73      	ldr	r2, [pc, #460]	@ (8004e10 <DMA_SetConfig+0x23c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a71      	ldr	r2, [pc, #452]	@ (8004e14 <DMA_SetConfig+0x240>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a70      	ldr	r2, [pc, #448]	@ (8004e18 <DMA_SetConfig+0x244>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a6e      	ldr	r2, [pc, #440]	@ (8004e1c <DMA_SetConfig+0x248>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e20 <DMA_SetConfig+0x24c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6b      	ldr	r2, [pc, #428]	@ (8004e24 <DMA_SetConfig+0x250>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e28 <DMA_SetConfig+0x254>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a68      	ldr	r2, [pc, #416]	@ (8004e2c <DMA_SetConfig+0x258>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a67      	ldr	r2, [pc, #412]	@ (8004e30 <DMA_SetConfig+0x25c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a65      	ldr	r2, [pc, #404]	@ (8004e34 <DMA_SetConfig+0x260>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a64      	ldr	r2, [pc, #400]	@ (8004e38 <DMA_SetConfig+0x264>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a62      	ldr	r2, [pc, #392]	@ (8004e3c <DMA_SetConfig+0x268>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a61      	ldr	r2, [pc, #388]	@ (8004e40 <DMA_SetConfig+0x26c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8004e44 <DMA_SetConfig+0x270>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5e      	ldr	r2, [pc, #376]	@ (8004e48 <DMA_SetConfig+0x274>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <DMA_SetConfig+0x10a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e4c <DMA_SetConfig+0x278>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <DMA_SetConfig+0x10e>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <DMA_SetConfig+0x110>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cf0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a39      	ldr	r2, [pc, #228]	@ (8004df0 <DMA_SetConfig+0x21c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a38      	ldr	r2, [pc, #224]	@ (8004df4 <DMA_SetConfig+0x220>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a36      	ldr	r2, [pc, #216]	@ (8004df8 <DMA_SetConfig+0x224>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a35      	ldr	r2, [pc, #212]	@ (8004dfc <DMA_SetConfig+0x228>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a33      	ldr	r2, [pc, #204]	@ (8004e00 <DMA_SetConfig+0x22c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a32      	ldr	r2, [pc, #200]	@ (8004e04 <DMA_SetConfig+0x230>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a30      	ldr	r2, [pc, #192]	@ (8004e08 <DMA_SetConfig+0x234>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e0c <DMA_SetConfig+0x238>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	@ (8004e10 <DMA_SetConfig+0x23c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2c      	ldr	r2, [pc, #176]	@ (8004e14 <DMA_SetConfig+0x240>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e18 <DMA_SetConfig+0x244>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a29      	ldr	r2, [pc, #164]	@ (8004e1c <DMA_SetConfig+0x248>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <DMA_SetConfig+0x24c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <DMA_SetConfig+0x250>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <DMA_SetConfig+0x254>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <DMA_SetConfig+0x1d0>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a23      	ldr	r2, [pc, #140]	@ (8004e2c <DMA_SetConfig+0x258>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <DMA_SetConfig+0x1d4>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <DMA_SetConfig+0x1d6>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d059      	beq.n	8004e62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	223f      	movs	r2, #63	@ 0x3f
 8004db8:	409a      	lsls	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b40      	cmp	r3, #64	@ 0x40
 8004ddc:	d138      	bne.n	8004e50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dee:	e0ae      	b.n	8004f4e <DMA_SetConfig+0x37a>
 8004df0:	40020010 	.word	0x40020010
 8004df4:	40020028 	.word	0x40020028
 8004df8:	40020040 	.word	0x40020040
 8004dfc:	40020058 	.word	0x40020058
 8004e00:	40020070 	.word	0x40020070
 8004e04:	40020088 	.word	0x40020088
 8004e08:	400200a0 	.word	0x400200a0
 8004e0c:	400200b8 	.word	0x400200b8
 8004e10:	40020410 	.word	0x40020410
 8004e14:	40020428 	.word	0x40020428
 8004e18:	40020440 	.word	0x40020440
 8004e1c:	40020458 	.word	0x40020458
 8004e20:	40020470 	.word	0x40020470
 8004e24:	40020488 	.word	0x40020488
 8004e28:	400204a0 	.word	0x400204a0
 8004e2c:	400204b8 	.word	0x400204b8
 8004e30:	58025408 	.word	0x58025408
 8004e34:	5802541c 	.word	0x5802541c
 8004e38:	58025430 	.word	0x58025430
 8004e3c:	58025444 	.word	0x58025444
 8004e40:	58025458 	.word	0x58025458
 8004e44:	5802546c 	.word	0x5802546c
 8004e48:	58025480 	.word	0x58025480
 8004e4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
}
 8004e60:	e075      	b.n	8004f4e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	@ (8004f5c <DMA_SetConfig+0x388>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04a      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3b      	ldr	r2, [pc, #236]	@ (8004f60 <DMA_SetConfig+0x38c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d045      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f64 <DMA_SetConfig+0x390>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d040      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a38      	ldr	r2, [pc, #224]	@ (8004f68 <DMA_SetConfig+0x394>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d03b      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a37      	ldr	r2, [pc, #220]	@ (8004f6c <DMA_SetConfig+0x398>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d036      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a35      	ldr	r2, [pc, #212]	@ (8004f70 <DMA_SetConfig+0x39c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a34      	ldr	r2, [pc, #208]	@ (8004f74 <DMA_SetConfig+0x3a0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d02c      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a32      	ldr	r2, [pc, #200]	@ (8004f78 <DMA_SetConfig+0x3a4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a31      	ldr	r2, [pc, #196]	@ (8004f7c <DMA_SetConfig+0x3a8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8004f80 <DMA_SetConfig+0x3ac>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2e      	ldr	r2, [pc, #184]	@ (8004f84 <DMA_SetConfig+0x3b0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f88 <DMA_SetConfig+0x3b4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2b      	ldr	r2, [pc, #172]	@ (8004f8c <DMA_SetConfig+0x3b8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	@ (8004f90 <DMA_SetConfig+0x3bc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a28      	ldr	r2, [pc, #160]	@ (8004f94 <DMA_SetConfig+0x3c0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <DMA_SetConfig+0x32e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <DMA_SetConfig+0x3c4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <DMA_SetConfig+0x332>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <DMA_SetConfig+0x334>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d108      	bne.n	8004f3e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	60da      	str	r2, [r3, #12]
}
 8004f3c:	e007      	b.n	8004f4e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	48022c08 	.word	0x48022c08
 8004f60:	48022c1c 	.word	0x48022c1c
 8004f64:	48022c30 	.word	0x48022c30
 8004f68:	48022c44 	.word	0x48022c44
 8004f6c:	48022c58 	.word	0x48022c58
 8004f70:	48022c6c 	.word	0x48022c6c
 8004f74:	48022c80 	.word	0x48022c80
 8004f78:	48022c94 	.word	0x48022c94
 8004f7c:	58025408 	.word	0x58025408
 8004f80:	5802541c 	.word	0x5802541c
 8004f84:	58025430 	.word	0x58025430
 8004f88:	58025444 	.word	0x58025444
 8004f8c:	58025458 	.word	0x58025458
 8004f90:	5802546c 	.word	0x5802546c
 8004f94:	58025480 	.word	0x58025480
 8004f98:	58025494 	.word	0x58025494

08004f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	@ (80050b4 <DMA_CalcBaseAndBitshift+0x118>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d04a      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a41      	ldr	r2, [pc, #260]	@ (80050b8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d045      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80050bc <DMA_CalcBaseAndBitshift+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d040      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80050c0 <DMA_CalcBaseAndBitshift+0x124>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d03b      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80050c4 <DMA_CalcBaseAndBitshift+0x128>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d036      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3b      	ldr	r2, [pc, #236]	@ (80050c8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d031      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a39      	ldr	r2, [pc, #228]	@ (80050cc <DMA_CalcBaseAndBitshift+0x130>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d02c      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a38      	ldr	r2, [pc, #224]	@ (80050d0 <DMA_CalcBaseAndBitshift+0x134>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d027      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a36      	ldr	r2, [pc, #216]	@ (80050d4 <DMA_CalcBaseAndBitshift+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a33      	ldr	r2, [pc, #204]	@ (80050dc <DMA_CalcBaseAndBitshift+0x140>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a32      	ldr	r2, [pc, #200]	@ (80050e0 <DMA_CalcBaseAndBitshift+0x144>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a30      	ldr	r2, [pc, #192]	@ (80050e4 <DMA_CalcBaseAndBitshift+0x148>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2f      	ldr	r2, [pc, #188]	@ (80050e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <DMA_CalcBaseAndBitshift+0x150>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xa8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <DMA_CalcBaseAndBitshift+0x154>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <DMA_CalcBaseAndBitshift+0xac>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <DMA_CalcBaseAndBitshift+0xae>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d024      	beq.n	8005098 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3b10      	subs	r3, #16
 8005056:	4a27      	ldr	r2, [pc, #156]	@ (80050f4 <DMA_CalcBaseAndBitshift+0x158>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	4a24      	ldr	r2, [pc, #144]	@ (80050f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d908      	bls.n	8005088 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	4b1f      	ldr	r3, [pc, #124]	@ (80050fc <DMA_CalcBaseAndBitshift+0x160>)
 800507e:	4013      	ands	r3, r2
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	659a      	str	r2, [r3, #88]	@ 0x58
 8005086:	e00d      	b.n	80050a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <DMA_CalcBaseAndBitshift+0x160>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6593      	str	r3, [r2, #88]	@ 0x58
 8005096:	e005      	b.n	80050a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40020010 	.word	0x40020010
 80050b8:	40020028 	.word	0x40020028
 80050bc:	40020040 	.word	0x40020040
 80050c0:	40020058 	.word	0x40020058
 80050c4:	40020070 	.word	0x40020070
 80050c8:	40020088 	.word	0x40020088
 80050cc:	400200a0 	.word	0x400200a0
 80050d0:	400200b8 	.word	0x400200b8
 80050d4:	40020410 	.word	0x40020410
 80050d8:	40020428 	.word	0x40020428
 80050dc:	40020440 	.word	0x40020440
 80050e0:	40020458 	.word	0x40020458
 80050e4:	40020470 	.word	0x40020470
 80050e8:	40020488 	.word	0x40020488
 80050ec:	400204a0 	.word	0x400204a0
 80050f0:	400204b8 	.word	0x400204b8
 80050f4:	aaaaaaab 	.word	0xaaaaaaab
 80050f8:	0800af98 	.word	0x0800af98
 80050fc:	fffffc00 	.word	0xfffffc00

08005100 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d120      	bne.n	8005156 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	2b03      	cmp	r3, #3
 800511a:	d858      	bhi.n	80051ce <DMA_CheckFifoParam+0xce>
 800511c:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <DMA_CheckFifoParam+0x24>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005135 	.word	0x08005135
 8005128:	08005147 	.word	0x08005147
 800512c:	08005135 	.word	0x08005135
 8005130:	080051cf 	.word	0x080051cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d048      	beq.n	80051d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005144:	e045      	b.n	80051d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800514e:	d142      	bne.n	80051d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005154:	e03f      	b.n	80051d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515e:	d123      	bne.n	80051a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2b03      	cmp	r3, #3
 8005166:	d838      	bhi.n	80051da <DMA_CheckFifoParam+0xda>
 8005168:	a201      	add	r2, pc, #4	@ (adr r2, 8005170 <DMA_CheckFifoParam+0x70>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	08005181 	.word	0x08005181
 8005174:	08005187 	.word	0x08005187
 8005178:	08005181 	.word	0x08005181
 800517c:	08005199 	.word	0x08005199
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
        break;
 8005184:	e030      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d025      	beq.n	80051de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005196:	e022      	b.n	80051de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051a0:	d11f      	bne.n	80051e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051a6:	e01c      	b.n	80051e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d902      	bls.n	80051b6 <DMA_CheckFifoParam+0xb6>
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d003      	beq.n	80051bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051b4:	e018      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ba:	e015      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
    break;
 80051cc:	e00b      	b.n	80051e6 <DMA_CheckFifoParam+0xe6>
        break;
 80051ce:	bf00      	nop
 80051d0:	e00a      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        break;
 80051d2:	bf00      	nop
 80051d4:	e008      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        break;
 80051d6:	bf00      	nop
 80051d8:	e006      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        break;
 80051da:	bf00      	nop
 80051dc:	e004      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        break;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
        break;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <DMA_CheckFifoParam+0xe8>
    break;
 80051e6:	bf00      	nop
    }
  }

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a38      	ldr	r2, [pc, #224]	@ (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a36      	ldr	r2, [pc, #216]	@ (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a33      	ldr	r2, [pc, #204]	@ (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2f      	ldr	r2, [pc, #188]	@ (8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01a      	beq.n	8005296 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	3b08      	subs	r3, #8
 8005268:	4a28      	ldr	r2, [pc, #160]	@ (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a24      	ldr	r2, [pc, #144]	@ (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005284:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2201      	movs	r2, #1
 800528e:	409a      	lsls	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005294:	e024      	b.n	80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	3b10      	subs	r3, #16
 800529e:	4a1e      	ldr	r2, [pc, #120]	@ (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a1c      	ldr	r2, [pc, #112]	@ (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d806      	bhi.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d902      	bls.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3308      	adds	r3, #8
 80052bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4b18      	ldr	r3, [pc, #96]	@ (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494
 800530c:	cccccccd 	.word	0xcccccccd
 8005310:	16009600 	.word	0x16009600
 8005314:	58025880 	.word	0x58025880
 8005318:	aaaaaaab 	.word	0xaaaaaaab
 800531c:	400204b8 	.word	0x400204b8
 8005320:	4002040f 	.word	0x4002040f
 8005324:	10008200 	.word	0x10008200
 8005328:	40020880 	.word	0x40020880

0800532c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04a      	beq.n	80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d847      	bhi.n	80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a25      	ldr	r2, [pc, #148]	@ (80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a24      	ldr	r2, [pc, #144]	@ (80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d01d      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	@ (80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a21      	ldr	r2, [pc, #132]	@ (80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1f      	ldr	r2, [pc, #124]	@ (80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1e      	ldr	r2, [pc, #120]	@ (80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1c      	ldr	r2, [pc, #112]	@ (80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1b      	ldr	r2, [pc, #108]	@ (8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a15      	ldr	r2, [pc, #84]	@ (8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80053b6:	e009      	b.n	80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4b14      	ldr	r3, [pc, #80]	@ (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053ca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	58025408 	.word	0x58025408
 80053e8:	5802541c 	.word	0x5802541c
 80053ec:	58025430 	.word	0x58025430
 80053f0:	58025444 	.word	0x58025444
 80053f4:	58025458 	.word	0x58025458
 80053f8:	5802546c 	.word	0x5802546c
 80053fc:	58025480 	.word	0x58025480
 8005400:	58025494 	.word	0x58025494
 8005404:	1600963f 	.word	0x1600963f
 8005408:	58025940 	.word	0x58025940
 800540c:	1000823f 	.word	0x1000823f
 8005410:	40020940 	.word	0x40020940

08005414 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b098      	sub	sp, #96	@ 0x60
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800541c:	4a84      	ldr	r2, [pc, #528]	@ (8005630 <HAL_FDCAN_Init+0x21c>)
 800541e:	f107 030c 	add.w	r3, r7, #12
 8005422:	4611      	mov	r1, r2
 8005424:	224c      	movs	r2, #76	@ 0x4c
 8005426:	4618      	mov	r0, r3
 8005428:	f005 fd6e 	bl	800af08 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e1c6      	b.n	80057c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7e      	ldr	r2, [pc, #504]	@ (8005634 <HAL_FDCAN_Init+0x220>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d106      	bne.n	800544e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005448:	461a      	mov	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb ff6c 	bl	8001340 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0210 	bic.w	r2, r2, #16
 8005476:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005478:	f7fc fba2 	bl	8001bc0 <HAL_GetTick>
 800547c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800547e:	e014      	b.n	80054aa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005480:	f7fc fb9e 	bl	8001bc0 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b0a      	cmp	r3, #10
 800548c:	d90d      	bls.n	80054aa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e18c      	b.n	80057c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d0e3      	beq.n	8005480 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054c8:	f7fc fb7a 	bl	8001bc0 <HAL_GetTick>
 80054cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054ce:	e014      	b.n	80054fa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054d0:	f7fc fb76 	bl	8001bc0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b0a      	cmp	r3, #10
 80054dc:	d90d      	bls.n	80054fa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e164      	b.n	80057c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0e3      	beq.n	80054d0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0202 	orr.w	r2, r2, #2
 8005516:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	7c1b      	ldrb	r3, [r3, #16]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d108      	bne.n	8005532 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552e:	619a      	str	r2, [r3, #24]
 8005530:	e007      	b.n	8005542 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005540:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7c5b      	ldrb	r3, [r3, #17]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d108      	bne.n	800555c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	e007      	b.n	800556c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800556a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7c9b      	ldrb	r3, [r3, #18]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d108      	bne.n	8005586 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	e007      	b.n	8005596 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005594:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80055ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0210 	bic.w	r2, r2, #16
 80055ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d108      	bne.n	80055e6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0204 	orr.w	r2, r2, #4
 80055e2:	619a      	str	r2, [r3, #24]
 80055e4:	e030      	b.n	8005648 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02c      	beq.n	8005648 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d020      	beq.n	8005638 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005604:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0210 	orr.w	r2, r2, #16
 8005614:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b03      	cmp	r3, #3
 800561c:	d114      	bne.n	8005648 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0220 	orr.w	r2, r2, #32
 800562c:	619a      	str	r2, [r3, #24]
 800562e:	e00b      	b.n	8005648 <HAL_FDCAN_Init+0x234>
 8005630:	0800af3c 	.word	0x0800af3c
 8005634:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0220 	orr.w	r2, r2, #32
 8005646:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	3b01      	subs	r3, #1
 800564e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	3b01      	subs	r3, #1
 8005656:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005658:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005660:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	3b01      	subs	r3, #1
 800566a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005670:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005672:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567c:	d115      	bne.n	80056aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	3b01      	subs	r3, #1
 800568a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800568c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	3b01      	subs	r3, #1
 8005694:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005696:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	3b01      	subs	r3, #1
 80056a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80056a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80056a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d0:	4413      	add	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80056de:	f023 0107 	bic.w	r1, r3, #7
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	3360      	adds	r3, #96	@ 0x60
 80056ea:	443b      	add	r3, r7
 80056ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d011      	beq.n	8005726 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800570a:	f023 0107 	bic.w	r1, r3, #7
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	3360      	adds	r3, #96	@ 0x60
 8005716:	443b      	add	r3, r7
 8005718:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800572a:	2b00      	cmp	r3, #0
 800572c:	d012      	beq.n	8005754 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005736:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	3360      	adds	r3, #96	@ 0x60
 8005742:	443b      	add	r3, r7
 8005744:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005764:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3360      	adds	r3, #96	@ 0x60
 8005770:	443b      	add	r3, r7
 8005772:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <HAL_FDCAN_Init+0x3b8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d107      	bne.n	800579c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f022 0203 	bic.w	r2, r2, #3
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fd81 	bl	80062bc <FDCAN_CalcultateRamBlockAddresses>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80057c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3760      	adds	r7, #96	@ 0x60
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	4000a000 	.word	0x4000a000

080057d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d111      	bne.n	8005808 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e008      	b.n	800581a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580e:	f043 0204 	orr.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005846:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e038      	b.n	80058d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800586a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005878:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e026      	b.n	80058d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fe93 	bl	80065c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2101      	movs	r1, #1
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	fa01 f202 	lsl.w	r2, r1, r2
 80058ae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80058b2:	2201      	movs	r2, #1
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	409a      	lsls	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e008      	b.n	80058d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058c8:	f043 0208 	orr.w	r2, r3, #8
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
  }
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80058dc:	b480      	push	{r7}
 80058de:	b08b      	sub	sp, #44	@ 0x2c
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80058f4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80058f6:	7efb      	ldrb	r3, [r7, #27]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	f040 8149 	bne.w	8005b90 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d14c      	bne.n	800599e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800590c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e13c      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800593e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e12a      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005954:	0e1b      	lsrs	r3, r3, #24
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10a      	bne.n	8005974 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005966:	0fdb      	lsrs	r3, r3, #31
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005970:	2301      	movs	r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005990:	69f9      	ldr	r1, [r7, #28]
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	e068      	b.n	8005a70 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b41      	cmp	r3, #65	@ 0x41
 80059a2:	d14c      	bne.n	8005a3e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0ec      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0da      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059f4:	0e1b      	lsrs	r3, r3, #24
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10a      	bne.n	8005a14 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a06:	0fdb      	lsrs	r3, r3, #31
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a10:	2301      	movs	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3c:	e018      	b.n	8005a70 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d309      	bcc.n	8005a5c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0a2      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	0c9b      	lsrs	r3, r3, #18
 8005a8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e005      	b.n	8005aa0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	3304      	adds	r3, #4
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	0e1b      	lsrs	r3, r3, #24
 8005af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0fda      	lsrs	r2, r3, #31
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	3304      	adds	r3, #4
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	e00a      	b.n	8005b2c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	441a      	add	r2, r3
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	440b      	add	r3, r1
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d3ec      	bcc.n	8005b16 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d105      	bne.n	8005b4e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005b4c:	e01e      	b.n	8005b8c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b41      	cmp	r3, #65	@ 0x41
 8005b52:	d105      	bne.n	8005b60 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005b5e:	e015      	b.n	8005b8c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b1f      	cmp	r3, #31
 8005b64:	d808      	bhi.n	8005b78 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005b76:	e009      	b.n	8005b8c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2101      	movs	r1, #1
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e008      	b.n	8005ba2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b96:	f043 0208 	orr.w	r2, r3, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	372c      	adds	r7, #44	@ 0x2c
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	0800afa0 	.word	0x0800afa0

08005bb4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005bea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d002      	beq.n	8005bf8 <HAL_FDCAN_ActivateNotification+0x20>
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d155      	bne.n	8005ca4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c16:	e014      	b.n	8005c42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4013      	ands	r3, r2
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d108      	bne.n	8005c3a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0202 	orr.w	r2, r2, #2
 8005c36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c38:	e003      	b.n	8005c42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc4 <HAL_FDCAN_ActivateNotification+0xec>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	0f9b      	lsrs	r3, r3, #30
 8005c9a:	490b      	ldr	r1, [pc, #44]	@ (8005cc8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e008      	b.n	8005cb6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005caa:	f043 0202 	orr.w	r2, r3, #2
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	3fcfffff 	.word	0x3fcfffff
 8005cc8:	4000a800 	.word	0x4000a800

08005ccc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b096      	sub	sp, #88	@ 0x58
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005cd4:	4b95      	ldr	r3, [pc, #596]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	079b      	lsls	r3, r3, #30
 8005cda:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005cdc:	4b93      	ldr	r3, [pc, #588]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	079b      	lsls	r3, r3, #30
 8005ce2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005cf2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d14:	4013      	ands	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d36:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d44:	4013      	ands	r3, r2
 8005d46:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005d52:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d8e:	4b67      	ldr	r3, [pc, #412]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fa44 	bl	8006222 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01c      	beq.n	8005dde <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dce:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dd0:	4b56      	ldr	r3, [pc, #344]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005dd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f9f9 	bl	80061d0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dea:	4b51      	ldr	r3, [pc, #324]	@ (8005f30 <HAL_FDCAN_IRQHandler+0x264>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df0:	4a4e      	ldr	r2, [pc, #312]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df4:	0f9b      	lsrs	r3, r3, #30
 8005df6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9b2 	bl	8006164 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e0c:	4b48      	ldr	r3, [pc, #288]	@ (8005f30 <HAL_FDCAN_IRQHandler+0x264>)
 8005e0e:	400b      	ands	r3, r1
 8005e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e12:	4a46      	ldr	r2, [pc, #280]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e16:	0f9b      	lsrs	r3, r3, #30
 8005e18:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005e1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f9ac 	bl	800617a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005e2e:	4b40      	ldr	r3, [pc, #256]	@ (8005f30 <HAL_FDCAN_IRQHandler+0x264>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e34:	4a3d      	ldr	r2, [pc, #244]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e38:	0f9b      	lsrs	r3, r3, #30
 8005e3a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005e3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fa fb5c 	bl	80004fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e50:	4b37      	ldr	r3, [pc, #220]	@ (8005f30 <HAL_FDCAN_IRQHandler+0x264>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e56:	4a35      	ldr	r2, [pc, #212]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e5a:	0f9b      	lsrs	r3, r3, #30
 8005e5c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005e5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f995 	bl	8006190 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00f      	beq.n	8005e90 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e82:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e84:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f98b 	bl	80061a6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01c      	beq.n	8005ed4 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005eac:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	4013      	ands	r3, r2
 8005eba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ec6:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005ecc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f973 	bl	80061ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00f      	beq.n	8005efe <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005ef0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f974 	bl	80061e6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f1c:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <HAL_FDCAN_IRQHandler+0x260>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f969 	bl	80061fa <HAL_FDCAN_TimestampWraparoundCallback>
 8005f28:	e004      	b.n	8005f34 <HAL_FDCAN_IRQHandler+0x268>
 8005f2a:	bf00      	nop
 8005f2c:	4000a800 	.word	0x4000a800
 8005f30:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00f      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005f50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f52:	4b81      	ldr	r3, [pc, #516]	@ (8006158 <HAL_FDCAN_IRQHandler+0x48c>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f958 	bl	800620e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d014      	beq.n	8005f92 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00f      	beq.n	8005f92 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f7c:	4b76      	ldr	r3, [pc, #472]	@ (8006158 <HAL_FDCAN_IRQHandler+0x48c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9e:	4b6f      	ldr	r3, [pc, #444]	@ (800615c <HAL_FDCAN_IRQHandler+0x490>)
 8005fa0:	400b      	ands	r3, r1
 8005fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8006158 <HAL_FDCAN_IRQHandler+0x48c>)
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa8:	0f9b      	lsrs	r3, r3, #30
 8005faa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f94b 	bl	800624a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fc0:	4b66      	ldr	r3, [pc, #408]	@ (800615c <HAL_FDCAN_IRQHandler+0x490>)
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc6:	4a64      	ldr	r2, [pc, #400]	@ (8006158 <HAL_FDCAN_IRQHandler+0x48c>)
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fca:	0f9b      	lsrs	r3, r3, #30
 8005fcc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8006160 <HAL_FDCAN_IRQHandler+0x494>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	f040 80aa 	bne.w	800613e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a2 	beq.w	800613e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800600e:	4013      	ands	r3, r2
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800601c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006026:	4013      	ands	r3, r2
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800603e:	4013      	ands	r3, r2
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800604c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	4013      	ands	r3, r2
 8006058:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8006064:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	4013      	ands	r3, r2
 8006070:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800608e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006090:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8e4 	bl	8006260 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80060a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8e4 	bl	8006276 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2240      	movs	r2, #64	@ 0x40
 80060e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	6939      	ldr	r1, [r7, #16]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8d0 	bl	800628c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80060fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8d1 	bl	80062a4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f874 	bl	8006236 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800614e:	bf00      	nop
 8006150:	3758      	adds	r7, #88	@ 0x58
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	4000a800 	.word	0x4000a800
 800615c:	3fcfffff 	.word	0x3fcfffff
 8006160:	4000a000 	.word	0x4000a000

08006164 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80062d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	0091      	lsls	r1, r2, #2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ec:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	041a      	lsls	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006312:	4b97      	ldr	r3, [pc, #604]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006314:	4013      	ands	r3, r2
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0091      	lsls	r1, r2, #2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	430b      	orrs	r3, r1
 8006320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	041a      	lsls	r2, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	4413      	add	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006354:	4b86      	ldr	r3, [pc, #536]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006356:	4013      	ands	r3, r2
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	0091      	lsls	r1, r2, #2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800636e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	041a      	lsls	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4413      	add	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800639c:	4b74      	ldr	r3, [pc, #464]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800639e:	4013      	ands	r3, r2
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	0091      	lsls	r1, r2, #2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063b6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063be:	041a      	lsls	r2, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	4413      	add	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80063e4:	4b62      	ldr	r3, [pc, #392]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	0091      	lsls	r1, r2, #2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006412:	4013      	ands	r3, r2
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0091      	lsls	r1, r2, #2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	430b      	orrs	r3, r1
 800641e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800642a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006432:	041a      	lsls	r2, r3, #16
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4413      	add	r3, r2
 8006448:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006452:	4b47      	ldr	r3, [pc, #284]	@ (8006570 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006454:	4013      	ands	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0091      	lsls	r1, r2, #2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	430b      	orrs	r3, r1
 8006460:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800646c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006474:	041a      	lsls	r2, r3, #16
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006488:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006490:	061a      	lsls	r2, r3, #24
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064a0:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80064a2:	4413      	add	r3, r2
 80064a4:	009a      	lsls	r2, r3, #2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80064dc:	441a      	add	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	441a      	add	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006558:	441a      	add	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006566:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d915      	bls.n	8006598 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800656c:	e006      	b.n	800657c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800656e:	bf00      	nop
 8006570:	ffff0003 	.word	0xffff0003
 8006574:	10002b00 	.word	0x10002b00
 8006578:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2203      	movs	r2, #3
 8006590:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e010      	b.n	80065ba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e005      	b.n	80065ac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3f3      	bcc.n	80065a0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop

080065c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	@ 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80065e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e00a      	b.n	800660a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80065fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006602:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006604:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006608:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006614:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800661a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006620:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	3304      	adds	r3, #4
 800664c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	3304      	adds	r3, #4
 8006658:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e020      	b.n	80066a2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3303      	adds	r3, #3
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	3302      	adds	r3, #2
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	440b      	add	r3, r1
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006678:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	3301      	adds	r3, #1
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	440b      	add	r3, r1
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006686:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	440a      	add	r2, r1
 800668e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006690:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	3304      	adds	r3, #4
 800669a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3304      	adds	r3, #4
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	4a06      	ldr	r2, [pc, #24]	@ (80066c0 <FDCAN_CopyMessageToRAM+0xf8>)
 80066a8:	5cd3      	ldrb	r3, [r2, r3]
 80066aa:	461a      	mov	r2, r3
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d3d6      	bcc.n	8006660 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	3724      	adds	r7, #36	@ 0x24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	0800afa0 	.word	0x0800afa0

080066c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b089      	sub	sp, #36	@ 0x24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066d2:	4b89      	ldr	r3, [pc, #548]	@ (80068f8 <HAL_GPIO_Init+0x234>)
 80066d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066d6:	e194      	b.n	8006a02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	4013      	ands	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8186 	beq.w	80069fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d005      	beq.n	8006708 <HAL_GPIO_Init+0x44>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d130      	bne.n	800676a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	2203      	movs	r2, #3
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800673e:	2201      	movs	r2, #1
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 0201 	and.w	r2, r3, #1
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d017      	beq.n	80067a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2203      	movs	r2, #3
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4013      	ands	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4313      	orrs	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d123      	bne.n	80067fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	08da      	lsrs	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3208      	adds	r2, #8
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	220f      	movs	r2, #15
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	43db      	mvns	r3, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3208      	adds	r2, #8
 80067f4:	69b9      	ldr	r1, [r7, #24]
 80067f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	2203      	movs	r2, #3
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4013      	ands	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0203 	and.w	r2, r3, #3
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	4313      	orrs	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80e0 	beq.w	80069fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683c:	4b2f      	ldr	r3, [pc, #188]	@ (80068fc <HAL_GPIO_Init+0x238>)
 800683e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006842:	4a2e      	ldr	r2, [pc, #184]	@ (80068fc <HAL_GPIO_Init+0x238>)
 8006844:	f043 0302 	orr.w	r3, r3, #2
 8006848:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800684c:	4b2b      	ldr	r3, [pc, #172]	@ (80068fc <HAL_GPIO_Init+0x238>)
 800684e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800685a:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <HAL_GPIO_Init+0x23c>)
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	089b      	lsrs	r3, r3, #2
 8006860:	3302      	adds	r3, #2
 8006862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	220f      	movs	r2, #15
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4013      	ands	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a20      	ldr	r2, [pc, #128]	@ (8006904 <HAL_GPIO_Init+0x240>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d052      	beq.n	800692c <HAL_GPIO_Init+0x268>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1f      	ldr	r2, [pc, #124]	@ (8006908 <HAL_GPIO_Init+0x244>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d031      	beq.n	80068f2 <HAL_GPIO_Init+0x22e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1e      	ldr	r2, [pc, #120]	@ (800690c <HAL_GPIO_Init+0x248>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02b      	beq.n	80068ee <HAL_GPIO_Init+0x22a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <HAL_GPIO_Init+0x24c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d025      	beq.n	80068ea <HAL_GPIO_Init+0x226>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006914 <HAL_GPIO_Init+0x250>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01f      	beq.n	80068e6 <HAL_GPIO_Init+0x222>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_GPIO_Init+0x254>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d019      	beq.n	80068e2 <HAL_GPIO_Init+0x21e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_GPIO_Init+0x258>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_GPIO_Init+0x21a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a19      	ldr	r2, [pc, #100]	@ (8006920 <HAL_GPIO_Init+0x25c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00d      	beq.n	80068da <HAL_GPIO_Init+0x216>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <HAL_GPIO_Init+0x260>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <HAL_GPIO_Init+0x212>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a17      	ldr	r2, [pc, #92]	@ (8006928 <HAL_GPIO_Init+0x264>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d101      	bne.n	80068d2 <HAL_GPIO_Init+0x20e>
 80068ce:	2309      	movs	r3, #9
 80068d0:	e02d      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068d2:	230a      	movs	r3, #10
 80068d4:	e02b      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068d6:	2308      	movs	r3, #8
 80068d8:	e029      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068da:	2307      	movs	r3, #7
 80068dc:	e027      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068de:	2306      	movs	r3, #6
 80068e0:	e025      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068e2:	2305      	movs	r3, #5
 80068e4:	e023      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068e6:	2304      	movs	r3, #4
 80068e8:	e021      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068ea:	2303      	movs	r3, #3
 80068ec:	e01f      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e01d      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e01b      	b.n	800692e <HAL_GPIO_Init+0x26a>
 80068f6:	bf00      	nop
 80068f8:	58000080 	.word	0x58000080
 80068fc:	58024400 	.word	0x58024400
 8006900:	58000400 	.word	0x58000400
 8006904:	58020000 	.word	0x58020000
 8006908:	58020400 	.word	0x58020400
 800690c:	58020800 	.word	0x58020800
 8006910:	58020c00 	.word	0x58020c00
 8006914:	58021000 	.word	0x58021000
 8006918:	58021400 	.word	0x58021400
 800691c:	58021800 	.word	0x58021800
 8006920:	58021c00 	.word	0x58021c00
 8006924:	58022000 	.word	0x58022000
 8006928:	58022400 	.word	0x58022400
 800692c:	2300      	movs	r3, #0
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	f002 0203 	and.w	r2, r2, #3
 8006934:	0092      	lsls	r2, r2, #2
 8006936:	4093      	lsls	r3, r2
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800693e:	4938      	ldr	r1, [pc, #224]	@ (8006a20 <HAL_GPIO_Init+0x35c>)
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	3302      	adds	r3, #2
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800694c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800697a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80069a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4013      	ands	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3301      	adds	r3, #1
 8006a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f ae63 	bne.w	80066d8 <HAL_GPIO_Init+0x14>
  }
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3724      	adds	r7, #36	@ 0x24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	58000400 	.word	0x58000400

08006a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	807b      	strh	r3, [r7, #2]
 8006a30:	4613      	mov	r3, r2
 8006a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a34:	787b      	ldrb	r3, [r7, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a40:	e003      	b.n	8006a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a42:	887b      	ldrh	r3, [r7, #2]
 8006a44:	041a      	lsls	r2, r3, #16
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	619a      	str	r2, [r3, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a68:	887a      	ldrh	r2, [r7, #2]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	041a      	lsls	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	43d9      	mvns	r1, r3
 8006a74:	887b      	ldrh	r3, [r7, #2]
 8006a76:	400b      	ands	r3, r1
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	619a      	str	r2, [r3, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e08b      	b.n	8006bb6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fd1a 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	@ 0x24
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006adc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006aec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d107      	bne.n	8006b06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	e006      	b.n	8006b14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d108      	bne.n	8006b2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	e007      	b.n	8006b3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6859      	ldr	r1, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <HAL_I2C_Init+0x134>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69d9      	ldr	r1, [r3, #28]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	02008000 	.word	0x02008000

08006bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d138      	bne.n	8006c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e032      	b.n	8006c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2224      	movs	r2, #36	@ 0x24
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6819      	ldr	r1, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d139      	bne.n	8006ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e033      	b.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2224      	movs	r2, #36	@ 0x24
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cfc:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <HAL_PWREx_ConfigSupply+0x70>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d00a      	beq.n	8006d1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d08:	4b16      	ldr	r3, [pc, #88]	@ (8006d64 <HAL_PWREx_ConfigSupply+0x70>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d001      	beq.n	8006d1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e01f      	b.n	8006d5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e01d      	b.n	8006d5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d1e:	4b11      	ldr	r3, [pc, #68]	@ (8006d64 <HAL_PWREx_ConfigSupply+0x70>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f023 0207 	bic.w	r2, r3, #7
 8006d26:	490f      	ldr	r1, [pc, #60]	@ (8006d64 <HAL_PWREx_ConfigSupply+0x70>)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d2e:	f7fa ff47 	bl	8001bc0 <HAL_GetTick>
 8006d32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d34:	e009      	b.n	8006d4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d36:	f7fa ff43 	bl	8001bc0 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d44:	d901      	bls.n	8006d4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e007      	b.n	8006d5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <HAL_PWREx_ConfigSupply+0x70>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d56:	d1ee      	bne.n	8006d36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	58024800 	.word	0x58024800

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08c      	sub	sp, #48	@ 0x30
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f000 bc1f 	b.w	80075ba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80b3 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d8a:	4b95      	ldr	r3, [pc, #596]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d94:	4b92      	ldr	r3, [pc, #584]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d007      	beq.n	8006db0 <HAL_RCC_OscConfig+0x48>
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	2b18      	cmp	r3, #24
 8006da4:	d112      	bne.n	8006dcc <HAL_RCC_OscConfig+0x64>
 8006da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d10d      	bne.n	8006dcc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db0:	4b8b      	ldr	r3, [pc, #556]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8098 	beq.w	8006eee <HAL_RCC_OscConfig+0x186>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 8093 	bne.w	8006eee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e3f6      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d106      	bne.n	8006de4 <HAL_RCC_OscConfig+0x7c>
 8006dd6:	4b82      	ldr	r3, [pc, #520]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a81      	ldr	r2, [pc, #516]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e058      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d112      	bne.n	8006e12 <HAL_RCC_OscConfig+0xaa>
 8006dec:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a7b      	ldr	r2, [pc, #492]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	4b79      	ldr	r3, [pc, #484]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a78      	ldr	r2, [pc, #480]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006dfe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	4b76      	ldr	r3, [pc, #472]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a75      	ldr	r2, [pc, #468]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e041      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e1a:	d112      	bne.n	8006e42 <HAL_RCC_OscConfig+0xda>
 8006e1c:	4b70      	ldr	r3, [pc, #448]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a6f      	ldr	r2, [pc, #444]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a6c      	ldr	r2, [pc, #432]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a69      	ldr	r2, [pc, #420]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e029      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006e4a:	d112      	bne.n	8006e72 <HAL_RCC_OscConfig+0x10a>
 8006e4c:	4b64      	ldr	r3, [pc, #400]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a63      	ldr	r2, [pc, #396]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	4b61      	ldr	r3, [pc, #388]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a60      	ldr	r2, [pc, #384]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5d      	ldr	r2, [pc, #372]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e011      	b.n	8006e96 <HAL_RCC_OscConfig+0x12e>
 8006e72:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a5a      	ldr	r2, [pc, #360]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	4b58      	ldr	r3, [pc, #352]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a57      	ldr	r2, [pc, #348]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b55      	ldr	r3, [pc, #340]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a54      	ldr	r2, [pc, #336]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006e90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d013      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fa fe8f 	bl	8001bc0 <HAL_GetTick>
 8006ea2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea6:	f7fa fe8b 	bl	8001bc0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b64      	cmp	r3, #100	@ 0x64
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e380      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eb8:	4b49      	ldr	r3, [pc, #292]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x13e>
 8006ec4:	e014      	b.n	8006ef0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec6:	f7fa fe7b 	bl	8001bc0 <HAL_GetTick>
 8006eca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ece:	f7fa fe77 	bl	8001bc0 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b64      	cmp	r3, #100	@ 0x64
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e36c      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x166>
 8006eec:	e000      	b.n	8006ef0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 808c 	beq.w	8007016 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efe:	4b38      	ldr	r3, [pc, #224]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f06:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <HAL_RCC_OscConfig+0x1bc>
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	2b18      	cmp	r3, #24
 8006f18:	d137      	bne.n	8006f8a <HAL_RCC_OscConfig+0x222>
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d132      	bne.n	8006f8a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f24:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_RCC_OscConfig+0x1d4>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e33e      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f3c:	4b28      	ldr	r3, [pc, #160]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f023 0219 	bic.w	r2, r3, #25
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4925      	ldr	r1, [pc, #148]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fa fe37 	bl	8001bc0 <HAL_GetTick>
 8006f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f56:	f7fa fe33 	bl	8001bc0 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e328      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f68:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f74:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	4917      	ldr	r1, [pc, #92]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f88:	e045      	b.n	8007016 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d028      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f023 0219 	bic.w	r2, r3, #25
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	4910      	ldr	r1, [pc, #64]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fa fe0c 	bl	8001bc0 <HAL_GetTick>
 8006fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fac:	f7fa fe08 	bl	8001bc0 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e2fd      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fbe:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fca:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	4901      	ldr	r1, [pc, #4]	@ (8006fe0 <HAL_RCC_OscConfig+0x278>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
 8006fde:	e01a      	b.n	8007016 <HAL_RCC_OscConfig+0x2ae>
 8006fe0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fe4:	4b97      	ldr	r3, [pc, #604]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a96      	ldr	r2, [pc, #600]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fa fde6 	bl	8001bc0 <HAL_GetTick>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff8:	f7fa fde2 	bl	8001bc0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e2d7      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800700a:	4b8e      	ldr	r3, [pc, #568]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	d06a      	beq.n	80070f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007022:	4b88      	ldr	r3, [pc, #544]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800702a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702c:	4b85      	ldr	r3, [pc, #532]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b08      	cmp	r3, #8
 8007036:	d007      	beq.n	8007048 <HAL_RCC_OscConfig+0x2e0>
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b18      	cmp	r3, #24
 800703c:	d11b      	bne.n	8007076 <HAL_RCC_OscConfig+0x30e>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d116      	bne.n	8007076 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007048:	4b7e      	ldr	r3, [pc, #504]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCC_OscConfig+0x2f8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	2b80      	cmp	r3, #128	@ 0x80
 800705a:	d001      	beq.n	8007060 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e2ac      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007060:	4b78      	ldr	r3, [pc, #480]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	061b      	lsls	r3, r3, #24
 800706e:	4975      	ldr	r1, [pc, #468]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007070:	4313      	orrs	r3, r2
 8007072:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007074:	e040      	b.n	80070f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d023      	beq.n	80070c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800707e:	4b71      	ldr	r3, [pc, #452]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a70      	ldr	r2, [pc, #448]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708a:	f7fa fd99 	bl	8001bc0 <HAL_GetTick>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007092:	f7fa fd95 	bl	8001bc0 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e28a      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a4:	4b67      	ldr	r3, [pc, #412]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070b0:	4b64      	ldr	r3, [pc, #400]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	061b      	lsls	r3, r3, #24
 80070be:	4961      	ldr	r1, [pc, #388]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60cb      	str	r3, [r1, #12]
 80070c4:	e018      	b.n	80070f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7fa fd75 	bl	8001bc0 <HAL_GetTick>
 80070d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070da:	f7fa fd71 	bl	8001bc0 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e266      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070ec:	4b55      	ldr	r3, [pc, #340]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f0      	bne.n	80070da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d036      	beq.n	8007172 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d019      	beq.n	8007140 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800710c:	4b4d      	ldr	r3, [pc, #308]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800710e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007110:	4a4c      	ldr	r2, [pc, #304]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007118:	f7fa fd52 	bl	8001bc0 <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007120:	f7fa fd4e 	bl	8001bc0 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e243      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007132:	4b44      	ldr	r3, [pc, #272]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x3b8>
 800713e:	e018      	b.n	8007172 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007140:	4b40      	ldr	r3, [pc, #256]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007144:	4a3f      	ldr	r2, [pc, #252]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714c:	f7fa fd38 	bl	8001bc0 <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007154:	f7fa fd34 	bl	8001bc0 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e229      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007166:	4b37      	ldr	r3, [pc, #220]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d019      	beq.n	80071ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007186:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2e      	ldr	r2, [pc, #184]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800718c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007190:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007192:	f7fa fd15 	bl	8001bc0 <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800719a:	f7fa fd11 	bl	8001bc0 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e206      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071ac:	4b25      	ldr	r3, [pc, #148]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCC_OscConfig+0x432>
 80071b8:	e018      	b.n	80071ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071ba:	4b22      	ldr	r3, [pc, #136]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a21      	ldr	r2, [pc, #132]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80071c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071c6:	f7fa fcfb 	bl	8001bc0 <HAL_GetTick>
 80071ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ce:	f7fa fcf7 	bl	8001bc0 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e1ec      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071e0:	4b18      	ldr	r3, [pc, #96]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f0      	bne.n	80071ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80af 	beq.w	8007358 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071fa:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_RCC_OscConfig+0x4e0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a12      	ldr	r2, [pc, #72]	@ (8007248 <HAL_RCC_OscConfig+0x4e0>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007206:	f7fa fcdb 	bl	8001bc0 <HAL_GetTick>
 800720a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720e:	f7fa fcd7 	bl	8001bc0 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b64      	cmp	r3, #100	@ 0x64
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e1cc      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007220:	4b09      	ldr	r3, [pc, #36]	@ (8007248 <HAL_RCC_OscConfig+0x4e0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10b      	bne.n	800724c <HAL_RCC_OscConfig+0x4e4>
 8007234:	4b03      	ldr	r3, [pc, #12]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007238:	4a02      	ldr	r2, [pc, #8]	@ (8007244 <HAL_RCC_OscConfig+0x4dc>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007240:	e05b      	b.n	80072fa <HAL_RCC_OscConfig+0x592>
 8007242:	bf00      	nop
 8007244:	58024400 	.word	0x58024400
 8007248:	58024800 	.word	0x58024800
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d112      	bne.n	800727a <HAL_RCC_OscConfig+0x512>
 8007254:	4b9d      	ldr	r3, [pc, #628]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007258:	4a9c      	ldr	r2, [pc, #624]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007260:	4b9a      	ldr	r3, [pc, #616]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007264:	4a99      	ldr	r2, [pc, #612]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800726a:	6713      	str	r3, [r2, #112]	@ 0x70
 800726c:	4b97      	ldr	r3, [pc, #604]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007270:	4a96      	ldr	r2, [pc, #600]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007272:	f023 0304 	bic.w	r3, r3, #4
 8007276:	6713      	str	r3, [r2, #112]	@ 0x70
 8007278:	e03f      	b.n	80072fa <HAL_RCC_OscConfig+0x592>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b05      	cmp	r3, #5
 8007280:	d112      	bne.n	80072a8 <HAL_RCC_OscConfig+0x540>
 8007282:	4b92      	ldr	r3, [pc, #584]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	4a91      	ldr	r2, [pc, #580]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007288:	f043 0304 	orr.w	r3, r3, #4
 800728c:	6713      	str	r3, [r2, #112]	@ 0x70
 800728e:	4b8f      	ldr	r3, [pc, #572]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	4a8e      	ldr	r2, [pc, #568]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007298:	6713      	str	r3, [r2, #112]	@ 0x70
 800729a:	4b8c      	ldr	r3, [pc, #560]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729e:	4a8b      	ldr	r2, [pc, #556]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a6:	e028      	b.n	80072fa <HAL_RCC_OscConfig+0x592>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b85      	cmp	r3, #133	@ 0x85
 80072ae:	d112      	bne.n	80072d6 <HAL_RCC_OscConfig+0x56e>
 80072b0:	4b86      	ldr	r3, [pc, #536]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b4:	4a85      	ldr	r2, [pc, #532]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	4b83      	ldr	r3, [pc, #524]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c0:	4a82      	ldr	r2, [pc, #520]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c8:	4b80      	ldr	r3, [pc, #512]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	4a7f      	ldr	r2, [pc, #508]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d4:	e011      	b.n	80072fa <HAL_RCC_OscConfig+0x592>
 80072d6:	4b7d      	ldr	r3, [pc, #500]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072da:	4a7c      	ldr	r2, [pc, #496]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e2:	4b7a      	ldr	r3, [pc, #488]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e6:	4a79      	ldr	r2, [pc, #484]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072e8:	f023 0304 	bic.w	r3, r3, #4
 80072ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ee:	4b77      	ldr	r3, [pc, #476]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f2:	4a76      	ldr	r2, [pc, #472]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80072f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d015      	beq.n	800732e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007302:	f7fa fc5d 	bl	8001bc0 <HAL_GetTick>
 8007306:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007308:	e00a      	b.n	8007320 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730a:	f7fa fc59 	bl	8001bc0 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e14c      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007320:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0ee      	beq.n	800730a <HAL_RCC_OscConfig+0x5a2>
 800732c:	e014      	b.n	8007358 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732e:	f7fa fc47 	bl	8001bc0 <HAL_GetTick>
 8007332:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007334:	e00a      	b.n	800734c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fa fc43 	bl	8001bc0 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e136      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800734c:	4b5f      	ldr	r3, [pc, #380]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1ee      	bne.n	8007336 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 812b 	beq.w	80075b8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007362:	4b5a      	ldr	r3, [pc, #360]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800736a:	2b18      	cmp	r3, #24
 800736c:	f000 80bb 	beq.w	80074e6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	2b02      	cmp	r3, #2
 8007376:	f040 8095 	bne.w	80074a4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737a:	4b54      	ldr	r3, [pc, #336]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a53      	ldr	r2, [pc, #332]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007386:	f7fa fc1b 	bl	8001bc0 <HAL_GetTick>
 800738a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800738c:	e008      	b.n	80073a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738e:	f7fa fc17 	bl	8001bc0 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e10c      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073a0:	4b4a      	ldr	r3, [pc, #296]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1f0      	bne.n	800738e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ac:	4b47      	ldr	r3, [pc, #284]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80073ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073b0:	4b47      	ldr	r3, [pc, #284]	@ (80074d0 <HAL_RCC_OscConfig+0x768>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073bc:	0112      	lsls	r2, r2, #4
 80073be:	430a      	orrs	r2, r1
 80073c0:	4942      	ldr	r1, [pc, #264]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	3b01      	subs	r3, #1
 80073cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d4:	3b01      	subs	r3, #1
 80073d6:	025b      	lsls	r3, r3, #9
 80073d8:	b29b      	uxth	r3, r3
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	3b01      	subs	r3, #1
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ee:	3b01      	subs	r3, #1
 80073f0:	061b      	lsls	r3, r3, #24
 80073f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f6:	4935      	ldr	r1, [pc, #212]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073fc:	4b33      	ldr	r3, [pc, #204]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	4a32      	ldr	r2, [pc, #200]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007408:	4b30      	ldr	r3, [pc, #192]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800740a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800740c:	4b31      	ldr	r3, [pc, #196]	@ (80074d4 <HAL_RCC_OscConfig+0x76c>)
 800740e:	4013      	ands	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007414:	00d2      	lsls	r2, r2, #3
 8007416:	492d      	ldr	r1, [pc, #180]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007418:	4313      	orrs	r3, r2
 800741a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800741c:	4b2b      	ldr	r3, [pc, #172]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f023 020c 	bic.w	r2, r3, #12
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	4928      	ldr	r1, [pc, #160]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800742a:	4313      	orrs	r3, r2
 800742c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800742e:	4b27      	ldr	r3, [pc, #156]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	f023 0202 	bic.w	r2, r3, #2
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	4924      	ldr	r1, [pc, #144]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800743c:	4313      	orrs	r3, r2
 800743e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007440:	4b22      	ldr	r3, [pc, #136]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a21      	ldr	r2, [pc, #132]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744c:	4b1f      	ldr	r3, [pc, #124]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	4a1e      	ldr	r2, [pc, #120]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007458:	4b1c      	ldr	r3, [pc, #112]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	4a1b      	ldr	r2, [pc, #108]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800745e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007464:	4b19      	ldr	r3, [pc, #100]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4a18      	ldr	r2, [pc, #96]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007470:	4b16      	ldr	r3, [pc, #88]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a15      	ldr	r2, [pc, #84]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800747a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fa fba0 	bl	8001bc0 <HAL_GetTick>
 8007480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007484:	f7fa fb9c 	bl	8001bc0 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e091      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x71c>
 80074a2:	e089      	b.n	80075b8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a4:	4b09      	ldr	r3, [pc, #36]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <HAL_RCC_OscConfig+0x764>)
 80074aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b0:	f7fa fb86 	bl	8001bc0 <HAL_GetTick>
 80074b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b6:	e00f      	b.n	80074d8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b8:	f7fa fb82 	bl	8001bc0 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d908      	bls.n	80074d8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e077      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
 80074ca:	bf00      	nop
 80074cc:	58024400 	.word	0x58024400
 80074d0:	fffffc0c 	.word	0xfffffc0c
 80074d4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074d8:	4b3a      	ldr	r3, [pc, #232]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e9      	bne.n	80074b8 <HAL_RCC_OscConfig+0x750>
 80074e4:	e068      	b.n	80075b8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074e6:	4b37      	ldr	r3, [pc, #220]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80074e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074ec:	4b35      	ldr	r3, [pc, #212]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d031      	beq.n	800755e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f003 0203 	and.w	r2, r3, #3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d12a      	bne.n	800755e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d122      	bne.n	800755e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d11a      	bne.n	800755e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007534:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d111      	bne.n	800755e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d108      	bne.n	800755e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007558:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800755a:	429a      	cmp	r2, r3
 800755c:	d001      	beq.n	8007562 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e02b      	b.n	80075ba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007562:	4b18      	ldr	r3, [pc, #96]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 8007564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007566:	08db      	lsrs	r3, r3, #3
 8007568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800756c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	d01f      	beq.n	80075b8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007578:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757c:	4a11      	ldr	r2, [pc, #68]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007584:	f7fa fb1c 	bl	8001bc0 <HAL_GetTick>
 8007588:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800758a:	bf00      	nop
 800758c:	f7fa fb18 	bl	8001bc0 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	4293      	cmp	r3, r2
 8007596:	d0f9      	beq.n	800758c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007598:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 800759a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <HAL_RCC_OscConfig+0x860>)
 800759e:	4013      	ands	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075a4:	00d2      	lsls	r2, r2, #3
 80075a6:	4907      	ldr	r1, [pc, #28]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075ac:	4b05      	ldr	r3, [pc, #20]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a04      	ldr	r2, [pc, #16]	@ (80075c4 <HAL_RCC_OscConfig+0x85c>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3730      	adds	r7, #48	@ 0x30
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	58024400 	.word	0x58024400
 80075c8:	ffff0007 	.word	0xffff0007

080075cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e19c      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075e0:	4b8a      	ldr	r3, [pc, #552]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d910      	bls.n	8007610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ee:	4b87      	ldr	r3, [pc, #540]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 020f 	bic.w	r2, r3, #15
 80075f6:	4985      	ldr	r1, [pc, #532]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fe:	4b83      	ldr	r3, [pc, #524]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e184      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	4b7b      	ldr	r3, [pc, #492]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007628:	429a      	cmp	r2, r3
 800762a:	d908      	bls.n	800763e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800762c:	4b78      	ldr	r3, [pc, #480]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4975      	ldr	r1, [pc, #468]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800763a:	4313      	orrs	r3, r2
 800763c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d010      	beq.n	800766c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	4b70      	ldr	r3, [pc, #448]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007656:	429a      	cmp	r2, r3
 8007658:	d908      	bls.n	800766c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800765a:	4b6d      	ldr	r3, [pc, #436]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	496a      	ldr	r1, [pc, #424]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007668:	4313      	orrs	r3, r2
 800766a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	4b64      	ldr	r3, [pc, #400]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007684:	429a      	cmp	r2, r3
 8007686:	d908      	bls.n	800769a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007688:	4b61      	ldr	r3, [pc, #388]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	495e      	ldr	r1, [pc, #376]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007696:	4313      	orrs	r3, r2
 8007698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d908      	bls.n	80076c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076b6:	4b56      	ldr	r3, [pc, #344]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4953      	ldr	r1, [pc, #332]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d010      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d908      	bls.n	80076f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f023 020f 	bic.w	r2, r3, #15
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4947      	ldr	r1, [pc, #284]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d055      	beq.n	80077ae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007702:	4b43      	ldr	r3, [pc, #268]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	4940      	ldr	r1, [pc, #256]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007710:	4313      	orrs	r3, r2
 8007712:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d107      	bne.n	800772c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800771c:	4b3c      	ldr	r3, [pc, #240]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d121      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0f6      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b03      	cmp	r3, #3
 8007732:	d107      	bne.n	8007744 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007734:	4b36      	ldr	r3, [pc, #216]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d115      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0ea      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800774c:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0de      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775c:	4b2c      	ldr	r3, [pc, #176]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0d6      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f023 0207 	bic.w	r2, r3, #7
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	4925      	ldr	r1, [pc, #148]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800777a:	4313      	orrs	r3, r2
 800777c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7fa fa1f 	bl	8001bc0 <HAL_GetTick>
 8007782:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007784:	e00a      	b.n	800779c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007786:	f7fa fa1b 	bl	8001bc0 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e0be      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779c:	4b1c      	ldr	r3, [pc, #112]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1eb      	bne.n	8007786 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d208      	bcs.n	80077dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ca:	4b11      	ldr	r3, [pc, #68]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f023 020f 	bic.w	r2, r3, #15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	490e      	ldr	r1, [pc, #56]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077dc:	4b0b      	ldr	r3, [pc, #44]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d214      	bcs.n	8007814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b08      	ldr	r3, [pc, #32]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 020f 	bic.w	r2, r3, #15
 80077f2:	4906      	ldr	r1, [pc, #24]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b04      	ldr	r3, [pc, #16]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e086      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
 800780c:	52002000 	.word	0x52002000
 8007810:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	4b3f      	ldr	r3, [pc, #252]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800782c:	429a      	cmp	r2, r3
 800782e:	d208      	bcs.n	8007842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007830:	4b3c      	ldr	r3, [pc, #240]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4939      	ldr	r1, [pc, #228]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800783e:	4313      	orrs	r3, r2
 8007840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695a      	ldr	r2, [r3, #20]
 8007852:	4b34      	ldr	r3, [pc, #208]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800785a:	429a      	cmp	r2, r3
 800785c:	d208      	bcs.n	8007870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800785e:	4b31      	ldr	r3, [pc, #196]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	492e      	ldr	r1, [pc, #184]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800786c:	4313      	orrs	r3, r2
 800786e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007888:	429a      	cmp	r2, r3
 800788a:	d208      	bcs.n	800789e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	4922      	ldr	r1, [pc, #136]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800789a:	4313      	orrs	r3, r2
 800789c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d010      	beq.n	80078cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d208      	bcs.n	80078cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	4917      	ldr	r1, [pc, #92]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80078cc:	f000 f834 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 80078d0:	4602      	mov	r2, r0
 80078d2:	4b14      	ldr	r3, [pc, #80]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	4912      	ldr	r1, [pc, #72]	@ (8007928 <HAL_RCC_ClockConfig+0x35c>)
 80078de:	5ccb      	ldrb	r3, [r1, r3]
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007928 <HAL_RCC_ClockConfig+0x35c>)
 80078f4:	5cd3      	ldrb	r3, [r2, r3]
 80078f6:	f003 031f 	and.w	r3, r3, #31
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <HAL_RCC_ClockConfig+0x360>)
 8007902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007904:	4a0a      	ldr	r2, [pc, #40]	@ (8007930 <HAL_RCC_ClockConfig+0x364>)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800790a:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <HAL_RCC_ClockConfig+0x368>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fa f90c 	bl	8001b2c <HAL_InitTick>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	0800af88 	.word	0x0800af88
 800792c:	24000004 	.word	0x24000004
 8007930:	24000000 	.word	0x24000000
 8007934:	24000008 	.word	0x24000008

08007938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	@ 0x24
 800793c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800793e:	4bb3      	ldr	r3, [pc, #716]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007946:	2b18      	cmp	r3, #24
 8007948:	f200 8155 	bhi.w	8007bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800794c:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	080079b9 	.word	0x080079b9
 8007958:	08007bf7 	.word	0x08007bf7
 800795c:	08007bf7 	.word	0x08007bf7
 8007960:	08007bf7 	.word	0x08007bf7
 8007964:	08007bf7 	.word	0x08007bf7
 8007968:	08007bf7 	.word	0x08007bf7
 800796c:	08007bf7 	.word	0x08007bf7
 8007970:	08007bf7 	.word	0x08007bf7
 8007974:	080079df 	.word	0x080079df
 8007978:	08007bf7 	.word	0x08007bf7
 800797c:	08007bf7 	.word	0x08007bf7
 8007980:	08007bf7 	.word	0x08007bf7
 8007984:	08007bf7 	.word	0x08007bf7
 8007988:	08007bf7 	.word	0x08007bf7
 800798c:	08007bf7 	.word	0x08007bf7
 8007990:	08007bf7 	.word	0x08007bf7
 8007994:	080079e5 	.word	0x080079e5
 8007998:	08007bf7 	.word	0x08007bf7
 800799c:	08007bf7 	.word	0x08007bf7
 80079a0:	08007bf7 	.word	0x08007bf7
 80079a4:	08007bf7 	.word	0x08007bf7
 80079a8:	08007bf7 	.word	0x08007bf7
 80079ac:	08007bf7 	.word	0x08007bf7
 80079b0:	08007bf7 	.word	0x08007bf7
 80079b4:	080079eb 	.word	0x080079eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b8:	4b94      	ldr	r3, [pc, #592]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c4:	4b91      	ldr	r3, [pc, #580]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	08db      	lsrs	r3, r3, #3
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	4a90      	ldr	r2, [pc, #576]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
 80079d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079d6:	e111      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079da:	61bb      	str	r3, [r7, #24]
      break;
 80079dc:	e10e      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079de:	4b8d      	ldr	r3, [pc, #564]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079e0:	61bb      	str	r3, [r7, #24]
      break;
 80079e2:	e10b      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079e6:	61bb      	str	r3, [r7, #24]
      break;
 80079e8:	e108      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ea:	4b88      	ldr	r3, [pc, #544]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079f4:	4b85      	ldr	r3, [pc, #532]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a00:	4b82      	ldr	r3, [pc, #520]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a0a:	4b80      	ldr	r3, [pc, #512]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80e1 	beq.w	8007bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f000 8083 	beq.w	8007b3c <HAL_RCC_GetSysClockFreq+0x204>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	f200 80a1 	bhi.w	8007b80 <HAL_RCC_GetSysClockFreq+0x248>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x114>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d056      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a4a:	e099      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02d      	beq.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a58:	4b6c      	ldr	r3, [pc, #432]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	08db      	lsrs	r3, r3, #3
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	4a6b      	ldr	r2, [pc, #428]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b62      	ldr	r3, [pc, #392]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007ab2:	e087      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b51      	ldr	r3, [pc, #324]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ada:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007af6:	e065      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b40      	ldr	r3, [pc, #256]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b3a:	e043      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b7e:	e021      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b1e      	ldr	r3, [pc, #120]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bc4:	4b11      	ldr	r3, [pc, #68]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	0a5b      	lsrs	r3, r3, #9
 8007bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bce:	3301      	adds	r3, #1
 8007bd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be8:	ee17 3a90 	vmov	r3, s15
 8007bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bee:	e005      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
      break;
 8007bf4:	e002      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bf6:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bf8:	61bb      	str	r3, [r7, #24]
      break;
 8007bfa:	bf00      	nop
  }

  return sysclockfreq;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3724      	adds	r7, #36	@ 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	03d09000 	.word	0x03d09000
 8007c14:	003d0900 	.word	0x003d0900
 8007c18:	017d7840 	.word	0x017d7840
 8007c1c:	46000000 	.word	0x46000000
 8007c20:	4c742400 	.word	0x4c742400
 8007c24:	4a742400 	.word	0x4a742400
 8007c28:	4bbebc20 	.word	0x4bbebc20

08007c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007c32:	f7ff fe81 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 8007c36:	4602      	mov	r2, r0
 8007c38:	4b10      	ldr	r3, [pc, #64]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	0a1b      	lsrs	r3, r3, #8
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	490f      	ldr	r1, [pc, #60]	@ (8007c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c44:	5ccb      	ldrb	r3, [r1, r3]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	4a09      	ldr	r2, [pc, #36]	@ (8007c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c5a:	5cd3      	ldrb	r3, [r2, r3]
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	4a07      	ldr	r2, [pc, #28]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c6a:	4a07      	ldr	r2, [pc, #28]	@ (8007c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c70:	4b04      	ldr	r3, [pc, #16]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	0800af88 	.word	0x0800af88
 8007c84:	24000004 	.word	0x24000004
 8007c88:	24000000 	.word	0x24000000

08007c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007c90:	f7ff ffcc 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b06      	ldr	r3, [pc, #24]	@ (8007cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ca2:	5ccb      	ldrb	r3, [r1, r3]
 8007ca4:	f003 031f 	and.w	r3, r3, #31
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	0800af88 	.word	0x0800af88

08007cb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cbc:	b0c8      	sub	sp, #288	@ 0x120
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007cdc:	2500      	movs	r5, #0
 8007cde:	ea54 0305 	orrs.w	r3, r4, r5
 8007ce2:	d049      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cee:	d02f      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007cf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cf4:	d828      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cfa:	d01a      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d00:	d822      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d0a:	d007      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d0c:	e01c      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d0e:	4ba7      	ldr	r3, [pc, #668]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	4aa6      	ldr	r2, [pc, #664]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d1a:	e01a      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d20:	3308      	adds	r3, #8
 8007d22:	2102      	movs	r1, #2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 fa6d 	bl	800a204 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d30:	e00f      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d36:	3328      	adds	r3, #40	@ 0x28
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f002 fb14 	bl	800a368 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d46:	e004      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d4e:	e000      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d5a:	4b94      	ldr	r3, [pc, #592]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d68:	4a90      	ldr	r2, [pc, #576]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d6e:	e003      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007d84:	f04f 0900 	mov.w	r9, #0
 8007d88:	ea58 0309 	orrs.w	r3, r8, r9
 8007d8c:	d047      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d82a      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d98:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007db5 	.word	0x08007db5
 8007da4:	08007dc3 	.word	0x08007dc3
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007df7 	.word	0x08007df7
 8007db0:	08007df7 	.word	0x08007df7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db4:	4b7d      	ldr	r3, [pc, #500]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a7c      	ldr	r2, [pc, #496]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dc0:	e01a      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f002 fa1a 	bl	800a204 <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dd6:	e00f      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ddc:	3328      	adds	r3, #40	@ 0x28
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f002 fac1 	bl	800a368 <RCCEx_PLL3_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dec:	e004      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e00:	4b6a      	ldr	r3, [pc, #424]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e04:	f023 0107 	bic.w	r1, r3, #7
 8007e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0e:	4a67      	ldr	r2, [pc, #412]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e14:	e003      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007e2a:	f04f 0b00 	mov.w	fp, #0
 8007e2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e32:	d054      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e3e:	d036      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007e40:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e44:	d82f      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4a:	d032      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e50:	d829      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e54:	d02f      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e58:	d825      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e5a:	2b80      	cmp	r3, #128	@ 0x80
 8007e5c:	d018      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007e5e:	2b80      	cmp	r3, #128	@ 0x80
 8007e60:	d821      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d007      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007e6a:	e01c      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a4e      	ldr	r2, [pc, #312]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e78:	e01e      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7e:	3308      	adds	r3, #8
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f002 f9be 	bl	800a204 <RCCEx_PLL2_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007e8e:	e013      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e94:	3328      	adds	r3, #40	@ 0x28
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 fa65 	bl	800a368 <RCCEx_PLL3_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007eac:	e004      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eae:	bf00      	nop
 8007eb0:	e002      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eb2:	bf00      	nop
 8007eb4:	e000      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ece:	4a37      	ldr	r2, [pc, #220]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ed4:	e003      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007eea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007ef4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d05c      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f04:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f08:	d03b      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f0a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f0e:	d834      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f14:	d037      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f1a:	d82e      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f20:	d033      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f22:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f26:	d828      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2c:	d01a      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f32:	d822      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f3c:	d007      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007f3e:	e01c      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4b1a      	ldr	r3, [pc, #104]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	4a19      	ldr	r2, [pc, #100]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f4c:	e01e      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f52:	3308      	adds	r3, #8
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f002 f954 	bl	800a204 <RCCEx_PLL2_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f62:	e013      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f68:	3328      	adds	r3, #40	@ 0x28
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 f9fb 	bl	800a368 <RCCEx_PLL3_Config>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007f78:	e008      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f80:	e004      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f82:	bf00      	nop
 8007f84:	e002      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f86:	bf00      	nop
 8007f88:	e000      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10d      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007f94:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f98:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fa2:	4a02      	ldr	r2, [pc, #8]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa8:	e006      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007faa:	bf00      	nop
 8007fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	d03a      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fde:	2b30      	cmp	r3, #48	@ 0x30
 8007fe0:	d01f      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007fe2:	2b30      	cmp	r3, #48	@ 0x30
 8007fe4:	d819      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d00c      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d815      	bhi.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d019      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d111      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff6:	4bae      	ldr	r3, [pc, #696]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffa:	4aad      	ldr	r2, [pc, #692]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008002:	e011      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008008:	3308      	adds	r3, #8
 800800a:	2102      	movs	r1, #2
 800800c:	4618      	mov	r0, r3
 800800e:	f002 f8f9 	bl	800a204 <RCCEx_PLL2_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008018:	e006      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008020:	e002      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008030:	4b9f      	ldr	r3, [pc, #636]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008034:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803e:	4a9c      	ldr	r2, [pc, #624]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008040:	430b      	orrs	r3, r1
 8008042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800804a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800804e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800805a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008064:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008068:	460b      	mov	r3, r1
 800806a:	4313      	orrs	r3, r2
 800806c:	d051      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800806e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008078:	d035      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800807a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807e:	d82e      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008080:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008084:	d031      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800808a:	d828      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x426>
 800808c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008090:	d01a      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008096:	d822      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800809c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a0:	d007      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80080a2:	e01c      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a4:	4b82      	ldr	r3, [pc, #520]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	4a81      	ldr	r2, [pc, #516]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080b0:	e01c      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b6:	3308      	adds	r3, #8
 80080b8:	2100      	movs	r1, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	f002 f8a2 	bl	800a204 <RCCEx_PLL2_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080c6:	e011      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080cc:	3328      	adds	r3, #40	@ 0x28
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f002 f949 	bl	800a368 <RCCEx_PLL3_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080dc:	e006      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080e4:	e002      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80080ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080f4:	4b6e      	ldr	r3, [pc, #440]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80080fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008102:	4a6b      	ldr	r2, [pc, #428]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008104:	430b      	orrs	r3, r1
 8008106:	6513      	str	r3, [r2, #80]	@ 0x50
 8008108:	e003      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800810e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800811e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008122:	2300      	movs	r3, #0
 8008124:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008128:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800812c:	460b      	mov	r3, r1
 800812e:	4313      	orrs	r3, r2
 8008130:	d053      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800813c:	d033      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800813e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008142:	d82c      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008148:	d02f      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800814a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800814e:	d826      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008154:	d02b      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800815a:	d820      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800815c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008160:	d012      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008166:	d81a      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d022      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008170:	d115      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008176:	3308      	adds	r3, #8
 8008178:	2101      	movs	r1, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f002 f842 	bl	800a204 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008186:	e015      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818c:	3328      	adds	r3, #40	@ 0x28
 800818e:	2101      	movs	r1, #1
 8008190:	4618      	mov	r0, r3
 8008192:	f002 f8e9 	bl	800a368 <RCCEx_PLL3_Config>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800819c:	e00a      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081a4:	e006      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081a6:	bf00      	nop
 80081a8:	e004      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081aa:	bf00      	nop
 80081ac:	e002      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081ae:	bf00      	nop
 80081b0:	e000      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80081b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081bc:	4b3c      	ldr	r3, [pc, #240]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081ca:	4a39      	ldr	r2, [pc, #228]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80081d0:	e003      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80081e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081ea:	2300      	movs	r3, #0
 80081ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d060      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008202:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008206:	d039      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008208:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800820c:	d832      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800820e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008212:	d035      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008218:	d82c      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821e:	d031      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008224:	d826      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008226:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800822a:	d02d      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800822c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008230:	d820      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008236:	d012      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823c:	d81a      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d024      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008246:	d115      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824c:	3308      	adds	r3, #8
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f001 ffd7 	bl	800a204 <RCCEx_PLL2_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800825c:	e017      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008262:	3328      	adds	r3, #40	@ 0x28
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f002 f87e 	bl	800a368 <RCCEx_PLL3_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008272:	e00c      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800827a:	e008      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800827c:	bf00      	nop
 800827e:	e006      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008280:	bf00      	nop
 8008282:	e004      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008284:	bf00      	nop
 8008286:	e002      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008288:	bf00      	nop
 800828a:	e000      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800828c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800828e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10e      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008296:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800829e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082a6:	4a02      	ldr	r2, [pc, #8]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a8:	430b      	orrs	r3, r1
 80082aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80082ae:	bf00      	nop
 80082b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082d6:	460b      	mov	r3, r1
 80082d8:	4313      	orrs	r3, r2
 80082da:	d037      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e6:	d00e      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80082e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ec:	d816      	bhi.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d018      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80082f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f6:	d111      	bne.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f8:	4bc4      	ldr	r3, [pc, #784]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fc:	4ac3      	ldr	r2, [pc, #780]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80082fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008304:	e00f      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830a:	3308      	adds	r3, #8
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f001 ff78 	bl	800a204 <RCCEx_PLL2_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800831a:	e004      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008322:	e000      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008326:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800832e:	4bb7      	ldr	r3, [pc, #732]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008332:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800833c:	4ab3      	ldr	r2, [pc, #716]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800833e:	430b      	orrs	r3, r1
 8008340:	6513      	str	r3, [r2, #80]	@ 0x50
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008344:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008348:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800834c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800835c:	2300      	movs	r3, #0
 800835e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008362:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008366:	460b      	mov	r3, r1
 8008368:	4313      	orrs	r3, r2
 800836a:	d039      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800836c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008372:	2b03      	cmp	r3, #3
 8008374:	d81c      	bhi.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008376:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080083b9 	.word	0x080083b9
 8008380:	0800838d 	.word	0x0800838d
 8008384:	0800839b 	.word	0x0800839b
 8008388:	080083b9 	.word	0x080083b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b9f      	ldr	r3, [pc, #636]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	4a9e      	ldr	r2, [pc, #632]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008398:	e00f      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800839a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839e:	3308      	adds	r3, #8
 80083a0:	2102      	movs	r1, #2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 ff2e 	bl	800a204 <RCCEx_PLL2_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083ae:	e004      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80083b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083c2:	4b92      	ldr	r3, [pc, #584]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c6:	f023 0103 	bic.w	r1, r3, #3
 80083ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d0:	4a8e      	ldr	r2, [pc, #568]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083d2:	430b      	orrs	r3, r1
 80083d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083d6:	e003      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80083fa:	460b      	mov	r3, r1
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f000 8099 	beq.w	8008534 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008402:	4b83      	ldr	r3, [pc, #524]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a82      	ldr	r2, [pc, #520]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800840e:	f7f9 fbd7 	bl	8001bc0 <HAL_GetTick>
 8008412:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008416:	e00b      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008418:	f7f9 fbd2 	bl	8001bc0 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b64      	cmp	r3, #100	@ 0x64
 8008426:	d903      	bls.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800842e:	e005      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008430:	4b77      	ldr	r3, [pc, #476]	@ (8008610 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ed      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800843c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008440:	2b00      	cmp	r3, #0
 8008442:	d173      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008444:	4b71      	ldr	r3, [pc, #452]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008446:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800844c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008450:	4053      	eors	r3, r2
 8008452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008456:	2b00      	cmp	r3, #0
 8008458:	d015      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800845a:	4b6c      	ldr	r3, [pc, #432]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008462:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008466:	4b69      	ldr	r3, [pc, #420]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846a:	4a68      	ldr	r2, [pc, #416]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800846c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008470:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008472:	4b66      	ldr	r3, [pc, #408]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	4a65      	ldr	r2, [pc, #404]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800847e:	4a63      	ldr	r2, [pc, #396]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008484:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800848e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008492:	d118      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7f9 fb94 	bl	8001bc0 <HAL_GetTick>
 8008498:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800849c:	e00d      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849e:	f7f9 fb8f 	bl	8001bc0 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80084b8:	e005      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ba:	4b54      	ldr	r3, [pc, #336]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0eb      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80084c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d129      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084de:	d10e      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80084e0:	4b4a      	ldr	r3, [pc, #296]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80084e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084f0:	091a      	lsrs	r2, r3, #4
 80084f2:	4b48      	ldr	r3, [pc, #288]	@ (8008614 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	4a45      	ldr	r2, [pc, #276]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6113      	str	r3, [r2, #16]
 80084fc:	e005      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80084fe:	4b43      	ldr	r3, [pc, #268]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	4a42      	ldr	r2, [pc, #264]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008504:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008508:	6113      	str	r3, [r2, #16]
 800850a:	4b40      	ldr	r3, [pc, #256]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800850c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800850e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800851a:	4a3c      	ldr	r2, [pc, #240]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800851c:	430b      	orrs	r3, r1
 800851e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008520:	e008      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008522:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008526:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f002 0301 	and.w	r3, r2, #1
 8008540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008544:	2300      	movs	r3, #0
 8008546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800854a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	f000 8090 	beq.w	8008676 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800855a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800855e:	2b28      	cmp	r3, #40	@ 0x28
 8008560:	d870      	bhi.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008562:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	0800864d 	.word	0x0800864d
 800856c:	08008645 	.word	0x08008645
 8008570:	08008645 	.word	0x08008645
 8008574:	08008645 	.word	0x08008645
 8008578:	08008645 	.word	0x08008645
 800857c:	08008645 	.word	0x08008645
 8008580:	08008645 	.word	0x08008645
 8008584:	08008645 	.word	0x08008645
 8008588:	08008619 	.word	0x08008619
 800858c:	08008645 	.word	0x08008645
 8008590:	08008645 	.word	0x08008645
 8008594:	08008645 	.word	0x08008645
 8008598:	08008645 	.word	0x08008645
 800859c:	08008645 	.word	0x08008645
 80085a0:	08008645 	.word	0x08008645
 80085a4:	08008645 	.word	0x08008645
 80085a8:	0800862f 	.word	0x0800862f
 80085ac:	08008645 	.word	0x08008645
 80085b0:	08008645 	.word	0x08008645
 80085b4:	08008645 	.word	0x08008645
 80085b8:	08008645 	.word	0x08008645
 80085bc:	08008645 	.word	0x08008645
 80085c0:	08008645 	.word	0x08008645
 80085c4:	08008645 	.word	0x08008645
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	08008645 	.word	0x08008645
 80085d0:	08008645 	.word	0x08008645
 80085d4:	08008645 	.word	0x08008645
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008645 	.word	0x08008645
 80085e0:	08008645 	.word	0x08008645
 80085e4:	08008645 	.word	0x08008645
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008645 	.word	0x08008645
 80085f8:	08008645 	.word	0x08008645
 80085fc:	08008645 	.word	0x08008645
 8008600:	08008645 	.word	0x08008645
 8008604:	08008645 	.word	0x08008645
 8008608:	0800864d 	.word	0x0800864d
 800860c:	58024400 	.word	0x58024400
 8008610:	58024800 	.word	0x58024800
 8008614:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861c:	3308      	adds	r3, #8
 800861e:	2101      	movs	r1, #1
 8008620:	4618      	mov	r0, r3
 8008622:	f001 fdef 	bl	800a204 <RCCEx_PLL2_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800862c:	e00f      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800862e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008632:	3328      	adds	r3, #40	@ 0x28
 8008634:	2101      	movs	r1, #1
 8008636:	4618      	mov	r0, r3
 8008638:	f001 fe96 	bl	800a368 <RCCEx_PLL3_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008642:	e004      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800864a:	e000      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800864c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800864e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008656:	4bc0      	ldr	r3, [pc, #768]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800865a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800865e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008666:	4abc      	ldr	r2, [pc, #752]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008668:	430b      	orrs	r3, r1
 800866a:	6553      	str	r3, [r2, #84]	@ 0x54
 800866c:	e003      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008672:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f002 0302 	and.w	r3, r2, #2
 8008682:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800868c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008690:	460b      	mov	r3, r1
 8008692:	4313      	orrs	r3, r2
 8008694:	d043      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800869a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d824      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80086a2:	a201      	add	r2, pc, #4	@ (adr r2, 80086a8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086f5 	.word	0x080086f5
 80086ac:	080086c1 	.word	0x080086c1
 80086b0:	080086d7 	.word	0x080086d7
 80086b4:	080086f5 	.word	0x080086f5
 80086b8:	080086f5 	.word	0x080086f5
 80086bc:	080086f5 	.word	0x080086f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c4:	3308      	adds	r3, #8
 80086c6:	2101      	movs	r1, #1
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fd9b 	bl	800a204 <RCCEx_PLL2_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086d4:	e00f      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086da:	3328      	adds	r3, #40	@ 0x28
 80086dc:	2101      	movs	r1, #1
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fe42 	bl	800a368 <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086ea:	e004      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086f2:	e000      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80086f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086fe:	4b96      	ldr	r3, [pc, #600]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008702:	f023 0107 	bic.w	r1, r3, #7
 8008706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870e:	4a92      	ldr	r2, [pc, #584]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008710:	430b      	orrs	r3, r1
 8008712:	6553      	str	r3, [r2, #84]	@ 0x54
 8008714:	e003      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800871a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800871e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f002 0304 	and.w	r3, r2, #4
 800872a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800872e:	2300      	movs	r3, #0
 8008730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008734:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008738:	460b      	mov	r3, r1
 800873a:	4313      	orrs	r3, r2
 800873c:	d043      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008746:	2b05      	cmp	r3, #5
 8008748:	d824      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800874a:	a201      	add	r2, pc, #4	@ (adr r2, 8008750 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	0800879d 	.word	0x0800879d
 8008754:	08008769 	.word	0x08008769
 8008758:	0800877f 	.word	0x0800877f
 800875c:	0800879d 	.word	0x0800879d
 8008760:	0800879d 	.word	0x0800879d
 8008764:	0800879d 	.word	0x0800879d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876c:	3308      	adds	r3, #8
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fd47 	bl	800a204 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800877c:	e00f      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800877e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008782:	3328      	adds	r3, #40	@ 0x28
 8008784:	2101      	movs	r1, #1
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fdee 	bl	800a368 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008792:	e004      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800879a:	e000      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800879c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087a6:	4b6c      	ldr	r3, [pc, #432]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087aa:	f023 0107 	bic.w	r1, r3, #7
 80087ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087b6:	4a68      	ldr	r2, [pc, #416]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f002 0320 	and.w	r3, r2, #32
 80087d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d055      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80087e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087f2:	d033      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80087f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087f8:	d82c      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fe:	d02f      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008804:	d826      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800880a:	d02b      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800880c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008810:	d820      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008816:	d012      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800881c:	d81a      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008826:	d115      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800882c:	3308      	adds	r3, #8
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fce7 	bl	800a204 <RCCEx_PLL2_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800883c:	e015      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800883e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008842:	3328      	adds	r3, #40	@ 0x28
 8008844:	2102      	movs	r1, #2
 8008846:	4618      	mov	r0, r3
 8008848:	f001 fd8e 	bl	800a368 <RCCEx_PLL3_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008852:	e00a      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800885a:	e006      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800885c:	bf00      	nop
 800885e:	e004      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008860:	bf00      	nop
 8008862:	e002      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008864:	bf00      	nop
 8008866:	e000      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008872:	4b39      	ldr	r3, [pc, #228]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008876:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008882:	4a35      	ldr	r2, [pc, #212]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008884:	430b      	orrs	r3, r1
 8008886:	6553      	str	r3, [r2, #84]	@ 0x54
 8008888:	e003      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800889e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80088a2:	2300      	movs	r3, #0
 80088a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4313      	orrs	r3, r2
 80088b0:	d058      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088be:	d033      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80088c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088c4:	d82c      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ca:	d02f      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d0:	d826      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088d6:	d02b      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80088d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088dc:	d820      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088e2:	d012      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80088e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088e8:	d81a      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d022      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80088ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088f2:	d115      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f8:	3308      	adds	r3, #8
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fc81 	bl	800a204 <RCCEx_PLL2_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008908:	e015      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800890a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890e:	3328      	adds	r3, #40	@ 0x28
 8008910:	2102      	movs	r1, #2
 8008912:	4618      	mov	r0, r3
 8008914:	f001 fd28 	bl	800a368 <RCCEx_PLL3_Config>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800891e:	e00a      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008926:	e006      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008928:	bf00      	nop
 800892a:	e004      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800892c:	bf00      	nop
 800892e:	e002      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008930:	bf00      	nop
 8008932:	e000      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008936:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10e      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800893e:	4b06      	ldr	r3, [pc, #24]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008942:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800894a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800894e:	4a02      	ldr	r2, [pc, #8]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008950:	430b      	orrs	r3, r1
 8008952:	6593      	str	r3, [r2, #88]	@ 0x58
 8008954:	e006      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008960:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800897a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800897e:	460b      	mov	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	d055      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008988:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800898c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008990:	d033      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008992:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008996:	d82c      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800899c:	d02f      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800899e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a2:	d826      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089a8:	d02b      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80089aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089ae:	d820      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b4:	d012      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80089b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ba:	d81a      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d022      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80089c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c4:	d115      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ca:	3308      	adds	r3, #8
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fc18 	bl	800a204 <RCCEx_PLL2_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089da:	e015      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e0:	3328      	adds	r3, #40	@ 0x28
 80089e2:	2102      	movs	r1, #2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f001 fcbf 	bl	800a368 <RCCEx_PLL3_Config>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089f0:	e00a      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089f8:	e006      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089fa:	bf00      	nop
 80089fc:	e004      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80089fe:	bf00      	nop
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a10:	4ba1      	ldr	r3, [pc, #644]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a20:	4a9d      	ldr	r2, [pc, #628]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a22:	430b      	orrs	r3, r1
 8008a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a26:	e003      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f002 0308 	and.w	r3, r2, #8
 8008a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a40:	2300      	movs	r3, #0
 8008a42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	d01e      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5c:	d10c      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a62:	3328      	adds	r3, #40	@ 0x28
 8008a64:	2102      	movs	r1, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fc7e 	bl	800a368 <RCCEx_PLL3_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a78:	4b87      	ldr	r3, [pc, #540]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a88:	4a83      	ldr	r2, [pc, #524]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f002 0310 	and.w	r3, r2, #16
 8008a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008aa4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	d01e      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aba:	d10c      	bne.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac0:	3328      	adds	r3, #40	@ 0x28
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 fc4f 	bl	800a368 <RCCEx_PLL3_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ad6:	4b70      	ldr	r3, [pc, #448]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ada:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ae6:	4a6c      	ldr	r2, [pc, #432]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008b06:	460b      	mov	r3, r1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	d03e      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b18:	d022      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1e:	d81b      	bhi.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b28:	d00b      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008b2a:	e015      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b30:	3308      	adds	r3, #8
 8008b32:	2100      	movs	r1, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 fb65 	bl	800a204 <RCCEx_PLL2_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b40:	e00f      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b46:	3328      	adds	r3, #40	@ 0x28
 8008b48:	2102      	movs	r1, #2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 fc0c 	bl	800a368 <RCCEx_PLL3_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b56:	e004      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b5e:	e000      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b7a:	4a47      	ldr	r2, [pc, #284]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b80:	e003      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b98:	2300      	movs	r3, #0
 8008b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	d03b      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb2:	d01f      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb8:	d818      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bbe:	d003      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bc4:	d007      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008bc6:	e011      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc8:	4b33      	ldr	r3, [pc, #204]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bcc:	4a32      	ldr	r2, [pc, #200]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bd4:	e00f      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bda:	3328      	adds	r3, #40	@ 0x28
 8008bdc:	2101      	movs	r1, #1
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 fbc2 	bl	800a368 <RCCEx_PLL3_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bea:	e004      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10b      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bfe:	4b26      	ldr	r3, [pc, #152]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0e:	4a22      	ldr	r2, [pc, #136]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c10:	430b      	orrs	r3, r1
 8008c12:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c14:	e003      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d034      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c48:	d007      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008c4a:	e011      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4c:	4b12      	ldr	r3, [pc, #72]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	4a11      	ldr	r2, [pc, #68]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c58:	e00e      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5e:	3308      	adds	r3, #8
 8008c60:	2102      	movs	r1, #2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 face 	bl	800a204 <RCCEx_PLL2_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c6e:	e003      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10d      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c80:	4b05      	ldr	r3, [pc, #20]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8e:	4a02      	ldr	r2, [pc, #8]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c90:	430b      	orrs	r3, r1
 8008c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c94:	e006      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008c96:	bf00      	nop
 8008c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ca0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	d00c      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	3328      	adds	r3, #40	@ 0x28
 8008cc6:	2102      	movs	r1, #2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fb4d 	bl	800a368 <RCCEx_PLL3_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ce8:	2300      	movs	r3, #0
 8008cea:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d038      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d02:	d018      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d08:	d811      	bhi.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d0e:	d014      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d14:	d80b      	bhi.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d011      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d1e:	d106      	bne.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d20:	4bc3      	ldr	r3, [pc, #780]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d24:	4ac2      	ldr	r2, [pc, #776]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d2c:	e008      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d34:	e004      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d36:	bf00      	nop
 8008d38:	e002      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d3a:	bf00      	nop
 8008d3c:	e000      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d48:	4bb9      	ldr	r3, [pc, #740]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	4ab5      	ldr	r2, [pc, #724]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d5a:	430b      	orrs	r3, r1
 8008d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d5e:	e003      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d76:	2300      	movs	r3, #0
 8008d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d009      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d84:	4baa      	ldr	r3, [pc, #680]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d92:	4aa7      	ldr	r2, [pc, #668]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008da6:	2300      	movs	r3, #0
 8008da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008daa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d009      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008db4:	4b9e      	ldr	r3, [pc, #632]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc2:	4a9b      	ldr	r2, [pc, #620]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008dde:	460b      	mov	r3, r1
 8008de0:	4313      	orrs	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008de4:	4b92      	ldr	r3, [pc, #584]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df2:	4a8f      	ldr	r2, [pc, #572]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008df4:	430b      	orrs	r3, r1
 8008df6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e06:	2300      	movs	r3, #0
 8008e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d00e      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e14:	4b86      	ldr	r3, [pc, #536]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	4a85      	ldr	r2, [pc, #532]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e1e:	6113      	str	r3, [r2, #16]
 8008e20:	4b83      	ldr	r3, [pc, #524]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e22:	6919      	ldr	r1, [r3, #16]
 8008e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008e2c:	4a80      	ldr	r2, [pc, #512]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	d009      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e4e:	4b78      	ldr	r3, [pc, #480]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5c:	4a74      	ldr	r2, [pc, #464]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e70:	2300      	movs	r3, #0
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	d00a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e8e:	4a68      	ldr	r2, [pc, #416]	@ (8009030 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ea6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4313      	orrs	r3, r2
 8008eae:	d011      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 f9a3 	bl	800a204 <RCCEx_PLL2_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ed0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	2100      	movs	r1, #0
 8008ede:	6239      	str	r1, [r7, #32]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ee6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d011      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 f983 	bl	800a204 <RCCEx_PLL2_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	61b9      	str	r1, [r7, #24]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	d011      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f34:	3308      	adds	r3, #8
 8008f36:	2102      	movs	r1, #2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 f963 	bl	800a204 <RCCEx_PLL2_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	6139      	str	r1, [r7, #16]
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	d011      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f74:	3328      	adds	r3, #40	@ 0x28
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 f9f5 	bl	800a368 <RCCEx_PLL3_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008f84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d011      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb4:	3328      	adds	r3, #40	@ 0x28
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 f9d5 	bl	800a368 <RCCEx_PLL3_Config>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6039      	str	r1, [r7, #0]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d011      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff4:	3328      	adds	r3, #40	@ 0x28
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f9b5 	bl	800a368 <RCCEx_PLL3_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009010:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009014:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e000      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
}
 8009022:	4618      	mov	r0, r3
 8009024:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009028:	46bd      	mov	sp, r7
 800902a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400

08009034 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b090      	sub	sp, #64	@ 0x40
 8009038:	af00      	add	r7, sp, #0
 800903a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800903e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009042:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009046:	430b      	orrs	r3, r1
 8009048:	f040 8094 	bne.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800904c:	4b97      	ldr	r3, [pc, #604]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800904e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	2b04      	cmp	r3, #4
 800905a:	f200 8087 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009079 	.word	0x08009079
 8009068:	080090a1 	.word	0x080090a1
 800906c:	080090c9 	.word	0x080090c9
 8009070:	08009165 	.word	0x08009165
 8009074:	080090f1 	.word	0x080090f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009078:	4b8c      	ldr	r3, [pc, #560]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009084:	d108      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ff68 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009094:	f000 bc97 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909c:	f000 bc93 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a0:	4b82      	ldr	r3, [pc, #520]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ac:	d108      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fcac 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090bc:	f000 bc83 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c4:	f000 bc7f 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c8:	4b78      	ldr	r3, [pc, #480]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090d4:	d108      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d6:	f107 030c 	add.w	r3, r7, #12
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fdec 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e4:	f000 bc6f 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ec:	f000 bc6b 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090f0:	4b6e      	ldr	r3, [pc, #440]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090fa:	4b6c      	ldr	r3, [pc, #432]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	2b04      	cmp	r3, #4
 8009104:	d10c      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009108:	2b00      	cmp	r3, #0
 800910a:	d109      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800910c:	4b67      	ldr	r3, [pc, #412]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	08db      	lsrs	r3, r3, #3
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	4a66      	ldr	r2, [pc, #408]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009118:	fa22 f303 	lsr.w	r3, r2, r3
 800911c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911e:	e01f      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009120:	4b62      	ldr	r3, [pc, #392]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912c:	d106      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009134:	d102      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009136:	4b5f      	ldr	r3, [pc, #380]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800913a:	e011      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800913c:	4b5b      	ldr	r3, [pc, #364]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009148:	d106      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800914a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009150:	d102      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009152:	4b59      	ldr	r3, [pc, #356]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800915c:	f000 bc33 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009160:	f000 bc31 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009164:	4b55      	ldr	r3, [pc, #340]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	f000 bc2d 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009170:	f000 bc29 	b.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009178:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800917c:	430b      	orrs	r3, r1
 800917e:	f040 809f 	bne.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009182:	4b4a      	ldr	r3, [pc, #296]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009186:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800918a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009192:	d04d      	beq.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919a:	f200 8084 	bhi.w	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80091a2:	d07d      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80091a8:	d87d      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2b80      	cmp	r3, #128	@ 0x80
 80091ae:	d02d      	beq.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	2b80      	cmp	r3, #128	@ 0x80
 80091b4:	d877      	bhi.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	d012      	beq.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80091c2:	e070      	b.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091c4:	4b39      	ldr	r3, [pc, #228]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091d0:	d107      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fec2 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e0:	e3f1      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e6:	e3ee      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091e8:	4b30      	ldr	r3, [pc, #192]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091f4:	d107      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f6:	f107 0318 	add.w	r3, r7, #24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fc08 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009204:	e3df      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920a:	e3dc      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800920c:	4b27      	ldr	r3, [pc, #156]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009218:	d107      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800921a:	f107 030c 	add.w	r3, r7, #12
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fd4a 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009228:	e3cd      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922e:	e3ca      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009230:	4b1e      	ldr	r3, [pc, #120]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009234:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800923a:	4b1c      	ldr	r3, [pc, #112]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b04      	cmp	r3, #4
 8009244:	d10c      	bne.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8009246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800924c:	4b17      	ldr	r3, [pc, #92]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	08db      	lsrs	r3, r3, #3
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	4a16      	ldr	r2, [pc, #88]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009258:	fa22 f303 	lsr.w	r3, r2, r3
 800925c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800925e:	e01e      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009260:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926c:	d106      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800926e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009274:	d102      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009276:	4b0f      	ldr	r3, [pc, #60]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800927a:	e010      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800927c:	4b0b      	ldr	r3, [pc, #44]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009288:	d106      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800928a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009290:	d102      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009292:	4b09      	ldr	r3, [pc, #36]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009296:	e002      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800929c:	e393      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800929e:	e392      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092a0:	4b06      	ldr	r3, [pc, #24]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	e38f      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092aa:	e38c      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	003d0900 	.word	0x003d0900
 80092b8:	017d7840 	.word	0x017d7840
 80092bc:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80092c8:	430b      	orrs	r3, r1
 80092ca:	f040 809c 	bne.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80092ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80092d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092de:	d054      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092e6:	f200 808b 	bhi.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092f0:	f000 8083 	beq.w	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092fa:	f200 8081 	bhi.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009304:	d02f      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800930c:	d878      	bhi.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800931a:	d012      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800931c:	e070      	b.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800931e:	4b8a      	ldr	r3, [pc, #552]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800932c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fe15 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933a:	e344      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009340:	e341      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009342:	4b81      	ldr	r3, [pc, #516]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800934a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800934e:	d107      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009350:	f107 0318 	add.w	r3, r7, #24
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fb5b 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935e:	e332      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e32f      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009366:	4b78      	ldr	r3, [pc, #480]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009372:	d107      	bne.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fc9d 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009382:	e320      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009388:	e31d      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800938a:	4b6f      	ldr	r3, [pc, #444]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800938c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800938e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009394:	4b6c      	ldr	r3, [pc, #432]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b04      	cmp	r3, #4
 800939e:	d10c      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a6:	4b68      	ldr	r3, [pc, #416]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	08db      	lsrs	r3, r3, #3
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	4a66      	ldr	r2, [pc, #408]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093b8:	e01e      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093ba:	4b63      	ldr	r3, [pc, #396]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80093c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093d0:	4b5f      	ldr	r3, [pc, #380]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093d4:	e010      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093e2:	d106      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093ec:	4b59      	ldr	r3, [pc, #356]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80093f6:	e2e6      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80093f8:	e2e5      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093fa:	4b57      	ldr	r3, [pc, #348]	@ (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fe:	e2e2      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009404:	e2df      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800940e:	430b      	orrs	r3, r1
 8009410:	f040 80a7 	bne.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009414:	4b4c      	ldr	r3, [pc, #304]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009418:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800941c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009424:	d055      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800942c:	f200 8096 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009436:	f000 8084 	beq.w	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009440:	f200 808c 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800944a:	d030      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800944c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009452:	f200 8083 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009462:	d012      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009464:	e07a      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009466:	4b38      	ldr	r3, [pc, #224]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800946e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009472:	d107      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fd71 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009482:	e2a0      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009488:	e29d      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800948a:	4b2f      	ldr	r3, [pc, #188]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009496:	d107      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009498:	f107 0318 	add.w	r3, r7, #24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fab7 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a6:	e28e      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e28b      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ae:	4b26      	ldr	r3, [pc, #152]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ba:	d107      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fbf9 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ca:	e27c      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e279      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d10c      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80094e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094ee:	4b16      	ldr	r3, [pc, #88]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	08db      	lsrs	r3, r3, #3
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	4a14      	ldr	r2, [pc, #80]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80094fa:	fa22 f303 	lsr.w	r3, r2, r3
 80094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009500:	e01e      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009502:	4b11      	ldr	r3, [pc, #68]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800950e:	d106      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009518:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951c:	e010      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800951e:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800952c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009534:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800953e:	e242      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009540:	e241      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009542:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009546:	e23e      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009548:	58024400 	.word	0x58024400
 800954c:	03d09000 	.word	0x03d09000
 8009550:	003d0900 	.word	0x003d0900
 8009554:	017d7840 	.word	0x017d7840
 8009558:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009560:	e231      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009566:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800956a:	430b      	orrs	r3, r1
 800956c:	f040 8085 	bne.w	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009570:	4b9c      	ldr	r3, [pc, #624]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009574:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009580:	d06b      	beq.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009588:	d874      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009590:	d056      	beq.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009598:	d86c      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095a0:	d03b      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095a8:	d864      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b0:	d021      	beq.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b8:	d85c      	bhi.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d004      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095c6:	d004      	beq.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80095c8:	e054      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80095ca:	f7fe fb5f 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 80095ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095d0:	e1f9      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095d2:	4b84      	ldr	r3, [pc, #528]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095de:	d107      	bne.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e0:	f107 0318 	add.w	r3, r7, #24
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fa13 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ee:	e1ea      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f4:	e1e7      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095f6:	4b7b      	ldr	r3, [pc, #492]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009602:	d107      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	4618      	mov	r0, r3
 800960a:	f000 fb55 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009612:	e1d8      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009618:	e1d5      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800961a:	4b72      	ldr	r3, [pc, #456]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	2b04      	cmp	r3, #4
 8009624:	d109      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009626:	4b6f      	ldr	r3, [pc, #444]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	08db      	lsrs	r3, r3, #3
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	4a6d      	ldr	r2, [pc, #436]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009632:	fa22 f303 	lsr.w	r3, r2, r3
 8009636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009638:	e1c5      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800963e:	e1c2      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009640:	4b68      	ldr	r3, [pc, #416]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964c:	d102      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800964e:	4b67      	ldr	r3, [pc, #412]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009652:	e1b8      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009658:	e1b5      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800965a:	4b62      	ldr	r3, [pc, #392]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009666:	d102      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009668:	4b61      	ldr	r3, [pc, #388]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800966c:	e1ab      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009672:	e1a8      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009678:	e1a5      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800967a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800967e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009682:	430b      	orrs	r3, r1
 8009684:	d173      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009686:	4b57      	ldr	r3, [pc, #348]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800968e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009696:	d02f      	beq.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800969e:	d863      	bhi.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ac:	d012      	beq.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80096ae:	e05b      	b.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096b0:	4b4c      	ldr	r3, [pc, #304]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096bc:	d107      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096be:	f107 0318 	add.w	r3, r7, #24
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f9a4 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096cc:	e17b      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d2:	e178      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096d4:	4b43      	ldr	r3, [pc, #268]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096e0:	d107      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096e2:	f107 030c 	add.w	r3, r7, #12
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fae6 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f0:	e169      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f6:	e166      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096f8:	4b3a      	ldr	r3, [pc, #232]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009702:	4b38      	ldr	r3, [pc, #224]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b04      	cmp	r3, #4
 800970c:	d10c      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009714:	4b33      	ldr	r3, [pc, #204]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	08db      	lsrs	r3, r3, #3
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	4a32      	ldr	r2, [pc, #200]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009726:	e01e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009728:	4b2e      	ldr	r3, [pc, #184]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009734:	d106      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8009736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800973c:	d102      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800973e:	4b2b      	ldr	r3, [pc, #172]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009742:	e010      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009744:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009750:	d106      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8009752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009758:	d102      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800975a:	4b25      	ldr	r3, [pc, #148]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009764:	e12f      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009766:	e12e      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976c:	e12b      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800976e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009772:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009776:	430b      	orrs	r3, r1
 8009778:	d13c      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800977a:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800977c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009782:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800978a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009790:	d012      	beq.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009792:	e023      	b.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009794:	4b13      	ldr	r3, [pc, #76]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800979c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097a0:	d107      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fbda 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b0:	e109      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b6:	e106      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097b8:	4b0a      	ldr	r3, [pc, #40]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097c4:	d107      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c6:	f107 0318 	add.w	r3, r7, #24
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f920 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097d4:	e0f7      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097da:	e0f4      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e0:	e0f1      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
 80097e8:	03d09000 	.word	0x03d09000
 80097ec:	003d0900 	.word	0x003d0900
 80097f0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80097fc:	430b      	orrs	r3, r1
 80097fe:	f040 8091 	bne.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009802:	4b73      	ldr	r3, [pc, #460]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009806:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800980a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009812:	f000 8081 	beq.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800981c:	d87f      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800981e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009824:	d06b      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800982c:	d877      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009834:	d056      	beq.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800983c:	d86f      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009844:	d03b      	beq.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800984c:	d867      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009854:	d021      	beq.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800985c:	d85f      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800985e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800986a:	d004      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800986c:	e057      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800986e:	f000 f8b9 	bl	80099e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009874:	e0a7      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009876:	4b56      	ldr	r3, [pc, #344]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009882:	d107      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009884:	f107 0318 	add.w	r3, r7, #24
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f8c1 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009892:	e098      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009898:	e095      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800989a:	4b4d      	ldr	r3, [pc, #308]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098a6:	d107      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fa03 	bl	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098b6:	e086      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098bc:	e083      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098be:	4b44      	ldr	r3, [pc, #272]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ca:	4b41      	ldr	r3, [pc, #260]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	4a3f      	ldr	r2, [pc, #252]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098dc:	e073      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e2:	e070      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098e4:	4b3a      	ldr	r3, [pc, #232]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f0:	d102      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80098f2:	4b39      	ldr	r3, [pc, #228]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f6:	e066      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098fc:	e063      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098fe:	4b34      	ldr	r3, [pc, #208]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990a:	d102      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800990c:	4b33      	ldr	r3, [pc, #204]	@ (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009910:	e059      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009916:	e056      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009918:	4b31      	ldr	r3, [pc, #196]	@ (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991c:	e053      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009922:	e050      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009928:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800992c:	430b      	orrs	r3, r1
 800992e:	d148      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009930:	4b27      	ldr	r3, [pc, #156]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009934:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009938:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009940:	d02a      	beq.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009948:	d838      	bhi.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009956:	d00d      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009958:	e030      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800995a:	4b1d      	ldr	r3, [pc, #116]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009966:	d102      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009968:	4b1c      	ldr	r3, [pc, #112]	@ (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800996a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800996c:	e02b      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009972:	e028      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009974:	4b16      	ldr	r3, [pc, #88]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800997c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009980:	d107      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 faea 	bl	8009f60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009990:	e019      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009996:	e016      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009998:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a4:	d107      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a6:	f107 0318 	add.w	r3, r7, #24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f830 	bl	8009a10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b4:	e007      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ba:	e004      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c0:	e001      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80099c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3740      	adds	r7, #64	@ 0x40
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	58024400 	.word	0x58024400
 80099d4:	03d09000 	.word	0x03d09000
 80099d8:	003d0900 	.word	0x003d0900
 80099dc:	017d7840 	.word	0x017d7840
 80099e0:	00bb8000 	.word	0x00bb8000

080099e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80099e8:	f7fe f920 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 80099ec:	4602      	mov	r2, r0
 80099ee:	4b06      	ldr	r3, [pc, #24]	@ (8009a08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	091b      	lsrs	r3, r3, #4
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	4904      	ldr	r1, [pc, #16]	@ (8009a0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099fa:	5ccb      	ldrb	r3, [r1, r3]
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	0800af88 	.word	0x0800af88

08009a10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b089      	sub	sp, #36	@ 0x24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a18:	4ba1      	ldr	r3, [pc, #644]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a22:	4b9f      	ldr	r3, [pc, #636]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	0b1b      	lsrs	r3, r3, #12
 8009a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	091b      	lsrs	r3, r3, #4
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009a3a:	4b99      	ldr	r3, [pc, #612]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a3e:	08db      	lsrs	r3, r3, #3
 8009a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8111 	beq.w	8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f000 8083 	beq.w	8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	f200 80a1 	bhi.w	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d056      	beq.n	8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a7a:	e099      	b.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a7c:	4b88      	ldr	r3, [pc, #544]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d02d      	beq.n	8009ae4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a88:	4b85      	ldr	r3, [pc, #532]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	08db      	lsrs	r3, r3, #3
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	4a84      	ldr	r2, [pc, #528]	@ (8009ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	ee07 3a90 	vmov	s15, r3
 8009aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ac6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ade:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ae2:	e087      	b.n	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009af6:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b26:	e065      	b.n	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3a:	4b59      	ldr	r3, [pc, #356]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b6a:	e043      	b.n	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	4b48      	ldr	r3, [pc, #288]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bae:	e021      	b.n	8009bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc2:	4b37      	ldr	r3, [pc, #220]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf8:	0a5b      	lsrs	r3, r3, #9
 8009bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1a:	ee17 2a90 	vmov	r2, s15
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c22:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	0c1b      	lsrs	r3, r3, #16
 8009c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c48:	ee17 2a90 	vmov	r2, s15
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c50:	4b13      	ldr	r3, [pc, #76]	@ (8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c54:	0e1b      	lsrs	r3, r3, #24
 8009c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c76:	ee17 2a90 	vmov	r2, s15
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c7e:	e008      	b.n	8009c92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	609a      	str	r2, [r3, #8]
}
 8009c92:	bf00      	nop
 8009c94:	3724      	adds	r7, #36	@ 0x24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	03d09000 	.word	0x03d09000
 8009ca8:	46000000 	.word	0x46000000
 8009cac:	4c742400 	.word	0x4c742400
 8009cb0:	4a742400 	.word	0x4a742400
 8009cb4:	4bbebc20 	.word	0x4bbebc20

08009cb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b089      	sub	sp, #36	@ 0x24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cc0:	4ba1      	ldr	r3, [pc, #644]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc4:	f003 0303 	and.w	r3, r3, #3
 8009cc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009cca:	4b9f      	ldr	r3, [pc, #636]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cce:	0d1b      	lsrs	r3, r3, #20
 8009cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cd6:	4b9c      	ldr	r3, [pc, #624]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ce2:	4b99      	ldr	r3, [pc, #612]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce6:	08db      	lsrs	r3, r3, #3
 8009ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	fb02 f303 	mul.w	r3, r2, r3
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 8111 	beq.w	8009f28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	f000 8083 	beq.w	8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	f200 80a1 	bhi.w	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d056      	beq.n	8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d22:	e099      	b.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d24:	4b88      	ldr	r3, [pc, #544]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d02d      	beq.n	8009d8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d30:	4b85      	ldr	r3, [pc, #532]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	08db      	lsrs	r3, r3, #3
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	4a84      	ldr	r2, [pc, #528]	@ (8009f4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	ee07 3a90 	vmov	s15, r3
 8009d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d8a:	e087      	b.n	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dce:	e065      	b.n	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de2:	4b59      	ldr	r3, [pc, #356]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e12:	e043      	b.n	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e26:	4b48      	ldr	r3, [pc, #288]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e56:	e021      	b.n	8009e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6a:	4b37      	ldr	r3, [pc, #220]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	0a5b      	lsrs	r3, r3, #9
 8009ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec2:	ee17 2a90 	vmov	r2, s15
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009eca:	4b1f      	ldr	r3, [pc, #124]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ece:	0c1b      	lsrs	r3, r3, #16
 8009ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ed4:	ee07 3a90 	vmov	s15, r3
 8009ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef0:	ee17 2a90 	vmov	r2, s15
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ef8:	4b13      	ldr	r3, [pc, #76]	@ (8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efc:	0e1b      	lsrs	r3, r3, #24
 8009efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f02:	ee07 3a90 	vmov	s15, r3
 8009f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1e:	ee17 2a90 	vmov	r2, s15
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f26:	e008      	b.n	8009f3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	609a      	str	r2, [r3, #8]
}
 8009f3a:	bf00      	nop
 8009f3c:	3724      	adds	r7, #36	@ 0x24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	58024400 	.word	0x58024400
 8009f4c:	03d09000 	.word	0x03d09000
 8009f50:	46000000 	.word	0x46000000
 8009f54:	4c742400 	.word	0x4c742400
 8009f58:	4a742400 	.word	0x4a742400
 8009f5c:	4bbebc20 	.word	0x4bbebc20

08009f60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b089      	sub	sp, #36	@ 0x24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f68:	4ba0      	ldr	r3, [pc, #640]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f72:	4b9e      	ldr	r3, [pc, #632]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	091b      	lsrs	r3, r3, #4
 8009f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f7e:	4b9b      	ldr	r3, [pc, #620]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f88:	4b98      	ldr	r3, [pc, #608]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f8c:	08db      	lsrs	r3, r3, #3
 8009f8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8111 	beq.w	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	f000 8083 	beq.w	800a0ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	f200 80a1 	bhi.w	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d056      	beq.n	800a076 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009fc8:	e099      	b.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fca:	4b88      	ldr	r3, [pc, #544]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d02d      	beq.n	800a032 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fd6:	4b85      	ldr	r3, [pc, #532]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	08db      	lsrs	r3, r3, #3
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	4a83      	ldr	r2, [pc, #524]	@ (800a1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a000:	4b7a      	ldr	r3, [pc, #488]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a010:	ed97 6a03 	vldr	s12, [r7, #12]
 800a014:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a030:	e087      	b.n	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a044:	4b69      	ldr	r3, [pc, #420]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	ed97 6a03 	vldr	s12, [r7, #12]
 800a058:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a070:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a074:	e065      	b.n	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a080:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a088:	4b58      	ldr	r3, [pc, #352]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a098:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b8:	e043      	b.n	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0cc:	4b47      	ldr	r3, [pc, #284]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0fc:	e021      	b.n	800a142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a108:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a10c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a110:	4b36      	ldr	r3, [pc, #216]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a120:	ed97 6a03 	vldr	s12, [r7, #12]
 800a124:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a140:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a142:	4b2a      	ldr	r3, [pc, #168]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	0a5b      	lsrs	r3, r3, #9
 800a148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a154:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a15c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a168:	ee17 2a90 	vmov	r2, s15
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a170:	4b1e      	ldr	r3, [pc, #120]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a174:	0c1b      	lsrs	r3, r3, #16
 800a176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a18a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a18e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a196:	ee17 2a90 	vmov	r2, s15
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a19e:	4b13      	ldr	r3, [pc, #76]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a2:	0e1b      	lsrs	r3, r3, #24
 800a1a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c4:	ee17 2a90 	vmov	r2, s15
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	609a      	str	r2, [r3, #8]
}
 800a1e0:	bf00      	nop
 800a1e2:	3724      	adds	r7, #36	@ 0x24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	03d09000 	.word	0x03d09000
 800a1f4:	46000000 	.word	0x46000000
 800a1f8:	4c742400 	.word	0x4c742400
 800a1fc:	4a742400 	.word	0x4a742400
 800a200:	4bbebc20 	.word	0x4bbebc20

0800a204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a212:	4b53      	ldr	r3, [pc, #332]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d101      	bne.n	800a222 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e099      	b.n	800a356 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a222:	4b4f      	ldr	r3, [pc, #316]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a4e      	ldr	r2, [pc, #312]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a228:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a22c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a22e:	f7f7 fcc7 	bl	8001bc0 <HAL_GetTick>
 800a232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a234:	e008      	b.n	800a248 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a236:	f7f7 fcc3 	bl	8001bc0 <HAL_GetTick>
 800a23a:	4602      	mov	r2, r0
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	2b02      	cmp	r3, #2
 800a242:	d901      	bls.n	800a248 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e086      	b.n	800a356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a248:	4b45      	ldr	r3, [pc, #276]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f0      	bne.n	800a236 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a254:	4b42      	ldr	r3, [pc, #264]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a258:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	031b      	lsls	r3, r3, #12
 800a262:	493f      	ldr	r1, [pc, #252]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a264:	4313      	orrs	r3, r2
 800a266:	628b      	str	r3, [r1, #40]	@ 0x28
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	025b      	lsls	r3, r3, #9
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	431a      	orrs	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	3b01      	subs	r3, #1
 800a284:	041b      	lsls	r3, r3, #16
 800a286:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a28a:	431a      	orrs	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	3b01      	subs	r3, #1
 800a292:	061b      	lsls	r3, r3, #24
 800a294:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a298:	4931      	ldr	r1, [pc, #196]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a29e:	4b30      	ldr	r3, [pc, #192]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	492d      	ldr	r1, [pc, #180]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	f023 0220 	bic.w	r2, r3, #32
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	4928      	ldr	r1, [pc, #160]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2c2:	4b27      	ldr	r3, [pc, #156]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c6:	4a26      	ldr	r2, [pc, #152]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	f023 0310 	bic.w	r3, r3, #16
 800a2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a2ce:	4b24      	ldr	r3, [pc, #144]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2d2:	4b24      	ldr	r3, [pc, #144]	@ (800a364 <RCCEx_PLL2_Config+0x160>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	69d2      	ldr	r2, [r2, #28]
 800a2da:	00d2      	lsls	r2, r2, #3
 800a2dc:	4920      	ldr	r1, [pc, #128]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a2e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	f043 0310 	orr.w	r3, r3, #16
 800a2ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	4a19      	ldr	r2, [pc, #100]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a2fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a300:	e00f      	b.n	800a322 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d106      	bne.n	800a316 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a308:	4b15      	ldr	r3, [pc, #84]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30c:	4a14      	ldr	r2, [pc, #80]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a312:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a314:	e005      	b.n	800a322 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a316:	4b12      	ldr	r3, [pc, #72]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	4a11      	ldr	r2, [pc, #68]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a31c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a320:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a322:	4b0f      	ldr	r3, [pc, #60]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a0e      	ldr	r2, [pc, #56]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a328:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a32e:	f7f7 fc47 	bl	8001bc0 <HAL_GetTick>
 800a332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a334:	e008      	b.n	800a348 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a336:	f7f7 fc43 	bl	8001bc0 <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	2b02      	cmp	r3, #2
 800a342:	d901      	bls.n	800a348 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e006      	b.n	800a356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a348:	4b05      	ldr	r3, [pc, #20]	@ (800a360 <RCCEx_PLL2_Config+0x15c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0f0      	beq.n	800a336 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a354:	7bfb      	ldrb	r3, [r7, #15]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	58024400 	.word	0x58024400
 800a364:	ffff0007 	.word	0xffff0007

0800a368 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a376:	4b53      	ldr	r3, [pc, #332]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d101      	bne.n	800a386 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e099      	b.n	800a4ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a386:	4b4f      	ldr	r3, [pc, #316]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a4e      	ldr	r2, [pc, #312]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a38c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a392:	f7f7 fc15 	bl	8001bc0 <HAL_GetTick>
 800a396:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a398:	e008      	b.n	800a3ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a39a:	f7f7 fc11 	bl	8001bc0 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d901      	bls.n	800a3ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e086      	b.n	800a4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3ac:	4b45      	ldr	r3, [pc, #276]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1f0      	bne.n	800a39a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3b8:	4b42      	ldr	r3, [pc, #264]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	051b      	lsls	r3, r3, #20
 800a3c6:	493f      	ldr	r1, [pc, #252]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	628b      	str	r3, [r1, #40]	@ 0x28
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	025b      	lsls	r3, r3, #9
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	061b      	lsls	r3, r3, #24
 800a3f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3fc:	4931      	ldr	r1, [pc, #196]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a402:	4b30      	ldr	r3, [pc, #192]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	492d      	ldr	r1, [pc, #180]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a410:	4313      	orrs	r3, r2
 800a412:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a414:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a418:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	4928      	ldr	r1, [pc, #160]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a422:	4313      	orrs	r3, r2
 800a424:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a426:	4b27      	ldr	r3, [pc, #156]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	4a26      	ldr	r2, [pc, #152]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a432:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a436:	4b24      	ldr	r3, [pc, #144]	@ (800a4c8 <RCCEx_PLL3_Config+0x160>)
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	69d2      	ldr	r2, [r2, #28]
 800a43e:	00d2      	lsls	r2, r2, #3
 800a440:	4920      	ldr	r1, [pc, #128]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a442:	4313      	orrs	r3, r2
 800a444:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a446:	4b1f      	ldr	r3, [pc, #124]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a458:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45c:	4a19      	ldr	r2, [pc, #100]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a45e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a462:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a464:	e00f      	b.n	800a486 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d106      	bne.n	800a47a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a46c:	4b15      	ldr	r3, [pc, #84]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a470:	4a14      	ldr	r2, [pc, #80]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a476:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a478:	e005      	b.n	800a486 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a47a:	4b12      	ldr	r3, [pc, #72]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	4a11      	ldr	r2, [pc, #68]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a484:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a486:	4b0f      	ldr	r3, [pc, #60]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a0e      	ldr	r2, [pc, #56]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a492:	f7f7 fb95 	bl	8001bc0 <HAL_GetTick>
 800a496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a498:	e008      	b.n	800a4ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a49a:	f7f7 fb91 	bl	8001bc0 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e006      	b.n	800a4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4ac:	4b05      	ldr	r3, [pc, #20]	@ (800a4c4 <RCCEx_PLL3_Config+0x15c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0f0      	beq.n	800a49a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	58024400 	.word	0x58024400
 800a4c8:	ffff0007 	.word	0xffff0007

0800a4cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e049      	b.n	800a572 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f7 f92a 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3304      	adds	r3, #4
 800a508:	4619      	mov	r1, r3
 800a50a:	4610      	mov	r0, r2
 800a50c:	f000 fae0 	bl	800aad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d001      	beq.n	800a594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e054      	b.n	800a63e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a26      	ldr	r2, [pc, #152]	@ (800a64c <HAL_TIM_Base_Start_IT+0xd0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d022      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5be:	d01d      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a22      	ldr	r2, [pc, #136]	@ (800a650 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d018      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a21      	ldr	r2, [pc, #132]	@ (800a654 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d013      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a1f      	ldr	r2, [pc, #124]	@ (800a658 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00e      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a65c <HAL_TIM_Base_Start_IT+0xe0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d009      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a660 <HAL_TIM_Base_Start_IT+0xe4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d004      	beq.n	800a5fc <HAL_TIM_Base_Start_IT+0x80>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a664 <HAL_TIM_Base_Start_IT+0xe8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d115      	bne.n	800a628 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689a      	ldr	r2, [r3, #8]
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <HAL_TIM_Base_Start_IT+0xec>)
 800a604:	4013      	ands	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b06      	cmp	r3, #6
 800a60c:	d015      	beq.n	800a63a <HAL_TIM_Base_Start_IT+0xbe>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a614:	d011      	beq.n	800a63a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f042 0201 	orr.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a626:	e008      	b.n	800a63a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0201 	orr.w	r2, r2, #1
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e000      	b.n	800a63c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a63a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	40010000 	.word	0x40010000
 800a650:	40000400 	.word	0x40000400
 800a654:	40000800 	.word	0x40000800
 800a658:	40000c00 	.word	0x40000c00
 800a65c:	40010400 	.word	0x40010400
 800a660:	40001800 	.word	0x40001800
 800a664:	40014000 	.word	0x40014000
 800a668:	00010007 	.word	0x00010007

0800a66c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d020      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01b      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0202 	mvn.w	r2, #2
 800a6a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f9ec 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a6bc:	e005      	b.n	800a6ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f9de 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f9ef 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d020      	beq.n	800a71c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01b      	beq.n	800a71c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f06f 0204 	mvn.w	r2, #4
 800a6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f9c6 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a708:	e005      	b.n	800a716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f9b8 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f9c9 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	2b00      	cmp	r3, #0
 800a724:	d020      	beq.n	800a768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01b      	beq.n	800a768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f06f 0208 	mvn.w	r2, #8
 800a738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2204      	movs	r2, #4
 800a73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f9a0 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a754:	e005      	b.n	800a762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f992 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f9a3 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f003 0310 	and.w	r3, r3, #16
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d020      	beq.n	800a7b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01b      	beq.n	800a7b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0210 	mvn.w	r2, #16
 800a784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2208      	movs	r2, #8
 800a78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f97a 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a7a0:	e005      	b.n	800a7ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f96c 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f97d 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00c      	beq.n	800a7d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d007      	beq.n	800a7d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f06f 0201 	mvn.w	r2, #1
 800a7d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f94a 	bl	800aa6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d104      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00c      	beq.n	800a806 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fb41 	bl	800ae88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00c      	beq.n	800a82a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb39 	bl	800ae9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00c      	beq.n	800a84e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d007      	beq.n	800a84e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f937 	bl	800aabc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f003 0320 	and.w	r3, r3, #32
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00c      	beq.n	800a872 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f06f 0220 	mvn.w	r2, #32
 800a86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fb01 	bl	800ae74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d101      	bne.n	800a898 <HAL_TIM_ConfigClockSource+0x1c>
 800a894:	2302      	movs	r3, #2
 800a896:	e0dc      	b.n	800aa52 <HAL_TIM_ConfigClockSource+0x1d6>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	4b6a      	ldr	r3, [pc, #424]	@ (800aa5c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a64      	ldr	r2, [pc, #400]	@ (800aa60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	f000 80a9 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8d4:	4a62      	ldr	r2, [pc, #392]	@ (800aa60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f200 80ae 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8dc:	4a61      	ldr	r2, [pc, #388]	@ (800aa64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	f000 80a1 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8e4:	4a5f      	ldr	r2, [pc, #380]	@ (800aa64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f200 80a6 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8ec:	4a5e      	ldr	r2, [pc, #376]	@ (800aa68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f000 8099 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8f4:	4a5c      	ldr	r2, [pc, #368]	@ (800aa68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f200 809e 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a900:	f000 8091 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a904:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a908:	f200 8096 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a90c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a910:	f000 8089 	beq.w	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a918:	f200 808e 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a91c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a920:	d03e      	beq.n	800a9a0 <HAL_TIM_ConfigClockSource+0x124>
 800a922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a926:	f200 8087 	bhi.w	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92e:	f000 8086 	beq.w	800aa3e <HAL_TIM_ConfigClockSource+0x1c2>
 800a932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a936:	d87f      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a938:	2b70      	cmp	r3, #112	@ 0x70
 800a93a:	d01a      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0xf6>
 800a93c:	2b70      	cmp	r3, #112	@ 0x70
 800a93e:	d87b      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a940:	2b60      	cmp	r3, #96	@ 0x60
 800a942:	d050      	beq.n	800a9e6 <HAL_TIM_ConfigClockSource+0x16a>
 800a944:	2b60      	cmp	r3, #96	@ 0x60
 800a946:	d877      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a948:	2b50      	cmp	r3, #80	@ 0x50
 800a94a:	d03c      	beq.n	800a9c6 <HAL_TIM_ConfigClockSource+0x14a>
 800a94c:	2b50      	cmp	r3, #80	@ 0x50
 800a94e:	d873      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a950:	2b40      	cmp	r3, #64	@ 0x40
 800a952:	d058      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0x18a>
 800a954:	2b40      	cmp	r3, #64	@ 0x40
 800a956:	d86f      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a958:	2b30      	cmp	r3, #48	@ 0x30
 800a95a:	d064      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a95c:	2b30      	cmp	r3, #48	@ 0x30
 800a95e:	d86b      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a960:	2b20      	cmp	r3, #32
 800a962:	d060      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a964:	2b20      	cmp	r3, #32
 800a966:	d867      	bhi.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d05c      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d05a      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x1aa>
 800a970:	e062      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a982:	f000 f9c9 	bl	800ad18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	609a      	str	r2, [r3, #8]
      break;
 800a99e:	e04f      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9b0:	f000 f9b2 	bl	800ad18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9c2:	609a      	str	r2, [r3, #8]
      break;
 800a9c4:	e03c      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f000 f922 	bl	800ac1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2150      	movs	r1, #80	@ 0x50
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 f97c 	bl	800acdc <TIM_ITRx_SetConfig>
      break;
 800a9e4:	e02c      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f000 f941 	bl	800ac7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2160      	movs	r1, #96	@ 0x60
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f96c 	bl	800acdc <TIM_ITRx_SetConfig>
      break;
 800aa04:	e01c      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 f902 	bl	800ac1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2140      	movs	r1, #64	@ 0x40
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f95c 	bl	800acdc <TIM_ITRx_SetConfig>
      break;
 800aa24:	e00c      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4610      	mov	r0, r2
 800aa32:	f000 f953 	bl	800acdc <TIM_ITRx_SetConfig>
      break;
 800aa36:	e003      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3c:	e000      	b.n	800aa40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	ffceff88 	.word	0xffceff88
 800aa60:	00100040 	.word	0x00100040
 800aa64:	00100030 	.word	0x00100030
 800aa68:	00100020 	.word	0x00100020

0800aa6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a46      	ldr	r2, [pc, #280]	@ (800abfc <TIM_Base_SetConfig+0x12c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d013      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaee:	d00f      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a43      	ldr	r2, [pc, #268]	@ (800ac00 <TIM_Base_SetConfig+0x130>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00b      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a42      	ldr	r2, [pc, #264]	@ (800ac04 <TIM_Base_SetConfig+0x134>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d007      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a41      	ldr	r2, [pc, #260]	@ (800ac08 <TIM_Base_SetConfig+0x138>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a40      	ldr	r2, [pc, #256]	@ (800ac0c <TIM_Base_SetConfig+0x13c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d108      	bne.n	800ab22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a35      	ldr	r2, [pc, #212]	@ (800abfc <TIM_Base_SetConfig+0x12c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d01f      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab30:	d01b      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a32      	ldr	r2, [pc, #200]	@ (800ac00 <TIM_Base_SetConfig+0x130>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d017      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a31      	ldr	r2, [pc, #196]	@ (800ac04 <TIM_Base_SetConfig+0x134>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d013      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a30      	ldr	r2, [pc, #192]	@ (800ac08 <TIM_Base_SetConfig+0x138>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a2f      	ldr	r2, [pc, #188]	@ (800ac0c <TIM_Base_SetConfig+0x13c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a2e      	ldr	r2, [pc, #184]	@ (800ac10 <TIM_Base_SetConfig+0x140>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2d      	ldr	r2, [pc, #180]	@ (800ac14 <TIM_Base_SetConfig+0x144>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_Base_SetConfig+0x9a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a2c      	ldr	r2, [pc, #176]	@ (800ac18 <TIM_Base_SetConfig+0x148>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d108      	bne.n	800ab7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a16      	ldr	r2, [pc, #88]	@ (800abfc <TIM_Base_SetConfig+0x12c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00f      	beq.n	800abc8 <TIM_Base_SetConfig+0xf8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a18      	ldr	r2, [pc, #96]	@ (800ac0c <TIM_Base_SetConfig+0x13c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0xf8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a17      	ldr	r2, [pc, #92]	@ (800ac10 <TIM_Base_SetConfig+0x140>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0xf8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a16      	ldr	r2, [pc, #88]	@ (800ac14 <TIM_Base_SetConfig+0x144>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0xf8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a15      	ldr	r2, [pc, #84]	@ (800ac18 <TIM_Base_SetConfig+0x148>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d103      	bne.n	800abd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d105      	bne.n	800abee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f023 0201 	bic.w	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	611a      	str	r2, [r3, #16]
  }
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40014400 	.word	0x40014400
 800ac18:	40014800 	.word	0x40014800

0800ac1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	f023 0201 	bic.w	r2, r3, #1
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f023 030a 	bic.w	r3, r3, #10
 800ac58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	621a      	str	r2, [r3, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b087      	sub	sp, #28
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6a1b      	ldr	r3, [r3, #32]
 800ac90:	f023 0210 	bic.w	r2, r3, #16
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	031b      	lsls	r3, r3, #12
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	4313      	orrs	r3, r2
 800acae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	011b      	lsls	r3, r3, #4
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	621a      	str	r2, [r3, #32]
}
 800acce:	bf00      	nop
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <TIM_ITRx_SetConfig+0x38>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f043 0307 	orr.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	609a      	str	r2, [r3, #8]
}
 800ad06:	bf00      	nop
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	ffcfff8f 	.word	0xffcfff8f

0800ad18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	021a      	lsls	r2, r3, #8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	609a      	str	r2, [r3, #8]
}
 800ad4c:	bf00      	nop
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d101      	bne.n	800ad70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	e06d      	b.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a30      	ldr	r2, [pc, #192]	@ (800ae58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d004      	beq.n	800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a2f      	ldr	r2, [pc, #188]	@ (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d108      	bne.n	800adb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800adaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a20      	ldr	r2, [pc, #128]	@ (800ae58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d022      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade2:	d01d      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d018      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d013      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00e      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a15      	ldr	r2, [pc, #84]	@ (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d009      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a16      	ldr	r2, [pc, #88]	@ (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d004      	beq.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a15      	ldr	r2, [pc, #84]	@ (800ae70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d10c      	bne.n	800ae3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	40010000 	.word	0x40010000
 800ae5c:	40010400 	.word	0x40010400
 800ae60:	40000400 	.word	0x40000400
 800ae64:	40000800 	.word	0x40000800
 800ae68:	40000c00 	.word	0x40000c00
 800ae6c:	40001800 	.word	0x40001800
 800ae70:	40014000 	.word	0x40014000

0800ae74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <memset>:
 800aeb0:	4402      	add	r2, r0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d100      	bne.n	800aeba <memset+0xa>
 800aeb8:	4770      	bx	lr
 800aeba:	f803 1b01 	strb.w	r1, [r3], #1
 800aebe:	e7f9      	b.n	800aeb4 <memset+0x4>

0800aec0 <__libc_init_array>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4d0d      	ldr	r5, [pc, #52]	@ (800aef8 <__libc_init_array+0x38>)
 800aec4:	4c0d      	ldr	r4, [pc, #52]	@ (800aefc <__libc_init_array+0x3c>)
 800aec6:	1b64      	subs	r4, r4, r5
 800aec8:	10a4      	asrs	r4, r4, #2
 800aeca:	2600      	movs	r6, #0
 800aecc:	42a6      	cmp	r6, r4
 800aece:	d109      	bne.n	800aee4 <__libc_init_array+0x24>
 800aed0:	4d0b      	ldr	r5, [pc, #44]	@ (800af00 <__libc_init_array+0x40>)
 800aed2:	4c0c      	ldr	r4, [pc, #48]	@ (800af04 <__libc_init_array+0x44>)
 800aed4:	f000 f826 	bl	800af24 <_init>
 800aed8:	1b64      	subs	r4, r4, r5
 800aeda:	10a4      	asrs	r4, r4, #2
 800aedc:	2600      	movs	r6, #0
 800aede:	42a6      	cmp	r6, r4
 800aee0:	d105      	bne.n	800aeee <__libc_init_array+0x2e>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee8:	4798      	blx	r3
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7ee      	b.n	800aecc <__libc_init_array+0xc>
 800aeee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef2:	4798      	blx	r3
 800aef4:	3601      	adds	r6, #1
 800aef6:	e7f2      	b.n	800aede <__libc_init_array+0x1e>
 800aef8:	0800afb0 	.word	0x0800afb0
 800aefc:	0800afb0 	.word	0x0800afb0
 800af00:	0800afb0 	.word	0x0800afb0
 800af04:	0800afb4 	.word	0x0800afb4

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <_init>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <_fini>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr
